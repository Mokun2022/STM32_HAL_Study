
UART_No5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000872c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080088c0  080088c0  000188c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e3c  08008e3c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e44  08008e44  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000018b0  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001a98  20001a98  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007db4  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002128  00000000  00000000  00027fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000788  00000000  00000000  0002a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002280e  00000000  00000000  0002b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7a0  00000000  00000000  0004d94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca71  00000000  00000000  0005a0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126b5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036c0  00000000  00000000  00126bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088a4 	.word	0x080088a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080088a4 	.word	0x080088a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <bsp_battery_send>:
static uint8_t Data[]={0x3A,0x7E,0x01,0x01,0x1E,0x00,0xD8};



void bsp_battery_send(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	bsp_uart_send(USART6,Data,sizeof(Data)/sizeof(uint8_t));
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	4903      	ldr	r1, [pc, #12]	; (800100c <bsp_battery_send+0x14>)
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <bsp_battery_send+0x18>)
 8001002:	f000 fc09 	bl	8001818 <bsp_uart_send>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	40011400 	.word	0x40011400
 8001014:	00000000 	.word	0x00000000

08001018 <bsp_battery_get>:


void bsp_battery_get(battery_t *bat,uint8_t * str)
{
 8001018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800101c:	b08c      	sub	sp, #48	; 0x30
 800101e:	af06      	add	r7, sp, #24
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	uint8_t *ptr = str;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	60fb      	str	r3, [r7, #12]
	uint8_t sum = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	75fb      	strb	r3, [r7, #23]

	if(*ptr == 0x3B)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b3b      	cmp	r3, #59	; 0x3b
 8001032:	f040 8154 	bne.w	80012de <bsp_battery_get+0x2c6>
	{
		for(int i=0;i<44;i++)
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e009      	b.n	8001050 <bsp_battery_get+0x38>
		{
			sum+=*(ptr+i);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	4413      	add	r3, r2
 8001048:	75fb      	strb	r3, [r7, #23]
		for(int i=0;i<44;i++)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b2b      	cmp	r3, #43	; 0x2b
 8001054:	ddf2      	ble.n	800103c <bsp_battery_get+0x24>
		}
		if(*(str+44) == sum)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	332c      	adds	r3, #44	; 0x2c
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	7dfa      	ldrb	r2, [r7, #23]
 800105e:	429a      	cmp	r2, r3
 8001060:	f040 813d 	bne.w	80012de <bsp_battery_get+0x2c6>
		{
			bat->voltage = ((*(str+7) << 8) | *(str+6)) * 0.01;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3307      	adds	r3, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	3206      	adds	r2, #6
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	4313      	orrs	r3, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa55 	bl	8000524 <__aeabi_i2d>
 800107a:	a39b      	add	r3, pc, #620	; (adr r3, 80012e8 <bsp_battery_get+0x2d0>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff faba 	bl	80005f8 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdac 	bl	8000be8 <__aeabi_d2f>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
			bat->current = ((*(str+9) << 8) | *(str+8));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3309      	adds	r3, #9
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	3208      	adds	r2, #8
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edc3 7a01 	vstr	s15, [r3, #4]
			if(bat->current >= 0x7fff)		//电流正负值转化，最高位为符号位
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ba:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001300 <bsp_battery_get+0x2e8>
 80010be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	db19      	blt.n	80010fc <bsp_battery_get+0xe4>
				bat->current = (bat->current - 0xffff) * 0.01;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ce:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001304 <bsp_battery_get+0x2ec>
 80010d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	a382      	add	r3, pc, #520	; (adr r3, 80012e8 <bsp_battery_get+0x2d0>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fa88 	bl	80005f8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd7a 	bl	8000be8 <__aeabi_d2f>
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	e012      	b.n	8001122 <bsp_battery_get+0x10a>
			else
				bat->current *= 0.01;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	a378      	add	r3, pc, #480	; (adr r3, 80012e8 <bsp_battery_get+0x2d0>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa74 	bl	80005f8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd66 	bl	8000be8 <__aeabi_d2f>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]
			bat->soc = ((*(str+11) << 8) | *(str+10)) * 0.02;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	330b      	adds	r3, #11
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	320a      	adds	r2, #10
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	4313      	orrs	r3, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9f6 	bl	8000524 <__aeabi_i2d>
 8001138:	a36d      	add	r3, pc, #436	; (adr r3, 80012f0 <bsp_battery_get+0x2d8>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fa5b 	bl	80005f8 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fd4d 	bl	8000be8 <__aeabi_d2f>
 800114e:	4602      	mov	r2, r0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
			bat->soh = ((*(str+13) << 8) | *(str+12));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330d      	adds	r3, #13
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	320c      	adds	r2, #12
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4313      	orrs	r3, r2
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edc3 7a03 	vstr	s15, [r3, #12]
			bat->max_temp = (((*(str+25) << 8) | *(str+24)) - 2731) * 0.1;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3319      	adds	r3, #25
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	3218      	adds	r2, #24
 800117e:	7812      	ldrb	r2, [r2, #0]
 8001180:	4313      	orrs	r3, r2
 8001182:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9cc 	bl	8000524 <__aeabi_i2d>
 800118c:	a35a      	add	r3, pc, #360	; (adr r3, 80012f8 <bsp_battery_get+0x2e0>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff fa31 	bl	80005f8 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd23 	bl	8000be8 <__aeabi_d2f>
 80011a2:	4602      	mov	r2, r0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
			bat->min_temp = (((*(str+29) << 8) | *(str+28)) - 2731) * 0.1;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	331d      	adds	r3, #29
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	321c      	adds	r2, #28
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9b1 	bl	8000524 <__aeabi_i2d>
 80011c2:	a34d      	add	r3, pc, #308	; (adr r3, 80012f8 <bsp_battery_get+0x2e0>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fd08 	bl	8000be8 <__aeabi_d2f>
 80011d8:	4602      	mov	r2, r0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	615a      	str	r2, [r3, #20]
			bat->load_access = ((*(str+42)) & 0x40) >> 6;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	332a      	adds	r3, #42	; 0x2a
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	119b      	asrs	r3, r3, #6
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	765a      	strb	r2, [r3, #25]
			bat->charger_access = ((*(str+42)) & 0x20) >> 5;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	332a      	adds	r3, #42	; 0x2a
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	115b      	asrs	r3, r3, #5
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2da      	uxtb	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	761a      	strb	r2, [r3, #24]
			bat->charging_state = ((*(str+43)) & 0x02) >> 1;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	332b      	adds	r3, #43	; 0x2b
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	105b      	asrs	r3, r3, #1
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	769a      	strb	r2, [r3, #26]
			bat->discharge_state = ((*(str+43)) & 0x04) >> 2;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	332b      	adds	r3, #43	; 0x2b
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	109b      	asrs	r3, r3, #2
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	76da      	strb	r2, [r3, #27]

			printf("voltage:%.2f  current:%.2f  soc:%.2f  soh:%.2f\r\n",bat->voltage,bat->current,bat->soc,bat->soh);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f97c 	bl	8000548 <__aeabi_f2d>
 8001250:	4682      	mov	sl, r0
 8001252:	468b      	mov	fp, r1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f975 	bl	8000548 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4680      	mov	r8, r0
 800126e:	4689      	mov	r9, r1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001282:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001286:	e9cd 4500 	strd	r4, r5, [sp]
 800128a:	4652      	mov	r2, sl
 800128c:	465b      	mov	r3, fp
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <bsp_battery_get+0x2f0>)
 8001290:	f003 fc86 	bl	8004ba0 <iprintf>
			printf("max_temp:%.2f  min_temp:%.2f\r\n",bat->max_temp,bat->min_temp);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f94e 	bl	8000548 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9cd 2300 	strd	r2, r3, [sp]
 80012b4:	4622      	mov	r2, r4
 80012b6:	462b      	mov	r3, r5
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <bsp_battery_get+0x2f4>)
 80012ba:	f003 fc71 	bl	8004ba0 <iprintf>
			printf("load_access:%d  charger_access:%d  charging_state:%d  discharge_state:%d\r\n\r\n",bat->load_access,bat->charger_access,bat->charging_state,bat->discharge_state);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	4619      	mov	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7e9b      	ldrb	r3, [r3, #26]
 80012ce:	4618      	mov	r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7edb      	ldrb	r3, [r3, #27]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4603      	mov	r3, r0
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <bsp_battery_get+0x2f8>)
 80012da:	f003 fc61 	bl	8004ba0 <iprintf>
		}
	}
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012e8:	47ae147b 	.word	0x47ae147b
 80012ec:	3f847ae1 	.word	0x3f847ae1
 80012f0:	47ae147b 	.word	0x47ae147b
 80012f4:	3f947ae1 	.word	0x3f947ae1
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	3fb99999 	.word	0x3fb99999
 8001300:	46fffe00 	.word	0x46fffe00
 8001304:	477fff00 	.word	0x477fff00
 8001308:	080088c0 	.word	0x080088c0
 800130c:	080088f4 	.word	0x080088f4
 8001310:	08008914 	.word	0x08008914

08001314 <bsp_set_power_on>:
#include "bsp_power.h"
#include "gpio.h"


void bsp_set_power_on(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(Power5V_GPIO_Port, Power5V_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <bsp_set_power_on+0x1c>)
 800131e:	f001 fb7d 	bl	8002a1c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <bsp_set_power_on+0x20>)
 8001328:	f001 fb78 	bl	8002a1c <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021400 	.word	0x40021400

08001338 <fifo_register>:
		    size: Size of buff
  * @retval none
*/
void fifo_register(fifo_t *pfifo, uint8_t *pfifo_buf, uint32_t size,
                   lock_fun lock, lock_fun unlock)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
	pfifo->buf_size = size;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
	pfifo->buf 	= pfifo_buf;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	601a      	str	r2, [r3, #0]
	pfifo->pwrite = pfifo->buf;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	60da      	str	r2, [r3, #12]
	pfifo->pread  = pfifo->buf;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	611a      	str	r2, [r3, #16]
    pfifo->occupy_size = 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    pfifo->lock = lock;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	615a      	str	r2, [r3, #20]
    pfifo->unlock = unlock;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	619a      	str	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <fifo_get_occupy_size>:
  * @brief  Gets the used size of the fifo
  * @param  pfifo: fifo structure pointer
  * @retval Used size of fifo
*/
uint32_t fifo_get_occupy_size(fifo_t *pfifo)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if(pfifo==NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <fifo_get_occupy_size+0x12>
		return 0;
 800138e:	2300      	movs	r3, #0
 8001390:	e001      	b.n	8001396 <fifo_get_occupy_size+0x16>

	return  pfifo->occupy_size;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <fifo_get_free_size>:
  * @brief  Gets the free size of the fifo
  * @param  pfifo: fifo structure pointer
  * @retval Free size of fifo
*/
uint32_t fifo_get_free_size(fifo_t *pfifo)
{
 80013a2:	b590      	push	{r4, r7, lr}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	uint32_t size;

	if(pfifo==NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <fifo_get_free_size+0x12>
		return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e008      	b.n	80013c6 <fifo_get_free_size+0x24>

    size = pfifo->buf_size - fifo_get_occupy_size(pfifo);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685c      	ldr	r4, [r3, #4]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffe1 	bl	8001380 <fifo_get_occupy_size>
 80013be:	4603      	mov	r3, r0
 80013c0:	1ae3      	subs	r3, r4, r3
 80013c2:	60fb      	str	r3, [r7, #12]

	return size;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}

080013ce <fifo_write>:
		    pbuf: Write of data
		    size: Size of Write data
  * @retval Actual write size
*/
uint32_t fifo_write(fifo_t *pfifo, const uint8_t *pbuf, uint32_t size)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	uint32_t w_size= 0,free_size = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]

	if((size==0) || (pfifo==NULL) || (pbuf==NULL))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <fifo_write+0x26>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <fifo_write+0x26>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <fifo_write+0x2a>
	{
		return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e041      	b.n	800147c <fifo_write+0xae>
	}

    free_size = fifo_get_free_size(pfifo);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff ffd2 	bl	80013a2 <fifo_get_free_size>
 80013fe:	6138      	str	r0, [r7, #16]
    if(free_size == 0)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <fifo_write+0x3c>
    {
        return 0;
 8001406:	2300      	movs	r3, #0
 8001408:	e038      	b.n	800147c <fifo_write+0xae>
    }

    if(free_size < size)
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	d201      	bcs.n	8001416 <fifo_write+0x48>
    {
        size = free_size;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	607b      	str	r3, [r7, #4]
    }
	w_size = size;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	617b      	str	r3, [r7, #20]
    if(pfifo->lock != NULL)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01f      	beq.n	8001462 <fifo_write+0x94>
    {
        pfifo->lock();
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4798      	blx	r3
    }
	while(w_size-- > 0)
 8001428:	e01b      	b.n	8001462 <fifo_write+0x94>
	{
		*pfifo->pwrite++ = *pbuf++;
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	1c53      	adds	r3, r2, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	1c58      	adds	r0, r3, #1
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	60c8      	str	r0, [r1, #12]
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	701a      	strb	r2, [r3, #0]
		if (pfifo->pwrite >= (pfifo->buf + pfifo->buf_size))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	440b      	add	r3, r1
 800144c:	429a      	cmp	r2, r3
 800144e:	d303      	bcc.n	8001458 <fifo_write+0x8a>
		{
			pfifo->pwrite = pfifo->buf;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	60da      	str	r2, [r3, #12]
		}
        pfifo->occupy_size++;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	609a      	str	r2, [r3, #8]
	while(w_size-- > 0)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	617a      	str	r2, [r7, #20]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1de      	bne.n	800142a <fifo_write+0x5c>
	}
    if(pfifo->unlock != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <fifo_write+0xac>
    {
        pfifo->unlock();
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4798      	blx	r3
    }
	return size;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <fifo_read>:
		    pbuf:  read of data
		    size: Size of data
  * @retval Actual read size
*/
uint32_t fifo_read(fifo_t *pfifo, uint8_t *pbuf, uint32_t size)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	uint32_t r_size = 0,occupy_size = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]

	if ((size==0) || (pfifo==NULL) || (pbuf==NULL))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <fifo_read+0x26>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <fifo_read+0x26>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <fifo_read+0x2a>
	{
		return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e041      	b.n	8001532 <fifo_read+0xae>
	}

    occupy_size = fifo_get_occupy_size(pfifo);
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff ff66 	bl	8001380 <fifo_get_occupy_size>
 80014b4:	6138      	str	r0, [r7, #16]
    if(occupy_size == 0)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <fifo_read+0x3c>
    {
        return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e038      	b.n	8001532 <fifo_read+0xae>
    }

    if(occupy_size < size)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d201      	bcs.n	80014cc <fifo_read+0x48>
    {
        size = occupy_size;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	607b      	str	r3, [r7, #4]
    }
    if (pfifo->lock != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <fifo_read+0x56>
    {
        pfifo->lock();
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	4798      	blx	r3
    }
	r_size = size;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	617b      	str	r3, [r7, #20]
	while(r_size-- > 0)
 80014de:	e01b      	b.n	8001518 <fifo_read+0x94>
	{
		*pbuf++ = *pfifo->pread++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	1c51      	adds	r1, r2, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6119      	str	r1, [r3, #16]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1c59      	adds	r1, r3, #1
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
		if (pfifo->pread >= (pfifo->buf + pfifo->buf_size))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	d303      	bcc.n	800150e <fifo_read+0x8a>
		{
			pfifo->pread = pfifo->buf;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	611a      	str	r2, [r3, #16]
		}
        pfifo->occupy_size--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	609a      	str	r2, [r3, #8]
	while(r_size-- > 0)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1e5a      	subs	r2, r3, #1
 800151c:	617a      	str	r2, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1de      	bne.n	80014e0 <fifo_read+0x5c>
	}
    if (pfifo->unlock != NULL)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <fifo_read+0xac>
    {
        pfifo->unlock();
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4798      	blx	r3
    }
	return size;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b10      	cmp	r3, #16
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	2b20      	cmp	r3, #32
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80015ba:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f06f 0220 	mvn.w	r2, #32
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	330c      	adds	r3, #12
 8001614:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e853 3f00 	ldrex	r3, [r3]
 800161c:	60bb      	str	r3, [r7, #8]
   return(result);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	330c      	adds	r3, #12
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	61ba      	str	r2, [r7, #24]
 800162e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	e841 2300 	strex	r3, r2, [r1]
 8001638:	613b      	str	r3, [r7, #16]
   return(result);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e7      	bne.n	8001610 <LL_USART_EnableIT_IDLE+0x8>
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800164e:	b480      	push	{r7}
 8001650:	b089      	sub	sp, #36	; 0x24
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	330c      	adds	r3, #12
 800165a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	e853 3f00 	ldrex	r3, [r3]
 8001662:	60bb      	str	r3, [r7, #8]
   return(result);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	330c      	adds	r3, #12
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	61ba      	str	r2, [r7, #24]
 8001674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001676:	6979      	ldr	r1, [r7, #20]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	e841 2300 	strex	r3, r2, [r1]
 800167e:	613b      	str	r3, [r7, #16]
   return(result);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e7      	bne.n	8001656 <LL_USART_EnableIT_RXNE+0x8>
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3724      	adds	r7, #36	; 0x24
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	605a      	str	r2, [r3, #4]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	LL_USART_TransmitData8(USART3,(uint8_t)ch);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <__io_putchar+0x2c>)
 80016dc:	f7ff ffe7 	bl	80016ae <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TC(USART3) == RESET);
 80016e0:	bf00      	nop
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <__io_putchar+0x2c>)
 80016e4:	f7ff ff4f 	bl	8001586 <LL_USART_IsActiveFlag_TC>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f9      	beq.n	80016e2 <__io_putchar+0x16>

	return ch;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40004800 	.word	0x40004800

080016fc <__irq_lock>:
uart_t rtk;
uart_t cat1;


static void __irq_lock(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
	__disable_irq();
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <__irq_unlock>:

static void __irq_unlock(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8001712:	b662      	cpsie	i
}
 8001714:	bf00      	nop
	__enable_irq();
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <bsp_uart_init>:


void bsp_uart_init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af02      	add	r7, sp, #8
	/*Initialize hardware */
	//Go to main.c ---> MX_USART3_UART_Init()

	/*Create one fifo */
	fifo_register(&cat1.rx_fifo, cat1.fifo_buff, FIFO_RX_LEN, __irq_lock, __irq_unlock);
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <bsp_uart_init+0x8c>)
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <bsp_uart_init+0x90>)
 800172c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001730:	4920      	ldr	r1, [pc, #128]	; (80017b4 <bsp_uart_init+0x94>)
 8001732:	4821      	ldr	r0, [pc, #132]	; (80017b8 <bsp_uart_init+0x98>)
 8001734:	f7ff fe00 	bl	8001338 <fifo_register>
	fifo_register(&rtk.rx_fifo, rtk.fifo_buff, FIFO_RX_LEN, __irq_lock, __irq_unlock);
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <bsp_uart_init+0x8c>)
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <bsp_uart_init+0x90>)
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	491e      	ldr	r1, [pc, #120]	; (80017bc <bsp_uart_init+0x9c>)
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <bsp_uart_init+0xa0>)
 8001746:	f7ff fdf7 	bl	8001338 <fifo_register>
	fifo_register(&debug.rx_fifo, debug.fifo_buff, FIFO_RX_LEN, __irq_lock, __irq_unlock);
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <bsp_uart_init+0x8c>)
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <bsp_uart_init+0x90>)
 8001750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001754:	491b      	ldr	r1, [pc, #108]	; (80017c4 <bsp_uart_init+0xa4>)
 8001756:	481c      	ldr	r0, [pc, #112]	; (80017c8 <bsp_uart_init+0xa8>)
 8001758:	f7ff fdee 	bl	8001338 <fifo_register>

	/*Enable IT RXNE and IDLE*/
	LL_USART_EnableIT_RXNE(USART2);
 800175c:	481b      	ldr	r0, [pc, #108]	; (80017cc <bsp_uart_init+0xac>)
 800175e:	f7ff ff76 	bl	800164e <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_IDLE(USART2);
 8001762:	481a      	ldr	r0, [pc, #104]	; (80017cc <bsp_uart_init+0xac>)
 8001764:	f7ff ff50 	bl	8001608 <LL_USART_EnableIT_IDLE>
	LL_USART_EnableIT_RXNE(USART3);
 8001768:	4819      	ldr	r0, [pc, #100]	; (80017d0 <bsp_uart_init+0xb0>)
 800176a:	f7ff ff70 	bl	800164e <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_IDLE(USART3);
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <bsp_uart_init+0xb0>)
 8001770:	f7ff ff4a 	bl	8001608 <LL_USART_EnableIT_IDLE>
	LL_USART_EnableIT_RXNE(USART6);
 8001774:	4817      	ldr	r0, [pc, #92]	; (80017d4 <bsp_uart_init+0xb4>)
 8001776:	f7ff ff6a 	bl	800164e <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_IDLE(USART6);
 800177a:	4816      	ldr	r0, [pc, #88]	; (80017d4 <bsp_uart_init+0xb4>)
 800177c:	f7ff ff44 	bl	8001608 <LL_USART_EnableIT_IDLE>


	/*Clear receive buffer*/
	bsp_uart_rx_clear(&rtk);
 8001780:	4815      	ldr	r0, [pc, #84]	; (80017d8 <bsp_uart_init+0xb8>)
 8001782:	f000 f82f 	bl	80017e4 <bsp_uart_rx_clear>
	bsp_uart_rx_clear(&debug);
 8001786:	4815      	ldr	r0, [pc, #84]	; (80017dc <bsp_uart_init+0xbc>)
 8001788:	f000 f82c 	bl	80017e4 <bsp_uart_rx_clear>
	bsp_uart_rx_clear(&cat1);
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <bsp_uart_init+0xc0>)
 800178e:	f000 f829 	bl	80017e4 <bsp_uart_rx_clear>

	/*Clear Flag_TC*/
	LL_USART_ClearFlag_TC(USART2);
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <bsp_uart_init+0xac>)
 8001794:	f7ff ff1c 	bl	80015d0 <LL_USART_ClearFlag_TC>
	LL_USART_ClearFlag_TC(USART3);
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <bsp_uart_init+0xb0>)
 800179a:	f7ff ff19 	bl	80015d0 <LL_USART_ClearFlag_TC>
	LL_USART_ClearFlag_TC(USART6);
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <bsp_uart_init+0xb4>)
 80017a0:	f7ff ff16 	bl	80015d0 <LL_USART_ClearFlag_TC>
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	0800170f 	.word	0x0800170f
 80017b0:	080016fd 	.word	0x080016fd
 80017b4:	20001680 	.word	0x20001680
 80017b8:	20001664 	.word	0x20001664
 80017bc:	20000e60 	.word	0x20000e60
 80017c0:	20000e44 	.word	0x20000e44
 80017c4:	20000640 	.word	0x20000640
 80017c8:	20000624 	.word	0x20000624
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40004800 	.word	0x40004800
 80017d4:	40011400 	.word	0x40011400
 80017d8:	20000a40 	.word	0x20000a40
 80017dc:	20000220 	.word	0x20000220
 80017e0:	20001260 	.word	0x20001260

080017e4 <bsp_uart_rx_clear>:

void bsp_uart_rx_clear(uart_t *uart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	__irq_lock();
 80017ec:	f7ff ff86 	bl	80016fc <__irq_lock>
	memset(uart->rx_buff, 0x00, RX_LEN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fb4e 	bl	8003e9c <memset>
	uart->rx_finish = false;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	uart->rx_count = 0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	805a      	strh	r2, [r3, #2]
	__irq_unlock();
 800180c:	f7ff ff7f 	bl	800170e <__irq_unlock>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <bsp_uart_send>:


void bsp_uart_send(USART_TypeDef *uart,uint8_t *str,uint16_t len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	4613      	mov	r3, r2
 8001824:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<len;i++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e011      	b.n	8001850 <bsp_uart_send+0x38>
	{
		LL_USART_TransmitData8(uart,str[i]);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff ff39 	bl	80016ae <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TC(uart) == RESET);
 800183c:	bf00      	nop
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fea1 	bl	8001586 <LL_USART_IsActiveFlag_TC>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f9      	beq.n	800183e <bsp_uart_send+0x26>
	for(int i=0;i<len;i++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbe9      	blt.n	800182c <bsp_uart_send+0x14>
	}
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <USER_UART2_IRQHandler>:

void USER_UART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	uint8_t byte;

	if(RESET != LL_USART_IsActiveFlag_RXNE(USART2))	//receive 1 byte
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <USER_UART2_IRQHandler+0x60>)
 800186c:	f7ff fe78 	bl	8001560 <LL_USART_IsActiveFlag_RXNE>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00e      	beq.n	8001894 <USER_UART2_IRQHandler+0x30>
	{
		LL_USART_ClearFlag_RXNE(USART2);	//Clears the UART RXNE pending flag.
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <USER_UART2_IRQHandler+0x60>)
 8001878:	f7ff feb8 	bl	80015ec <LL_USART_ClearFlag_RXNE>

		byte = LL_USART_ReceiveData8(USART2);
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <USER_UART2_IRQHandler+0x60>)
 800187e:	f7ff ff09 	bl	8001694 <LL_USART_ReceiveData8>
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
		fifo_write(&rtk.rx_fifo, &byte , 1);	//receive 1 byte
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	2201      	movs	r2, #1
 800188a:	4619      	mov	r1, r3
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <USER_UART2_IRQHandler+0x64>)
 800188e:	f7ff fd9e 	bl	80013ce <fifo_write>
		LL_USART_ClearFlag_IDLE(USART2);		//Clears the UART IDLE pending flag.

		rtk.rx_finish = true;
		rtk.rx_count = fifo_get_occupy_size(&rtk.rx_fifo);
	}
}
 8001892:	e012      	b.n	80018ba <USER_UART2_IRQHandler+0x56>
	else if(RESET != LL_USART_IsActiveFlag_IDLE(USART2))	//receive 1 packet
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <USER_UART2_IRQHandler+0x60>)
 8001896:	f7ff fe50 	bl	800153a <LL_USART_IsActiveFlag_IDLE>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <USER_UART2_IRQHandler+0x56>
		LL_USART_ClearFlag_IDLE(USART2);		//Clears the UART IDLE pending flag.
 80018a0:	4808      	ldr	r0, [pc, #32]	; (80018c4 <USER_UART2_IRQHandler+0x60>)
 80018a2:	f7ff fe83 	bl	80015ac <LL_USART_ClearFlag_IDLE>
		rtk.rx_finish = true;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <USER_UART2_IRQHandler+0x68>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		rtk.rx_count = fifo_get_occupy_size(&rtk.rx_fifo);
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <USER_UART2_IRQHandler+0x64>)
 80018ae:	f7ff fd67 	bl	8001380 <fifo_get_occupy_size>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <USER_UART2_IRQHandler+0x68>)
 80018b8:	805a      	strh	r2, [r3, #2]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40004400 	.word	0x40004400
 80018c8:	20000e44 	.word	0x20000e44
 80018cc:	20000a40 	.word	0x20000a40

080018d0 <USER_UART3_IRQHandler>:


void USER_UART3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	uint8_t byte;

	if(RESET != LL_USART_IsActiveFlag_RXNE(USART3))	//receive 1 byte
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <USER_UART3_IRQHandler+0x60>)
 80018d8:	f7ff fe42 	bl	8001560 <LL_USART_IsActiveFlag_RXNE>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00e      	beq.n	8001900 <USER_UART3_IRQHandler+0x30>
	{
		LL_USART_ClearFlag_RXNE(USART3);	//Clears the UART RXNE pending flag.
 80018e2:	4813      	ldr	r0, [pc, #76]	; (8001930 <USER_UART3_IRQHandler+0x60>)
 80018e4:	f7ff fe82 	bl	80015ec <LL_USART_ClearFlag_RXNE>

		byte = LL_USART_ReceiveData8(USART3);
 80018e8:	4811      	ldr	r0, [pc, #68]	; (8001930 <USER_UART3_IRQHandler+0x60>)
 80018ea:	f7ff fed3 	bl	8001694 <LL_USART_ReceiveData8>
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
		fifo_write(&debug.rx_fifo, &byte , 1);	//receive 1 byte
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <USER_UART3_IRQHandler+0x64>)
 80018fa:	f7ff fd68 	bl	80013ce <fifo_write>
		LL_USART_ClearFlag_IDLE(USART3);		//Clears the UART IDLE pending flag.

		debug.rx_finish = true;
		debug.rx_count = fifo_get_occupy_size(&debug.rx_fifo);
	}
}
 80018fe:	e012      	b.n	8001926 <USER_UART3_IRQHandler+0x56>
	else if(RESET != LL_USART_IsActiveFlag_IDLE(USART3))	//receive 1 packet
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <USER_UART3_IRQHandler+0x60>)
 8001902:	f7ff fe1a 	bl	800153a <LL_USART_IsActiveFlag_IDLE>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00c      	beq.n	8001926 <USER_UART3_IRQHandler+0x56>
		LL_USART_ClearFlag_IDLE(USART3);		//Clears the UART IDLE pending flag.
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <USER_UART3_IRQHandler+0x60>)
 800190e:	f7ff fe4d 	bl	80015ac <LL_USART_ClearFlag_IDLE>
		debug.rx_finish = true;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <USER_UART3_IRQHandler+0x68>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
		debug.rx_count = fifo_get_occupy_size(&debug.rx_fifo);
 8001918:	4806      	ldr	r0, [pc, #24]	; (8001934 <USER_UART3_IRQHandler+0x64>)
 800191a:	f7ff fd31 	bl	8001380 <fifo_get_occupy_size>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <USER_UART3_IRQHandler+0x68>)
 8001924:	805a      	strh	r2, [r3, #2]
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004800 	.word	0x40004800
 8001934:	20000624 	.word	0x20000624
 8001938:	20000220 	.word	0x20000220

0800193c <USER_UART6_IRQHandler>:

void USER_UART6_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	uint8_t byte;

	if(RESET != LL_USART_IsActiveFlag_RXNE(USART6))	//receive 1 byte
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <USER_UART6_IRQHandler+0x60>)
 8001944:	f7ff fe0c 	bl	8001560 <LL_USART_IsActiveFlag_RXNE>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00e      	beq.n	800196c <USER_UART6_IRQHandler+0x30>
	{
		LL_USART_ClearFlag_RXNE(USART6);	//Clears the UART RXNE pending flag.
 800194e:	4813      	ldr	r0, [pc, #76]	; (800199c <USER_UART6_IRQHandler+0x60>)
 8001950:	f7ff fe4c 	bl	80015ec <LL_USART_ClearFlag_RXNE>

		byte = LL_USART_ReceiveData8(USART6);
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <USER_UART6_IRQHandler+0x60>)
 8001956:	f7ff fe9d 	bl	8001694 <LL_USART_ReceiveData8>
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
		fifo_write(&cat1.rx_fifo, &byte , 1);	//receive 1 byte
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	480e      	ldr	r0, [pc, #56]	; (80019a0 <USER_UART6_IRQHandler+0x64>)
 8001966:	f7ff fd32 	bl	80013ce <fifo_write>
		LL_USART_ClearFlag_IDLE(USART6);		//Clears the UART IDLE pending flag.

		cat1.rx_finish = true;
		cat1.rx_count = fifo_get_occupy_size(&cat1.rx_fifo);
	}
}
 800196a:	e012      	b.n	8001992 <USER_UART6_IRQHandler+0x56>
	else if(RESET != LL_USART_IsActiveFlag_IDLE(USART6))	//receive 1 packet
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <USER_UART6_IRQHandler+0x60>)
 800196e:	f7ff fde4 	bl	800153a <LL_USART_IsActiveFlag_IDLE>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <USER_UART6_IRQHandler+0x56>
		LL_USART_ClearFlag_IDLE(USART6);		//Clears the UART IDLE pending flag.
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <USER_UART6_IRQHandler+0x60>)
 800197a:	f7ff fe17 	bl	80015ac <LL_USART_ClearFlag_IDLE>
		cat1.rx_finish = true;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <USER_UART6_IRQHandler+0x68>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		cat1.rx_count = fifo_get_occupy_size(&cat1.rx_fifo);
 8001984:	4806      	ldr	r0, [pc, #24]	; (80019a0 <USER_UART6_IRQHandler+0x64>)
 8001986:	f7ff fcfb 	bl	8001380 <fifo_get_occupy_size>
 800198a:	4603      	mov	r3, r0
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <USER_UART6_IRQHandler+0x68>)
 8001990:	805a      	strh	r2, [r3, #2]
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40011400 	.word	0x40011400
 80019a0:	20001664 	.word	0x20001664
 80019a4:	20001260 	.word	0x20001260

080019a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <MX_GPIO_Init+0x158>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a2b      	ldr	r2, [pc, #172]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <MX_GPIO_Init+0x158>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	481f      	ldr	r0, [pc, #124]	; (8001b04 <MX_GPIO_Init+0x15c>)
 8001a88:	f000 ffc8 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a92:	481d      	ldr	r0, [pc, #116]	; (8001b08 <MX_GPIO_Init+0x160>)
 8001a94:	f000 ffc2 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power5V_GPIO_Port, Power5V_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	481b      	ldr	r0, [pc, #108]	; (8001b0c <MX_GPIO_Init+0x164>)
 8001a9e:	f000 ffbd 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_EN_Pin;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_EN_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <MX_GPIO_Init+0x15c>)
 8001aba:	f000 fe13 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Beep_Pin;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0x160>)
 8001ad8:	f000 fe04 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power5V_Pin;
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power5V_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_GPIO_Init+0x164>)
 8001af4:	f000 fdf6 	bl	80026e4 <HAL_GPIO_Init>

}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020c00 	.word	0x40020c00

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (__IOM uint32_t)0x08010000;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <main+0xc4>)
 8001b16:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <main+0xc8>)
 8001b18:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f000 fc67 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f875 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f7ff ff41 	bl	80019a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b26:	f000 fb15 	bl	8002154 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b2a:	f000 fb73 	bl	8002214 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001b2e:	f000 fbd3 	bl	80022d8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  bsp_set_power_on();
 8001b32:	f7ff fbef 	bl	8001314 <bsp_set_power_on>
  bsp_uart_init();
 8001b36:	f7ff fdf3 	bl	8001720 <bsp_uart_init>

  printf("LL UART OK\r\n");
 8001b3a:	4828      	ldr	r0, [pc, #160]	; (8001bdc <main+0xcc>)
 8001b3c:	f003 f8b6 	bl	8004cac <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(debug.rx_finish ==  true)
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <main+0xd0>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <main+0x58>
	  {
		  debug.rx_finish = false;
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <main+0xd0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
		  fifo_read(&debug.rx_fifo, debug.rx_buff, debug.rx_count );
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <main+0xd0>)
 8001b50:	885b      	ldrh	r3, [r3, #2]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4923      	ldr	r1, [pc, #140]	; (8001be4 <main+0xd4>)
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <main+0xd8>)
 8001b58:	f7ff fc94 	bl	8001484 <fifo_read>

		  bsp_battery_send();
 8001b5c:	f7ff fa4c 	bl	8000ff8 <bsp_battery_send>

//		  printf("%s",debug.rx_buff);
		  bsp_uart_rx_clear(&debug);
 8001b60:	481f      	ldr	r0, [pc, #124]	; (8001be0 <main+0xd0>)
 8001b62:	f7ff fe3f 	bl	80017e4 <bsp_uart_rx_clear>
 8001b66:	e02e      	b.n	8001bc6 <main+0xb6>
	  }
	  else if(rtk.rx_finish ==  true)
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <main+0xdc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d011      	beq.n	8001b94 <main+0x84>
	  {
		  rtk.rx_finish = false;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <main+0xdc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		  fifo_read(&rtk.rx_fifo, rtk.rx_buff, rtk.rx_count );
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <main+0xdc>)
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	491c      	ldr	r1, [pc, #112]	; (8001bf0 <main+0xe0>)
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <main+0xe4>)
 8001b80:	f7ff fc80 	bl	8001484 <fifo_read>

		  printf("%s",rtk.rx_buff);
 8001b84:	491a      	ldr	r1, [pc, #104]	; (8001bf0 <main+0xe0>)
 8001b86:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <main+0xe8>)
 8001b88:	f003 f80a 	bl	8004ba0 <iprintf>
		  bsp_uart_rx_clear(&rtk);
 8001b8c:	4817      	ldr	r0, [pc, #92]	; (8001bec <main+0xdc>)
 8001b8e:	f7ff fe29 	bl	80017e4 <bsp_uart_rx_clear>
 8001b92:	e018      	b.n	8001bc6 <main+0xb6>
	  }


	  else if(cat1.rx_finish ==  true)
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <main+0xec>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <main+0xb6>
	  {
		  cat1.rx_finish = false;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <main+0xec>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
		  fifo_read(&cat1.rx_fifo, cat1.rx_buff, cat1.rx_count );
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <main+0xec>)
 8001ba4:	885b      	ldrh	r3, [r3, #2]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4915      	ldr	r1, [pc, #84]	; (8001c00 <main+0xf0>)
 8001baa:	4816      	ldr	r0, [pc, #88]	; (8001c04 <main+0xf4>)
 8001bac:	f7ff fc6a 	bl	8001484 <fifo_read>

		  if(cat1.rx_count >= 45)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <main+0xec>)
 8001bb2:	885b      	ldrh	r3, [r3, #2]
 8001bb4:	2b2c      	cmp	r3, #44	; 0x2c
 8001bb6:	d903      	bls.n	8001bc0 <main+0xb0>
		  {
			  bsp_battery_get(&battery,cat1.rx_buff);
 8001bb8:	4911      	ldr	r1, [pc, #68]	; (8001c00 <main+0xf0>)
 8001bba:	4813      	ldr	r0, [pc, #76]	; (8001c08 <main+0xf8>)
 8001bbc:	f7ff fa2c 	bl	8001018 <bsp_battery_get>
		  }
//		  printf("%s",cat1.rx_buff);
		  bsp_uart_rx_clear(&cat1);
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <main+0xec>)
 8001bc2:	f7ff fe0f 	bl	80017e4 <bsp_uart_rx_clear>
	  }
	  bsp_battery_send();
 8001bc6:	f7ff fa17 	bl	8000ff8 <bsp_battery_send>
	  HAL_Delay(1000);
 8001bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bce:	f000 fc7f 	bl	80024d0 <HAL_Delay>
	  if(debug.rx_finish ==  true)
 8001bd2:	e7b5      	b.n	8001b40 <main+0x30>
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	08010000 	.word	0x08010000
 8001bdc:	08008964 	.word	0x08008964
 8001be0:	20000220 	.word	0x20000220
 8001be4:	20000224 	.word	0x20000224
 8001be8:	20000624 	.word	0x20000624
 8001bec:	20000a40 	.word	0x20000a40
 8001bf0:	20000a44 	.word	0x20000a44
 8001bf4:	20000e44 	.word	0x20000e44
 8001bf8:	08008970 	.word	0x08008970
 8001bfc:	20001260 	.word	0x20001260
 8001c00:	20001264 	.word	0x20001264
 8001c04:	20001664 	.word	0x20001664
 8001c08:	20000204 	.word	0x20000204

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	2230      	movs	r2, #48	; 0x30
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 f93e 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c72:	2302      	movs	r3, #2
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c80:	23a8      	movs	r3, #168	; 0xa8
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fedd 	bl	8002a50 <HAL_RCC_OscConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c9c:	f000 f820 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f93e 	bl	8002f40 <HAL_RCC_ClockConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cca:	f000 f809 	bl	8001ce0 <Error_Handler>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3750      	adds	r7, #80	; 0x50
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 fb82 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

	USER_UART2_IRQHandler();
 8001d94:	f7ff fd66 	bl	8001864 <USER_UART2_IRQHandler>

  /* USER CODE END USART2_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

	USER_UART3_IRQHandler();
 8001da0:	f7ff fd96 	bl	80018d0 <USER_UART3_IRQHandler>

  /* USER CODE END USART3_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

	USER_UART6_IRQHandler();
 8001dac:	f7ff fdc6 	bl	800193c <USER_UART6_IRQHandler>

  /* USER CODE END USART6_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_kill>:

int _kill(int pid, int sig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dce:	f002 f83b 	bl	8003e48 <__errno>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2216      	movs	r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_exit>:

void _exit (int status)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffe7 	bl	8001dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001df6:	e7fe      	b.n	8001df6 <_exit+0x12>

08001df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e00a      	b.n	8001e20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e0a:	f3af 8000 	nop.w
 8001e0e:	4601      	mov	r1, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	b2ca      	uxtb	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf0      	blt.n	8001e0a <_read+0x12>
  }

  return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e009      	b.n	8001e58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	60ba      	str	r2, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc3d 	bl	80016cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf1      	blt.n	8001e44 <_write+0x12>
  }
  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_close>:

int _close(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e92:	605a      	str	r2, [r3, #4]
  return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_isatty>:

int _isatty(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f001 ffa0 	bl	8003e48 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20020000 	.word	0x20020000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20001a80 	.word	0x20001a80
 8001f3c:	20001a98 	.word	0x20001a98

08001f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_USART_Enable>:
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_USART_ConfigAsyncMode>:
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800

080020f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800210a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40023800 	.word	0x40023800

08002124 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800212e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800213a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	.word	0x40023800

08002154 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08e      	sub	sp, #56	; 0x38
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	615a      	str	r2, [r3, #20]
 800216c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800217e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002182:	f7ff ffb7 	bl	80020f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff ff9c 	bl	80020c4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800218c:	230c      	movs	r3, #12
 800218e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002190:	2302      	movs	r3, #2
 8002192:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021a0:	2307      	movs	r3, #7
 80021a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4818      	ldr	r0, [pc, #96]	; (800220c <MX_USART2_UART_Init+0xb8>)
 80021aa:	f001 f9ba 	bl	8003522 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80021ae:	f7ff fed9 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2200      	movs	r2, #0
 80021b6:	2103      	movs	r1, #3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff29 	bl	8002010 <NVIC_EncodePriority>
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	2026      	movs	r0, #38	; 0x26
 80021c4:	f7ff fefa 	bl	8001fbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80021c8:	2026      	movs	r0, #38	; 0x26
 80021ca:	f7ff fed9 	bl	8001f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80021ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80021d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80021e0:	230c      	movs	r3, #12
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_USART2_UART_Init+0xbc>)
 80021f4:	f001 fda8 	bl	8003d48 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_USART2_UART_Init+0xbc>)
 80021fa:	f7ff ff4c 	bl	8002096 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80021fe:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_USART2_UART_Init+0xbc>)
 8002200:	f7ff ff39 	bl	8002076 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	3738      	adds	r7, #56	; 0x38
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40020000 	.word	0x40020000
 8002210:	40004400 	.word	0x40004400

08002214 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08e      	sub	sp, #56	; 0x38
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800223e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002242:	f7ff ff57 	bl	80020f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002246:	2008      	movs	r0, #8
 8002248:	f7ff ff3c 	bl	80020c4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800224c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002252:	2302      	movs	r3, #2
 8002254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002262:	2307      	movs	r3, #7
 8002264:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4819      	ldr	r0, [pc, #100]	; (80022d0 <MX_USART3_UART_Init+0xbc>)
 800226c:	f001 f959 	bl	8003522 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002270:	f7ff fe78 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 8002274:	4603      	mov	r3, r0
 8002276:	2200      	movs	r2, #0
 8002278:	2102      	movs	r1, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fec8 	bl	8002010 <NVIC_EncodePriority>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	2027      	movs	r0, #39	; 0x27
 8002286:	f7ff fe99 	bl	8001fbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800228a:	2027      	movs	r0, #39	; 0x27
 800228c:	f7ff fe78 	bl	8001f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002290:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002294:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80022a2:	230c      	movs	r3, #12
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	4807      	ldr	r0, [pc, #28]	; (80022d4 <MX_USART3_UART_Init+0xc0>)
 80022b6:	f001 fd47 	bl	8003d48 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <MX_USART3_UART_Init+0xc0>)
 80022bc:	f7ff feeb 	bl	8002096 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_USART3_UART_Init+0xc0>)
 80022c2:	f7ff fed8 	bl	8002076 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3738      	adds	r7, #56	; 0x38
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40004800 	.word	0x40004800

080022d8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	; 0x38
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	615a      	str	r2, [r3, #20]
 80022f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002302:	2020      	movs	r0, #32
 8002304:	f7ff ff0e 	bl	8002124 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8002308:	2040      	movs	r0, #64	; 0x40
 800230a:	f7ff fedb 	bl	80020c4 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PG9   ------> USART6_RX
  PG14   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_14;
 800230e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002314:	2302      	movs	r3, #2
 8002316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002324:	2308      	movs	r3, #8
 8002326:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4619      	mov	r1, r3
 800232c:	4818      	ldr	r0, [pc, #96]	; (8002390 <MX_USART6_UART_Init+0xb8>)
 800232e:	f001 f8f8 	bl	8003522 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002332:	f7ff fe17 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 8002336:	4603      	mov	r3, r0
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe67 	bl	8002010 <NVIC_EncodePriority>
 8002342:	4603      	mov	r3, r0
 8002344:	4619      	mov	r1, r3
 8002346:	2047      	movs	r0, #71	; 0x47
 8002348:	f7ff fe38 	bl	8001fbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800234c:	2047      	movs	r0, #71	; 0x47
 800234e:	f7ff fe17 	bl	8001f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002352:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002356:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002364:	230c      	movs	r3, #12
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <MX_USART6_UART_Init+0xbc>)
 8002378:	f001 fce6 	bl	8003d48 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_USART6_UART_Init+0xbc>)
 800237e:	f7ff fe8a 	bl	8002096 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002382:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_USART6_UART_Init+0xbc>)
 8002384:	f7ff fe77 	bl	8002076 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3738      	adds	r7, #56	; 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021800 	.word	0x40021800
 8002394:	40011400 	.word	0x40011400

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239e:	490e      	ldr	r1, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b4:	4c0b      	ldr	r4, [pc, #44]	; (80023e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c2:	f7ff fdbd 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f001 fd45 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff fba1 	bl	8001b10 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80023dc:	08008e4c 	.word	0x08008e4c
  ldr r2, =_sbss
 80023e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023e4:	20001a98 	.word	0x20001a98

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_Init+0x40>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_Init+0x40>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_Init+0x40>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f931 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	200f      	movs	r0, #15
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7ff fc64 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f93b 	bl	80026ca <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 f911 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000008 	.word	0x20000008
 8002488:	20000010 	.word	0x20000010
 800248c:	2000000c 	.word	0x2000000c

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000010 	.word	0x20000010
 80024b4:	20001a84 	.word	0x20001a84

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20001a84 	.word	0x20001a84

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000010 	.word	0x20000010

08002518 <__NVIC_SetPriorityGrouping>:
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_SetPriority>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff47 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff5c 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff8e 	bl	80025d0 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5d 	bl	800257c <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffb0 	bl	8002638 <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff fcd6 	bl	80024b8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff fcd2 	bl	80024b8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff fcc2 	bl	80024b8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff fcbe 	bl	80024b8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7ff fc77 	bl	80024b8 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7ff fc73 	bl	80024b8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff fc56 	bl	80024b8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff fc52 	bl	80024b8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7ff fc36 	bl	80024b8 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7ff fc32 	bl	80024b8 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7ff fc1f 	bl	80024b8 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7ff fc1b 	bl	80024b8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7ff fbdb 	bl	80024b8 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7ff fbd7 	bl	80024b8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7ff fb9c 	bl	80024b8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7ff fb98 	bl	80024b8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7ff fb86 	bl	80024b8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7ff fb82 	bl	80024b8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7ff fb56 	bl	80024b8 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7ff fb52 	bl	80024b8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7ff fb2b 	bl	80024b8 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7ff fb27 	bl	80024b8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff fb14 	bl	80024b8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7ff fb10 	bl	80024b8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7ff fa42 	bl	80024b8 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7ff fa3e 	bl	80024b8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f9a2 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08008974 	.word	0x08008974
 8003104:	20000008 	.word	0x20000008
 8003108:	2000000c 	.word	0x2000000c

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b094      	sub	sp, #80	; 0x50
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80e1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0db      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003144:	e0db      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_GetSysClockFreq+0x208>)
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314a:	e0d8      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	ebb2 0801 	subs.w	r8, r2, r1
 80031c4:	4659      	mov	r1, fp
 80031c6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb49 0303 	adc.w	r3, r9, r3
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fe:	4629      	mov	r1, r5
 8003200:	024b      	lsls	r3, r1, #9
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003208:	4621      	mov	r1, r4
 800320a:	024a      	lsls	r2, r1, #9
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800321c:	f7fd fd34 	bl	8000c88 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	e058      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	4611      	mov	r1, r2
 8003236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4641      	mov	r1, r8
 800325e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb63 0b01 	sbc.w	fp, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327c:	ebb2 040a 	subs.w	r4, r2, sl
 8003280:	eb63 050b 	sbc.w	r5, r3, fp
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	464b      	mov	r3, r9
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	f7fd fcda 	bl	8000c88 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003300:	4618      	mov	r0, r3
 8003302:	3750      	adds	r7, #80	; 0x50
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	613b      	str	r3, [r7, #16]
  return result;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2103      	movs	r1, #3
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	61bb      	str	r3, [r7, #24]
  return result;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b089      	sub	sp, #36	; 0x24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	613b      	str	r3, [r7, #16]
  return result;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2103      	movs	r1, #3
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	401a      	ands	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	61bb      	str	r3, [r7, #24]
  return result;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80033f8:	bf00      	nop
 80033fa:	3724      	adds	r7, #36	; 0x24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	613b      	str	r3, [r7, #16]
  return result;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2103      	movs	r1, #3
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	61bb      	str	r3, [r7, #24]
  return result;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	60da      	str	r2, [r3, #12]
}
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003462:	b480      	push	{r7}
 8003464:	b089      	sub	sp, #36	; 0x24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	613b      	str	r3, [r7, #16]
  return result;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	210f      	movs	r1, #15
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	401a      	ands	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	61bb      	str	r3, [r7, #24]
  return result;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80034b4:	bf00      	nop
 80034b6:	3724      	adds	r7, #36	; 0x24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	613b      	str	r3, [r7, #16]
  return result;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	210f      	movs	r1, #15
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	401a      	ands	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b088      	sub	sp, #32
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	613b      	str	r3, [r7, #16]
  return result;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800354c:	e050      	b.n	80035f0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2101      	movs	r1, #1
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d042      	beq.n	80035ea <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d003      	beq.n	8003574 <LL_GPIO_Init+0x52>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d10d      	bne.n	8003590 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	461a      	mov	r2, r3
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff12 	bl	80033a6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fef3 	bl	8003376 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	461a      	mov	r2, r3
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff33 	bl	8003404 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d11a      	bne.n	80035dc <LL_GPIO_Init+0xba>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	60bb      	str	r3, [r7, #8]
  return result;
 80035b2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b07      	cmp	r3, #7
 80035bc:	d807      	bhi.n	80035ce <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	461a      	mov	r2, r3
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff4b 	bl	8003462 <LL_GPIO_SetAFPin_0_7>
 80035cc:	e006      	b.n	80035dc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	461a      	mov	r2, r3
 80035d4:	69b9      	ldr	r1, [r7, #24]
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff72 	bl	80034c0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	461a      	mov	r2, r3
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fe97 	bl	8003318 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1a7      	bne.n	800354e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <LL_RCC_GetSysClkSource+0x18>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <LL_RCC_GetAHBPrescaler+0x18>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800

0800365c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <LL_RCC_PLL_GetMainSource+0x18>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <LL_RCC_PLL_GetN+0x18>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40023800 	.word	0x40023800

080036b0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <LL_RCC_PLL_GetP+0x18>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <LL_RCC_PLL_GetDivider+0x18>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800

080036e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80036f0:	f000 f820 	bl	8003734 <RCC_GetSystemClockFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f840 	bl	8003784 <RCC_GetHCLKClockFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f84e 	bl	80037b0 <RCC_GetPCLK1ClockFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f85a 	bl	80037d8 <RCC_GetPCLK2ClockFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60da      	str	r2, [r3, #12]
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800373e:	f7ff ff63 	bl	8003608 <LL_RCC_GetSysClkSource>
 8003742:	4603      	mov	r3, r0
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00c      	beq.n	8003762 <RCC_GetSystemClockFreq+0x2e>
 8003748:	2b08      	cmp	r3, #8
 800374a:	d80f      	bhi.n	800376c <RCC_GetSystemClockFreq+0x38>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <RCC_GetSystemClockFreq+0x22>
 8003750:	2b04      	cmp	r3, #4
 8003752:	d003      	beq.n	800375c <RCC_GetSystemClockFreq+0x28>
 8003754:	e00a      	b.n	800376c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <RCC_GetSystemClockFreq+0x48>)
 8003758:	607b      	str	r3, [r7, #4]
      break;
 800375a:	e00a      	b.n	8003772 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <RCC_GetSystemClockFreq+0x4c>)
 800375e:	607b      	str	r3, [r7, #4]
      break;
 8003760:	e007      	b.n	8003772 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003762:	2008      	movs	r0, #8
 8003764:	f000 f84c 	bl	8003800 <RCC_PLL_GetFreqDomain_SYS>
 8003768:	6078      	str	r0, [r7, #4]
      break;
 800376a:	e002      	b.n	8003772 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <RCC_GetSystemClockFreq+0x48>)
 800376e:	607b      	str	r3, [r7, #4]
      break;
 8003770:	bf00      	nop
  }

  return frequency;
 8003772:	687b      	ldr	r3, [r7, #4]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00f42400 	.word	0x00f42400
 8003780:	007a1200 	.word	0x007a1200

08003784 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800378c:	f7ff ff4a 	bl	8003624 <LL_RCC_GetAHBPrescaler>
 8003790:	4603      	mov	r3, r0
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <RCC_GetHCLKClockFreq+0x28>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	40d3      	lsrs	r3, r2
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	08008974 	.word	0x08008974

080037b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80037b8:	f7ff ff42 	bl	8003640 <LL_RCC_GetAPB1Prescaler>
 80037bc:	4603      	mov	r3, r0
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	40d3      	lsrs	r3, r2
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08008984 	.word	0x08008984

080037d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80037e0:	f7ff ff3c 	bl	800365c <LL_RCC_GetAPB2Prescaler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <RCC_GetPCLK2ClockFreq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	40d3      	lsrs	r3, r2
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08008984 	.word	0x08008984

08003800 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003814:	f7ff ff30 	bl	8003678 <LL_RCC_PLL_GetMainSource>
 8003818:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003826:	d003      	beq.n	8003830 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003828:	e005      	b.n	8003836 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800382c:	617b      	str	r3, [r7, #20]
      break;
 800382e:	e005      	b.n	800383c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003832:	617b      	str	r3, [r7, #20]
      break;
 8003834:	e002      	b.n	800383c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003838:	617b      	str	r3, [r7, #20]
      break;
 800383a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d113      	bne.n	800386a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003842:	f7ff ff43 	bl	80036cc <LL_RCC_PLL_GetDivider>
 8003846:	4602      	mov	r2, r0
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fbb3 f4f2 	udiv	r4, r3, r2
 800384e:	f7ff ff21 	bl	8003694 <LL_RCC_PLL_GetN>
 8003852:	4603      	mov	r3, r0
 8003854:	fb03 f404 	mul.w	r4, r3, r4
 8003858:	f7ff ff2a 	bl	80036b0 <LL_RCC_PLL_GetP>
 800385c:	4603      	mov	r3, r0
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fbb4 f3f3 	udiv	r3, r4, r3
 8003868:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800386a:	693b      	ldr	r3, [r7, #16]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	00f42400 	.word	0x00f42400
 8003878:	007a1200 	.word	0x007a1200

0800387c <LL_USART_IsEnabled>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_USART_SetStopBitsLength>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_USART_SetHWFlowCtrl>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	615a      	str	r2, [r3, #20]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_USART_SetBaudRate>:
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b0c0      	sub	sp, #256	; 0x100
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038fc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003900:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	f040 810c 	bne.w	8003b2c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003914:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800391e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	1891      	adds	r1, r2, r2
 800392c:	6639      	str	r1, [r7, #96]	; 0x60
 800392e:	415b      	adcs	r3, r3
 8003930:	667b      	str	r3, [r7, #100]	; 0x64
 8003932:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003936:	4621      	mov	r1, r4
 8003938:	eb12 0801 	adds.w	r8, r2, r1
 800393c:	4629      	mov	r1, r5
 800393e:	eb43 0901 	adc.w	r9, r3, r1
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003956:	4690      	mov	r8, r2
 8003958:	4699      	mov	r9, r3
 800395a:	4623      	mov	r3, r4
 800395c:	eb18 0303 	adds.w	r3, r8, r3
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003964:	462b      	mov	r3, r5
 8003966:	eb49 0303 	adc.w	r3, r9, r3
 800396a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800396e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003972:	2200      	movs	r2, #0
 8003974:	469a      	mov	sl, r3
 8003976:	4693      	mov	fp, r2
 8003978:	eb1a 030a 	adds.w	r3, sl, sl
 800397c:	65bb      	str	r3, [r7, #88]	; 0x58
 800397e:	eb4b 030b 	adc.w	r3, fp, fp
 8003982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003984:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800398c:	f7fd f97c 	bl	8000c88 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	b29b      	uxth	r3, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039b0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80039b4:	4642      	mov	r2, r8
 80039b6:	464b      	mov	r3, r9
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	6539      	str	r1, [r7, #80]	; 0x50
 80039bc:	415b      	adcs	r3, r3
 80039be:	657b      	str	r3, [r7, #84]	; 0x54
 80039c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039c4:	4641      	mov	r1, r8
 80039c6:	1851      	adds	r1, r2, r1
 80039c8:	64b9      	str	r1, [r7, #72]	; 0x48
 80039ca:	4649      	mov	r1, r9
 80039cc:	414b      	adcs	r3, r1
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80039dc:	4659      	mov	r1, fp
 80039de:	00cb      	lsls	r3, r1, #3
 80039e0:	4651      	mov	r1, sl
 80039e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e6:	4651      	mov	r1, sl
 80039e8:	00ca      	lsls	r2, r1, #3
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	4642      	mov	r2, r8
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f8:	464b      	mov	r3, r9
 80039fa:	460a      	mov	r2, r1
 80039fc:	eb42 0303 	adc.w	r3, r2, r3
 8003a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003a12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a16:	460b      	mov	r3, r1
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a28:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003a2c:	f7fd f92c 	bl	8000c88 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003a38:	fba3 2301 	umull	r2, r3, r3, r1
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2264      	movs	r2, #100	; 0x64
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	1acb      	subs	r3, r1, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4423      	add	r3, r4
 8003a62:	b29c      	uxth	r4, r3
 8003a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a72:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a86:	4641      	mov	r1, r8
 8003a88:	1851      	adds	r1, r2, r1
 8003a8a:	6339      	str	r1, [r7, #48]	; 0x30
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	414b      	adcs	r3, r1
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	00cb      	lsls	r3, r1, #3
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	00ca      	lsls	r2, r1, #3
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aba:	464b      	mov	r3, r9
 8003abc:	460a      	mov	r2, r1
 8003abe:	eb42 0303 	adc.w	r3, r2, r3
 8003ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003ad4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	18db      	adds	r3, r3, r3
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	4613      	mov	r3, r2
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003aee:	f7fd f8cb 	bl	8000c88 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2164      	movs	r1, #100	; 0x64
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <LL_USART_SetBaudRate+0x238>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4423      	add	r3, r4
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	e107      	b.n	8003d38 <LL_USART_SetBaudRate+0x448>
 8003b28:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b36:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b3a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003b3e:	4642      	mov	r2, r8
 8003b40:	464b      	mov	r3, r9
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	6239      	str	r1, [r7, #32]
 8003b46:	415b      	adcs	r3, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4e:	4641      	mov	r1, r8
 8003b50:	1854      	adds	r4, r2, r1
 8003b52:	4649      	mov	r1, r9
 8003b54:	eb43 0501 	adc.w	r5, r3, r1
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	18e3      	adds	r3, r4, r3
 8003b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b74:	464b      	mov	r3, r9
 8003b76:	eb45 0303 	adc.w	r3, r5, r3
 8003b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003b98:	4629      	mov	r1, r5
 8003b9a:	008b      	lsls	r3, r1, #2
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	008a      	lsls	r2, r1, #2
 8003ba6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003baa:	f7fd f86d 	bl	8000c88 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <LL_USART_SetBaudRate+0x454>)
 8003bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bce:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	61b9      	str	r1, [r7, #24]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1851      	adds	r1, r2, r1
 8003be6:	6139      	str	r1, [r7, #16]
 8003be8:	4649      	mov	r1, r9
 8003bea:	414b      	adcs	r3, r1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	00cb      	lsls	r3, r1, #3
 8003bfe:	4651      	mov	r1, sl
 8003c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c04:	4651      	mov	r1, sl
 8003c06:	00ca      	lsls	r2, r1, #3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4642      	mov	r2, r8
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c16:	464b      	mov	r3, r9
 8003c18:	460a      	mov	r2, r1
 8003c1a:	eb42 0303 	adc.w	r3, r2, r3
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	008b      	lsls	r3, r1, #2
 8003c40:	4641      	mov	r1, r8
 8003c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c46:	4641      	mov	r1, r8
 8003c48:	008a      	lsls	r2, r1, #2
 8003c4a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003c4e:	f7fd f81b 	bl	8000c88 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <LL_USART_SetBaudRate+0x454>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a36      	ldr	r2, [pc, #216]	; (8003d44 <LL_USART_SetBaudRate+0x454>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4423      	add	r3, r4
 8003c7c:	b29c      	uxth	r4, r3
 8003c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c82:	2200      	movs	r2, #0
 8003c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	1891      	adds	r1, r2, r2
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	415b      	adcs	r3, r3
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	1851      	adds	r1, r2, r1
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	414b      	adcs	r3, r1
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	00cb      	lsls	r3, r1, #3
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	00ca      	lsls	r2, r1, #3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4642      	mov	r2, r8
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8003cce:	464b      	mov	r3, r9
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	eb42 0303 	adc.w	r3, r2, r3
 8003cd6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003cee:	4649      	mov	r1, r9
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	008a      	lsls	r2, r1, #2
 8003cfc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d00:	f7fc ffc2 	bl	8000c88 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <LL_USART_SetBaudRate+0x454>)
 8003d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2164      	movs	r1, #100	; 0x64
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	3332      	adds	r3, #50	; 0x32
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <LL_USART_SetBaudRate+0x454>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4423      	add	r3, r4
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fd8e 	bl	800387c <LL_USART_IsEnabled>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d15e      	bne.n	8003e24 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d6e:	f023 030c 	bic.w	r3, r3, #12
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6851      	ldr	r1, [r2, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	6912      	ldr	r2, [r2, #16]
 8003d80:	4311      	orrs	r1, r2
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6992      	ldr	r2, [r2, #24]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fd85 	bl	80038a4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fd92 	bl	80038ca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fc9c 	bl	80036e8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <LL_USART_Init+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d102      	bne.n	8003dbe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	e021      	b.n	8003e02 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <LL_USART_Init+0xec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d102      	bne.n	8003dcc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e01a      	b.n	8003e02 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <LL_USART_Init+0xf0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d102      	bne.n	8003dda <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e013      	b.n	8003e02 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <LL_USART_Init+0xf4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d102      	bne.n	8003de8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e00c      	b.n	8003e02 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <LL_USART_Init+0xf8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d102      	bne.n	8003df6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e005      	b.n	8003e02 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <LL_USART_Init+0xfc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003e10:	2300      	movs	r3, #0
 8003e12:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fd66 	bl	80038f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40011000 	.word	0x40011000
 8003e34:	40004400 	.word	0x40004400
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40011400 	.word	0x40011400
 8003e40:	40004c00 	.word	0x40004c00
 8003e44:	40005000 	.word	0x40005000

08003e48 <__errno>:
 8003e48:	4b01      	ldr	r3, [pc, #4]	; (8003e50 <__errno+0x8>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000014 	.word	0x20000014

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4d0d      	ldr	r5, [pc, #52]	; (8003e8c <__libc_init_array+0x38>)
 8003e58:	4c0d      	ldr	r4, [pc, #52]	; (8003e90 <__libc_init_array+0x3c>)
 8003e5a:	1b64      	subs	r4, r4, r5
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	2600      	movs	r6, #0
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	4d0b      	ldr	r5, [pc, #44]	; (8003e94 <__libc_init_array+0x40>)
 8003e66:	4c0c      	ldr	r4, [pc, #48]	; (8003e98 <__libc_init_array+0x44>)
 8003e68:	f004 fd1c 	bl	80088a4 <_init>
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	2600      	movs	r6, #0
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08008e44 	.word	0x08008e44
 8003e90:	08008e44 	.word	0x08008e44
 8003e94:	08008e44 	.word	0x08008e44
 8003e98:	08008e48 	.word	0x08008e48

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <__cvt>:
 8003eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	ec55 4b10 	vmov	r4, r5, d0
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	460e      	mov	r6, r1
 8003eb8:	4619      	mov	r1, r3
 8003eba:	462b      	mov	r3, r5
 8003ebc:	bfbb      	ittet	lt
 8003ebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ec2:	461d      	movlt	r5, r3
 8003ec4:	2300      	movge	r3, #0
 8003ec6:	232d      	movlt	r3, #45	; 0x2d
 8003ec8:	700b      	strb	r3, [r1, #0]
 8003eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ecc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ed0:	4691      	mov	r9, r2
 8003ed2:	f023 0820 	bic.w	r8, r3, #32
 8003ed6:	bfbc      	itt	lt
 8003ed8:	4622      	movlt	r2, r4
 8003eda:	4614      	movlt	r4, r2
 8003edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ee0:	d005      	beq.n	8003eee <__cvt+0x42>
 8003ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ee6:	d100      	bne.n	8003eea <__cvt+0x3e>
 8003ee8:	3601      	adds	r6, #1
 8003eea:	2102      	movs	r1, #2
 8003eec:	e000      	b.n	8003ef0 <__cvt+0x44>
 8003eee:	2103      	movs	r1, #3
 8003ef0:	ab03      	add	r3, sp, #12
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	ab02      	add	r3, sp, #8
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	ec45 4b10 	vmov	d0, r4, r5
 8003efc:	4653      	mov	r3, sl
 8003efe:	4632      	mov	r2, r6
 8003f00:	f001 fefa 	bl	8005cf8 <_dtoa_r>
 8003f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f08:	4607      	mov	r7, r0
 8003f0a:	d102      	bne.n	8003f12 <__cvt+0x66>
 8003f0c:	f019 0f01 	tst.w	r9, #1
 8003f10:	d022      	beq.n	8003f58 <__cvt+0xac>
 8003f12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f16:	eb07 0906 	add.w	r9, r7, r6
 8003f1a:	d110      	bne.n	8003f3e <__cvt+0x92>
 8003f1c:	783b      	ldrb	r3, [r7, #0]
 8003f1e:	2b30      	cmp	r3, #48	; 0x30
 8003f20:	d10a      	bne.n	8003f38 <__cvt+0x8c>
 8003f22:	2200      	movs	r2, #0
 8003f24:	2300      	movs	r3, #0
 8003f26:	4620      	mov	r0, r4
 8003f28:	4629      	mov	r1, r5
 8003f2a:	f7fc fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f2e:	b918      	cbnz	r0, 8003f38 <__cvt+0x8c>
 8003f30:	f1c6 0601 	rsb	r6, r6, #1
 8003f34:	f8ca 6000 	str.w	r6, [sl]
 8003f38:	f8da 3000 	ldr.w	r3, [sl]
 8003f3c:	4499      	add	r9, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2300      	movs	r3, #0
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	f7fc fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f4a:	b108      	cbz	r0, 8003f50 <__cvt+0xa4>
 8003f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f50:	2230      	movs	r2, #48	; 0x30
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	454b      	cmp	r3, r9
 8003f56:	d307      	bcc.n	8003f68 <__cvt+0xbc>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f5c:	1bdb      	subs	r3, r3, r7
 8003f5e:	4638      	mov	r0, r7
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	b004      	add	sp, #16
 8003f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f68:	1c59      	adds	r1, r3, #1
 8003f6a:	9103      	str	r1, [sp, #12]
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e7f0      	b.n	8003f52 <__cvt+0xa6>

08003f70 <__exponent>:
 8003f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f72:	4603      	mov	r3, r0
 8003f74:	2900      	cmp	r1, #0
 8003f76:	bfb8      	it	lt
 8003f78:	4249      	neglt	r1, r1
 8003f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8003f7e:	bfb4      	ite	lt
 8003f80:	222d      	movlt	r2, #45	; 0x2d
 8003f82:	222b      	movge	r2, #43	; 0x2b
 8003f84:	2909      	cmp	r1, #9
 8003f86:	7042      	strb	r2, [r0, #1]
 8003f88:	dd2a      	ble.n	8003fe0 <__exponent+0x70>
 8003f8a:	f10d 0407 	add.w	r4, sp, #7
 8003f8e:	46a4      	mov	ip, r4
 8003f90:	270a      	movs	r7, #10
 8003f92:	46a6      	mov	lr, r4
 8003f94:	460a      	mov	r2, r1
 8003f96:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f9e:	3530      	adds	r5, #48	; 0x30
 8003fa0:	2a63      	cmp	r2, #99	; 0x63
 8003fa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003faa:	4631      	mov	r1, r6
 8003fac:	dcf1      	bgt.n	8003f92 <__exponent+0x22>
 8003fae:	3130      	adds	r1, #48	; 0x30
 8003fb0:	f1ae 0502 	sub.w	r5, lr, #2
 8003fb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003fb8:	1c44      	adds	r4, r0, #1
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4561      	cmp	r1, ip
 8003fbe:	d30a      	bcc.n	8003fd6 <__exponent+0x66>
 8003fc0:	f10d 0209 	add.w	r2, sp, #9
 8003fc4:	eba2 020e 	sub.w	r2, r2, lr
 8003fc8:	4565      	cmp	r5, ip
 8003fca:	bf88      	it	hi
 8003fcc:	2200      	movhi	r2, #0
 8003fce:	4413      	add	r3, r2
 8003fd0:	1a18      	subs	r0, r3, r0
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003fde:	e7ed      	b.n	8003fbc <__exponent+0x4c>
 8003fe0:	2330      	movs	r3, #48	; 0x30
 8003fe2:	3130      	adds	r1, #48	; 0x30
 8003fe4:	7083      	strb	r3, [r0, #2]
 8003fe6:	70c1      	strb	r1, [r0, #3]
 8003fe8:	1d03      	adds	r3, r0, #4
 8003fea:	e7f1      	b.n	8003fd0 <__exponent+0x60>

08003fec <_printf_float>:
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff0:	ed2d 8b02 	vpush	{d8}
 8003ff4:	b08d      	sub	sp, #52	; 0x34
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	461f      	mov	r7, r3
 8004000:	4605      	mov	r5, r0
 8004002:	f003 f98d 	bl	8007320 <_localeconv_r>
 8004006:	f8d0 a000 	ldr.w	sl, [r0]
 800400a:	4650      	mov	r0, sl
 800400c:	f7fc f8e0 	bl	80001d0 <strlen>
 8004010:	2300      	movs	r3, #0
 8004012:	930a      	str	r3, [sp, #40]	; 0x28
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	f8d8 3000 	ldr.w	r3, [r8]
 800401c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004020:	3307      	adds	r3, #7
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	f103 0208 	add.w	r2, r3, #8
 800402a:	f8c8 2000 	str.w	r2, [r8]
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004036:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800403a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800403e:	9307      	str	r3, [sp, #28]
 8004040:	f8cd 8018 	str.w	r8, [sp, #24]
 8004044:	ee08 0a10 	vmov	s16, r0
 8004048:	4b9f      	ldr	r3, [pc, #636]	; (80042c8 <_printf_float+0x2dc>)
 800404a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	f7fc fd6b 	bl	8000b2c <__aeabi_dcmpun>
 8004056:	bb88      	cbnz	r0, 80040bc <_printf_float+0xd0>
 8004058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800405c:	4b9a      	ldr	r3, [pc, #616]	; (80042c8 <_printf_float+0x2dc>)
 800405e:	f04f 32ff 	mov.w	r2, #4294967295
 8004062:	f7fc fd45 	bl	8000af0 <__aeabi_dcmple>
 8004066:	bb48      	cbnz	r0, 80040bc <_printf_float+0xd0>
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc fd34 	bl	8000adc <__aeabi_dcmplt>
 8004074:	b110      	cbz	r0, 800407c <_printf_float+0x90>
 8004076:	232d      	movs	r3, #45	; 0x2d
 8004078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407c:	4b93      	ldr	r3, [pc, #588]	; (80042cc <_printf_float+0x2e0>)
 800407e:	4894      	ldr	r0, [pc, #592]	; (80042d0 <_printf_float+0x2e4>)
 8004080:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004084:	bf94      	ite	ls
 8004086:	4698      	movls	r8, r3
 8004088:	4680      	movhi	r8, r0
 800408a:	2303      	movs	r3, #3
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	9b05      	ldr	r3, [sp, #20]
 8004090:	f023 0204 	bic.w	r2, r3, #4
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	f04f 0900 	mov.w	r9, #0
 800409a:	9700      	str	r7, [sp, #0]
 800409c:	4633      	mov	r3, r6
 800409e:	aa0b      	add	r2, sp, #44	; 0x2c
 80040a0:	4621      	mov	r1, r4
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f9d8 	bl	8004458 <_printf_common>
 80040a8:	3001      	adds	r0, #1
 80040aa:	f040 8090 	bne.w	80041ce <_printf_float+0x1e2>
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	b00d      	add	sp, #52	; 0x34
 80040b4:	ecbd 8b02 	vpop	{d8}
 80040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f7fc fd32 	bl	8000b2c <__aeabi_dcmpun>
 80040c8:	b140      	cbz	r0, 80040dc <_printf_float+0xf0>
 80040ca:	464b      	mov	r3, r9
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bfbc      	itt	lt
 80040d0:	232d      	movlt	r3, #45	; 0x2d
 80040d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040d6:	487f      	ldr	r0, [pc, #508]	; (80042d4 <_printf_float+0x2e8>)
 80040d8:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <_printf_float+0x2ec>)
 80040da:	e7d1      	b.n	8004080 <_printf_float+0x94>
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040e2:	9206      	str	r2, [sp, #24]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	d13f      	bne.n	8004168 <_printf_float+0x17c>
 80040e8:	2306      	movs	r3, #6
 80040ea:	6063      	str	r3, [r4, #4]
 80040ec:	9b05      	ldr	r3, [sp, #20]
 80040ee:	6861      	ldr	r1, [r4, #4]
 80040f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040f4:	2300      	movs	r3, #0
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	ab0a      	add	r3, sp, #40	; 0x28
 80040fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040fe:	ab09      	add	r3, sp, #36	; 0x24
 8004100:	ec49 8b10 	vmov	d0, r8, r9
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6022      	str	r2, [r4, #0]
 8004108:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800410c:	4628      	mov	r0, r5
 800410e:	f7ff fecd 	bl	8003eac <__cvt>
 8004112:	9b06      	ldr	r3, [sp, #24]
 8004114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004116:	2b47      	cmp	r3, #71	; 0x47
 8004118:	4680      	mov	r8, r0
 800411a:	d108      	bne.n	800412e <_printf_float+0x142>
 800411c:	1cc8      	adds	r0, r1, #3
 800411e:	db02      	blt.n	8004126 <_printf_float+0x13a>
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	4299      	cmp	r1, r3
 8004124:	dd41      	ble.n	80041aa <_printf_float+0x1be>
 8004126:	f1ab 0b02 	sub.w	fp, fp, #2
 800412a:	fa5f fb8b 	uxtb.w	fp, fp
 800412e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004132:	d820      	bhi.n	8004176 <_printf_float+0x18a>
 8004134:	3901      	subs	r1, #1
 8004136:	465a      	mov	r2, fp
 8004138:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800413c:	9109      	str	r1, [sp, #36]	; 0x24
 800413e:	f7ff ff17 	bl	8003f70 <__exponent>
 8004142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004144:	1813      	adds	r3, r2, r0
 8004146:	2a01      	cmp	r2, #1
 8004148:	4681      	mov	r9, r0
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	dc02      	bgt.n	8004154 <_printf_float+0x168>
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	07d2      	lsls	r2, r2, #31
 8004152:	d501      	bpl.n	8004158 <_printf_float+0x16c>
 8004154:	3301      	adds	r3, #1
 8004156:	6123      	str	r3, [r4, #16]
 8004158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800415c:	2b00      	cmp	r3, #0
 800415e:	d09c      	beq.n	800409a <_printf_float+0xae>
 8004160:	232d      	movs	r3, #45	; 0x2d
 8004162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004166:	e798      	b.n	800409a <_printf_float+0xae>
 8004168:	9a06      	ldr	r2, [sp, #24]
 800416a:	2a47      	cmp	r2, #71	; 0x47
 800416c:	d1be      	bne.n	80040ec <_printf_float+0x100>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1bc      	bne.n	80040ec <_printf_float+0x100>
 8004172:	2301      	movs	r3, #1
 8004174:	e7b9      	b.n	80040ea <_printf_float+0xfe>
 8004176:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800417a:	d118      	bne.n	80041ae <_printf_float+0x1c2>
 800417c:	2900      	cmp	r1, #0
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	dd0b      	ble.n	800419a <_printf_float+0x1ae>
 8004182:	6121      	str	r1, [r4, #16]
 8004184:	b913      	cbnz	r3, 800418c <_printf_float+0x1a0>
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	07d0      	lsls	r0, r2, #31
 800418a:	d502      	bpl.n	8004192 <_printf_float+0x1a6>
 800418c:	3301      	adds	r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	65a1      	str	r1, [r4, #88]	; 0x58
 8004194:	f04f 0900 	mov.w	r9, #0
 8004198:	e7de      	b.n	8004158 <_printf_float+0x16c>
 800419a:	b913      	cbnz	r3, 80041a2 <_printf_float+0x1b6>
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	07d2      	lsls	r2, r2, #31
 80041a0:	d501      	bpl.n	80041a6 <_printf_float+0x1ba>
 80041a2:	3302      	adds	r3, #2
 80041a4:	e7f4      	b.n	8004190 <_printf_float+0x1a4>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e7f2      	b.n	8004190 <_printf_float+0x1a4>
 80041aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80041ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b0:	4299      	cmp	r1, r3
 80041b2:	db05      	blt.n	80041c0 <_printf_float+0x1d4>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	6121      	str	r1, [r4, #16]
 80041b8:	07d8      	lsls	r0, r3, #31
 80041ba:	d5ea      	bpl.n	8004192 <_printf_float+0x1a6>
 80041bc:	1c4b      	adds	r3, r1, #1
 80041be:	e7e7      	b.n	8004190 <_printf_float+0x1a4>
 80041c0:	2900      	cmp	r1, #0
 80041c2:	bfd4      	ite	le
 80041c4:	f1c1 0202 	rsble	r2, r1, #2
 80041c8:	2201      	movgt	r2, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	e7e0      	b.n	8004190 <_printf_float+0x1a4>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	055a      	lsls	r2, r3, #21
 80041d2:	d407      	bmi.n	80041e4 <_printf_float+0x1f8>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	4642      	mov	r2, r8
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	47b8      	blx	r7
 80041de:	3001      	adds	r0, #1
 80041e0:	d12c      	bne.n	800423c <_printf_float+0x250>
 80041e2:	e764      	b.n	80040ae <_printf_float+0xc2>
 80041e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041e8:	f240 80e0 	bls.w	80043ac <_printf_float+0x3c0>
 80041ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041f0:	2200      	movs	r2, #0
 80041f2:	2300      	movs	r3, #0
 80041f4:	f7fc fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d034      	beq.n	8004266 <_printf_float+0x27a>
 80041fc:	4a37      	ldr	r2, [pc, #220]	; (80042dc <_printf_float+0x2f0>)
 80041fe:	2301      	movs	r3, #1
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	f43f af51 	beq.w	80040ae <_printf_float+0xc2>
 800420c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004210:	429a      	cmp	r2, r3
 8004212:	db02      	blt.n	800421a <_printf_float+0x22e>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	07d8      	lsls	r0, r3, #31
 8004218:	d510      	bpl.n	800423c <_printf_float+0x250>
 800421a:	ee18 3a10 	vmov	r3, s16
 800421e:	4652      	mov	r2, sl
 8004220:	4631      	mov	r1, r6
 8004222:	4628      	mov	r0, r5
 8004224:	47b8      	blx	r7
 8004226:	3001      	adds	r0, #1
 8004228:	f43f af41 	beq.w	80040ae <_printf_float+0xc2>
 800422c:	f04f 0800 	mov.w	r8, #0
 8004230:	f104 091a 	add.w	r9, r4, #26
 8004234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	4543      	cmp	r3, r8
 800423a:	dc09      	bgt.n	8004250 <_printf_float+0x264>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	079b      	lsls	r3, r3, #30
 8004240:	f100 8105 	bmi.w	800444e <_printf_float+0x462>
 8004244:	68e0      	ldr	r0, [r4, #12]
 8004246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004248:	4298      	cmp	r0, r3
 800424a:	bfb8      	it	lt
 800424c:	4618      	movlt	r0, r3
 800424e:	e730      	b.n	80040b2 <_printf_float+0xc6>
 8004250:	2301      	movs	r3, #1
 8004252:	464a      	mov	r2, r9
 8004254:	4631      	mov	r1, r6
 8004256:	4628      	mov	r0, r5
 8004258:	47b8      	blx	r7
 800425a:	3001      	adds	r0, #1
 800425c:	f43f af27 	beq.w	80040ae <_printf_float+0xc2>
 8004260:	f108 0801 	add.w	r8, r8, #1
 8004264:	e7e6      	b.n	8004234 <_printf_float+0x248>
 8004266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	dc39      	bgt.n	80042e0 <_printf_float+0x2f4>
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <_printf_float+0x2f0>)
 800426e:	2301      	movs	r3, #1
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af19 	beq.w	80040ae <_printf_float+0xc2>
 800427c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004280:	4313      	orrs	r3, r2
 8004282:	d102      	bne.n	800428a <_printf_float+0x29e>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	07d9      	lsls	r1, r3, #31
 8004288:	d5d8      	bpl.n	800423c <_printf_float+0x250>
 800428a:	ee18 3a10 	vmov	r3, s16
 800428e:	4652      	mov	r2, sl
 8004290:	4631      	mov	r1, r6
 8004292:	4628      	mov	r0, r5
 8004294:	47b8      	blx	r7
 8004296:	3001      	adds	r0, #1
 8004298:	f43f af09 	beq.w	80040ae <_printf_float+0xc2>
 800429c:	f04f 0900 	mov.w	r9, #0
 80042a0:	f104 0a1a 	add.w	sl, r4, #26
 80042a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a6:	425b      	negs	r3, r3
 80042a8:	454b      	cmp	r3, r9
 80042aa:	dc01      	bgt.n	80042b0 <_printf_float+0x2c4>
 80042ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ae:	e792      	b.n	80041d6 <_printf_float+0x1ea>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4652      	mov	r2, sl
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f aef7 	beq.w	80040ae <_printf_float+0xc2>
 80042c0:	f109 0901 	add.w	r9, r9, #1
 80042c4:	e7ee      	b.n	80042a4 <_printf_float+0x2b8>
 80042c6:	bf00      	nop
 80042c8:	7fefffff 	.word	0x7fefffff
 80042cc:	08008990 	.word	0x08008990
 80042d0:	08008994 	.word	0x08008994
 80042d4:	0800899c 	.word	0x0800899c
 80042d8:	08008998 	.word	0x08008998
 80042dc:	080089a0 	.word	0x080089a0
 80042e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e4:	429a      	cmp	r2, r3
 80042e6:	bfa8      	it	ge
 80042e8:	461a      	movge	r2, r3
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	4691      	mov	r9, r2
 80042ee:	dc37      	bgt.n	8004360 <_printf_float+0x374>
 80042f0:	f04f 0b00 	mov.w	fp, #0
 80042f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042f8:	f104 021a 	add.w	r2, r4, #26
 80042fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042fe:	9305      	str	r3, [sp, #20]
 8004300:	eba3 0309 	sub.w	r3, r3, r9
 8004304:	455b      	cmp	r3, fp
 8004306:	dc33      	bgt.n	8004370 <_printf_float+0x384>
 8004308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430c:	429a      	cmp	r2, r3
 800430e:	db3b      	blt.n	8004388 <_printf_float+0x39c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	07da      	lsls	r2, r3, #31
 8004314:	d438      	bmi.n	8004388 <_printf_float+0x39c>
 8004316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004318:	9a05      	ldr	r2, [sp, #20]
 800431a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800431c:	1a9a      	subs	r2, r3, r2
 800431e:	eba3 0901 	sub.w	r9, r3, r1
 8004322:	4591      	cmp	r9, r2
 8004324:	bfa8      	it	ge
 8004326:	4691      	movge	r9, r2
 8004328:	f1b9 0f00 	cmp.w	r9, #0
 800432c:	dc35      	bgt.n	800439a <_printf_float+0x3ae>
 800432e:	f04f 0800 	mov.w	r8, #0
 8004332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004336:	f104 0a1a 	add.w	sl, r4, #26
 800433a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	eba3 0309 	sub.w	r3, r3, r9
 8004344:	4543      	cmp	r3, r8
 8004346:	f77f af79 	ble.w	800423c <_printf_float+0x250>
 800434a:	2301      	movs	r3, #1
 800434c:	4652      	mov	r2, sl
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f aeaa 	beq.w	80040ae <_printf_float+0xc2>
 800435a:	f108 0801 	add.w	r8, r8, #1
 800435e:	e7ec      	b.n	800433a <_printf_float+0x34e>
 8004360:	4613      	mov	r3, r2
 8004362:	4631      	mov	r1, r6
 8004364:	4642      	mov	r2, r8
 8004366:	4628      	mov	r0, r5
 8004368:	47b8      	blx	r7
 800436a:	3001      	adds	r0, #1
 800436c:	d1c0      	bne.n	80042f0 <_printf_float+0x304>
 800436e:	e69e      	b.n	80040ae <_printf_float+0xc2>
 8004370:	2301      	movs	r3, #1
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	9205      	str	r2, [sp, #20]
 8004378:	47b8      	blx	r7
 800437a:	3001      	adds	r0, #1
 800437c:	f43f ae97 	beq.w	80040ae <_printf_float+0xc2>
 8004380:	9a05      	ldr	r2, [sp, #20]
 8004382:	f10b 0b01 	add.w	fp, fp, #1
 8004386:	e7b9      	b.n	80042fc <_printf_float+0x310>
 8004388:	ee18 3a10 	vmov	r3, s16
 800438c:	4652      	mov	r2, sl
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	d1be      	bne.n	8004316 <_printf_float+0x32a>
 8004398:	e689      	b.n	80040ae <_printf_float+0xc2>
 800439a:	9a05      	ldr	r2, [sp, #20]
 800439c:	464b      	mov	r3, r9
 800439e:	4442      	add	r2, r8
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	d1c1      	bne.n	800432e <_printf_float+0x342>
 80043aa:	e680      	b.n	80040ae <_printf_float+0xc2>
 80043ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ae:	2a01      	cmp	r2, #1
 80043b0:	dc01      	bgt.n	80043b6 <_printf_float+0x3ca>
 80043b2:	07db      	lsls	r3, r3, #31
 80043b4:	d538      	bpl.n	8004428 <_printf_float+0x43c>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4642      	mov	r2, r8
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f ae74 	beq.w	80040ae <_printf_float+0xc2>
 80043c6:	ee18 3a10 	vmov	r3, s16
 80043ca:	4652      	mov	r2, sl
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f ae6b 	beq.w	80040ae <_printf_float+0xc2>
 80043d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	f7fc fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 80043e4:	b9d8      	cbnz	r0, 800441e <_printf_float+0x432>
 80043e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e8:	f108 0201 	add.w	r2, r8, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	d10e      	bne.n	8004416 <_printf_float+0x42a>
 80043f8:	e659      	b.n	80040ae <_printf_float+0xc2>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f ae52 	beq.w	80040ae <_printf_float+0xc2>
 800440a:	f108 0801 	add.w	r8, r8, #1
 800440e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	4543      	cmp	r3, r8
 8004414:	dcf1      	bgt.n	80043fa <_printf_float+0x40e>
 8004416:	464b      	mov	r3, r9
 8004418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800441c:	e6dc      	b.n	80041d8 <_printf_float+0x1ec>
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	f104 0a1a 	add.w	sl, r4, #26
 8004426:	e7f2      	b.n	800440e <_printf_float+0x422>
 8004428:	2301      	movs	r3, #1
 800442a:	4642      	mov	r2, r8
 800442c:	e7df      	b.n	80043ee <_printf_float+0x402>
 800442e:	2301      	movs	r3, #1
 8004430:	464a      	mov	r2, r9
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	f43f ae38 	beq.w	80040ae <_printf_float+0xc2>
 800443e:	f108 0801 	add.w	r8, r8, #1
 8004442:	68e3      	ldr	r3, [r4, #12]
 8004444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004446:	1a5b      	subs	r3, r3, r1
 8004448:	4543      	cmp	r3, r8
 800444a:	dcf0      	bgt.n	800442e <_printf_float+0x442>
 800444c:	e6fa      	b.n	8004244 <_printf_float+0x258>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	f104 0919 	add.w	r9, r4, #25
 8004456:	e7f4      	b.n	8004442 <_printf_float+0x456>

08004458 <_printf_common>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	4616      	mov	r6, r2
 800445e:	4699      	mov	r9, r3
 8004460:	688a      	ldr	r2, [r1, #8]
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004468:	4293      	cmp	r3, r2
 800446a:	bfb8      	it	lt
 800446c:	4613      	movlt	r3, r2
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004474:	4607      	mov	r7, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b10a      	cbz	r2, 800447e <_printf_common+0x26>
 800447a:	3301      	adds	r3, #1
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	0699      	lsls	r1, r3, #26
 8004482:	bf42      	ittt	mi
 8004484:	6833      	ldrmi	r3, [r6, #0]
 8004486:	3302      	addmi	r3, #2
 8004488:	6033      	strmi	r3, [r6, #0]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	f015 0506 	ands.w	r5, r5, #6
 8004490:	d106      	bne.n	80044a0 <_printf_common+0x48>
 8004492:	f104 0a19 	add.w	sl, r4, #25
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	6832      	ldr	r2, [r6, #0]
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	42ab      	cmp	r3, r5
 800449e:	dc26      	bgt.n	80044ee <_printf_common+0x96>
 80044a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a4:	1e13      	subs	r3, r2, #0
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	bf18      	it	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	0692      	lsls	r2, r2, #26
 80044ae:	d42b      	bmi.n	8004508 <_printf_common+0xb0>
 80044b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d01e      	beq.n	80044fc <_printf_common+0xa4>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	68e5      	ldr	r5, [r4, #12]
 80044c2:	6832      	ldr	r2, [r6, #0]
 80044c4:	f003 0306 	and.w	r3, r3, #6
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	bf08      	it	eq
 80044cc:	1aad      	subeq	r5, r5, r2
 80044ce:	68a3      	ldr	r3, [r4, #8]
 80044d0:	6922      	ldr	r2, [r4, #16]
 80044d2:	bf0c      	ite	eq
 80044d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044d8:	2500      	movne	r5, #0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfc4      	itt	gt
 80044de:	1a9b      	subgt	r3, r3, r2
 80044e0:	18ed      	addgt	r5, r5, r3
 80044e2:	2600      	movs	r6, #0
 80044e4:	341a      	adds	r4, #26
 80044e6:	42b5      	cmp	r5, r6
 80044e8:	d11a      	bne.n	8004520 <_printf_common+0xc8>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e008      	b.n	8004500 <_printf_common+0xa8>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4649      	mov	r1, r9
 80044f4:	4638      	mov	r0, r7
 80044f6:	47c0      	blx	r8
 80044f8:	3001      	adds	r0, #1
 80044fa:	d103      	bne.n	8004504 <_printf_common+0xac>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004504:	3501      	adds	r5, #1
 8004506:	e7c6      	b.n	8004496 <_printf_common+0x3e>
 8004508:	18e1      	adds	r1, r4, r3
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	2030      	movs	r0, #48	; 0x30
 800450e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004512:	4422      	add	r2, r4
 8004514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800451c:	3302      	adds	r3, #2
 800451e:	e7c7      	b.n	80044b0 <_printf_common+0x58>
 8004520:	2301      	movs	r3, #1
 8004522:	4622      	mov	r2, r4
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d0e6      	beq.n	80044fc <_printf_common+0xa4>
 800452e:	3601      	adds	r6, #1
 8004530:	e7d9      	b.n	80044e6 <_printf_common+0x8e>
	...

08004534 <_printf_i>:
 8004534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	7e0f      	ldrb	r7, [r1, #24]
 800453a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800453c:	2f78      	cmp	r7, #120	; 0x78
 800453e:	4691      	mov	r9, r2
 8004540:	4680      	mov	r8, r0
 8004542:	460c      	mov	r4, r1
 8004544:	469a      	mov	sl, r3
 8004546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800454a:	d807      	bhi.n	800455c <_printf_i+0x28>
 800454c:	2f62      	cmp	r7, #98	; 0x62
 800454e:	d80a      	bhi.n	8004566 <_printf_i+0x32>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f000 80d8 	beq.w	8004706 <_printf_i+0x1d2>
 8004556:	2f58      	cmp	r7, #88	; 0x58
 8004558:	f000 80a3 	beq.w	80046a2 <_printf_i+0x16e>
 800455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004564:	e03a      	b.n	80045dc <_printf_i+0xa8>
 8004566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800456a:	2b15      	cmp	r3, #21
 800456c:	d8f6      	bhi.n	800455c <_printf_i+0x28>
 800456e:	a101      	add	r1, pc, #4	; (adr r1, 8004574 <_printf_i+0x40>)
 8004570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045e1 	.word	0x080045e1
 800457c:	0800455d 	.word	0x0800455d
 8004580:	0800455d 	.word	0x0800455d
 8004584:	0800455d 	.word	0x0800455d
 8004588:	0800455d 	.word	0x0800455d
 800458c:	080045e1 	.word	0x080045e1
 8004590:	0800455d 	.word	0x0800455d
 8004594:	0800455d 	.word	0x0800455d
 8004598:	0800455d 	.word	0x0800455d
 800459c:	0800455d 	.word	0x0800455d
 80045a0:	080046ed 	.word	0x080046ed
 80045a4:	08004611 	.word	0x08004611
 80045a8:	080046cf 	.word	0x080046cf
 80045ac:	0800455d 	.word	0x0800455d
 80045b0:	0800455d 	.word	0x0800455d
 80045b4:	0800470f 	.word	0x0800470f
 80045b8:	0800455d 	.word	0x0800455d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800455d 	.word	0x0800455d
 80045c4:	0800455d 	.word	0x0800455d
 80045c8:	080046d7 	.word	0x080046d7
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	602a      	str	r2, [r5, #0]
 80045d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e0a3      	b.n	8004728 <_printf_i+0x1f4>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	6829      	ldr	r1, [r5, #0]
 80045e4:	0606      	lsls	r6, r0, #24
 80045e6:	f101 0304 	add.w	r3, r1, #4
 80045ea:	d50a      	bpl.n	8004602 <_printf_i+0xce>
 80045ec:	680e      	ldr	r6, [r1, #0]
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	2e00      	cmp	r6, #0
 80045f2:	da03      	bge.n	80045fc <_printf_i+0xc8>
 80045f4:	232d      	movs	r3, #45	; 0x2d
 80045f6:	4276      	negs	r6, r6
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	485e      	ldr	r0, [pc, #376]	; (8004778 <_printf_i+0x244>)
 80045fe:	230a      	movs	r3, #10
 8004600:	e019      	b.n	8004636 <_printf_i+0x102>
 8004602:	680e      	ldr	r6, [r1, #0]
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800460a:	bf18      	it	ne
 800460c:	b236      	sxthne	r6, r6
 800460e:	e7ef      	b.n	80045f0 <_printf_i+0xbc>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	6029      	str	r1, [r5, #0]
 8004618:	0601      	lsls	r1, r0, #24
 800461a:	d501      	bpl.n	8004620 <_printf_i+0xec>
 800461c:	681e      	ldr	r6, [r3, #0]
 800461e:	e002      	b.n	8004626 <_printf_i+0xf2>
 8004620:	0646      	lsls	r6, r0, #25
 8004622:	d5fb      	bpl.n	800461c <_printf_i+0xe8>
 8004624:	881e      	ldrh	r6, [r3, #0]
 8004626:	4854      	ldr	r0, [pc, #336]	; (8004778 <_printf_i+0x244>)
 8004628:	2f6f      	cmp	r7, #111	; 0x6f
 800462a:	bf0c      	ite	eq
 800462c:	2308      	moveq	r3, #8
 800462e:	230a      	movne	r3, #10
 8004630:	2100      	movs	r1, #0
 8004632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004636:	6865      	ldr	r5, [r4, #4]
 8004638:	60a5      	str	r5, [r4, #8]
 800463a:	2d00      	cmp	r5, #0
 800463c:	bfa2      	ittt	ge
 800463e:	6821      	ldrge	r1, [r4, #0]
 8004640:	f021 0104 	bicge.w	r1, r1, #4
 8004644:	6021      	strge	r1, [r4, #0]
 8004646:	b90e      	cbnz	r6, 800464c <_printf_i+0x118>
 8004648:	2d00      	cmp	r5, #0
 800464a:	d04d      	beq.n	80046e8 <_printf_i+0x1b4>
 800464c:	4615      	mov	r5, r2
 800464e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004652:	fb03 6711 	mls	r7, r3, r1, r6
 8004656:	5dc7      	ldrb	r7, [r0, r7]
 8004658:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800465c:	4637      	mov	r7, r6
 800465e:	42bb      	cmp	r3, r7
 8004660:	460e      	mov	r6, r1
 8004662:	d9f4      	bls.n	800464e <_printf_i+0x11a>
 8004664:	2b08      	cmp	r3, #8
 8004666:	d10b      	bne.n	8004680 <_printf_i+0x14c>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	07de      	lsls	r6, r3, #31
 800466c:	d508      	bpl.n	8004680 <_printf_i+0x14c>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	6861      	ldr	r1, [r4, #4]
 8004672:	4299      	cmp	r1, r3
 8004674:	bfde      	ittt	le
 8004676:	2330      	movle	r3, #48	; 0x30
 8004678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800467c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004680:	1b52      	subs	r2, r2, r5
 8004682:	6122      	str	r2, [r4, #16]
 8004684:	f8cd a000 	str.w	sl, [sp]
 8004688:	464b      	mov	r3, r9
 800468a:	aa03      	add	r2, sp, #12
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f7ff fee2 	bl	8004458 <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	d14c      	bne.n	8004732 <_printf_i+0x1fe>
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	b004      	add	sp, #16
 800469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a2:	4835      	ldr	r0, [pc, #212]	; (8004778 <_printf_i+0x244>)
 80046a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046a8:	6829      	ldr	r1, [r5, #0]
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b0:	6029      	str	r1, [r5, #0]
 80046b2:	061d      	lsls	r5, r3, #24
 80046b4:	d514      	bpl.n	80046e0 <_printf_i+0x1ac>
 80046b6:	07df      	lsls	r7, r3, #31
 80046b8:	bf44      	itt	mi
 80046ba:	f043 0320 	orrmi.w	r3, r3, #32
 80046be:	6023      	strmi	r3, [r4, #0]
 80046c0:	b91e      	cbnz	r6, 80046ca <_printf_i+0x196>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f023 0320 	bic.w	r3, r3, #32
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	2310      	movs	r3, #16
 80046cc:	e7b0      	b.n	8004630 <_printf_i+0xfc>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f043 0320 	orr.w	r3, r3, #32
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	2378      	movs	r3, #120	; 0x78
 80046d8:	4828      	ldr	r0, [pc, #160]	; (800477c <_printf_i+0x248>)
 80046da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046de:	e7e3      	b.n	80046a8 <_printf_i+0x174>
 80046e0:	0659      	lsls	r1, r3, #25
 80046e2:	bf48      	it	mi
 80046e4:	b2b6      	uxthmi	r6, r6
 80046e6:	e7e6      	b.n	80046b6 <_printf_i+0x182>
 80046e8:	4615      	mov	r5, r2
 80046ea:	e7bb      	b.n	8004664 <_printf_i+0x130>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	6826      	ldr	r6, [r4, #0]
 80046f0:	6961      	ldr	r1, [r4, #20]
 80046f2:	1d18      	adds	r0, r3, #4
 80046f4:	6028      	str	r0, [r5, #0]
 80046f6:	0635      	lsls	r5, r6, #24
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	d501      	bpl.n	8004700 <_printf_i+0x1cc>
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	e002      	b.n	8004706 <_printf_i+0x1d2>
 8004700:	0670      	lsls	r0, r6, #25
 8004702:	d5fb      	bpl.n	80046fc <_printf_i+0x1c8>
 8004704:	8019      	strh	r1, [r3, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	6123      	str	r3, [r4, #16]
 800470a:	4615      	mov	r5, r2
 800470c:	e7ba      	b.n	8004684 <_printf_i+0x150>
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	1d1a      	adds	r2, r3, #4
 8004712:	602a      	str	r2, [r5, #0]
 8004714:	681d      	ldr	r5, [r3, #0]
 8004716:	6862      	ldr	r2, [r4, #4]
 8004718:	2100      	movs	r1, #0
 800471a:	4628      	mov	r0, r5
 800471c:	f7fb fd60 	bl	80001e0 <memchr>
 8004720:	b108      	cbz	r0, 8004726 <_printf_i+0x1f2>
 8004722:	1b40      	subs	r0, r0, r5
 8004724:	6060      	str	r0, [r4, #4]
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	2300      	movs	r3, #0
 800472c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004730:	e7a8      	b.n	8004684 <_printf_i+0x150>
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	462a      	mov	r2, r5
 8004736:	4649      	mov	r1, r9
 8004738:	4640      	mov	r0, r8
 800473a:	47d0      	blx	sl
 800473c:	3001      	adds	r0, #1
 800473e:	d0ab      	beq.n	8004698 <_printf_i+0x164>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	079b      	lsls	r3, r3, #30
 8004744:	d413      	bmi.n	800476e <_printf_i+0x23a>
 8004746:	68e0      	ldr	r0, [r4, #12]
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	4298      	cmp	r0, r3
 800474c:	bfb8      	it	lt
 800474e:	4618      	movlt	r0, r3
 8004750:	e7a4      	b.n	800469c <_printf_i+0x168>
 8004752:	2301      	movs	r3, #1
 8004754:	4632      	mov	r2, r6
 8004756:	4649      	mov	r1, r9
 8004758:	4640      	mov	r0, r8
 800475a:	47d0      	blx	sl
 800475c:	3001      	adds	r0, #1
 800475e:	d09b      	beq.n	8004698 <_printf_i+0x164>
 8004760:	3501      	adds	r5, #1
 8004762:	68e3      	ldr	r3, [r4, #12]
 8004764:	9903      	ldr	r1, [sp, #12]
 8004766:	1a5b      	subs	r3, r3, r1
 8004768:	42ab      	cmp	r3, r5
 800476a:	dcf2      	bgt.n	8004752 <_printf_i+0x21e>
 800476c:	e7eb      	b.n	8004746 <_printf_i+0x212>
 800476e:	2500      	movs	r5, #0
 8004770:	f104 0619 	add.w	r6, r4, #25
 8004774:	e7f5      	b.n	8004762 <_printf_i+0x22e>
 8004776:	bf00      	nop
 8004778:	080089a2 	.word	0x080089a2
 800477c:	080089b3 	.word	0x080089b3

08004780 <_scanf_float>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	b087      	sub	sp, #28
 8004786:	4617      	mov	r7, r2
 8004788:	9303      	str	r3, [sp, #12]
 800478a:	688b      	ldr	r3, [r1, #8]
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004792:	bf83      	ittte	hi
 8004794:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004798:	195b      	addhi	r3, r3, r5
 800479a:	9302      	strhi	r3, [sp, #8]
 800479c:	2300      	movls	r3, #0
 800479e:	bf86      	itte	hi
 80047a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047a4:	608b      	strhi	r3, [r1, #8]
 80047a6:	9302      	strls	r3, [sp, #8]
 80047a8:	680b      	ldr	r3, [r1, #0]
 80047aa:	468b      	mov	fp, r1
 80047ac:	2500      	movs	r5, #0
 80047ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80047b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80047b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80047ba:	4680      	mov	r8, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	465e      	mov	r6, fp
 80047c0:	46aa      	mov	sl, r5
 80047c2:	46a9      	mov	r9, r5
 80047c4:	9501      	str	r5, [sp, #4]
 80047c6:	68a2      	ldr	r2, [r4, #8]
 80047c8:	b152      	cbz	r2, 80047e0 <_scanf_float+0x60>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b4e      	cmp	r3, #78	; 0x4e
 80047d0:	d864      	bhi.n	800489c <_scanf_float+0x11c>
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d83c      	bhi.n	8004850 <_scanf_float+0xd0>
 80047d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047da:	b2c8      	uxtb	r0, r1
 80047dc:	280e      	cmp	r0, #14
 80047de:	d93a      	bls.n	8004856 <_scanf_float+0xd6>
 80047e0:	f1b9 0f00 	cmp.w	r9, #0
 80047e4:	d003      	beq.n	80047ee <_scanf_float+0x6e>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047f2:	f1ba 0f01 	cmp.w	sl, #1
 80047f6:	f200 8113 	bhi.w	8004a20 <_scanf_float+0x2a0>
 80047fa:	455e      	cmp	r6, fp
 80047fc:	f200 8105 	bhi.w	8004a0a <_scanf_float+0x28a>
 8004800:	2501      	movs	r5, #1
 8004802:	4628      	mov	r0, r5
 8004804:	b007      	add	sp, #28
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800480e:	2a0d      	cmp	r2, #13
 8004810:	d8e6      	bhi.n	80047e0 <_scanf_float+0x60>
 8004812:	a101      	add	r1, pc, #4	; (adr r1, 8004818 <_scanf_float+0x98>)
 8004814:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004818:	08004957 	.word	0x08004957
 800481c:	080047e1 	.word	0x080047e1
 8004820:	080047e1 	.word	0x080047e1
 8004824:	080047e1 	.word	0x080047e1
 8004828:	080049b7 	.word	0x080049b7
 800482c:	0800498f 	.word	0x0800498f
 8004830:	080047e1 	.word	0x080047e1
 8004834:	080047e1 	.word	0x080047e1
 8004838:	08004965 	.word	0x08004965
 800483c:	080047e1 	.word	0x080047e1
 8004840:	080047e1 	.word	0x080047e1
 8004844:	080047e1 	.word	0x080047e1
 8004848:	080047e1 	.word	0x080047e1
 800484c:	0800491d 	.word	0x0800491d
 8004850:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004854:	e7db      	b.n	800480e <_scanf_float+0x8e>
 8004856:	290e      	cmp	r1, #14
 8004858:	d8c2      	bhi.n	80047e0 <_scanf_float+0x60>
 800485a:	a001      	add	r0, pc, #4	; (adr r0, 8004860 <_scanf_float+0xe0>)
 800485c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004860:	0800490f 	.word	0x0800490f
 8004864:	080047e1 	.word	0x080047e1
 8004868:	0800490f 	.word	0x0800490f
 800486c:	080049a3 	.word	0x080049a3
 8004870:	080047e1 	.word	0x080047e1
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048f9 	.word	0x080048f9
 800487c:	080048f9 	.word	0x080048f9
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048f9 	.word	0x080048f9
 8004890:	080048f9 	.word	0x080048f9
 8004894:	080048f9 	.word	0x080048f9
 8004898:	080048f9 	.word	0x080048f9
 800489c:	2b6e      	cmp	r3, #110	; 0x6e
 800489e:	d809      	bhi.n	80048b4 <_scanf_float+0x134>
 80048a0:	2b60      	cmp	r3, #96	; 0x60
 80048a2:	d8b2      	bhi.n	800480a <_scanf_float+0x8a>
 80048a4:	2b54      	cmp	r3, #84	; 0x54
 80048a6:	d077      	beq.n	8004998 <_scanf_float+0x218>
 80048a8:	2b59      	cmp	r3, #89	; 0x59
 80048aa:	d199      	bne.n	80047e0 <_scanf_float+0x60>
 80048ac:	2d07      	cmp	r5, #7
 80048ae:	d197      	bne.n	80047e0 <_scanf_float+0x60>
 80048b0:	2508      	movs	r5, #8
 80048b2:	e029      	b.n	8004908 <_scanf_float+0x188>
 80048b4:	2b74      	cmp	r3, #116	; 0x74
 80048b6:	d06f      	beq.n	8004998 <_scanf_float+0x218>
 80048b8:	2b79      	cmp	r3, #121	; 0x79
 80048ba:	e7f6      	b.n	80048aa <_scanf_float+0x12a>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	05c8      	lsls	r0, r1, #23
 80048c0:	d51a      	bpl.n	80048f8 <_scanf_float+0x178>
 80048c2:	9b02      	ldr	r3, [sp, #8]
 80048c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80048c8:	6021      	str	r1, [r4, #0]
 80048ca:	f109 0901 	add.w	r9, r9, #1
 80048ce:	b11b      	cbz	r3, 80048d8 <_scanf_float+0x158>
 80048d0:	3b01      	subs	r3, #1
 80048d2:	3201      	adds	r2, #1
 80048d4:	9302      	str	r3, [sp, #8]
 80048d6:	60a2      	str	r2, [r4, #8]
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60a3      	str	r3, [r4, #8]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	3301      	adds	r3, #1
 80048e2:	6123      	str	r3, [r4, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	f340 8084 	ble.w	80049f8 <_scanf_float+0x278>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	e766      	b.n	80047c6 <_scanf_float+0x46>
 80048f8:	eb1a 0f05 	cmn.w	sl, r5
 80048fc:	f47f af70 	bne.w	80047e0 <_scanf_float+0x60>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	f806 3b01 	strb.w	r3, [r6], #1
 800490c:	e7e4      	b.n	80048d8 <_scanf_float+0x158>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	0610      	lsls	r0, r2, #24
 8004912:	f57f af65 	bpl.w	80047e0 <_scanf_float+0x60>
 8004916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800491a:	e7f4      	b.n	8004906 <_scanf_float+0x186>
 800491c:	f1ba 0f00 	cmp.w	sl, #0
 8004920:	d10e      	bne.n	8004940 <_scanf_float+0x1c0>
 8004922:	f1b9 0f00 	cmp.w	r9, #0
 8004926:	d10e      	bne.n	8004946 <_scanf_float+0x1c6>
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800492e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004932:	d108      	bne.n	8004946 <_scanf_float+0x1c6>
 8004934:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004938:	6022      	str	r2, [r4, #0]
 800493a:	f04f 0a01 	mov.w	sl, #1
 800493e:	e7e3      	b.n	8004908 <_scanf_float+0x188>
 8004940:	f1ba 0f02 	cmp.w	sl, #2
 8004944:	d055      	beq.n	80049f2 <_scanf_float+0x272>
 8004946:	2d01      	cmp	r5, #1
 8004948:	d002      	beq.n	8004950 <_scanf_float+0x1d0>
 800494a:	2d04      	cmp	r5, #4
 800494c:	f47f af48 	bne.w	80047e0 <_scanf_float+0x60>
 8004950:	3501      	adds	r5, #1
 8004952:	b2ed      	uxtb	r5, r5
 8004954:	e7d8      	b.n	8004908 <_scanf_float+0x188>
 8004956:	f1ba 0f01 	cmp.w	sl, #1
 800495a:	f47f af41 	bne.w	80047e0 <_scanf_float+0x60>
 800495e:	f04f 0a02 	mov.w	sl, #2
 8004962:	e7d1      	b.n	8004908 <_scanf_float+0x188>
 8004964:	b97d      	cbnz	r5, 8004986 <_scanf_float+0x206>
 8004966:	f1b9 0f00 	cmp.w	r9, #0
 800496a:	f47f af3c 	bne.w	80047e6 <_scanf_float+0x66>
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004974:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004978:	f47f af39 	bne.w	80047ee <_scanf_float+0x6e>
 800497c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	2501      	movs	r5, #1
 8004984:	e7c0      	b.n	8004908 <_scanf_float+0x188>
 8004986:	2d03      	cmp	r5, #3
 8004988:	d0e2      	beq.n	8004950 <_scanf_float+0x1d0>
 800498a:	2d05      	cmp	r5, #5
 800498c:	e7de      	b.n	800494c <_scanf_float+0x1cc>
 800498e:	2d02      	cmp	r5, #2
 8004990:	f47f af26 	bne.w	80047e0 <_scanf_float+0x60>
 8004994:	2503      	movs	r5, #3
 8004996:	e7b7      	b.n	8004908 <_scanf_float+0x188>
 8004998:	2d06      	cmp	r5, #6
 800499a:	f47f af21 	bne.w	80047e0 <_scanf_float+0x60>
 800499e:	2507      	movs	r5, #7
 80049a0:	e7b2      	b.n	8004908 <_scanf_float+0x188>
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	0591      	lsls	r1, r2, #22
 80049a6:	f57f af1b 	bpl.w	80047e0 <_scanf_float+0x60>
 80049aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80049b4:	e7a8      	b.n	8004908 <_scanf_float+0x188>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80049bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049c0:	d006      	beq.n	80049d0 <_scanf_float+0x250>
 80049c2:	0550      	lsls	r0, r2, #21
 80049c4:	f57f af0c 	bpl.w	80047e0 <_scanf_float+0x60>
 80049c8:	f1b9 0f00 	cmp.w	r9, #0
 80049cc:	f43f af0f 	beq.w	80047ee <_scanf_float+0x6e>
 80049d0:	0591      	lsls	r1, r2, #22
 80049d2:	bf58      	it	pl
 80049d4:	9901      	ldrpl	r1, [sp, #4]
 80049d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049da:	bf58      	it	pl
 80049dc:	eba9 0101 	subpl.w	r1, r9, r1
 80049e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80049e4:	bf58      	it	pl
 80049e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049ea:	6022      	str	r2, [r4, #0]
 80049ec:	f04f 0900 	mov.w	r9, #0
 80049f0:	e78a      	b.n	8004908 <_scanf_float+0x188>
 80049f2:	f04f 0a03 	mov.w	sl, #3
 80049f6:	e787      	b.n	8004908 <_scanf_float+0x188>
 80049f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049fc:	4639      	mov	r1, r7
 80049fe:	4640      	mov	r0, r8
 8004a00:	4798      	blx	r3
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f43f aedf 	beq.w	80047c6 <_scanf_float+0x46>
 8004a08:	e6ea      	b.n	80047e0 <_scanf_float+0x60>
 8004a0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a12:	463a      	mov	r2, r7
 8004a14:	4640      	mov	r0, r8
 8004a16:	4798      	blx	r3
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	e6ec      	b.n	80047fa <_scanf_float+0x7a>
 8004a20:	1e6b      	subs	r3, r5, #1
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d825      	bhi.n	8004a72 <_scanf_float+0x2f2>
 8004a26:	2d02      	cmp	r5, #2
 8004a28:	d836      	bhi.n	8004a98 <_scanf_float+0x318>
 8004a2a:	455e      	cmp	r6, fp
 8004a2c:	f67f aee8 	bls.w	8004800 <_scanf_float+0x80>
 8004a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a38:	463a      	mov	r2, r7
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	4798      	blx	r3
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	e7f1      	b.n	8004a2a <_scanf_float+0x2aa>
 8004a46:	9802      	ldr	r0, [sp, #8]
 8004a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a50:	9002      	str	r0, [sp, #8]
 8004a52:	463a      	mov	r2, r7
 8004a54:	4640      	mov	r0, r8
 8004a56:	4798      	blx	r3
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a62:	fa5f fa8a 	uxtb.w	sl, sl
 8004a66:	f1ba 0f02 	cmp.w	sl, #2
 8004a6a:	d1ec      	bne.n	8004a46 <_scanf_float+0x2c6>
 8004a6c:	3d03      	subs	r5, #3
 8004a6e:	b2ed      	uxtb	r5, r5
 8004a70:	1b76      	subs	r6, r6, r5
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	05da      	lsls	r2, r3, #23
 8004a76:	d52f      	bpl.n	8004ad8 <_scanf_float+0x358>
 8004a78:	055b      	lsls	r3, r3, #21
 8004a7a:	d510      	bpl.n	8004a9e <_scanf_float+0x31e>
 8004a7c:	455e      	cmp	r6, fp
 8004a7e:	f67f aebf 	bls.w	8004800 <_scanf_float+0x80>
 8004a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a8a:	463a      	mov	r2, r7
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4798      	blx	r3
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	e7f1      	b.n	8004a7c <_scanf_float+0x2fc>
 8004a98:	46aa      	mov	sl, r5
 8004a9a:	9602      	str	r6, [sp, #8]
 8004a9c:	e7df      	b.n	8004a5e <_scanf_float+0x2de>
 8004a9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	2965      	cmp	r1, #101	; 0x65
 8004aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aaa:	f106 35ff 	add.w	r5, r6, #4294967295
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	d00c      	beq.n	8004acc <_scanf_float+0x34c>
 8004ab2:	2945      	cmp	r1, #69	; 0x45
 8004ab4:	d00a      	beq.n	8004acc <_scanf_float+0x34c>
 8004ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aba:	463a      	mov	r2, r7
 8004abc:	4640      	mov	r0, r8
 8004abe:	4798      	blx	r3
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	1eb5      	subs	r5, r6, #2
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	4798      	blx	r3
 8004ad6:	462e      	mov	r6, r5
 8004ad8:	6825      	ldr	r5, [r4, #0]
 8004ada:	f015 0510 	ands.w	r5, r5, #16
 8004ade:	d159      	bne.n	8004b94 <_scanf_float+0x414>
 8004ae0:	7035      	strb	r5, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d11b      	bne.n	8004b26 <_scanf_float+0x3a6>
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	454b      	cmp	r3, r9
 8004af2:	eba3 0209 	sub.w	r2, r3, r9
 8004af6:	d123      	bne.n	8004b40 <_scanf_float+0x3c0>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4659      	mov	r1, fp
 8004afc:	4640      	mov	r0, r8
 8004afe:	f000 ff25 	bl	800594c <_strtod_r>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	f012 0f02 	tst.w	r2, #2
 8004b0a:	ec57 6b10 	vmov	r6, r7, d0
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	d021      	beq.n	8004b56 <_scanf_float+0x3d6>
 8004b12:	9903      	ldr	r1, [sp, #12]
 8004b14:	1d1a      	adds	r2, r3, #4
 8004b16:	600a      	str	r2, [r1, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	e9c3 6700 	strd	r6, r7, [r3]
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60e3      	str	r3, [r4, #12]
 8004b24:	e66d      	b.n	8004802 <_scanf_float+0x82>
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0e5      	beq.n	8004af8 <_scanf_float+0x378>
 8004b2c:	9905      	ldr	r1, [sp, #20]
 8004b2e:	230a      	movs	r3, #10
 8004b30:	462a      	mov	r2, r5
 8004b32:	3101      	adds	r1, #1
 8004b34:	4640      	mov	r0, r8
 8004b36:	f000 ff91 	bl	8005a5c <_strtol_r>
 8004b3a:	9b04      	ldr	r3, [sp, #16]
 8004b3c:	9e05      	ldr	r6, [sp, #20]
 8004b3e:	1ac2      	subs	r2, r0, r3
 8004b40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b44:	429e      	cmp	r6, r3
 8004b46:	bf28      	it	cs
 8004b48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b4c:	4912      	ldr	r1, [pc, #72]	; (8004b98 <_scanf_float+0x418>)
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f000 f8ba 	bl	8004cc8 <siprintf>
 8004b54:	e7d0      	b.n	8004af8 <_scanf_float+0x378>
 8004b56:	9903      	ldr	r1, [sp, #12]
 8004b58:	f012 0f04 	tst.w	r2, #4
 8004b5c:	f103 0204 	add.w	r2, r3, #4
 8004b60:	600a      	str	r2, [r1, #0]
 8004b62:	d1d9      	bne.n	8004b18 <_scanf_float+0x398>
 8004b64:	f8d3 8000 	ldr.w	r8, [r3]
 8004b68:	ee10 2a10 	vmov	r2, s0
 8004b6c:	ee10 0a10 	vmov	r0, s0
 8004b70:	463b      	mov	r3, r7
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb ffda 	bl	8000b2c <__aeabi_dcmpun>
 8004b78:	b128      	cbz	r0, 8004b86 <_scanf_float+0x406>
 8004b7a:	4808      	ldr	r0, [pc, #32]	; (8004b9c <_scanf_float+0x41c>)
 8004b7c:	f000 f89e 	bl	8004cbc <nanf>
 8004b80:	ed88 0a00 	vstr	s0, [r8]
 8004b84:	e7cb      	b.n	8004b1e <_scanf_float+0x39e>
 8004b86:	4630      	mov	r0, r6
 8004b88:	4639      	mov	r1, r7
 8004b8a:	f7fc f82d 	bl	8000be8 <__aeabi_d2f>
 8004b8e:	f8c8 0000 	str.w	r0, [r8]
 8004b92:	e7c4      	b.n	8004b1e <_scanf_float+0x39e>
 8004b94:	2500      	movs	r5, #0
 8004b96:	e634      	b.n	8004802 <_scanf_float+0x82>
 8004b98:	080089c4 	.word	0x080089c4
 8004b9c:	08008e38 	.word	0x08008e38

08004ba0 <iprintf>:
 8004ba0:	b40f      	push	{r0, r1, r2, r3}
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <iprintf+0x2c>)
 8004ba4:	b513      	push	{r0, r1, r4, lr}
 8004ba6:	681c      	ldr	r4, [r3, #0]
 8004ba8:	b124      	cbz	r4, 8004bb4 <iprintf+0x14>
 8004baa:	69a3      	ldr	r3, [r4, #24]
 8004bac:	b913      	cbnz	r3, 8004bb4 <iprintf+0x14>
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f001 ffaa 	bl	8006b08 <__sinit>
 8004bb4:	ab05      	add	r3, sp, #20
 8004bb6:	9a04      	ldr	r2, [sp, #16]
 8004bb8:	68a1      	ldr	r1, [r4, #8]
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f003 fb81 	bl	80082c4 <_vfiprintf_r>
 8004bc2:	b002      	add	sp, #8
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	b004      	add	sp, #16
 8004bca:	4770      	bx	lr
 8004bcc:	20000014 	.word	0x20000014

08004bd0 <_puts_r>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	460e      	mov	r6, r1
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	b118      	cbz	r0, 8004be0 <_puts_r+0x10>
 8004bd8:	6983      	ldr	r3, [r0, #24]
 8004bda:	b90b      	cbnz	r3, 8004be0 <_puts_r+0x10>
 8004bdc:	f001 ff94 	bl	8006b08 <__sinit>
 8004be0:	69ab      	ldr	r3, [r5, #24]
 8004be2:	68ac      	ldr	r4, [r5, #8]
 8004be4:	b913      	cbnz	r3, 8004bec <_puts_r+0x1c>
 8004be6:	4628      	mov	r0, r5
 8004be8:	f001 ff8e 	bl	8006b08 <__sinit>
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <_puts_r+0xd0>)
 8004bee:	429c      	cmp	r4, r3
 8004bf0:	d120      	bne.n	8004c34 <_puts_r+0x64>
 8004bf2:	686c      	ldr	r4, [r5, #4]
 8004bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf6:	07db      	lsls	r3, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <_puts_r+0x36>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	0598      	lsls	r0, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <_puts_r+0x36>
 8004c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c02:	f002 fb92 	bl	800732a <__retarget_lock_acquire_recursive>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d51d      	bpl.n	8004c48 <_puts_r+0x78>
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	b1db      	cbz	r3, 8004c48 <_puts_r+0x78>
 8004c10:	3e01      	subs	r6, #1
 8004c12:	68a3      	ldr	r3, [r4, #8]
 8004c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	60a3      	str	r3, [r4, #8]
 8004c1c:	bb39      	cbnz	r1, 8004c6e <_puts_r+0x9e>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da38      	bge.n	8004c94 <_puts_r+0xc4>
 8004c22:	4622      	mov	r2, r4
 8004c24:	210a      	movs	r1, #10
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 ff1a 	bl	8005a60 <__swbuf_r>
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d011      	beq.n	8004c54 <_puts_r+0x84>
 8004c30:	250a      	movs	r5, #10
 8004c32:	e011      	b.n	8004c58 <_puts_r+0x88>
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <_puts_r+0xd4>)
 8004c36:	429c      	cmp	r4, r3
 8004c38:	d101      	bne.n	8004c3e <_puts_r+0x6e>
 8004c3a:	68ac      	ldr	r4, [r5, #8]
 8004c3c:	e7da      	b.n	8004bf4 <_puts_r+0x24>
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <_puts_r+0xd8>)
 8004c40:	429c      	cmp	r4, r3
 8004c42:	bf08      	it	eq
 8004c44:	68ec      	ldreq	r4, [r5, #12]
 8004c46:	e7d5      	b.n	8004bf4 <_puts_r+0x24>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 ff5a 	bl	8005b04 <__swsetup_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d0dd      	beq.n	8004c10 <_puts_r+0x40>
 8004c54:	f04f 35ff 	mov.w	r5, #4294967295
 8004c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c5a:	07da      	lsls	r2, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_puts_r+0x9a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	059b      	lsls	r3, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_puts_r+0x9a>
 8004c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c66:	f002 fb61 	bl	800732c <__retarget_lock_release_recursive>
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	da04      	bge.n	8004c7c <_puts_r+0xac>
 8004c72:	69a2      	ldr	r2, [r4, #24]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	dc06      	bgt.n	8004c86 <_puts_r+0xb6>
 8004c78:	290a      	cmp	r1, #10
 8004c7a:	d004      	beq.n	8004c86 <_puts_r+0xb6>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	6022      	str	r2, [r4, #0]
 8004c82:	7019      	strb	r1, [r3, #0]
 8004c84:	e7c5      	b.n	8004c12 <_puts_r+0x42>
 8004c86:	4622      	mov	r2, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 fee9 	bl	8005a60 <__swbuf_r>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d1bf      	bne.n	8004c12 <_puts_r+0x42>
 8004c92:	e7df      	b.n	8004c54 <_puts_r+0x84>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	250a      	movs	r5, #10
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	6022      	str	r2, [r4, #0]
 8004c9c:	701d      	strb	r5, [r3, #0]
 8004c9e:	e7db      	b.n	8004c58 <_puts_r+0x88>
 8004ca0:	08008bd4 	.word	0x08008bd4
 8004ca4:	08008bf4 	.word	0x08008bf4
 8004ca8:	08008bb4 	.word	0x08008bb4

08004cac <puts>:
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <puts+0xc>)
 8004cae:	4601      	mov	r1, r0
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	f7ff bf8d 	b.w	8004bd0 <_puts_r>
 8004cb6:	bf00      	nop
 8004cb8:	20000014 	.word	0x20000014

08004cbc <nanf>:
 8004cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004cc4 <nanf+0x8>
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	7fc00000 	.word	0x7fc00000

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <siprintf+0x38>)
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	9104      	str	r1, [sp, #16]
 8004cde:	4909      	ldr	r1, [pc, #36]	; (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	f003 f9c0 	bl	8008070 <_svfiprintf_r>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	; 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	20000014 	.word	0x20000014
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <sulp>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	ec45 4b10 	vmov	d0, r4, r5
 8004d12:	4616      	mov	r6, r2
 8004d14:	f002 ff0a 	bl	8007b2c <__ulp>
 8004d18:	ec51 0b10 	vmov	r0, r1, d0
 8004d1c:	b17e      	cbz	r6, 8004d3e <sulp+0x36>
 8004d1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004d22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	dd09      	ble.n	8004d3e <sulp+0x36>
 8004d2a:	051b      	lsls	r3, r3, #20
 8004d2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004d30:	2400      	movs	r4, #0
 8004d32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d36:	4622      	mov	r2, r4
 8004d38:	462b      	mov	r3, r5
 8004d3a:	f7fb fc5d 	bl	80005f8 <__aeabi_dmul>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}

08004d40 <_strtod_l>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	ed2d 8b02 	vpush	{d8}
 8004d48:	b09d      	sub	sp, #116	; 0x74
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9318      	str	r3, [sp, #96]	; 0x60
 8004d50:	4ba2      	ldr	r3, [pc, #648]	; (8004fdc <_strtod_l+0x29c>)
 8004d52:	9213      	str	r2, [sp, #76]	; 0x4c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	4604      	mov	r4, r0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	4688      	mov	r8, r1
 8004d5e:	f7fb fa37 	bl	80001d0 <strlen>
 8004d62:	f04f 0a00 	mov.w	sl, #0
 8004d66:	4605      	mov	r5, r0
 8004d68:	f04f 0b00 	mov.w	fp, #0
 8004d6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	2a2b      	cmp	r2, #43	; 0x2b
 8004d76:	d04e      	beq.n	8004e16 <_strtod_l+0xd6>
 8004d78:	d83b      	bhi.n	8004df2 <_strtod_l+0xb2>
 8004d7a:	2a0d      	cmp	r2, #13
 8004d7c:	d834      	bhi.n	8004de8 <_strtod_l+0xa8>
 8004d7e:	2a08      	cmp	r2, #8
 8004d80:	d834      	bhi.n	8004dec <_strtod_l+0xac>
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	d03e      	beq.n	8004e04 <_strtod_l+0xc4>
 8004d86:	2300      	movs	r3, #0
 8004d88:	930a      	str	r3, [sp, #40]	; 0x28
 8004d8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004d8c:	7833      	ldrb	r3, [r6, #0]
 8004d8e:	2b30      	cmp	r3, #48	; 0x30
 8004d90:	f040 80b0 	bne.w	8004ef4 <_strtod_l+0x1b4>
 8004d94:	7873      	ldrb	r3, [r6, #1]
 8004d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d9a:	2b58      	cmp	r3, #88	; 0x58
 8004d9c:	d168      	bne.n	8004e70 <_strtod_l+0x130>
 8004d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	ab18      	add	r3, sp, #96	; 0x60
 8004da4:	9702      	str	r7, [sp, #8]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4a8d      	ldr	r2, [pc, #564]	; (8004fe0 <_strtod_l+0x2a0>)
 8004daa:	ab19      	add	r3, sp, #100	; 0x64
 8004dac:	a917      	add	r1, sp, #92	; 0x5c
 8004dae:	4620      	mov	r0, r4
 8004db0:	f001 ffae 	bl	8006d10 <__gethex>
 8004db4:	f010 0707 	ands.w	r7, r0, #7
 8004db8:	4605      	mov	r5, r0
 8004dba:	d005      	beq.n	8004dc8 <_strtod_l+0x88>
 8004dbc:	2f06      	cmp	r7, #6
 8004dbe:	d12c      	bne.n	8004e1a <_strtod_l+0xda>
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9617      	str	r6, [sp, #92]	; 0x5c
 8004dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 8590 	bne.w	80058f0 <_strtod_l+0xbb0>
 8004dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd2:	b1eb      	cbz	r3, 8004e10 <_strtod_l+0xd0>
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004dda:	ec43 2b10 	vmov	d0, r2, r3
 8004dde:	b01d      	add	sp, #116	; 0x74
 8004de0:	ecbd 8b02 	vpop	{d8}
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	2a20      	cmp	r2, #32
 8004dea:	d1cc      	bne.n	8004d86 <_strtod_l+0x46>
 8004dec:	3301      	adds	r3, #1
 8004dee:	9317      	str	r3, [sp, #92]	; 0x5c
 8004df0:	e7be      	b.n	8004d70 <_strtod_l+0x30>
 8004df2:	2a2d      	cmp	r2, #45	; 0x2d
 8004df4:	d1c7      	bne.n	8004d86 <_strtod_l+0x46>
 8004df6:	2201      	movs	r2, #1
 8004df8:	920a      	str	r2, [sp, #40]	; 0x28
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1c2      	bne.n	8004d8a <_strtod_l+0x4a>
 8004e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 856e 	bne.w	80058ec <_strtod_l+0xbac>
 8004e10:	4652      	mov	r2, sl
 8004e12:	465b      	mov	r3, fp
 8004e14:	e7e1      	b.n	8004dda <_strtod_l+0x9a>
 8004e16:	2200      	movs	r2, #0
 8004e18:	e7ee      	b.n	8004df8 <_strtod_l+0xb8>
 8004e1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004e1c:	b13a      	cbz	r2, 8004e2e <_strtod_l+0xee>
 8004e1e:	2135      	movs	r1, #53	; 0x35
 8004e20:	a81a      	add	r0, sp, #104	; 0x68
 8004e22:	f002 ff8e 	bl	8007d42 <__copybits>
 8004e26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f002 fb4d 	bl	80074c8 <_Bfree>
 8004e2e:	3f01      	subs	r7, #1
 8004e30:	2f04      	cmp	r7, #4
 8004e32:	d806      	bhi.n	8004e42 <_strtod_l+0x102>
 8004e34:	e8df f007 	tbb	[pc, r7]
 8004e38:	1714030a 	.word	0x1714030a
 8004e3c:	0a          	.byte	0x0a
 8004e3d:	00          	.byte	0x00
 8004e3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004e42:	0728      	lsls	r0, r5, #28
 8004e44:	d5c0      	bpl.n	8004dc8 <_strtod_l+0x88>
 8004e46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004e4a:	e7bd      	b.n	8004dc8 <_strtod_l+0x88>
 8004e4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004e5e:	e7f0      	b.n	8004e42 <_strtod_l+0x102>
 8004e60:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004fe4 <_strtod_l+0x2a4>
 8004e64:	e7ed      	b.n	8004e42 <_strtod_l+0x102>
 8004e66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004e6a:	f04f 3aff 	mov.w	sl, #4294967295
 8004e6e:	e7e8      	b.n	8004e42 <_strtod_l+0x102>
 8004e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d0f9      	beq.n	8004e70 <_strtod_l+0x130>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0a3      	beq.n	8004dc8 <_strtod_l+0x88>
 8004e80:	2301      	movs	r3, #1
 8004e82:	f04f 0900 	mov.w	r9, #0
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e8a:	9308      	str	r3, [sp, #32]
 8004e8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e90:	464f      	mov	r7, r9
 8004e92:	220a      	movs	r2, #10
 8004e94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004e96:	7806      	ldrb	r6, [r0, #0]
 8004e98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004e9c:	b2d9      	uxtb	r1, r3
 8004e9e:	2909      	cmp	r1, #9
 8004ea0:	d92a      	bls.n	8004ef8 <_strtod_l+0x1b8>
 8004ea2:	9905      	ldr	r1, [sp, #20]
 8004ea4:	462a      	mov	r2, r5
 8004ea6:	f003 fb9a 	bl	80085de <strncmp>
 8004eaa:	b398      	cbz	r0, 8004f14 <_strtod_l+0x1d4>
 8004eac:	2000      	movs	r0, #0
 8004eae:	4632      	mov	r2, r6
 8004eb0:	463d      	mov	r5, r7
 8004eb2:	9005      	str	r0, [sp, #20]
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2a65      	cmp	r2, #101	; 0x65
 8004eb8:	d001      	beq.n	8004ebe <_strtod_l+0x17e>
 8004eba:	2a45      	cmp	r2, #69	; 0x45
 8004ebc:	d118      	bne.n	8004ef0 <_strtod_l+0x1b0>
 8004ebe:	b91d      	cbnz	r5, 8004ec8 <_strtod_l+0x188>
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	4302      	orrs	r2, r0
 8004ec4:	d09e      	beq.n	8004e04 <_strtod_l+0xc4>
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004ecc:	f108 0201 	add.w	r2, r8, #1
 8004ed0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ed2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004ed6:	2a2b      	cmp	r2, #43	; 0x2b
 8004ed8:	d075      	beq.n	8004fc6 <_strtod_l+0x286>
 8004eda:	2a2d      	cmp	r2, #45	; 0x2d
 8004edc:	d07b      	beq.n	8004fd6 <_strtod_l+0x296>
 8004ede:	f04f 0c00 	mov.w	ip, #0
 8004ee2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ee6:	2909      	cmp	r1, #9
 8004ee8:	f240 8082 	bls.w	8004ff0 <_strtod_l+0x2b0>
 8004eec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004ef0:	2600      	movs	r6, #0
 8004ef2:	e09d      	b.n	8005030 <_strtod_l+0x2f0>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e7c4      	b.n	8004e82 <_strtod_l+0x142>
 8004ef8:	2f08      	cmp	r7, #8
 8004efa:	bfd8      	it	le
 8004efc:	9907      	ldrle	r1, [sp, #28]
 8004efe:	f100 0001 	add.w	r0, r0, #1
 8004f02:	bfda      	itte	le
 8004f04:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f08:	9307      	strle	r3, [sp, #28]
 8004f0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004f0e:	3701      	adds	r7, #1
 8004f10:	9017      	str	r0, [sp, #92]	; 0x5c
 8004f12:	e7bf      	b.n	8004e94 <_strtod_l+0x154>
 8004f14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f16:	195a      	adds	r2, r3, r5
 8004f18:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f1a:	5d5a      	ldrb	r2, [r3, r5]
 8004f1c:	2f00      	cmp	r7, #0
 8004f1e:	d037      	beq.n	8004f90 <_strtod_l+0x250>
 8004f20:	9005      	str	r0, [sp, #20]
 8004f22:	463d      	mov	r5, r7
 8004f24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	d912      	bls.n	8004f52 <_strtod_l+0x212>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e7c2      	b.n	8004eb6 <_strtod_l+0x176>
 8004f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f36:	785a      	ldrb	r2, [r3, #1]
 8004f38:	3001      	adds	r0, #1
 8004f3a:	2a30      	cmp	r2, #48	; 0x30
 8004f3c:	d0f8      	beq.n	8004f30 <_strtod_l+0x1f0>
 8004f3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	f200 84d9 	bhi.w	80058fa <_strtod_l+0xbba>
 8004f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f4a:	9005      	str	r0, [sp, #20]
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	9308      	str	r3, [sp, #32]
 8004f50:	4605      	mov	r5, r0
 8004f52:	3a30      	subs	r2, #48	; 0x30
 8004f54:	f100 0301 	add.w	r3, r0, #1
 8004f58:	d014      	beq.n	8004f84 <_strtod_l+0x244>
 8004f5a:	9905      	ldr	r1, [sp, #20]
 8004f5c:	4419      	add	r1, r3
 8004f5e:	9105      	str	r1, [sp, #20]
 8004f60:	462b      	mov	r3, r5
 8004f62:	eb00 0e05 	add.w	lr, r0, r5
 8004f66:	210a      	movs	r1, #10
 8004f68:	4573      	cmp	r3, lr
 8004f6a:	d113      	bne.n	8004f94 <_strtod_l+0x254>
 8004f6c:	182b      	adds	r3, r5, r0
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	f105 0501 	add.w	r5, r5, #1
 8004f74:	4405      	add	r5, r0
 8004f76:	dc1c      	bgt.n	8004fb2 <_strtod_l+0x272>
 8004f78:	9907      	ldr	r1, [sp, #28]
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	fb03 2301 	mla	r3, r3, r1, r2
 8004f80:	9307      	str	r3, [sp, #28]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004f86:	1c51      	adds	r1, r2, #1
 8004f88:	9117      	str	r1, [sp, #92]	; 0x5c
 8004f8a:	7852      	ldrb	r2, [r2, #1]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	e7c9      	b.n	8004f24 <_strtod_l+0x1e4>
 8004f90:	4638      	mov	r0, r7
 8004f92:	e7d2      	b.n	8004f3a <_strtod_l+0x1fa>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	dc04      	bgt.n	8004fa2 <_strtod_l+0x262>
 8004f98:	9e07      	ldr	r6, [sp, #28]
 8004f9a:	434e      	muls	r6, r1
 8004f9c:	9607      	str	r6, [sp, #28]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	e7e2      	b.n	8004f68 <_strtod_l+0x228>
 8004fa2:	f103 0c01 	add.w	ip, r3, #1
 8004fa6:	f1bc 0f10 	cmp.w	ip, #16
 8004faa:	bfd8      	it	le
 8004fac:	fb01 f909 	mulle.w	r9, r1, r9
 8004fb0:	e7f5      	b.n	8004f9e <_strtod_l+0x25e>
 8004fb2:	2d10      	cmp	r5, #16
 8004fb4:	bfdc      	itt	le
 8004fb6:	230a      	movle	r3, #10
 8004fb8:	fb03 2909 	mlale	r9, r3, r9, r2
 8004fbc:	e7e1      	b.n	8004f82 <_strtod_l+0x242>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e77c      	b.n	8004ec0 <_strtod_l+0x180>
 8004fc6:	f04f 0c00 	mov.w	ip, #0
 8004fca:	f108 0202 	add.w	r2, r8, #2
 8004fce:	9217      	str	r2, [sp, #92]	; 0x5c
 8004fd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004fd4:	e785      	b.n	8004ee2 <_strtod_l+0x1a2>
 8004fd6:	f04f 0c01 	mov.w	ip, #1
 8004fda:	e7f6      	b.n	8004fca <_strtod_l+0x28a>
 8004fdc:	08008c7c 	.word	0x08008c7c
 8004fe0:	080089cc 	.word	0x080089cc
 8004fe4:	7ff00000 	.word	0x7ff00000
 8004fe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004fea:	1c51      	adds	r1, r2, #1
 8004fec:	9117      	str	r1, [sp, #92]	; 0x5c
 8004fee:	7852      	ldrb	r2, [r2, #1]
 8004ff0:	2a30      	cmp	r2, #48	; 0x30
 8004ff2:	d0f9      	beq.n	8004fe8 <_strtod_l+0x2a8>
 8004ff4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ff8:	2908      	cmp	r1, #8
 8004ffa:	f63f af79 	bhi.w	8004ef0 <_strtod_l+0x1b0>
 8004ffe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005004:	9206      	str	r2, [sp, #24]
 8005006:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005008:	1c51      	adds	r1, r2, #1
 800500a:	9117      	str	r1, [sp, #92]	; 0x5c
 800500c:	7852      	ldrb	r2, [r2, #1]
 800500e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005012:	2e09      	cmp	r6, #9
 8005014:	d937      	bls.n	8005086 <_strtod_l+0x346>
 8005016:	9e06      	ldr	r6, [sp, #24]
 8005018:	1b89      	subs	r1, r1, r6
 800501a:	2908      	cmp	r1, #8
 800501c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005020:	dc02      	bgt.n	8005028 <_strtod_l+0x2e8>
 8005022:	4576      	cmp	r6, lr
 8005024:	bfa8      	it	ge
 8005026:	4676      	movge	r6, lr
 8005028:	f1bc 0f00 	cmp.w	ip, #0
 800502c:	d000      	beq.n	8005030 <_strtod_l+0x2f0>
 800502e:	4276      	negs	r6, r6
 8005030:	2d00      	cmp	r5, #0
 8005032:	d14d      	bne.n	80050d0 <_strtod_l+0x390>
 8005034:	9904      	ldr	r1, [sp, #16]
 8005036:	4301      	orrs	r1, r0
 8005038:	f47f aec6 	bne.w	8004dc8 <_strtod_l+0x88>
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f aee1 	bne.w	8004e04 <_strtod_l+0xc4>
 8005042:	2a69      	cmp	r2, #105	; 0x69
 8005044:	d027      	beq.n	8005096 <_strtod_l+0x356>
 8005046:	dc24      	bgt.n	8005092 <_strtod_l+0x352>
 8005048:	2a49      	cmp	r2, #73	; 0x49
 800504a:	d024      	beq.n	8005096 <_strtod_l+0x356>
 800504c:	2a4e      	cmp	r2, #78	; 0x4e
 800504e:	f47f aed9 	bne.w	8004e04 <_strtod_l+0xc4>
 8005052:	499f      	ldr	r1, [pc, #636]	; (80052d0 <_strtod_l+0x590>)
 8005054:	a817      	add	r0, sp, #92	; 0x5c
 8005056:	f002 f8b3 	bl	80071c0 <__match>
 800505a:	2800      	cmp	r0, #0
 800505c:	f43f aed2 	beq.w	8004e04 <_strtod_l+0xc4>
 8005060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b28      	cmp	r3, #40	; 0x28
 8005066:	d12d      	bne.n	80050c4 <_strtod_l+0x384>
 8005068:	499a      	ldr	r1, [pc, #616]	; (80052d4 <_strtod_l+0x594>)
 800506a:	aa1a      	add	r2, sp, #104	; 0x68
 800506c:	a817      	add	r0, sp, #92	; 0x5c
 800506e:	f002 f8bb 	bl	80071e8 <__hexnan>
 8005072:	2805      	cmp	r0, #5
 8005074:	d126      	bne.n	80050c4 <_strtod_l+0x384>
 8005076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005078:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800507c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005080:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005084:	e6a0      	b.n	8004dc8 <_strtod_l+0x88>
 8005086:	210a      	movs	r1, #10
 8005088:	fb01 2e0e 	mla	lr, r1, lr, r2
 800508c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005090:	e7b9      	b.n	8005006 <_strtod_l+0x2c6>
 8005092:	2a6e      	cmp	r2, #110	; 0x6e
 8005094:	e7db      	b.n	800504e <_strtod_l+0x30e>
 8005096:	4990      	ldr	r1, [pc, #576]	; (80052d8 <_strtod_l+0x598>)
 8005098:	a817      	add	r0, sp, #92	; 0x5c
 800509a:	f002 f891 	bl	80071c0 <__match>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f43f aeb0 	beq.w	8004e04 <_strtod_l+0xc4>
 80050a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050a6:	498d      	ldr	r1, [pc, #564]	; (80052dc <_strtod_l+0x59c>)
 80050a8:	3b01      	subs	r3, #1
 80050aa:	a817      	add	r0, sp, #92	; 0x5c
 80050ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80050ae:	f002 f887 	bl	80071c0 <__match>
 80050b2:	b910      	cbnz	r0, 80050ba <_strtod_l+0x37a>
 80050b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050b6:	3301      	adds	r3, #1
 80050b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80050ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80052ec <_strtod_l+0x5ac>
 80050be:	f04f 0a00 	mov.w	sl, #0
 80050c2:	e681      	b.n	8004dc8 <_strtod_l+0x88>
 80050c4:	4886      	ldr	r0, [pc, #536]	; (80052e0 <_strtod_l+0x5a0>)
 80050c6:	f003 fa2f 	bl	8008528 <nan>
 80050ca:	ec5b ab10 	vmov	sl, fp, d0
 80050ce:	e67b      	b.n	8004dc8 <_strtod_l+0x88>
 80050d0:	9b05      	ldr	r3, [sp, #20]
 80050d2:	9807      	ldr	r0, [sp, #28]
 80050d4:	1af3      	subs	r3, r6, r3
 80050d6:	2f00      	cmp	r7, #0
 80050d8:	bf08      	it	eq
 80050da:	462f      	moveq	r7, r5
 80050dc:	2d10      	cmp	r5, #16
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	46a8      	mov	r8, r5
 80050e2:	bfa8      	it	ge
 80050e4:	f04f 0810 	movge.w	r8, #16
 80050e8:	f7fb fa0c 	bl	8000504 <__aeabi_ui2d>
 80050ec:	2d09      	cmp	r5, #9
 80050ee:	4682      	mov	sl, r0
 80050f0:	468b      	mov	fp, r1
 80050f2:	dd13      	ble.n	800511c <_strtod_l+0x3dc>
 80050f4:	4b7b      	ldr	r3, [pc, #492]	; (80052e4 <_strtod_l+0x5a4>)
 80050f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80050fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80050fe:	f7fb fa7b 	bl	80005f8 <__aeabi_dmul>
 8005102:	4682      	mov	sl, r0
 8005104:	4648      	mov	r0, r9
 8005106:	468b      	mov	fp, r1
 8005108:	f7fb f9fc 	bl	8000504 <__aeabi_ui2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4650      	mov	r0, sl
 8005112:	4659      	mov	r1, fp
 8005114:	f7fb f8ba 	bl	800028c <__adddf3>
 8005118:	4682      	mov	sl, r0
 800511a:	468b      	mov	fp, r1
 800511c:	2d0f      	cmp	r5, #15
 800511e:	dc38      	bgt.n	8005192 <_strtod_l+0x452>
 8005120:	9b06      	ldr	r3, [sp, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f43f ae50 	beq.w	8004dc8 <_strtod_l+0x88>
 8005128:	dd24      	ble.n	8005174 <_strtod_l+0x434>
 800512a:	2b16      	cmp	r3, #22
 800512c:	dc0b      	bgt.n	8005146 <_strtod_l+0x406>
 800512e:	496d      	ldr	r1, [pc, #436]	; (80052e4 <_strtod_l+0x5a4>)
 8005130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005138:	4652      	mov	r2, sl
 800513a:	465b      	mov	r3, fp
 800513c:	f7fb fa5c 	bl	80005f8 <__aeabi_dmul>
 8005140:	4682      	mov	sl, r0
 8005142:	468b      	mov	fp, r1
 8005144:	e640      	b.n	8004dc8 <_strtod_l+0x88>
 8005146:	9a06      	ldr	r2, [sp, #24]
 8005148:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800514c:	4293      	cmp	r3, r2
 800514e:	db20      	blt.n	8005192 <_strtod_l+0x452>
 8005150:	4c64      	ldr	r4, [pc, #400]	; (80052e4 <_strtod_l+0x5a4>)
 8005152:	f1c5 050f 	rsb	r5, r5, #15
 8005156:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800515a:	4652      	mov	r2, sl
 800515c:	465b      	mov	r3, fp
 800515e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005162:	f7fb fa49 	bl	80005f8 <__aeabi_dmul>
 8005166:	9b06      	ldr	r3, [sp, #24]
 8005168:	1b5d      	subs	r5, r3, r5
 800516a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800516e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005172:	e7e3      	b.n	800513c <_strtod_l+0x3fc>
 8005174:	9b06      	ldr	r3, [sp, #24]
 8005176:	3316      	adds	r3, #22
 8005178:	db0b      	blt.n	8005192 <_strtod_l+0x452>
 800517a:	9b05      	ldr	r3, [sp, #20]
 800517c:	1b9e      	subs	r6, r3, r6
 800517e:	4b59      	ldr	r3, [pc, #356]	; (80052e4 <_strtod_l+0x5a4>)
 8005180:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005184:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005188:	4650      	mov	r0, sl
 800518a:	4659      	mov	r1, fp
 800518c:	f7fb fb5e 	bl	800084c <__aeabi_ddiv>
 8005190:	e7d6      	b.n	8005140 <_strtod_l+0x400>
 8005192:	9b06      	ldr	r3, [sp, #24]
 8005194:	eba5 0808 	sub.w	r8, r5, r8
 8005198:	4498      	add	r8, r3
 800519a:	f1b8 0f00 	cmp.w	r8, #0
 800519e:	dd74      	ble.n	800528a <_strtod_l+0x54a>
 80051a0:	f018 030f 	ands.w	r3, r8, #15
 80051a4:	d00a      	beq.n	80051bc <_strtod_l+0x47c>
 80051a6:	494f      	ldr	r1, [pc, #316]	; (80052e4 <_strtod_l+0x5a4>)
 80051a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051ac:	4652      	mov	r2, sl
 80051ae:	465b      	mov	r3, fp
 80051b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051b4:	f7fb fa20 	bl	80005f8 <__aeabi_dmul>
 80051b8:	4682      	mov	sl, r0
 80051ba:	468b      	mov	fp, r1
 80051bc:	f038 080f 	bics.w	r8, r8, #15
 80051c0:	d04f      	beq.n	8005262 <_strtod_l+0x522>
 80051c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80051c6:	dd22      	ble.n	800520e <_strtod_l+0x4ce>
 80051c8:	2500      	movs	r5, #0
 80051ca:	462e      	mov	r6, r5
 80051cc:	9507      	str	r5, [sp, #28]
 80051ce:	9505      	str	r5, [sp, #20]
 80051d0:	2322      	movs	r3, #34	; 0x22
 80051d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80052ec <_strtod_l+0x5ac>
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	f04f 0a00 	mov.w	sl, #0
 80051dc:	9b07      	ldr	r3, [sp, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f43f adf2 	beq.w	8004dc8 <_strtod_l+0x88>
 80051e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80051e6:	4620      	mov	r0, r4
 80051e8:	f002 f96e 	bl	80074c8 <_Bfree>
 80051ec:	9905      	ldr	r1, [sp, #20]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f002 f96a 	bl	80074c8 <_Bfree>
 80051f4:	4631      	mov	r1, r6
 80051f6:	4620      	mov	r0, r4
 80051f8:	f002 f966 	bl	80074c8 <_Bfree>
 80051fc:	9907      	ldr	r1, [sp, #28]
 80051fe:	4620      	mov	r0, r4
 8005200:	f002 f962 	bl	80074c8 <_Bfree>
 8005204:	4629      	mov	r1, r5
 8005206:	4620      	mov	r0, r4
 8005208:	f002 f95e 	bl	80074c8 <_Bfree>
 800520c:	e5dc      	b.n	8004dc8 <_strtod_l+0x88>
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <_strtod_l+0x5a8>)
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	2300      	movs	r3, #0
 8005214:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005218:	4650      	mov	r0, sl
 800521a:	4659      	mov	r1, fp
 800521c:	4699      	mov	r9, r3
 800521e:	f1b8 0f01 	cmp.w	r8, #1
 8005222:	dc21      	bgt.n	8005268 <_strtod_l+0x528>
 8005224:	b10b      	cbz	r3, 800522a <_strtod_l+0x4ea>
 8005226:	4682      	mov	sl, r0
 8005228:	468b      	mov	fp, r1
 800522a:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <_strtod_l+0x5a8>)
 800522c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005230:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005234:	4652      	mov	r2, sl
 8005236:	465b      	mov	r3, fp
 8005238:	e9d9 0100 	ldrd	r0, r1, [r9]
 800523c:	f7fb f9dc 	bl	80005f8 <__aeabi_dmul>
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <_strtod_l+0x5ac>)
 8005242:	460a      	mov	r2, r1
 8005244:	400b      	ands	r3, r1
 8005246:	492a      	ldr	r1, [pc, #168]	; (80052f0 <_strtod_l+0x5b0>)
 8005248:	428b      	cmp	r3, r1
 800524a:	4682      	mov	sl, r0
 800524c:	d8bc      	bhi.n	80051c8 <_strtod_l+0x488>
 800524e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005252:	428b      	cmp	r3, r1
 8005254:	bf86      	itte	hi
 8005256:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80052f4 <_strtod_l+0x5b4>
 800525a:	f04f 3aff 	movhi.w	sl, #4294967295
 800525e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005262:	2300      	movs	r3, #0
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	e084      	b.n	8005372 <_strtod_l+0x632>
 8005268:	f018 0f01 	tst.w	r8, #1
 800526c:	d005      	beq.n	800527a <_strtod_l+0x53a>
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f9c0 	bl	80005f8 <__aeabi_dmul>
 8005278:	2301      	movs	r3, #1
 800527a:	9a04      	ldr	r2, [sp, #16]
 800527c:	3208      	adds	r2, #8
 800527e:	f109 0901 	add.w	r9, r9, #1
 8005282:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005286:	9204      	str	r2, [sp, #16]
 8005288:	e7c9      	b.n	800521e <_strtod_l+0x4de>
 800528a:	d0ea      	beq.n	8005262 <_strtod_l+0x522>
 800528c:	f1c8 0800 	rsb	r8, r8, #0
 8005290:	f018 020f 	ands.w	r2, r8, #15
 8005294:	d00a      	beq.n	80052ac <_strtod_l+0x56c>
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <_strtod_l+0x5a4>)
 8005298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb fad2 	bl	800084c <__aeabi_ddiv>
 80052a8:	4682      	mov	sl, r0
 80052aa:	468b      	mov	fp, r1
 80052ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80052b0:	d0d7      	beq.n	8005262 <_strtod_l+0x522>
 80052b2:	f1b8 0f1f 	cmp.w	r8, #31
 80052b6:	dd1f      	ble.n	80052f8 <_strtod_l+0x5b8>
 80052b8:	2500      	movs	r5, #0
 80052ba:	462e      	mov	r6, r5
 80052bc:	9507      	str	r5, [sp, #28]
 80052be:	9505      	str	r5, [sp, #20]
 80052c0:	2322      	movs	r3, #34	; 0x22
 80052c2:	f04f 0a00 	mov.w	sl, #0
 80052c6:	f04f 0b00 	mov.w	fp, #0
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	e786      	b.n	80051dc <_strtod_l+0x49c>
 80052ce:	bf00      	nop
 80052d0:	0800899d 	.word	0x0800899d
 80052d4:	080089e0 	.word	0x080089e0
 80052d8:	08008995 	.word	0x08008995
 80052dc:	08008b24 	.word	0x08008b24
 80052e0:	08008e38 	.word	0x08008e38
 80052e4:	08008d18 	.word	0x08008d18
 80052e8:	08008cf0 	.word	0x08008cf0
 80052ec:	7ff00000 	.word	0x7ff00000
 80052f0:	7ca00000 	.word	0x7ca00000
 80052f4:	7fefffff 	.word	0x7fefffff
 80052f8:	f018 0310 	ands.w	r3, r8, #16
 80052fc:	bf18      	it	ne
 80052fe:	236a      	movne	r3, #106	; 0x6a
 8005300:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80056b0 <_strtod_l+0x970>
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	2300      	movs	r3, #0
 800530c:	f018 0f01 	tst.w	r8, #1
 8005310:	d004      	beq.n	800531c <_strtod_l+0x5dc>
 8005312:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005316:	f7fb f96f 	bl	80005f8 <__aeabi_dmul>
 800531a:	2301      	movs	r3, #1
 800531c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005320:	f109 0908 	add.w	r9, r9, #8
 8005324:	d1f2      	bne.n	800530c <_strtod_l+0x5cc>
 8005326:	b10b      	cbz	r3, 800532c <_strtod_l+0x5ec>
 8005328:	4682      	mov	sl, r0
 800532a:	468b      	mov	fp, r1
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	b1c3      	cbz	r3, 8005362 <_strtod_l+0x622>
 8005330:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005334:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005338:	2b00      	cmp	r3, #0
 800533a:	4659      	mov	r1, fp
 800533c:	dd11      	ble.n	8005362 <_strtod_l+0x622>
 800533e:	2b1f      	cmp	r3, #31
 8005340:	f340 8124 	ble.w	800558c <_strtod_l+0x84c>
 8005344:	2b34      	cmp	r3, #52	; 0x34
 8005346:	bfde      	ittt	le
 8005348:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800534c:	f04f 33ff 	movle.w	r3, #4294967295
 8005350:	fa03 f202 	lslle.w	r2, r3, r2
 8005354:	f04f 0a00 	mov.w	sl, #0
 8005358:	bfcc      	ite	gt
 800535a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800535e:	ea02 0b01 	andle.w	fp, r2, r1
 8005362:	2200      	movs	r2, #0
 8005364:	2300      	movs	r3, #0
 8005366:	4650      	mov	r0, sl
 8005368:	4659      	mov	r1, fp
 800536a:	f7fb fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800536e:	2800      	cmp	r0, #0
 8005370:	d1a2      	bne.n	80052b8 <_strtod_l+0x578>
 8005372:	9b07      	ldr	r3, [sp, #28]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	9908      	ldr	r1, [sp, #32]
 8005378:	462b      	mov	r3, r5
 800537a:	463a      	mov	r2, r7
 800537c:	4620      	mov	r0, r4
 800537e:	f002 f90b 	bl	8007598 <__s2b>
 8005382:	9007      	str	r0, [sp, #28]
 8005384:	2800      	cmp	r0, #0
 8005386:	f43f af1f 	beq.w	80051c8 <_strtod_l+0x488>
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	1b9e      	subs	r6, r3, r6
 800538e:	9b06      	ldr	r3, [sp, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	bfb4      	ite	lt
 8005394:	4633      	movlt	r3, r6
 8005396:	2300      	movge	r3, #0
 8005398:	930c      	str	r3, [sp, #48]	; 0x30
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	2500      	movs	r5, #0
 800539e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80053a2:	9312      	str	r3, [sp, #72]	; 0x48
 80053a4:	462e      	mov	r6, r5
 80053a6:	9b07      	ldr	r3, [sp, #28]
 80053a8:	4620      	mov	r0, r4
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	f002 f84c 	bl	8007448 <_Balloc>
 80053b0:	9005      	str	r0, [sp, #20]
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f43f af0c 	beq.w	80051d0 <_strtod_l+0x490>
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	3202      	adds	r2, #2
 80053be:	f103 010c 	add.w	r1, r3, #12
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	300c      	adds	r0, #12
 80053c6:	f002 f831 	bl	800742c <memcpy>
 80053ca:	ec4b ab10 	vmov	d0, sl, fp
 80053ce:	aa1a      	add	r2, sp, #104	; 0x68
 80053d0:	a919      	add	r1, sp, #100	; 0x64
 80053d2:	4620      	mov	r0, r4
 80053d4:	f002 fc26 	bl	8007c24 <__d2b>
 80053d8:	ec4b ab18 	vmov	d8, sl, fp
 80053dc:	9018      	str	r0, [sp, #96]	; 0x60
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f aef6 	beq.w	80051d0 <_strtod_l+0x490>
 80053e4:	2101      	movs	r1, #1
 80053e6:	4620      	mov	r0, r4
 80053e8:	f002 f970 	bl	80076cc <__i2b>
 80053ec:	4606      	mov	r6, r0
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f43f aeee 	beq.w	80051d0 <_strtod_l+0x490>
 80053f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053f6:	9904      	ldr	r1, [sp, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfab      	itete	ge
 80053fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80053fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005400:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005402:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005406:	bfac      	ite	ge
 8005408:	eb03 0902 	addge.w	r9, r3, r2
 800540c:	1ad7      	sublt	r7, r2, r3
 800540e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005410:	eba3 0801 	sub.w	r8, r3, r1
 8005414:	4490      	add	r8, r2
 8005416:	4ba1      	ldr	r3, [pc, #644]	; (800569c <_strtod_l+0x95c>)
 8005418:	f108 38ff 	add.w	r8, r8, #4294967295
 800541c:	4598      	cmp	r8, r3
 800541e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005422:	f280 80c7 	bge.w	80055b4 <_strtod_l+0x874>
 8005426:	eba3 0308 	sub.w	r3, r3, r8
 800542a:	2b1f      	cmp	r3, #31
 800542c:	eba2 0203 	sub.w	r2, r2, r3
 8005430:	f04f 0101 	mov.w	r1, #1
 8005434:	f300 80b1 	bgt.w	800559a <_strtod_l+0x85a>
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	930d      	str	r3, [sp, #52]	; 0x34
 800543e:	2300      	movs	r3, #0
 8005440:	9308      	str	r3, [sp, #32]
 8005442:	eb09 0802 	add.w	r8, r9, r2
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	45c1      	cmp	r9, r8
 800544a:	4417      	add	r7, r2
 800544c:	441f      	add	r7, r3
 800544e:	464b      	mov	r3, r9
 8005450:	bfa8      	it	ge
 8005452:	4643      	movge	r3, r8
 8005454:	42bb      	cmp	r3, r7
 8005456:	bfa8      	it	ge
 8005458:	463b      	movge	r3, r7
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfc2      	ittt	gt
 800545e:	eba8 0803 	subgt.w	r8, r8, r3
 8005462:	1aff      	subgt	r7, r7, r3
 8005464:	eba9 0903 	subgt.w	r9, r9, r3
 8005468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800546a:	2b00      	cmp	r3, #0
 800546c:	dd17      	ble.n	800549e <_strtod_l+0x75e>
 800546e:	4631      	mov	r1, r6
 8005470:	461a      	mov	r2, r3
 8005472:	4620      	mov	r0, r4
 8005474:	f002 f9ea 	bl	800784c <__pow5mult>
 8005478:	4606      	mov	r6, r0
 800547a:	2800      	cmp	r0, #0
 800547c:	f43f aea8 	beq.w	80051d0 <_strtod_l+0x490>
 8005480:	4601      	mov	r1, r0
 8005482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005484:	4620      	mov	r0, r4
 8005486:	f002 f937 	bl	80076f8 <__multiply>
 800548a:	900b      	str	r0, [sp, #44]	; 0x2c
 800548c:	2800      	cmp	r0, #0
 800548e:	f43f ae9f 	beq.w	80051d0 <_strtod_l+0x490>
 8005492:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005494:	4620      	mov	r0, r4
 8005496:	f002 f817 	bl	80074c8 <_Bfree>
 800549a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800549c:	9318      	str	r3, [sp, #96]	; 0x60
 800549e:	f1b8 0f00 	cmp.w	r8, #0
 80054a2:	f300 808c 	bgt.w	80055be <_strtod_l+0x87e>
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	dd08      	ble.n	80054be <_strtod_l+0x77e>
 80054ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ae:	9905      	ldr	r1, [sp, #20]
 80054b0:	4620      	mov	r0, r4
 80054b2:	f002 f9cb 	bl	800784c <__pow5mult>
 80054b6:	9005      	str	r0, [sp, #20]
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f43f ae89 	beq.w	80051d0 <_strtod_l+0x490>
 80054be:	2f00      	cmp	r7, #0
 80054c0:	dd08      	ble.n	80054d4 <_strtod_l+0x794>
 80054c2:	9905      	ldr	r1, [sp, #20]
 80054c4:	463a      	mov	r2, r7
 80054c6:	4620      	mov	r0, r4
 80054c8:	f002 fa1a 	bl	8007900 <__lshift>
 80054cc:	9005      	str	r0, [sp, #20]
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f43f ae7e 	beq.w	80051d0 <_strtod_l+0x490>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	dd08      	ble.n	80054ec <_strtod_l+0x7ac>
 80054da:	4631      	mov	r1, r6
 80054dc:	464a      	mov	r2, r9
 80054de:	4620      	mov	r0, r4
 80054e0:	f002 fa0e 	bl	8007900 <__lshift>
 80054e4:	4606      	mov	r6, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f43f ae72 	beq.w	80051d0 <_strtod_l+0x490>
 80054ec:	9a05      	ldr	r2, [sp, #20]
 80054ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80054f0:	4620      	mov	r0, r4
 80054f2:	f002 fa91 	bl	8007a18 <__mdiff>
 80054f6:	4605      	mov	r5, r0
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f43f ae69 	beq.w	80051d0 <_strtod_l+0x490>
 80054fe:	68c3      	ldr	r3, [r0, #12]
 8005500:	930b      	str	r3, [sp, #44]	; 0x2c
 8005502:	2300      	movs	r3, #0
 8005504:	60c3      	str	r3, [r0, #12]
 8005506:	4631      	mov	r1, r6
 8005508:	f002 fa6a 	bl	80079e0 <__mcmp>
 800550c:	2800      	cmp	r0, #0
 800550e:	da60      	bge.n	80055d2 <_strtod_l+0x892>
 8005510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005512:	ea53 030a 	orrs.w	r3, r3, sl
 8005516:	f040 8082 	bne.w	800561e <_strtod_l+0x8de>
 800551a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800551e:	2b00      	cmp	r3, #0
 8005520:	d17d      	bne.n	800561e <_strtod_l+0x8de>
 8005522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005526:	0d1b      	lsrs	r3, r3, #20
 8005528:	051b      	lsls	r3, r3, #20
 800552a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800552e:	d976      	bls.n	800561e <_strtod_l+0x8de>
 8005530:	696b      	ldr	r3, [r5, #20]
 8005532:	b913      	cbnz	r3, 800553a <_strtod_l+0x7fa>
 8005534:	692b      	ldr	r3, [r5, #16]
 8005536:	2b01      	cmp	r3, #1
 8005538:	dd71      	ble.n	800561e <_strtod_l+0x8de>
 800553a:	4629      	mov	r1, r5
 800553c:	2201      	movs	r2, #1
 800553e:	4620      	mov	r0, r4
 8005540:	f002 f9de 	bl	8007900 <__lshift>
 8005544:	4631      	mov	r1, r6
 8005546:	4605      	mov	r5, r0
 8005548:	f002 fa4a 	bl	80079e0 <__mcmp>
 800554c:	2800      	cmp	r0, #0
 800554e:	dd66      	ble.n	800561e <_strtod_l+0x8de>
 8005550:	9904      	ldr	r1, [sp, #16]
 8005552:	4a53      	ldr	r2, [pc, #332]	; (80056a0 <_strtod_l+0x960>)
 8005554:	465b      	mov	r3, fp
 8005556:	2900      	cmp	r1, #0
 8005558:	f000 8081 	beq.w	800565e <_strtod_l+0x91e>
 800555c:	ea02 010b 	and.w	r1, r2, fp
 8005560:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005564:	dc7b      	bgt.n	800565e <_strtod_l+0x91e>
 8005566:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800556a:	f77f aea9 	ble.w	80052c0 <_strtod_l+0x580>
 800556e:	4b4d      	ldr	r3, [pc, #308]	; (80056a4 <_strtod_l+0x964>)
 8005570:	4650      	mov	r0, sl
 8005572:	4659      	mov	r1, fp
 8005574:	2200      	movs	r2, #0
 8005576:	f7fb f83f 	bl	80005f8 <__aeabi_dmul>
 800557a:	460b      	mov	r3, r1
 800557c:	4303      	orrs	r3, r0
 800557e:	bf08      	it	eq
 8005580:	2322      	moveq	r3, #34	; 0x22
 8005582:	4682      	mov	sl, r0
 8005584:	468b      	mov	fp, r1
 8005586:	bf08      	it	eq
 8005588:	6023      	streq	r3, [r4, #0]
 800558a:	e62b      	b.n	80051e4 <_strtod_l+0x4a4>
 800558c:	f04f 32ff 	mov.w	r2, #4294967295
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	ea03 0a0a 	and.w	sl, r3, sl
 8005598:	e6e3      	b.n	8005362 <_strtod_l+0x622>
 800559a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800559e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80055a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80055a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80055aa:	fa01 f308 	lsl.w	r3, r1, r8
 80055ae:	9308      	str	r3, [sp, #32]
 80055b0:	910d      	str	r1, [sp, #52]	; 0x34
 80055b2:	e746      	b.n	8005442 <_strtod_l+0x702>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9308      	str	r3, [sp, #32]
 80055b8:	2301      	movs	r3, #1
 80055ba:	930d      	str	r3, [sp, #52]	; 0x34
 80055bc:	e741      	b.n	8005442 <_strtod_l+0x702>
 80055be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055c0:	4642      	mov	r2, r8
 80055c2:	4620      	mov	r0, r4
 80055c4:	f002 f99c 	bl	8007900 <__lshift>
 80055c8:	9018      	str	r0, [sp, #96]	; 0x60
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f47f af6b 	bne.w	80054a6 <_strtod_l+0x766>
 80055d0:	e5fe      	b.n	80051d0 <_strtod_l+0x490>
 80055d2:	465f      	mov	r7, fp
 80055d4:	d16e      	bne.n	80056b4 <_strtod_l+0x974>
 80055d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055dc:	b342      	cbz	r2, 8005630 <_strtod_l+0x8f0>
 80055de:	4a32      	ldr	r2, [pc, #200]	; (80056a8 <_strtod_l+0x968>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d128      	bne.n	8005636 <_strtod_l+0x8f6>
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	4651      	mov	r1, sl
 80055e8:	b1eb      	cbz	r3, 8005626 <_strtod_l+0x8e6>
 80055ea:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <_strtod_l+0x960>)
 80055ec:	403b      	ands	r3, r7
 80055ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	d819      	bhi.n	800562c <_strtod_l+0x8ec>
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	4299      	cmp	r1, r3
 8005604:	d117      	bne.n	8005636 <_strtod_l+0x8f6>
 8005606:	4b29      	ldr	r3, [pc, #164]	; (80056ac <_strtod_l+0x96c>)
 8005608:	429f      	cmp	r7, r3
 800560a:	d102      	bne.n	8005612 <_strtod_l+0x8d2>
 800560c:	3101      	adds	r1, #1
 800560e:	f43f addf 	beq.w	80051d0 <_strtod_l+0x490>
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <_strtod_l+0x960>)
 8005614:	403b      	ands	r3, r7
 8005616:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800561a:	f04f 0a00 	mov.w	sl, #0
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1a4      	bne.n	800556e <_strtod_l+0x82e>
 8005624:	e5de      	b.n	80051e4 <_strtod_l+0x4a4>
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e7ea      	b.n	8005602 <_strtod_l+0x8c2>
 800562c:	4613      	mov	r3, r2
 800562e:	e7e8      	b.n	8005602 <_strtod_l+0x8c2>
 8005630:	ea53 030a 	orrs.w	r3, r3, sl
 8005634:	d08c      	beq.n	8005550 <_strtod_l+0x810>
 8005636:	9b08      	ldr	r3, [sp, #32]
 8005638:	b1db      	cbz	r3, 8005672 <_strtod_l+0x932>
 800563a:	423b      	tst	r3, r7
 800563c:	d0ef      	beq.n	800561e <_strtod_l+0x8de>
 800563e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005640:	9a04      	ldr	r2, [sp, #16]
 8005642:	4650      	mov	r0, sl
 8005644:	4659      	mov	r1, fp
 8005646:	b1c3      	cbz	r3, 800567a <_strtod_l+0x93a>
 8005648:	f7ff fb5e 	bl	8004d08 <sulp>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	ec51 0b18 	vmov	r0, r1, d8
 8005654:	f7fa fe1a 	bl	800028c <__adddf3>
 8005658:	4682      	mov	sl, r0
 800565a:	468b      	mov	fp, r1
 800565c:	e7df      	b.n	800561e <_strtod_l+0x8de>
 800565e:	4013      	ands	r3, r2
 8005660:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005664:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005668:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800566c:	f04f 3aff 	mov.w	sl, #4294967295
 8005670:	e7d5      	b.n	800561e <_strtod_l+0x8de>
 8005672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005674:	ea13 0f0a 	tst.w	r3, sl
 8005678:	e7e0      	b.n	800563c <_strtod_l+0x8fc>
 800567a:	f7ff fb45 	bl	8004d08 <sulp>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	ec51 0b18 	vmov	r0, r1, d8
 8005686:	f7fa fdff 	bl	8000288 <__aeabi_dsub>
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	4682      	mov	sl, r0
 8005690:	468b      	mov	fp, r1
 8005692:	f7fb fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005696:	2800      	cmp	r0, #0
 8005698:	d0c1      	beq.n	800561e <_strtod_l+0x8de>
 800569a:	e611      	b.n	80052c0 <_strtod_l+0x580>
 800569c:	fffffc02 	.word	0xfffffc02
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	39500000 	.word	0x39500000
 80056a8:	000fffff 	.word	0x000fffff
 80056ac:	7fefffff 	.word	0x7fefffff
 80056b0:	080089f8 	.word	0x080089f8
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	f002 fb10 	bl	8007cdc <__ratio>
 80056bc:	ec59 8b10 	vmov	r8, r9, d0
 80056c0:	ee10 0a10 	vmov	r0, s0
 80056c4:	2200      	movs	r2, #0
 80056c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ca:	4649      	mov	r1, r9
 80056cc:	f7fb fa10 	bl	8000af0 <__aeabi_dcmple>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d07a      	beq.n	80057ca <_strtod_l+0xa8a>
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04a      	beq.n	8005770 <_strtod_l+0xa30>
 80056da:	4b95      	ldr	r3, [pc, #596]	; (8005930 <_strtod_l+0xbf0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005930 <_strtod_l+0xbf0>
 80056e6:	f04f 0800 	mov.w	r8, #0
 80056ea:	4b92      	ldr	r3, [pc, #584]	; (8005934 <_strtod_l+0xbf4>)
 80056ec:	403b      	ands	r3, r7
 80056ee:	930d      	str	r3, [sp, #52]	; 0x34
 80056f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <_strtod_l+0xbf8>)
 80056f4:	429a      	cmp	r2, r3
 80056f6:	f040 80b0 	bne.w	800585a <_strtod_l+0xb1a>
 80056fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005702:	ec4b ab10 	vmov	d0, sl, fp
 8005706:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800570a:	f002 fa0f 	bl	8007b2c <__ulp>
 800570e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005712:	ec53 2b10 	vmov	r2, r3, d0
 8005716:	f7fa ff6f 	bl	80005f8 <__aeabi_dmul>
 800571a:	4652      	mov	r2, sl
 800571c:	465b      	mov	r3, fp
 800571e:	f7fa fdb5 	bl	800028c <__adddf3>
 8005722:	460b      	mov	r3, r1
 8005724:	4983      	ldr	r1, [pc, #524]	; (8005934 <_strtod_l+0xbf4>)
 8005726:	4a85      	ldr	r2, [pc, #532]	; (800593c <_strtod_l+0xbfc>)
 8005728:	4019      	ands	r1, r3
 800572a:	4291      	cmp	r1, r2
 800572c:	4682      	mov	sl, r0
 800572e:	d960      	bls.n	80057f2 <_strtod_l+0xab2>
 8005730:	ee18 3a90 	vmov	r3, s17
 8005734:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005738:	4293      	cmp	r3, r2
 800573a:	d104      	bne.n	8005746 <_strtod_l+0xa06>
 800573c:	ee18 3a10 	vmov	r3, s16
 8005740:	3301      	adds	r3, #1
 8005742:	f43f ad45 	beq.w	80051d0 <_strtod_l+0x490>
 8005746:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005948 <_strtod_l+0xc08>
 800574a:	f04f 3aff 	mov.w	sl, #4294967295
 800574e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005750:	4620      	mov	r0, r4
 8005752:	f001 feb9 	bl	80074c8 <_Bfree>
 8005756:	9905      	ldr	r1, [sp, #20]
 8005758:	4620      	mov	r0, r4
 800575a:	f001 feb5 	bl	80074c8 <_Bfree>
 800575e:	4631      	mov	r1, r6
 8005760:	4620      	mov	r0, r4
 8005762:	f001 feb1 	bl	80074c8 <_Bfree>
 8005766:	4629      	mov	r1, r5
 8005768:	4620      	mov	r0, r4
 800576a:	f001 fead 	bl	80074c8 <_Bfree>
 800576e:	e61a      	b.n	80053a6 <_strtod_l+0x666>
 8005770:	f1ba 0f00 	cmp.w	sl, #0
 8005774:	d11b      	bne.n	80057ae <_strtod_l+0xa6e>
 8005776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800577a:	b9f3      	cbnz	r3, 80057ba <_strtod_l+0xa7a>
 800577c:	4b6c      	ldr	r3, [pc, #432]	; (8005930 <_strtod_l+0xbf0>)
 800577e:	2200      	movs	r2, #0
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fb f9aa 	bl	8000adc <__aeabi_dcmplt>
 8005788:	b9d0      	cbnz	r0, 80057c0 <_strtod_l+0xa80>
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <_strtod_l+0xc00>)
 8005790:	2200      	movs	r2, #0
 8005792:	f7fa ff31 	bl	80005f8 <__aeabi_dmul>
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800579e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80057a2:	9315      	str	r3, [sp, #84]	; 0x54
 80057a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80057a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80057ac:	e79d      	b.n	80056ea <_strtod_l+0x9aa>
 80057ae:	f1ba 0f01 	cmp.w	sl, #1
 80057b2:	d102      	bne.n	80057ba <_strtod_l+0xa7a>
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	f43f ad83 	beq.w	80052c0 <_strtod_l+0x580>
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <_strtod_l+0xc04>)
 80057bc:	2200      	movs	r2, #0
 80057be:	e78e      	b.n	80056de <_strtod_l+0x99e>
 80057c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005940 <_strtod_l+0xc00>
 80057c4:	f04f 0800 	mov.w	r8, #0
 80057c8:	e7e7      	b.n	800579a <_strtod_l+0xa5a>
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <_strtod_l+0xc00>)
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	2200      	movs	r2, #0
 80057d2:	f7fa ff11 	bl	80005f8 <__aeabi_dmul>
 80057d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d8:	4680      	mov	r8, r0
 80057da:	4689      	mov	r9, r1
 80057dc:	b933      	cbnz	r3, 80057ec <_strtod_l+0xaac>
 80057de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057e2:	900e      	str	r0, [sp, #56]	; 0x38
 80057e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057ea:	e7dd      	b.n	80057a8 <_strtod_l+0xa68>
 80057ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80057f0:	e7f9      	b.n	80057e6 <_strtod_l+0xaa6>
 80057f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1a8      	bne.n	800574e <_strtod_l+0xa0e>
 80057fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005802:	0d1b      	lsrs	r3, r3, #20
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	429a      	cmp	r2, r3
 8005808:	d1a1      	bne.n	800574e <_strtod_l+0xa0e>
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fb fa53 	bl	8000cb8 <__aeabi_d2lz>
 8005812:	f7fa fec3 	bl	800059c <__aeabi_l2d>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fa fd33 	bl	8000288 <__aeabi_dsub>
 8005822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005828:	ea43 030a 	orr.w	r3, r3, sl
 800582c:	4313      	orrs	r3, r2
 800582e:	4680      	mov	r8, r0
 8005830:	4689      	mov	r9, r1
 8005832:	d055      	beq.n	80058e0 <_strtod_l+0xba0>
 8005834:	a336      	add	r3, pc, #216	; (adr r3, 8005910 <_strtod_l+0xbd0>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fb f94f 	bl	8000adc <__aeabi_dcmplt>
 800583e:	2800      	cmp	r0, #0
 8005840:	f47f acd0 	bne.w	80051e4 <_strtod_l+0x4a4>
 8005844:	a334      	add	r3, pc, #208	; (adr r3, 8005918 <_strtod_l+0xbd8>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fb f963 	bl	8000b18 <__aeabi_dcmpgt>
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f af7b 	beq.w	800574e <_strtod_l+0xa0e>
 8005858:	e4c4      	b.n	80051e4 <_strtod_l+0x4a4>
 800585a:	9b04      	ldr	r3, [sp, #16]
 800585c:	b333      	cbz	r3, 80058ac <_strtod_l+0xb6c>
 800585e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005860:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005864:	d822      	bhi.n	80058ac <_strtod_l+0xb6c>
 8005866:	a32e      	add	r3, pc, #184	; (adr r3, 8005920 <_strtod_l+0xbe0>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	f7fb f93e 	bl	8000af0 <__aeabi_dcmple>
 8005874:	b1a0      	cbz	r0, 80058a0 <_strtod_l+0xb60>
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	f7fb f995 	bl	8000ba8 <__aeabi_d2uiz>
 800587e:	2801      	cmp	r0, #1
 8005880:	bf38      	it	cc
 8005882:	2001      	movcc	r0, #1
 8005884:	f7fa fe3e 	bl	8000504 <__aeabi_ui2d>
 8005888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800588a:	4680      	mov	r8, r0
 800588c:	4689      	mov	r9, r1
 800588e:	bb23      	cbnz	r3, 80058da <_strtod_l+0xb9a>
 8005890:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005894:	9010      	str	r0, [sp, #64]	; 0x40
 8005896:	9311      	str	r3, [sp, #68]	; 0x44
 8005898:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800589c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	9309      	str	r3, [sp, #36]	; 0x24
 80058ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058b0:	eeb0 0a48 	vmov.f32	s0, s16
 80058b4:	eef0 0a68 	vmov.f32	s1, s17
 80058b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058bc:	f002 f936 	bl	8007b2c <__ulp>
 80058c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058c4:	ec53 2b10 	vmov	r2, r3, d0
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	ec53 2b18 	vmov	r2, r3, d8
 80058d0:	f7fa fcdc 	bl	800028c <__adddf3>
 80058d4:	4682      	mov	sl, r0
 80058d6:	468b      	mov	fp, r1
 80058d8:	e78d      	b.n	80057f6 <_strtod_l+0xab6>
 80058da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80058de:	e7db      	b.n	8005898 <_strtod_l+0xb58>
 80058e0:	a311      	add	r3, pc, #68	; (adr r3, 8005928 <_strtod_l+0xbe8>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fb f8f9 	bl	8000adc <__aeabi_dcmplt>
 80058ea:	e7b2      	b.n	8005852 <_strtod_l+0xb12>
 80058ec:	2300      	movs	r3, #0
 80058ee:	930a      	str	r3, [sp, #40]	; 0x28
 80058f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	f7ff ba6b 	b.w	8004dd0 <_strtod_l+0x90>
 80058fa:	2a65      	cmp	r2, #101	; 0x65
 80058fc:	f43f ab5f 	beq.w	8004fbe <_strtod_l+0x27e>
 8005900:	2a45      	cmp	r2, #69	; 0x45
 8005902:	f43f ab5c 	beq.w	8004fbe <_strtod_l+0x27e>
 8005906:	2301      	movs	r3, #1
 8005908:	f7ff bb94 	b.w	8005034 <_strtod_l+0x2f4>
 800590c:	f3af 8000 	nop.w
 8005910:	94a03595 	.word	0x94a03595
 8005914:	3fdfffff 	.word	0x3fdfffff
 8005918:	35afe535 	.word	0x35afe535
 800591c:	3fe00000 	.word	0x3fe00000
 8005920:	ffc00000 	.word	0xffc00000
 8005924:	41dfffff 	.word	0x41dfffff
 8005928:	94a03595 	.word	0x94a03595
 800592c:	3fcfffff 	.word	0x3fcfffff
 8005930:	3ff00000 	.word	0x3ff00000
 8005934:	7ff00000 	.word	0x7ff00000
 8005938:	7fe00000 	.word	0x7fe00000
 800593c:	7c9fffff 	.word	0x7c9fffff
 8005940:	3fe00000 	.word	0x3fe00000
 8005944:	bff00000 	.word	0xbff00000
 8005948:	7fefffff 	.word	0x7fefffff

0800594c <_strtod_r>:
 800594c:	4b01      	ldr	r3, [pc, #4]	; (8005954 <_strtod_r+0x8>)
 800594e:	f7ff b9f7 	b.w	8004d40 <_strtod_l>
 8005952:	bf00      	nop
 8005954:	2000007c 	.word	0x2000007c

08005958 <_strtol_l.constprop.0>:
 8005958:	2b01      	cmp	r3, #1
 800595a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595e:	d001      	beq.n	8005964 <_strtol_l.constprop.0+0xc>
 8005960:	2b24      	cmp	r3, #36	; 0x24
 8005962:	d906      	bls.n	8005972 <_strtol_l.constprop.0+0x1a>
 8005964:	f7fe fa70 	bl	8003e48 <__errno>
 8005968:	2316      	movs	r3, #22
 800596a:	6003      	str	r3, [r0, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005a58 <_strtol_l.constprop.0+0x100>
 8005976:	460d      	mov	r5, r1
 8005978:	462e      	mov	r6, r5
 800597a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800597e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005982:	f017 0708 	ands.w	r7, r7, #8
 8005986:	d1f7      	bne.n	8005978 <_strtol_l.constprop.0+0x20>
 8005988:	2c2d      	cmp	r4, #45	; 0x2d
 800598a:	d132      	bne.n	80059f2 <_strtol_l.constprop.0+0x9a>
 800598c:	782c      	ldrb	r4, [r5, #0]
 800598e:	2701      	movs	r7, #1
 8005990:	1cb5      	adds	r5, r6, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d05b      	beq.n	8005a4e <_strtol_l.constprop.0+0xf6>
 8005996:	2b10      	cmp	r3, #16
 8005998:	d109      	bne.n	80059ae <_strtol_l.constprop.0+0x56>
 800599a:	2c30      	cmp	r4, #48	; 0x30
 800599c:	d107      	bne.n	80059ae <_strtol_l.constprop.0+0x56>
 800599e:	782c      	ldrb	r4, [r5, #0]
 80059a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80059a4:	2c58      	cmp	r4, #88	; 0x58
 80059a6:	d14d      	bne.n	8005a44 <_strtol_l.constprop.0+0xec>
 80059a8:	786c      	ldrb	r4, [r5, #1]
 80059aa:	2310      	movs	r3, #16
 80059ac:	3502      	adds	r5, #2
 80059ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80059b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80059b6:	f04f 0c00 	mov.w	ip, #0
 80059ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80059be:	4666      	mov	r6, ip
 80059c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80059c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80059c8:	f1be 0f09 	cmp.w	lr, #9
 80059cc:	d816      	bhi.n	80059fc <_strtol_l.constprop.0+0xa4>
 80059ce:	4674      	mov	r4, lr
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	dd24      	ble.n	8005a1e <_strtol_l.constprop.0+0xc6>
 80059d4:	f1bc 0f00 	cmp.w	ip, #0
 80059d8:	db1e      	blt.n	8005a18 <_strtol_l.constprop.0+0xc0>
 80059da:	45b1      	cmp	r9, r6
 80059dc:	d31c      	bcc.n	8005a18 <_strtol_l.constprop.0+0xc0>
 80059de:	d101      	bne.n	80059e4 <_strtol_l.constprop.0+0x8c>
 80059e0:	45a2      	cmp	sl, r4
 80059e2:	db19      	blt.n	8005a18 <_strtol_l.constprop.0+0xc0>
 80059e4:	fb06 4603 	mla	r6, r6, r3, r4
 80059e8:	f04f 0c01 	mov.w	ip, #1
 80059ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059f0:	e7e8      	b.n	80059c4 <_strtol_l.constprop.0+0x6c>
 80059f2:	2c2b      	cmp	r4, #43	; 0x2b
 80059f4:	bf04      	itt	eq
 80059f6:	782c      	ldrbeq	r4, [r5, #0]
 80059f8:	1cb5      	addeq	r5, r6, #2
 80059fa:	e7ca      	b.n	8005992 <_strtol_l.constprop.0+0x3a>
 80059fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005a00:	f1be 0f19 	cmp.w	lr, #25
 8005a04:	d801      	bhi.n	8005a0a <_strtol_l.constprop.0+0xb2>
 8005a06:	3c37      	subs	r4, #55	; 0x37
 8005a08:	e7e2      	b.n	80059d0 <_strtol_l.constprop.0+0x78>
 8005a0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005a0e:	f1be 0f19 	cmp.w	lr, #25
 8005a12:	d804      	bhi.n	8005a1e <_strtol_l.constprop.0+0xc6>
 8005a14:	3c57      	subs	r4, #87	; 0x57
 8005a16:	e7db      	b.n	80059d0 <_strtol_l.constprop.0+0x78>
 8005a18:	f04f 3cff 	mov.w	ip, #4294967295
 8005a1c:	e7e6      	b.n	80059ec <_strtol_l.constprop.0+0x94>
 8005a1e:	f1bc 0f00 	cmp.w	ip, #0
 8005a22:	da05      	bge.n	8005a30 <_strtol_l.constprop.0+0xd8>
 8005a24:	2322      	movs	r3, #34	; 0x22
 8005a26:	6003      	str	r3, [r0, #0]
 8005a28:	4646      	mov	r6, r8
 8005a2a:	b942      	cbnz	r2, 8005a3e <_strtol_l.constprop.0+0xe6>
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	e79e      	b.n	800596e <_strtol_l.constprop.0+0x16>
 8005a30:	b107      	cbz	r7, 8005a34 <_strtol_l.constprop.0+0xdc>
 8005a32:	4276      	negs	r6, r6
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	d0f9      	beq.n	8005a2c <_strtol_l.constprop.0+0xd4>
 8005a38:	f1bc 0f00 	cmp.w	ip, #0
 8005a3c:	d000      	beq.n	8005a40 <_strtol_l.constprop.0+0xe8>
 8005a3e:	1e69      	subs	r1, r5, #1
 8005a40:	6011      	str	r1, [r2, #0]
 8005a42:	e7f3      	b.n	8005a2c <_strtol_l.constprop.0+0xd4>
 8005a44:	2430      	movs	r4, #48	; 0x30
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1b1      	bne.n	80059ae <_strtol_l.constprop.0+0x56>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	e7af      	b.n	80059ae <_strtol_l.constprop.0+0x56>
 8005a4e:	2c30      	cmp	r4, #48	; 0x30
 8005a50:	d0a5      	beq.n	800599e <_strtol_l.constprop.0+0x46>
 8005a52:	230a      	movs	r3, #10
 8005a54:	e7ab      	b.n	80059ae <_strtol_l.constprop.0+0x56>
 8005a56:	bf00      	nop
 8005a58:	08008a21 	.word	0x08008a21

08005a5c <_strtol_r>:
 8005a5c:	f7ff bf7c 	b.w	8005958 <_strtol_l.constprop.0>

08005a60 <__swbuf_r>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	460e      	mov	r6, r1
 8005a64:	4614      	mov	r4, r2
 8005a66:	4605      	mov	r5, r0
 8005a68:	b118      	cbz	r0, 8005a72 <__swbuf_r+0x12>
 8005a6a:	6983      	ldr	r3, [r0, #24]
 8005a6c:	b90b      	cbnz	r3, 8005a72 <__swbuf_r+0x12>
 8005a6e:	f001 f84b 	bl	8006b08 <__sinit>
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <__swbuf_r+0x98>)
 8005a74:	429c      	cmp	r4, r3
 8005a76:	d12b      	bne.n	8005ad0 <__swbuf_r+0x70>
 8005a78:	686c      	ldr	r4, [r5, #4]
 8005a7a:	69a3      	ldr	r3, [r4, #24]
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	071a      	lsls	r2, r3, #28
 8005a82:	d52f      	bpl.n	8005ae4 <__swbuf_r+0x84>
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	b36b      	cbz	r3, 8005ae4 <__swbuf_r+0x84>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	1ac0      	subs	r0, r0, r3
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	b2f6      	uxtb	r6, r6
 8005a92:	4283      	cmp	r3, r0
 8005a94:	4637      	mov	r7, r6
 8005a96:	dc04      	bgt.n	8005aa2 <__swbuf_r+0x42>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 ffa0 	bl	80069e0 <_fflush_r>
 8005aa0:	bb30      	cbnz	r0, 8005af0 <__swbuf_r+0x90>
 8005aa2:	68a3      	ldr	r3, [r4, #8]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	60a3      	str	r3, [r4, #8]
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	6022      	str	r2, [r4, #0]
 8005aae:	701e      	strb	r6, [r3, #0]
 8005ab0:	6963      	ldr	r3, [r4, #20]
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	4283      	cmp	r3, r0
 8005ab6:	d004      	beq.n	8005ac2 <__swbuf_r+0x62>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	07db      	lsls	r3, r3, #31
 8005abc:	d506      	bpl.n	8005acc <__swbuf_r+0x6c>
 8005abe:	2e0a      	cmp	r6, #10
 8005ac0:	d104      	bne.n	8005acc <__swbuf_r+0x6c>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 ff8b 	bl	80069e0 <_fflush_r>
 8005aca:	b988      	cbnz	r0, 8005af0 <__swbuf_r+0x90>
 8005acc:	4638      	mov	r0, r7
 8005ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <__swbuf_r+0x9c>)
 8005ad2:	429c      	cmp	r4, r3
 8005ad4:	d101      	bne.n	8005ada <__swbuf_r+0x7a>
 8005ad6:	68ac      	ldr	r4, [r5, #8]
 8005ad8:	e7cf      	b.n	8005a7a <__swbuf_r+0x1a>
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <__swbuf_r+0xa0>)
 8005adc:	429c      	cmp	r4, r3
 8005ade:	bf08      	it	eq
 8005ae0:	68ec      	ldreq	r4, [r5, #12]
 8005ae2:	e7ca      	b.n	8005a7a <__swbuf_r+0x1a>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 f80c 	bl	8005b04 <__swsetup_r>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d0cb      	beq.n	8005a88 <__swbuf_r+0x28>
 8005af0:	f04f 37ff 	mov.w	r7, #4294967295
 8005af4:	e7ea      	b.n	8005acc <__swbuf_r+0x6c>
 8005af6:	bf00      	nop
 8005af8:	08008bd4 	.word	0x08008bd4
 8005afc:	08008bf4 	.word	0x08008bf4
 8005b00:	08008bb4 	.word	0x08008bb4

08005b04 <__swsetup_r>:
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <__swsetup_r+0xcc>)
 8005b06:	b570      	push	{r4, r5, r6, lr}
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	b125      	cbz	r5, 8005b1a <__swsetup_r+0x16>
 8005b10:	69ab      	ldr	r3, [r5, #24]
 8005b12:	b913      	cbnz	r3, 8005b1a <__swsetup_r+0x16>
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 fff7 	bl	8006b08 <__sinit>
 8005b1a:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <__swsetup_r+0xd0>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d10f      	bne.n	8005b40 <__swsetup_r+0x3c>
 8005b20:	686c      	ldr	r4, [r5, #4]
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b28:	0719      	lsls	r1, r3, #28
 8005b2a:	d42c      	bmi.n	8005b86 <__swsetup_r+0x82>
 8005b2c:	06dd      	lsls	r5, r3, #27
 8005b2e:	d411      	bmi.n	8005b54 <__swsetup_r+0x50>
 8005b30:	2309      	movs	r3, #9
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3e:	e03e      	b.n	8005bbe <__swsetup_r+0xba>
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <__swsetup_r+0xd4>)
 8005b42:	429c      	cmp	r4, r3
 8005b44:	d101      	bne.n	8005b4a <__swsetup_r+0x46>
 8005b46:	68ac      	ldr	r4, [r5, #8]
 8005b48:	e7eb      	b.n	8005b22 <__swsetup_r+0x1e>
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <__swsetup_r+0xd8>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	bf08      	it	eq
 8005b50:	68ec      	ldreq	r4, [r5, #12]
 8005b52:	e7e6      	b.n	8005b22 <__swsetup_r+0x1e>
 8005b54:	0758      	lsls	r0, r3, #29
 8005b56:	d512      	bpl.n	8005b7e <__swsetup_r+0x7a>
 8005b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5a:	b141      	cbz	r1, 8005b6e <__swsetup_r+0x6a>
 8005b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b60:	4299      	cmp	r1, r3
 8005b62:	d002      	beq.n	8005b6a <__swsetup_r+0x66>
 8005b64:	4630      	mov	r0, r6
 8005b66:	f002 f947 	bl	8007df8 <_free_r>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	2300      	movs	r3, #0
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f043 0308 	orr.w	r3, r3, #8
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	b94b      	cbnz	r3, 8005b9e <__swsetup_r+0x9a>
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d003      	beq.n	8005b9e <__swsetup_r+0x9a>
 8005b96:	4621      	mov	r1, r4
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f001 fbed 	bl	8007378 <__smakebuf_r>
 8005b9e:	89a0      	ldrh	r0, [r4, #12]
 8005ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba4:	f010 0301 	ands.w	r3, r0, #1
 8005ba8:	d00a      	beq.n	8005bc0 <__swsetup_r+0xbc>
 8005baa:	2300      	movs	r3, #0
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	6963      	ldr	r3, [r4, #20]
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	61a3      	str	r3, [r4, #24]
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	b943      	cbnz	r3, 8005bca <__swsetup_r+0xc6>
 8005bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bbc:	d1ba      	bne.n	8005b34 <__swsetup_r+0x30>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	0781      	lsls	r1, r0, #30
 8005bc2:	bf58      	it	pl
 8005bc4:	6963      	ldrpl	r3, [r4, #20]
 8005bc6:	60a3      	str	r3, [r4, #8]
 8005bc8:	e7f4      	b.n	8005bb4 <__swsetup_r+0xb0>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e7f7      	b.n	8005bbe <__swsetup_r+0xba>
 8005bce:	bf00      	nop
 8005bd0:	20000014 	.word	0x20000014
 8005bd4:	08008bd4 	.word	0x08008bd4
 8005bd8:	08008bf4 	.word	0x08008bf4
 8005bdc:	08008bb4 	.word	0x08008bb4

08005be0 <quorem>:
 8005be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	6903      	ldr	r3, [r0, #16]
 8005be6:	690c      	ldr	r4, [r1, #16]
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	4607      	mov	r7, r0
 8005bec:	f2c0 8081 	blt.w	8005cf2 <quorem+0x112>
 8005bf0:	3c01      	subs	r4, #1
 8005bf2:	f101 0814 	add.w	r8, r1, #20
 8005bf6:	f100 0514 	add.w	r5, r0, #20
 8005bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c18:	d331      	bcc.n	8005c7e <quorem+0x9e>
 8005c1a:	f04f 0e00 	mov.w	lr, #0
 8005c1e:	4640      	mov	r0, r8
 8005c20:	46ac      	mov	ip, r5
 8005c22:	46f2      	mov	sl, lr
 8005c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c28:	b293      	uxth	r3, r2
 8005c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ebaa 0303 	sub.w	r3, sl, r3
 8005c38:	f8dc a000 	ldr.w	sl, [ip]
 8005c3c:	0c12      	lsrs	r2, r2, #16
 8005c3e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c42:	fb06 e202 	mla	r2, r6, r2, lr
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	9b00      	ldr	r3, [sp, #0]
 8005c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c58:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c5c:	4581      	cmp	r9, r0
 8005c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c62:	f84c 3b04 	str.w	r3, [ip], #4
 8005c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c6a:	d2db      	bcs.n	8005c24 <quorem+0x44>
 8005c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c70:	b92b      	cbnz	r3, 8005c7e <quorem+0x9e>
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	3b04      	subs	r3, #4
 8005c76:	429d      	cmp	r5, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	d32e      	bcc.n	8005cda <quorem+0xfa>
 8005c7c:	613c      	str	r4, [r7, #16]
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f001 feae 	bl	80079e0 <__mcmp>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	db24      	blt.n	8005cd2 <quorem+0xf2>
 8005c88:	3601      	adds	r6, #1
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f04f 0c00 	mov.w	ip, #0
 8005c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c94:	f8d0 e000 	ldr.w	lr, [r0]
 8005c98:	b293      	uxth	r3, r2
 8005c9a:	ebac 0303 	sub.w	r3, ip, r3
 8005c9e:	0c12      	lsrs	r2, r2, #16
 8005ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8005ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb2:	45c1      	cmp	r9, r8
 8005cb4:	f840 3b04 	str.w	r3, [r0], #4
 8005cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cbc:	d2e8      	bcs.n	8005c90 <quorem+0xb0>
 8005cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cc6:	b922      	cbnz	r2, 8005cd2 <quorem+0xf2>
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	429d      	cmp	r5, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	d30a      	bcc.n	8005ce6 <quorem+0x106>
 8005cd0:	613c      	str	r4, [r7, #16]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	b003      	add	sp, #12
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1cc      	bne.n	8005c7c <quorem+0x9c>
 8005ce2:	3c01      	subs	r4, #1
 8005ce4:	e7c7      	b.n	8005c76 <quorem+0x96>
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d1f0      	bne.n	8005cd0 <quorem+0xf0>
 8005cee:	3c01      	subs	r4, #1
 8005cf0:	e7eb      	b.n	8005cca <quorem+0xea>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7ee      	b.n	8005cd4 <quorem+0xf4>
	...

08005cf8 <_dtoa_r>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b04 	vpush	{d8-d9}
 8005d00:	ec57 6b10 	vmov	r6, r7, d0
 8005d04:	b093      	sub	sp, #76	; 0x4c
 8005d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d0c:	9106      	str	r1, [sp, #24]
 8005d0e:	ee10 aa10 	vmov	sl, s0
 8005d12:	4604      	mov	r4, r0
 8005d14:	9209      	str	r2, [sp, #36]	; 0x24
 8005d16:	930c      	str	r3, [sp, #48]	; 0x30
 8005d18:	46bb      	mov	fp, r7
 8005d1a:	b975      	cbnz	r5, 8005d3a <_dtoa_r+0x42>
 8005d1c:	2010      	movs	r0, #16
 8005d1e:	f001 fb6b 	bl	80073f8 <malloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6260      	str	r0, [r4, #36]	; 0x24
 8005d26:	b920      	cbnz	r0, 8005d32 <_dtoa_r+0x3a>
 8005d28:	4ba7      	ldr	r3, [pc, #668]	; (8005fc8 <_dtoa_r+0x2d0>)
 8005d2a:	21ea      	movs	r1, #234	; 0xea
 8005d2c:	48a7      	ldr	r0, [pc, #668]	; (8005fcc <_dtoa_r+0x2d4>)
 8005d2e:	f002 fc89 	bl	8008644 <__assert_func>
 8005d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d36:	6005      	str	r5, [r0, #0]
 8005d38:	60c5      	str	r5, [r0, #12]
 8005d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	b151      	cbz	r1, 8005d56 <_dtoa_r+0x5e>
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	604a      	str	r2, [r1, #4]
 8005d44:	2301      	movs	r3, #1
 8005d46:	4093      	lsls	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f001 fbbc 	bl	80074c8 <_Bfree>
 8005d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	1e3b      	subs	r3, r7, #0
 8005d58:	bfaa      	itet	ge
 8005d5a:	2300      	movge	r3, #0
 8005d5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d60:	f8c8 3000 	strge.w	r3, [r8]
 8005d64:	4b9a      	ldr	r3, [pc, #616]	; (8005fd0 <_dtoa_r+0x2d8>)
 8005d66:	bfbc      	itt	lt
 8005d68:	2201      	movlt	r2, #1
 8005d6a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d6e:	ea33 030b 	bics.w	r3, r3, fp
 8005d72:	d11b      	bne.n	8005dac <_dtoa_r+0xb4>
 8005d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d80:	4333      	orrs	r3, r6
 8005d82:	f000 8592 	beq.w	80068aa <_dtoa_r+0xbb2>
 8005d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d88:	b963      	cbnz	r3, 8005da4 <_dtoa_r+0xac>
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <_dtoa_r+0x2dc>)
 8005d8c:	e022      	b.n	8005dd4 <_dtoa_r+0xdc>
 8005d8e:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <_dtoa_r+0x2e0>)
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	3308      	adds	r3, #8
 8005d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	9801      	ldr	r0, [sp, #4]
 8005d9a:	b013      	add	sp, #76	; 0x4c
 8005d9c:	ecbd 8b04 	vpop	{d8-d9}
 8005da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da4:	4b8b      	ldr	r3, [pc, #556]	; (8005fd4 <_dtoa_r+0x2dc>)
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	3303      	adds	r3, #3
 8005daa:	e7f3      	b.n	8005d94 <_dtoa_r+0x9c>
 8005dac:	2200      	movs	r2, #0
 8005dae:	2300      	movs	r3, #0
 8005db0:	4650      	mov	r0, sl
 8005db2:	4659      	mov	r1, fp
 8005db4:	f7fa fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8005db8:	ec4b ab19 	vmov	d9, sl, fp
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	b158      	cbz	r0, 8005dd8 <_dtoa_r+0xe0>
 8005dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 856b 	beq.w	80068a4 <_dtoa_r+0xbac>
 8005dce:	4883      	ldr	r0, [pc, #524]	; (8005fdc <_dtoa_r+0x2e4>)
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	1e43      	subs	r3, r0, #1
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	e7df      	b.n	8005d98 <_dtoa_r+0xa0>
 8005dd8:	ec4b ab10 	vmov	d0, sl, fp
 8005ddc:	aa10      	add	r2, sp, #64	; 0x40
 8005dde:	a911      	add	r1, sp, #68	; 0x44
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 ff1f 	bl	8007c24 <__d2b>
 8005de6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005dea:	ee08 0a10 	vmov	s16, r0
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	f000 8084 	beq.w	8005efc <_dtoa_r+0x204>
 8005df4:	ee19 3a90 	vmov	r3, s19
 8005df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e00:	4656      	mov	r6, sl
 8005e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e0e:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <_dtoa_r+0x2e8>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fa37 	bl	8000288 <__aeabi_dsub>
 8005e1a:	a365      	add	r3, pc, #404	; (adr r3, 8005fb0 <_dtoa_r+0x2b8>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa fbea 	bl	80005f8 <__aeabi_dmul>
 8005e24:	a364      	add	r3, pc, #400	; (adr r3, 8005fb8 <_dtoa_r+0x2c0>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fa2f 	bl	800028c <__adddf3>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	4628      	mov	r0, r5
 8005e32:	460f      	mov	r7, r1
 8005e34:	f7fa fb76 	bl	8000524 <__aeabi_i2d>
 8005e38:	a361      	add	r3, pc, #388	; (adr r3, 8005fc0 <_dtoa_r+0x2c8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fbdb 	bl	80005f8 <__aeabi_dmul>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa fa1f 	bl	800028c <__adddf3>
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	f7fa fe81 	bl	8000b58 <__aeabi_d2iz>
 8005e56:	2200      	movs	r2, #0
 8005e58:	9000      	str	r0, [sp, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fe3c 	bl	8000adc <__aeabi_dcmplt>
 8005e64:	b150      	cbz	r0, 8005e7c <_dtoa_r+0x184>
 8005e66:	9800      	ldr	r0, [sp, #0]
 8005e68:	f7fa fb5c 	bl	8000524 <__aeabi_i2d>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	f7fa fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e74:	b910      	cbnz	r0, 8005e7c <_dtoa_r+0x184>
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	2b16      	cmp	r3, #22
 8005e80:	d85a      	bhi.n	8005f38 <_dtoa_r+0x240>
 8005e82:	9a00      	ldr	r2, [sp, #0]
 8005e84:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <_dtoa_r+0x2ec>)
 8005e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	ec51 0b19 	vmov	r0, r1, d9
 8005e92:	f7fa fe23 	bl	8000adc <__aeabi_dcmplt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d050      	beq.n	8005f3c <_dtoa_r+0x244>
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ea6:	1b5d      	subs	r5, r3, r5
 8005ea8:	1e6b      	subs	r3, r5, #1
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	bf45      	ittet	mi
 8005eae:	f1c5 0301 	rsbmi	r3, r5, #1
 8005eb2:	9304      	strmi	r3, [sp, #16]
 8005eb4:	2300      	movpl	r3, #0
 8005eb6:	2300      	movmi	r3, #0
 8005eb8:	bf4c      	ite	mi
 8005eba:	9305      	strmi	r3, [sp, #20]
 8005ebc:	9304      	strpl	r3, [sp, #16]
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db3d      	blt.n	8005f40 <_dtoa_r+0x248>
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	9a00      	ldr	r2, [sp, #0]
 8005ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8005eca:	4413      	add	r3, r2
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	2b09      	cmp	r3, #9
 8005ed6:	f200 8089 	bhi.w	8005fec <_dtoa_r+0x2f4>
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	bfc4      	itt	gt
 8005ede:	3b04      	subgt	r3, #4
 8005ee0:	9306      	strgt	r3, [sp, #24]
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ee8:	bfcc      	ite	gt
 8005eea:	2500      	movgt	r5, #0
 8005eec:	2501      	movle	r5, #1
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	f200 8087 	bhi.w	8006002 <_dtoa_r+0x30a>
 8005ef4:	e8df f003 	tbb	[pc, r3]
 8005ef8:	59383a2d 	.word	0x59383a2d
 8005efc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f00:	441d      	add	r5, r3
 8005f02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	bfc1      	itttt	gt
 8005f0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f12:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f1a:	bfda      	itte	le
 8005f1c:	f1c3 0320 	rsble	r3, r3, #32
 8005f20:	fa06 f003 	lslle.w	r0, r6, r3
 8005f24:	4318      	orrgt	r0, r3
 8005f26:	f7fa faed 	bl	8000504 <__aeabi_ui2d>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f32:	3d01      	subs	r5, #1
 8005f34:	930e      	str	r3, [sp, #56]	; 0x38
 8005f36:	e76a      	b.n	8005e0e <_dtoa_r+0x116>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e7b2      	b.n	8005ea2 <_dtoa_r+0x1aa>
 8005f3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f3e:	e7b1      	b.n	8005ea4 <_dtoa_r+0x1ac>
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	9a00      	ldr	r2, [sp, #0]
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	4253      	negs	r3, r2
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	e7bf      	b.n	8005ed2 <_dtoa_r+0x1da>
 8005f52:	2300      	movs	r3, #0
 8005f54:	9308      	str	r3, [sp, #32]
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc55      	bgt.n	8006008 <_dtoa_r+0x310>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f62:	461a      	mov	r2, r3
 8005f64:	9209      	str	r2, [sp, #36]	; 0x24
 8005f66:	e00c      	b.n	8005f82 <_dtoa_r+0x28a>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7f3      	b.n	8005f54 <_dtoa_r+0x25c>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	9302      	str	r3, [sp, #8]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	9303      	str	r3, [sp, #12]
 8005f7e:	bfb8      	it	lt
 8005f80:	2301      	movlt	r3, #1
 8005f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f84:	2200      	movs	r2, #0
 8005f86:	6042      	str	r2, [r0, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	f102 0614 	add.w	r6, r2, #20
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	6841      	ldr	r1, [r0, #4]
 8005f92:	d93d      	bls.n	8006010 <_dtoa_r+0x318>
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 fa57 	bl	8007448 <_Balloc>
 8005f9a:	9001      	str	r0, [sp, #4]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d13b      	bne.n	8006018 <_dtoa_r+0x320>
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <_dtoa_r+0x2f0>)
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fa8:	e6c0      	b.n	8005d2c <_dtoa_r+0x34>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e7df      	b.n	8005f6e <_dtoa_r+0x276>
 8005fae:	bf00      	nop
 8005fb0:	636f4361 	.word	0x636f4361
 8005fb4:	3fd287a7 	.word	0x3fd287a7
 8005fb8:	8b60c8b3 	.word	0x8b60c8b3
 8005fbc:	3fc68a28 	.word	0x3fc68a28
 8005fc0:	509f79fb 	.word	0x509f79fb
 8005fc4:	3fd34413 	.word	0x3fd34413
 8005fc8:	08008b2e 	.word	0x08008b2e
 8005fcc:	08008b45 	.word	0x08008b45
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	08008b2a 	.word	0x08008b2a
 8005fd8:	08008b21 	.word	0x08008b21
 8005fdc:	080089a1 	.word	0x080089a1
 8005fe0:	3ff80000 	.word	0x3ff80000
 8005fe4:	08008d18 	.word	0x08008d18
 8005fe8:	08008ba0 	.word	0x08008ba0
 8005fec:	2501      	movs	r5, #1
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9306      	str	r3, [sp, #24]
 8005ff2:	9508      	str	r5, [sp, #32]
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2312      	movs	r3, #18
 8006000:	e7b0      	b.n	8005f64 <_dtoa_r+0x26c>
 8006002:	2301      	movs	r3, #1
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	e7f5      	b.n	8005ff4 <_dtoa_r+0x2fc>
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800600e:	e7b8      	b.n	8005f82 <_dtoa_r+0x28a>
 8006010:	3101      	adds	r1, #1
 8006012:	6041      	str	r1, [r0, #4]
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	e7b8      	b.n	8005f8a <_dtoa_r+0x292>
 8006018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	2b0e      	cmp	r3, #14
 8006022:	f200 809d 	bhi.w	8006160 <_dtoa_r+0x468>
 8006026:	2d00      	cmp	r5, #0
 8006028:	f000 809a 	beq.w	8006160 <_dtoa_r+0x468>
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd32      	ble.n	8006098 <_dtoa_r+0x3a0>
 8006032:	4ab7      	ldr	r2, [pc, #732]	; (8006310 <_dtoa_r+0x618>)
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800603c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006040:	9b00      	ldr	r3, [sp, #0]
 8006042:	05d8      	lsls	r0, r3, #23
 8006044:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006048:	d516      	bpl.n	8006078 <_dtoa_r+0x380>
 800604a:	4bb2      	ldr	r3, [pc, #712]	; (8006314 <_dtoa_r+0x61c>)
 800604c:	ec51 0b19 	vmov	r0, r1, d9
 8006050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006054:	f7fa fbfa 	bl	800084c <__aeabi_ddiv>
 8006058:	f007 070f 	and.w	r7, r7, #15
 800605c:	4682      	mov	sl, r0
 800605e:	468b      	mov	fp, r1
 8006060:	2503      	movs	r5, #3
 8006062:	4eac      	ldr	r6, [pc, #688]	; (8006314 <_dtoa_r+0x61c>)
 8006064:	b957      	cbnz	r7, 800607c <_dtoa_r+0x384>
 8006066:	4642      	mov	r2, r8
 8006068:	464b      	mov	r3, r9
 800606a:	4650      	mov	r0, sl
 800606c:	4659      	mov	r1, fp
 800606e:	f7fa fbed 	bl	800084c <__aeabi_ddiv>
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	e028      	b.n	80060ca <_dtoa_r+0x3d2>
 8006078:	2502      	movs	r5, #2
 800607a:	e7f2      	b.n	8006062 <_dtoa_r+0x36a>
 800607c:	07f9      	lsls	r1, r7, #31
 800607e:	d508      	bpl.n	8006092 <_dtoa_r+0x39a>
 8006080:	4640      	mov	r0, r8
 8006082:	4649      	mov	r1, r9
 8006084:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006088:	f7fa fab6 	bl	80005f8 <__aeabi_dmul>
 800608c:	3501      	adds	r5, #1
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	107f      	asrs	r7, r7, #1
 8006094:	3608      	adds	r6, #8
 8006096:	e7e5      	b.n	8006064 <_dtoa_r+0x36c>
 8006098:	f000 809b 	beq.w	80061d2 <_dtoa_r+0x4da>
 800609c:	9b00      	ldr	r3, [sp, #0]
 800609e:	4f9d      	ldr	r7, [pc, #628]	; (8006314 <_dtoa_r+0x61c>)
 80060a0:	425e      	negs	r6, r3
 80060a2:	4b9b      	ldr	r3, [pc, #620]	; (8006310 <_dtoa_r+0x618>)
 80060a4:	f006 020f 	and.w	r2, r6, #15
 80060a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	ec51 0b19 	vmov	r0, r1, d9
 80060b4:	f7fa faa0 	bl	80005f8 <__aeabi_dmul>
 80060b8:	1136      	asrs	r6, r6, #4
 80060ba:	4682      	mov	sl, r0
 80060bc:	468b      	mov	fp, r1
 80060be:	2300      	movs	r3, #0
 80060c0:	2502      	movs	r5, #2
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	d17a      	bne.n	80061bc <_dtoa_r+0x4c4>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d3      	bne.n	8006072 <_dtoa_r+0x37a>
 80060ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8082 	beq.w	80061d6 <_dtoa_r+0x4de>
 80060d2:	4b91      	ldr	r3, [pc, #580]	; (8006318 <_dtoa_r+0x620>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	4650      	mov	r0, sl
 80060d8:	4659      	mov	r1, fp
 80060da:	f7fa fcff 	bl	8000adc <__aeabi_dcmplt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d079      	beq.n	80061d6 <_dtoa_r+0x4de>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d076      	beq.n	80061d6 <_dtoa_r+0x4de>
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dd36      	ble.n	800615c <_dtoa_r+0x464>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	1e5f      	subs	r7, r3, #1
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <_dtoa_r+0x624>)
 80060fa:	f7fa fa7d 	bl	80005f8 <__aeabi_dmul>
 80060fe:	9e02      	ldr	r6, [sp, #8]
 8006100:	4682      	mov	sl, r0
 8006102:	468b      	mov	fp, r1
 8006104:	3501      	adds	r5, #1
 8006106:	4628      	mov	r0, r5
 8006108:	f7fa fa0c 	bl	8000524 <__aeabi_i2d>
 800610c:	4652      	mov	r2, sl
 800610e:	465b      	mov	r3, fp
 8006110:	f7fa fa72 	bl	80005f8 <__aeabi_dmul>
 8006114:	4b82      	ldr	r3, [pc, #520]	; (8006320 <_dtoa_r+0x628>)
 8006116:	2200      	movs	r2, #0
 8006118:	f7fa f8b8 	bl	800028c <__adddf3>
 800611c:	46d0      	mov	r8, sl
 800611e:	46d9      	mov	r9, fp
 8006120:	4682      	mov	sl, r0
 8006122:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006126:	2e00      	cmp	r6, #0
 8006128:	d158      	bne.n	80061dc <_dtoa_r+0x4e4>
 800612a:	4b7e      	ldr	r3, [pc, #504]	; (8006324 <_dtoa_r+0x62c>)
 800612c:	2200      	movs	r2, #0
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa f8a9 	bl	8000288 <__aeabi_dsub>
 8006136:	4652      	mov	r2, sl
 8006138:	465b      	mov	r3, fp
 800613a:	4680      	mov	r8, r0
 800613c:	4689      	mov	r9, r1
 800613e:	f7fa fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8006142:	2800      	cmp	r0, #0
 8006144:	f040 8295 	bne.w	8006672 <_dtoa_r+0x97a>
 8006148:	4652      	mov	r2, sl
 800614a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fcc3 	bl	8000adc <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f040 8289 	bne.w	800666e <_dtoa_r+0x976>
 800615c:	ec5b ab19 	vmov	sl, fp, d9
 8006160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006162:	2b00      	cmp	r3, #0
 8006164:	f2c0 8148 	blt.w	80063f8 <_dtoa_r+0x700>
 8006168:	9a00      	ldr	r2, [sp, #0]
 800616a:	2a0e      	cmp	r2, #14
 800616c:	f300 8144 	bgt.w	80063f8 <_dtoa_r+0x700>
 8006170:	4b67      	ldr	r3, [pc, #412]	; (8006310 <_dtoa_r+0x618>)
 8006172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	f280 80d5 	bge.w	800632c <_dtoa_r+0x634>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f300 80d1 	bgt.w	800632c <_dtoa_r+0x634>
 800618a:	f040 826f 	bne.w	800666c <_dtoa_r+0x974>
 800618e:	4b65      	ldr	r3, [pc, #404]	; (8006324 <_dtoa_r+0x62c>)
 8006190:	2200      	movs	r2, #0
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa fa2f 	bl	80005f8 <__aeabi_dmul>
 800619a:	4652      	mov	r2, sl
 800619c:	465b      	mov	r3, fp
 800619e:	f7fa fcb1 	bl	8000b04 <__aeabi_dcmpge>
 80061a2:	9e03      	ldr	r6, [sp, #12]
 80061a4:	4637      	mov	r7, r6
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f040 8245 	bne.w	8006636 <_dtoa_r+0x93e>
 80061ac:	9d01      	ldr	r5, [sp, #4]
 80061ae:	2331      	movs	r3, #49	; 0x31
 80061b0:	f805 3b01 	strb.w	r3, [r5], #1
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	e240      	b.n	800663e <_dtoa_r+0x946>
 80061bc:	07f2      	lsls	r2, r6, #31
 80061be:	d505      	bpl.n	80061cc <_dtoa_r+0x4d4>
 80061c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c4:	f7fa fa18 	bl	80005f8 <__aeabi_dmul>
 80061c8:	3501      	adds	r5, #1
 80061ca:	2301      	movs	r3, #1
 80061cc:	1076      	asrs	r6, r6, #1
 80061ce:	3708      	adds	r7, #8
 80061d0:	e777      	b.n	80060c2 <_dtoa_r+0x3ca>
 80061d2:	2502      	movs	r5, #2
 80061d4:	e779      	b.n	80060ca <_dtoa_r+0x3d2>
 80061d6:	9f00      	ldr	r7, [sp, #0]
 80061d8:	9e03      	ldr	r6, [sp, #12]
 80061da:	e794      	b.n	8006106 <_dtoa_r+0x40e>
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	4b4c      	ldr	r3, [pc, #304]	; (8006310 <_dtoa_r+0x618>)
 80061e0:	4431      	add	r1, r6
 80061e2:	910d      	str	r1, [sp, #52]	; 0x34
 80061e4:	9908      	ldr	r1, [sp, #32]
 80061e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d043      	beq.n	800627a <_dtoa_r+0x582>
 80061f2:	494d      	ldr	r1, [pc, #308]	; (8006328 <_dtoa_r+0x630>)
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7fa fb29 	bl	800084c <__aeabi_ddiv>
 80061fa:	4652      	mov	r2, sl
 80061fc:	465b      	mov	r3, fp
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	9d01      	ldr	r5, [sp, #4]
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	f7fa fca4 	bl	8000b58 <__aeabi_d2iz>
 8006210:	4606      	mov	r6, r0
 8006212:	f7fa f987 	bl	8000524 <__aeabi_i2d>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7fa f833 	bl	8000288 <__aeabi_dsub>
 8006222:	3630      	adds	r6, #48	; 0x30
 8006224:	f805 6b01 	strb.w	r6, [r5], #1
 8006228:	4652      	mov	r2, sl
 800622a:	465b      	mov	r3, fp
 800622c:	4680      	mov	r8, r0
 800622e:	4689      	mov	r9, r1
 8006230:	f7fa fc54 	bl	8000adc <__aeabi_dcmplt>
 8006234:	2800      	cmp	r0, #0
 8006236:	d163      	bne.n	8006300 <_dtoa_r+0x608>
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	4936      	ldr	r1, [pc, #216]	; (8006318 <_dtoa_r+0x620>)
 800623e:	2000      	movs	r0, #0
 8006240:	f7fa f822 	bl	8000288 <__aeabi_dsub>
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	f7fa fc48 	bl	8000adc <__aeabi_dcmplt>
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 80b5 	bne.w	80063bc <_dtoa_r+0x6c4>
 8006252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006254:	429d      	cmp	r5, r3
 8006256:	d081      	beq.n	800615c <_dtoa_r+0x464>
 8006258:	4b30      	ldr	r3, [pc, #192]	; (800631c <_dtoa_r+0x624>)
 800625a:	2200      	movs	r2, #0
 800625c:	4650      	mov	r0, sl
 800625e:	4659      	mov	r1, fp
 8006260:	f7fa f9ca 	bl	80005f8 <__aeabi_dmul>
 8006264:	4b2d      	ldr	r3, [pc, #180]	; (800631c <_dtoa_r+0x624>)
 8006266:	4682      	mov	sl, r0
 8006268:	468b      	mov	fp, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	2200      	movs	r2, #0
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	4680      	mov	r8, r0
 8006276:	4689      	mov	r9, r1
 8006278:	e7c6      	b.n	8006208 <_dtoa_r+0x510>
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa f9bb 	bl	80005f8 <__aeabi_dmul>
 8006282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006284:	9d01      	ldr	r5, [sp, #4]
 8006286:	930f      	str	r3, [sp, #60]	; 0x3c
 8006288:	4682      	mov	sl, r0
 800628a:	468b      	mov	fp, r1
 800628c:	4649      	mov	r1, r9
 800628e:	4640      	mov	r0, r8
 8006290:	f7fa fc62 	bl	8000b58 <__aeabi_d2iz>
 8006294:	4606      	mov	r6, r0
 8006296:	f7fa f945 	bl	8000524 <__aeabi_i2d>
 800629a:	3630      	adds	r6, #48	; 0x30
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 fff0 	bl	8000288 <__aeabi_dsub>
 80062a8:	f805 6b01 	strb.w	r6, [r5], #1
 80062ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ae:	429d      	cmp	r5, r3
 80062b0:	4680      	mov	r8, r0
 80062b2:	4689      	mov	r9, r1
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	d124      	bne.n	8006304 <_dtoa_r+0x60c>
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <_dtoa_r+0x630>)
 80062bc:	4650      	mov	r0, sl
 80062be:	4659      	mov	r1, fp
 80062c0:	f7f9 ffe4 	bl	800028c <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7fa fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d173      	bne.n	80063bc <_dtoa_r+0x6c4>
 80062d4:	4652      	mov	r2, sl
 80062d6:	465b      	mov	r3, fp
 80062d8:	4913      	ldr	r1, [pc, #76]	; (8006328 <_dtoa_r+0x630>)
 80062da:	2000      	movs	r0, #0
 80062dc:	f7f9 ffd4 	bl	8000288 <__aeabi_dsub>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7fa fbf8 	bl	8000adc <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f43f af35 	beq.w	800615c <_dtoa_r+0x464>
 80062f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062f4:	1e6b      	subs	r3, r5, #1
 80062f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d0f8      	beq.n	80062f2 <_dtoa_r+0x5fa>
 8006300:	9700      	str	r7, [sp, #0]
 8006302:	e049      	b.n	8006398 <_dtoa_r+0x6a0>
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <_dtoa_r+0x624>)
 8006306:	f7fa f977 	bl	80005f8 <__aeabi_dmul>
 800630a:	4680      	mov	r8, r0
 800630c:	4689      	mov	r9, r1
 800630e:	e7bd      	b.n	800628c <_dtoa_r+0x594>
 8006310:	08008d18 	.word	0x08008d18
 8006314:	08008cf0 	.word	0x08008cf0
 8006318:	3ff00000 	.word	0x3ff00000
 800631c:	40240000 	.word	0x40240000
 8006320:	401c0000 	.word	0x401c0000
 8006324:	40140000 	.word	0x40140000
 8006328:	3fe00000 	.word	0x3fe00000
 800632c:	9d01      	ldr	r5, [sp, #4]
 800632e:	4656      	mov	r6, sl
 8006330:	465f      	mov	r7, fp
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa fa87 	bl	800084c <__aeabi_ddiv>
 800633e:	f7fa fc0b 	bl	8000b58 <__aeabi_d2iz>
 8006342:	4682      	mov	sl, r0
 8006344:	f7fa f8ee 	bl	8000524 <__aeabi_i2d>
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800635c:	f7f9 ff94 	bl	8000288 <__aeabi_dsub>
 8006360:	f805 6b01 	strb.w	r6, [r5], #1
 8006364:	9e01      	ldr	r6, [sp, #4]
 8006366:	9f03      	ldr	r7, [sp, #12]
 8006368:	1bae      	subs	r6, r5, r6
 800636a:	42b7      	cmp	r7, r6
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	d135      	bne.n	80063de <_dtoa_r+0x6e6>
 8006372:	f7f9 ff8b 	bl	800028c <__adddf3>
 8006376:	4642      	mov	r2, r8
 8006378:	464b      	mov	r3, r9
 800637a:	4606      	mov	r6, r0
 800637c:	460f      	mov	r7, r1
 800637e:	f7fa fbcb 	bl	8000b18 <__aeabi_dcmpgt>
 8006382:	b9d0      	cbnz	r0, 80063ba <_dtoa_r+0x6c2>
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006390:	b110      	cbz	r0, 8006398 <_dtoa_r+0x6a0>
 8006392:	f01a 0f01 	tst.w	sl, #1
 8006396:	d110      	bne.n	80063ba <_dtoa_r+0x6c2>
 8006398:	4620      	mov	r0, r4
 800639a:	ee18 1a10 	vmov	r1, s16
 800639e:	f001 f893 	bl	80074c8 <_Bfree>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9800      	ldr	r0, [sp, #0]
 80063a6:	702b      	strb	r3, [r5, #0]
 80063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063aa:	3001      	adds	r0, #1
 80063ac:	6018      	str	r0, [r3, #0]
 80063ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f43f acf1 	beq.w	8005d98 <_dtoa_r+0xa0>
 80063b6:	601d      	str	r5, [r3, #0]
 80063b8:	e4ee      	b.n	8005d98 <_dtoa_r+0xa0>
 80063ba:	9f00      	ldr	r7, [sp, #0]
 80063bc:	462b      	mov	r3, r5
 80063be:	461d      	mov	r5, r3
 80063c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c4:	2a39      	cmp	r2, #57	; 0x39
 80063c6:	d106      	bne.n	80063d6 <_dtoa_r+0x6de>
 80063c8:	9a01      	ldr	r2, [sp, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1f7      	bne.n	80063be <_dtoa_r+0x6c6>
 80063ce:	9901      	ldr	r1, [sp, #4]
 80063d0:	2230      	movs	r2, #48	; 0x30
 80063d2:	3701      	adds	r7, #1
 80063d4:	700a      	strb	r2, [r1, #0]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	3201      	adds	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e790      	b.n	8006300 <_dtoa_r+0x608>
 80063de:	4ba6      	ldr	r3, [pc, #664]	; (8006678 <_dtoa_r+0x980>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	f7fa f909 	bl	80005f8 <__aeabi_dmul>
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	f7fa fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d09d      	beq.n	8006332 <_dtoa_r+0x63a>
 80063f6:	e7cf      	b.n	8006398 <_dtoa_r+0x6a0>
 80063f8:	9a08      	ldr	r2, [sp, #32]
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	f000 80d7 	beq.w	80065ae <_dtoa_r+0x8b6>
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	2a01      	cmp	r2, #1
 8006404:	f300 80ba 	bgt.w	800657c <_dtoa_r+0x884>
 8006408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800640a:	2a00      	cmp	r2, #0
 800640c:	f000 80b2 	beq.w	8006574 <_dtoa_r+0x87c>
 8006410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006414:	9e07      	ldr	r6, [sp, #28]
 8006416:	9d04      	ldr	r5, [sp, #16]
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	441a      	add	r2, r3
 800641c:	9204      	str	r2, [sp, #16]
 800641e:	9a05      	ldr	r2, [sp, #20]
 8006420:	2101      	movs	r1, #1
 8006422:	441a      	add	r2, r3
 8006424:	4620      	mov	r0, r4
 8006426:	9205      	str	r2, [sp, #20]
 8006428:	f001 f950 	bl	80076cc <__i2b>
 800642c:	4607      	mov	r7, r0
 800642e:	2d00      	cmp	r5, #0
 8006430:	dd0c      	ble.n	800644c <_dtoa_r+0x754>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd09      	ble.n	800644c <_dtoa_r+0x754>
 8006438:	42ab      	cmp	r3, r5
 800643a:	9a04      	ldr	r2, [sp, #16]
 800643c:	bfa8      	it	ge
 800643e:	462b      	movge	r3, r5
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	9204      	str	r2, [sp, #16]
 8006444:	9a05      	ldr	r2, [sp, #20]
 8006446:	1aed      	subs	r5, r5, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	b31b      	cbz	r3, 8006498 <_dtoa_r+0x7a0>
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80af 	beq.w	80065b6 <_dtoa_r+0x8be>
 8006458:	2e00      	cmp	r6, #0
 800645a:	dd13      	ble.n	8006484 <_dtoa_r+0x78c>
 800645c:	4639      	mov	r1, r7
 800645e:	4632      	mov	r2, r6
 8006460:	4620      	mov	r0, r4
 8006462:	f001 f9f3 	bl	800784c <__pow5mult>
 8006466:	ee18 2a10 	vmov	r2, s16
 800646a:	4601      	mov	r1, r0
 800646c:	4607      	mov	r7, r0
 800646e:	4620      	mov	r0, r4
 8006470:	f001 f942 	bl	80076f8 <__multiply>
 8006474:	ee18 1a10 	vmov	r1, s16
 8006478:	4680      	mov	r8, r0
 800647a:	4620      	mov	r0, r4
 800647c:	f001 f824 	bl	80074c8 <_Bfree>
 8006480:	ee08 8a10 	vmov	s16, r8
 8006484:	9b07      	ldr	r3, [sp, #28]
 8006486:	1b9a      	subs	r2, r3, r6
 8006488:	d006      	beq.n	8006498 <_dtoa_r+0x7a0>
 800648a:	ee18 1a10 	vmov	r1, s16
 800648e:	4620      	mov	r0, r4
 8006490:	f001 f9dc 	bl	800784c <__pow5mult>
 8006494:	ee08 0a10 	vmov	s16, r0
 8006498:	2101      	movs	r1, #1
 800649a:	4620      	mov	r0, r4
 800649c:	f001 f916 	bl	80076cc <__i2b>
 80064a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	f340 8088 	ble.w	80065ba <_dtoa_r+0x8c2>
 80064aa:	461a      	mov	r2, r3
 80064ac:	4601      	mov	r1, r0
 80064ae:	4620      	mov	r0, r4
 80064b0:	f001 f9cc 	bl	800784c <__pow5mult>
 80064b4:	9b06      	ldr	r3, [sp, #24]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	4606      	mov	r6, r0
 80064ba:	f340 8081 	ble.w	80065c0 <_dtoa_r+0x8c8>
 80064be:	f04f 0800 	mov.w	r8, #0
 80064c2:	6933      	ldr	r3, [r6, #16]
 80064c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064c8:	6918      	ldr	r0, [r3, #16]
 80064ca:	f001 f8af 	bl	800762c <__hi0bits>
 80064ce:	f1c0 0020 	rsb	r0, r0, #32
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	4418      	add	r0, r3
 80064d6:	f010 001f 	ands.w	r0, r0, #31
 80064da:	f000 8092 	beq.w	8006602 <_dtoa_r+0x90a>
 80064de:	f1c0 0320 	rsb	r3, r0, #32
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	f340 808a 	ble.w	80065fc <_dtoa_r+0x904>
 80064e8:	f1c0 001c 	rsb	r0, r0, #28
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	4403      	add	r3, r0
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	4403      	add	r3, r0
 80064f6:	4405      	add	r5, r0
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dd07      	ble.n	8006510 <_dtoa_r+0x818>
 8006500:	ee18 1a10 	vmov	r1, s16
 8006504:	461a      	mov	r2, r3
 8006506:	4620      	mov	r0, r4
 8006508:	f001 f9fa 	bl	8007900 <__lshift>
 800650c:	ee08 0a10 	vmov	s16, r0
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x82a>
 8006516:	4631      	mov	r1, r6
 8006518:	461a      	mov	r2, r3
 800651a:	4620      	mov	r0, r4
 800651c:	f001 f9f0 	bl	8007900 <__lshift>
 8006520:	4606      	mov	r6, r0
 8006522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d06e      	beq.n	8006606 <_dtoa_r+0x90e>
 8006528:	ee18 0a10 	vmov	r0, s16
 800652c:	4631      	mov	r1, r6
 800652e:	f001 fa57 	bl	80079e0 <__mcmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	da67      	bge.n	8006606 <_dtoa_r+0x90e>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	3b01      	subs	r3, #1
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	220a      	movs	r2, #10
 8006542:	2300      	movs	r3, #0
 8006544:	4620      	mov	r0, r4
 8006546:	f000 ffe1 	bl	800750c <__multadd>
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	ee08 0a10 	vmov	s16, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 81b1 	beq.w	80068b8 <_dtoa_r+0xbc0>
 8006556:	2300      	movs	r3, #0
 8006558:	4639      	mov	r1, r7
 800655a:	220a      	movs	r2, #10
 800655c:	4620      	mov	r0, r4
 800655e:	f000 ffd5 	bl	800750c <__multadd>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	4607      	mov	r7, r0
 8006568:	f300 808e 	bgt.w	8006688 <_dtoa_r+0x990>
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	dc51      	bgt.n	8006616 <_dtoa_r+0x91e>
 8006572:	e089      	b.n	8006688 <_dtoa_r+0x990>
 8006574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800657a:	e74b      	b.n	8006414 <_dtoa_r+0x71c>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	1e5e      	subs	r6, r3, #1
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	42b3      	cmp	r3, r6
 8006584:	bfbf      	itttt	lt
 8006586:	9b07      	ldrlt	r3, [sp, #28]
 8006588:	9607      	strlt	r6, [sp, #28]
 800658a:	1af2      	sublt	r2, r6, r3
 800658c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800658e:	bfb6      	itet	lt
 8006590:	189b      	addlt	r3, r3, r2
 8006592:	1b9e      	subge	r6, r3, r6
 8006594:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	bfb8      	it	lt
 800659a:	2600      	movlt	r6, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	bfb7      	itett	lt
 80065a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065a8:	1a9d      	sublt	r5, r3, r2
 80065aa:	2300      	movlt	r3, #0
 80065ac:	e734      	b.n	8006418 <_dtoa_r+0x720>
 80065ae:	9e07      	ldr	r6, [sp, #28]
 80065b0:	9d04      	ldr	r5, [sp, #16]
 80065b2:	9f08      	ldr	r7, [sp, #32]
 80065b4:	e73b      	b.n	800642e <_dtoa_r+0x736>
 80065b6:	9a07      	ldr	r2, [sp, #28]
 80065b8:	e767      	b.n	800648a <_dtoa_r+0x792>
 80065ba:	9b06      	ldr	r3, [sp, #24]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	dc18      	bgt.n	80065f2 <_dtoa_r+0x8fa>
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	d115      	bne.n	80065f2 <_dtoa_r+0x8fa>
 80065c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ca:	b993      	cbnz	r3, 80065f2 <_dtoa_r+0x8fa>
 80065cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065d0:	0d1b      	lsrs	r3, r3, #20
 80065d2:	051b      	lsls	r3, r3, #20
 80065d4:	b183      	cbz	r3, 80065f8 <_dtoa_r+0x900>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	9b05      	ldr	r3, [sp, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	f04f 0801 	mov.w	r8, #1
 80065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f47f af6a 	bne.w	80064c2 <_dtoa_r+0x7ca>
 80065ee:	2001      	movs	r0, #1
 80065f0:	e76f      	b.n	80064d2 <_dtoa_r+0x7da>
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	e7f6      	b.n	80065e6 <_dtoa_r+0x8ee>
 80065f8:	4698      	mov	r8, r3
 80065fa:	e7f4      	b.n	80065e6 <_dtoa_r+0x8ee>
 80065fc:	f43f af7d 	beq.w	80064fa <_dtoa_r+0x802>
 8006600:	4618      	mov	r0, r3
 8006602:	301c      	adds	r0, #28
 8006604:	e772      	b.n	80064ec <_dtoa_r+0x7f4>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dc37      	bgt.n	800667c <_dtoa_r+0x984>
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	2b02      	cmp	r3, #2
 8006610:	dd34      	ble.n	800667c <_dtoa_r+0x984>
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	b96b      	cbnz	r3, 8006636 <_dtoa_r+0x93e>
 800661a:	4631      	mov	r1, r6
 800661c:	2205      	movs	r2, #5
 800661e:	4620      	mov	r0, r4
 8006620:	f000 ff74 	bl	800750c <__multadd>
 8006624:	4601      	mov	r1, r0
 8006626:	4606      	mov	r6, r0
 8006628:	ee18 0a10 	vmov	r0, s16
 800662c:	f001 f9d8 	bl	80079e0 <__mcmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	f73f adbb 	bgt.w	80061ac <_dtoa_r+0x4b4>
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	9d01      	ldr	r5, [sp, #4]
 800663a:	43db      	mvns	r3, r3
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	4631      	mov	r1, r6
 8006644:	4620      	mov	r0, r4
 8006646:	f000 ff3f 	bl	80074c8 <_Bfree>
 800664a:	2f00      	cmp	r7, #0
 800664c:	f43f aea4 	beq.w	8006398 <_dtoa_r+0x6a0>
 8006650:	f1b8 0f00 	cmp.w	r8, #0
 8006654:	d005      	beq.n	8006662 <_dtoa_r+0x96a>
 8006656:	45b8      	cmp	r8, r7
 8006658:	d003      	beq.n	8006662 <_dtoa_r+0x96a>
 800665a:	4641      	mov	r1, r8
 800665c:	4620      	mov	r0, r4
 800665e:	f000 ff33 	bl	80074c8 <_Bfree>
 8006662:	4639      	mov	r1, r7
 8006664:	4620      	mov	r0, r4
 8006666:	f000 ff2f 	bl	80074c8 <_Bfree>
 800666a:	e695      	b.n	8006398 <_dtoa_r+0x6a0>
 800666c:	2600      	movs	r6, #0
 800666e:	4637      	mov	r7, r6
 8006670:	e7e1      	b.n	8006636 <_dtoa_r+0x93e>
 8006672:	9700      	str	r7, [sp, #0]
 8006674:	4637      	mov	r7, r6
 8006676:	e599      	b.n	80061ac <_dtoa_r+0x4b4>
 8006678:	40240000 	.word	0x40240000
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80ca 	beq.w	8006818 <_dtoa_r+0xb20>
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	2d00      	cmp	r5, #0
 800668a:	dd05      	ble.n	8006698 <_dtoa_r+0x9a0>
 800668c:	4639      	mov	r1, r7
 800668e:	462a      	mov	r2, r5
 8006690:	4620      	mov	r0, r4
 8006692:	f001 f935 	bl	8007900 <__lshift>
 8006696:	4607      	mov	r7, r0
 8006698:	f1b8 0f00 	cmp.w	r8, #0
 800669c:	d05b      	beq.n	8006756 <_dtoa_r+0xa5e>
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fed1 	bl	8007448 <_Balloc>
 80066a6:	4605      	mov	r5, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <_dtoa_r+0x9be>
 80066aa:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <_dtoa_r+0xbd0>)
 80066ac:	4602      	mov	r2, r0
 80066ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066b2:	f7ff bb3b 	b.w	8005d2c <_dtoa_r+0x34>
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	3202      	adds	r2, #2
 80066ba:	0092      	lsls	r2, r2, #2
 80066bc:	f107 010c 	add.w	r1, r7, #12
 80066c0:	300c      	adds	r0, #12
 80066c2:	f000 feb3 	bl	800742c <memcpy>
 80066c6:	2201      	movs	r2, #1
 80066c8:	4629      	mov	r1, r5
 80066ca:	4620      	mov	r0, r4
 80066cc:	f001 f918 	bl	8007900 <__lshift>
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	f103 0901 	add.w	r9, r3, #1
 80066d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80066da:	4413      	add	r3, r2
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	f00a 0301 	and.w	r3, sl, #1
 80066e2:	46b8      	mov	r8, r7
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	4607      	mov	r7, r0
 80066e8:	4631      	mov	r1, r6
 80066ea:	ee18 0a10 	vmov	r0, s16
 80066ee:	f7ff fa77 	bl	8005be0 <quorem>
 80066f2:	4641      	mov	r1, r8
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066fa:	ee18 0a10 	vmov	r0, s16
 80066fe:	f001 f96f 	bl	80079e0 <__mcmp>
 8006702:	463a      	mov	r2, r7
 8006704:	9003      	str	r0, [sp, #12]
 8006706:	4631      	mov	r1, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f001 f985 	bl	8007a18 <__mdiff>
 800670e:	68c2      	ldr	r2, [r0, #12]
 8006710:	f109 3bff 	add.w	fp, r9, #4294967295
 8006714:	4605      	mov	r5, r0
 8006716:	bb02      	cbnz	r2, 800675a <_dtoa_r+0xa62>
 8006718:	4601      	mov	r1, r0
 800671a:	ee18 0a10 	vmov	r0, s16
 800671e:	f001 f95f 	bl	80079e0 <__mcmp>
 8006722:	4602      	mov	r2, r0
 8006724:	4629      	mov	r1, r5
 8006726:	4620      	mov	r0, r4
 8006728:	9207      	str	r2, [sp, #28]
 800672a:	f000 fecd 	bl	80074c8 <_Bfree>
 800672e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006732:	ea43 0102 	orr.w	r1, r3, r2
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	430b      	orrs	r3, r1
 800673a:	464d      	mov	r5, r9
 800673c:	d10f      	bne.n	800675e <_dtoa_r+0xa66>
 800673e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006742:	d02a      	beq.n	800679a <_dtoa_r+0xaa2>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dd02      	ble.n	8006750 <_dtoa_r+0xa58>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006750:	f88b a000 	strb.w	sl, [fp]
 8006754:	e775      	b.n	8006642 <_dtoa_r+0x94a>
 8006756:	4638      	mov	r0, r7
 8006758:	e7ba      	b.n	80066d0 <_dtoa_r+0x9d8>
 800675a:	2201      	movs	r2, #1
 800675c:	e7e2      	b.n	8006724 <_dtoa_r+0xa2c>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db04      	blt.n	800676e <_dtoa_r+0xa76>
 8006764:	9906      	ldr	r1, [sp, #24]
 8006766:	430b      	orrs	r3, r1
 8006768:	9904      	ldr	r1, [sp, #16]
 800676a:	430b      	orrs	r3, r1
 800676c:	d122      	bne.n	80067b4 <_dtoa_r+0xabc>
 800676e:	2a00      	cmp	r2, #0
 8006770:	ddee      	ble.n	8006750 <_dtoa_r+0xa58>
 8006772:	ee18 1a10 	vmov	r1, s16
 8006776:	2201      	movs	r2, #1
 8006778:	4620      	mov	r0, r4
 800677a:	f001 f8c1 	bl	8007900 <__lshift>
 800677e:	4631      	mov	r1, r6
 8006780:	ee08 0a10 	vmov	s16, r0
 8006784:	f001 f92c 	bl	80079e0 <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	dc03      	bgt.n	8006794 <_dtoa_r+0xa9c>
 800678c:	d1e0      	bne.n	8006750 <_dtoa_r+0xa58>
 800678e:	f01a 0f01 	tst.w	sl, #1
 8006792:	d0dd      	beq.n	8006750 <_dtoa_r+0xa58>
 8006794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006798:	d1d7      	bne.n	800674a <_dtoa_r+0xa52>
 800679a:	2339      	movs	r3, #57	; 0x39
 800679c:	f88b 3000 	strb.w	r3, [fp]
 80067a0:	462b      	mov	r3, r5
 80067a2:	461d      	mov	r5, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067aa:	2a39      	cmp	r2, #57	; 0x39
 80067ac:	d071      	beq.n	8006892 <_dtoa_r+0xb9a>
 80067ae:	3201      	adds	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e746      	b.n	8006642 <_dtoa_r+0x94a>
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	dd07      	ble.n	80067c8 <_dtoa_r+0xad0>
 80067b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067bc:	d0ed      	beq.n	800679a <_dtoa_r+0xaa2>
 80067be:	f10a 0301 	add.w	r3, sl, #1
 80067c2:	f88b 3000 	strb.w	r3, [fp]
 80067c6:	e73c      	b.n	8006642 <_dtoa_r+0x94a>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067ce:	4599      	cmp	r9, r3
 80067d0:	d047      	beq.n	8006862 <_dtoa_r+0xb6a>
 80067d2:	ee18 1a10 	vmov	r1, s16
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fe96 	bl	800750c <__multadd>
 80067e0:	45b8      	cmp	r8, r7
 80067e2:	ee08 0a10 	vmov	s16, r0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 020a 	mov.w	r2, #10
 80067ee:	4641      	mov	r1, r8
 80067f0:	4620      	mov	r0, r4
 80067f2:	d106      	bne.n	8006802 <_dtoa_r+0xb0a>
 80067f4:	f000 fe8a 	bl	800750c <__multadd>
 80067f8:	4680      	mov	r8, r0
 80067fa:	4607      	mov	r7, r0
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e772      	b.n	80066e8 <_dtoa_r+0x9f0>
 8006802:	f000 fe83 	bl	800750c <__multadd>
 8006806:	4639      	mov	r1, r7
 8006808:	4680      	mov	r8, r0
 800680a:	2300      	movs	r3, #0
 800680c:	220a      	movs	r2, #10
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fe7c 	bl	800750c <__multadd>
 8006814:	4607      	mov	r7, r0
 8006816:	e7f1      	b.n	80067fc <_dtoa_r+0xb04>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	9d01      	ldr	r5, [sp, #4]
 800681e:	ee18 0a10 	vmov	r0, s16
 8006822:	4631      	mov	r1, r6
 8006824:	f7ff f9dc 	bl	8005be0 <quorem>
 8006828:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	f805 ab01 	strb.w	sl, [r5], #1
 8006832:	1aea      	subs	r2, r5, r3
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	4293      	cmp	r3, r2
 8006838:	dd09      	ble.n	800684e <_dtoa_r+0xb56>
 800683a:	ee18 1a10 	vmov	r1, s16
 800683e:	2300      	movs	r3, #0
 8006840:	220a      	movs	r2, #10
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fe62 	bl	800750c <__multadd>
 8006848:	ee08 0a10 	vmov	s16, r0
 800684c:	e7e7      	b.n	800681e <_dtoa_r+0xb26>
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfc8      	it	gt
 8006854:	461d      	movgt	r5, r3
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	bfd8      	it	le
 800685a:	2501      	movle	r5, #1
 800685c:	441d      	add	r5, r3
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	ee18 1a10 	vmov	r1, s16
 8006866:	2201      	movs	r2, #1
 8006868:	4620      	mov	r0, r4
 800686a:	f001 f849 	bl	8007900 <__lshift>
 800686e:	4631      	mov	r1, r6
 8006870:	ee08 0a10 	vmov	s16, r0
 8006874:	f001 f8b4 	bl	80079e0 <__mcmp>
 8006878:	2800      	cmp	r0, #0
 800687a:	dc91      	bgt.n	80067a0 <_dtoa_r+0xaa8>
 800687c:	d102      	bne.n	8006884 <_dtoa_r+0xb8c>
 800687e:	f01a 0f01 	tst.w	sl, #1
 8006882:	d18d      	bne.n	80067a0 <_dtoa_r+0xaa8>
 8006884:	462b      	mov	r3, r5
 8006886:	461d      	mov	r5, r3
 8006888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688c:	2a30      	cmp	r2, #48	; 0x30
 800688e:	d0fa      	beq.n	8006886 <_dtoa_r+0xb8e>
 8006890:	e6d7      	b.n	8006642 <_dtoa_r+0x94a>
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d184      	bne.n	80067a2 <_dtoa_r+0xaaa>
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	2331      	movs	r3, #49	; 0x31
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	e6ce      	b.n	8006642 <_dtoa_r+0x94a>
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <_dtoa_r+0xbd4>)
 80068a6:	f7ff ba95 	b.w	8005dd4 <_dtoa_r+0xdc>
 80068aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f47f aa6e 	bne.w	8005d8e <_dtoa_r+0x96>
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <_dtoa_r+0xbd8>)
 80068b4:	f7ff ba8e 	b.w	8005dd4 <_dtoa_r+0xdc>
 80068b8:	9b02      	ldr	r3, [sp, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dcae      	bgt.n	800681c <_dtoa_r+0xb24>
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	f73f aea8 	bgt.w	8006616 <_dtoa_r+0x91e>
 80068c6:	e7a9      	b.n	800681c <_dtoa_r+0xb24>
 80068c8:	08008ba0 	.word	0x08008ba0
 80068cc:	080089a0 	.word	0x080089a0
 80068d0:	08008b21 	.word	0x08008b21

080068d4 <__sflush_r>:
 80068d4:	898a      	ldrh	r2, [r1, #12]
 80068d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068da:	4605      	mov	r5, r0
 80068dc:	0710      	lsls	r0, r2, #28
 80068de:	460c      	mov	r4, r1
 80068e0:	d458      	bmi.n	8006994 <__sflush_r+0xc0>
 80068e2:	684b      	ldr	r3, [r1, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dc05      	bgt.n	80068f4 <__sflush_r+0x20>
 80068e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dc02      	bgt.n	80068f4 <__sflush_r+0x20>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	d0f9      	beq.n	80068ee <__sflush_r+0x1a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006900:	682f      	ldr	r7, [r5, #0]
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	d032      	beq.n	800696c <__sflush_r+0x98>
 8006906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	075a      	lsls	r2, r3, #29
 800690c:	d505      	bpl.n	800691a <__sflush_r+0x46>
 800690e:	6863      	ldr	r3, [r4, #4]
 8006910:	1ac0      	subs	r0, r0, r3
 8006912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006914:	b10b      	cbz	r3, 800691a <__sflush_r+0x46>
 8006916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006918:	1ac0      	subs	r0, r0, r3
 800691a:	2300      	movs	r3, #0
 800691c:	4602      	mov	r2, r0
 800691e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006920:	6a21      	ldr	r1, [r4, #32]
 8006922:	4628      	mov	r0, r5
 8006924:	47b0      	blx	r6
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	d106      	bne.n	800693a <__sflush_r+0x66>
 800692c:	6829      	ldr	r1, [r5, #0]
 800692e:	291d      	cmp	r1, #29
 8006930:	d82c      	bhi.n	800698c <__sflush_r+0xb8>
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <__sflush_r+0x108>)
 8006934:	40ca      	lsrs	r2, r1
 8006936:	07d6      	lsls	r6, r2, #31
 8006938:	d528      	bpl.n	800698c <__sflush_r+0xb8>
 800693a:	2200      	movs	r2, #0
 800693c:	6062      	str	r2, [r4, #4]
 800693e:	04d9      	lsls	r1, r3, #19
 8006940:	6922      	ldr	r2, [r4, #16]
 8006942:	6022      	str	r2, [r4, #0]
 8006944:	d504      	bpl.n	8006950 <__sflush_r+0x7c>
 8006946:	1c42      	adds	r2, r0, #1
 8006948:	d101      	bne.n	800694e <__sflush_r+0x7a>
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	b903      	cbnz	r3, 8006950 <__sflush_r+0x7c>
 800694e:	6560      	str	r0, [r4, #84]	; 0x54
 8006950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006952:	602f      	str	r7, [r5, #0]
 8006954:	2900      	cmp	r1, #0
 8006956:	d0ca      	beq.n	80068ee <__sflush_r+0x1a>
 8006958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800695c:	4299      	cmp	r1, r3
 800695e:	d002      	beq.n	8006966 <__sflush_r+0x92>
 8006960:	4628      	mov	r0, r5
 8006962:	f001 fa49 	bl	8007df8 <_free_r>
 8006966:	2000      	movs	r0, #0
 8006968:	6360      	str	r0, [r4, #52]	; 0x34
 800696a:	e7c1      	b.n	80068f0 <__sflush_r+0x1c>
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	2301      	movs	r3, #1
 8006970:	4628      	mov	r0, r5
 8006972:	47b0      	blx	r6
 8006974:	1c41      	adds	r1, r0, #1
 8006976:	d1c7      	bne.n	8006908 <__sflush_r+0x34>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0c4      	beq.n	8006908 <__sflush_r+0x34>
 800697e:	2b1d      	cmp	r3, #29
 8006980:	d001      	beq.n	8006986 <__sflush_r+0xb2>
 8006982:	2b16      	cmp	r3, #22
 8006984:	d101      	bne.n	800698a <__sflush_r+0xb6>
 8006986:	602f      	str	r7, [r5, #0]
 8006988:	e7b1      	b.n	80068ee <__sflush_r+0x1a>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	e7ad      	b.n	80068f0 <__sflush_r+0x1c>
 8006994:	690f      	ldr	r7, [r1, #16]
 8006996:	2f00      	cmp	r7, #0
 8006998:	d0a9      	beq.n	80068ee <__sflush_r+0x1a>
 800699a:	0793      	lsls	r3, r2, #30
 800699c:	680e      	ldr	r6, [r1, #0]
 800699e:	bf08      	it	eq
 80069a0:	694b      	ldreq	r3, [r1, #20]
 80069a2:	600f      	str	r7, [r1, #0]
 80069a4:	bf18      	it	ne
 80069a6:	2300      	movne	r3, #0
 80069a8:	eba6 0807 	sub.w	r8, r6, r7
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	dd9c      	ble.n	80068ee <__sflush_r+0x1a>
 80069b4:	6a21      	ldr	r1, [r4, #32]
 80069b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069b8:	4643      	mov	r3, r8
 80069ba:	463a      	mov	r2, r7
 80069bc:	4628      	mov	r0, r5
 80069be:	47b0      	blx	r6
 80069c0:	2800      	cmp	r0, #0
 80069c2:	dc06      	bgt.n	80069d2 <__sflush_r+0xfe>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e78e      	b.n	80068f0 <__sflush_r+0x1c>
 80069d2:	4407      	add	r7, r0
 80069d4:	eba8 0800 	sub.w	r8, r8, r0
 80069d8:	e7e9      	b.n	80069ae <__sflush_r+0xda>
 80069da:	bf00      	nop
 80069dc:	20400001 	.word	0x20400001

080069e0 <_fflush_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b913      	cbnz	r3, 80069f0 <_fflush_r+0x10>
 80069ea:	2500      	movs	r5, #0
 80069ec:	4628      	mov	r0, r5
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	b118      	cbz	r0, 80069fa <_fflush_r+0x1a>
 80069f2:	6983      	ldr	r3, [r0, #24]
 80069f4:	b90b      	cbnz	r3, 80069fa <_fflush_r+0x1a>
 80069f6:	f000 f887 	bl	8006b08 <__sinit>
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <_fflush_r+0x6c>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d11b      	bne.n	8006a38 <_fflush_r+0x58>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ef      	beq.n	80069ea <_fflush_r+0xa>
 8006a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a0c:	07d0      	lsls	r0, r2, #31
 8006a0e:	d404      	bmi.n	8006a1a <_fflush_r+0x3a>
 8006a10:	0599      	lsls	r1, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_fflush_r+0x3a>
 8006a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a16:	f000 fc88 	bl	800732a <__retarget_lock_acquire_recursive>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f7ff ff59 	bl	80068d4 <__sflush_r>
 8006a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	4605      	mov	r5, r0
 8006a28:	d4e0      	bmi.n	80069ec <_fflush_r+0xc>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	d4dd      	bmi.n	80069ec <_fflush_r+0xc>
 8006a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a32:	f000 fc7b 	bl	800732c <__retarget_lock_release_recursive>
 8006a36:	e7d9      	b.n	80069ec <_fflush_r+0xc>
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <_fflush_r+0x70>)
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	d101      	bne.n	8006a42 <_fflush_r+0x62>
 8006a3e:	68ac      	ldr	r4, [r5, #8]
 8006a40:	e7df      	b.n	8006a02 <_fflush_r+0x22>
 8006a42:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <_fflush_r+0x74>)
 8006a44:	429c      	cmp	r4, r3
 8006a46:	bf08      	it	eq
 8006a48:	68ec      	ldreq	r4, [r5, #12]
 8006a4a:	e7da      	b.n	8006a02 <_fflush_r+0x22>
 8006a4c:	08008bd4 	.word	0x08008bd4
 8006a50:	08008bf4 	.word	0x08008bf4
 8006a54:	08008bb4 	.word	0x08008bb4

08006a58 <std>:
 8006a58:	2300      	movs	r3, #0
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a66:	6083      	str	r3, [r0, #8]
 8006a68:	8181      	strh	r1, [r0, #12]
 8006a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a6c:	81c2      	strh	r2, [r0, #14]
 8006a6e:	6183      	str	r3, [r0, #24]
 8006a70:	4619      	mov	r1, r3
 8006a72:	2208      	movs	r2, #8
 8006a74:	305c      	adds	r0, #92	; 0x5c
 8006a76:	f7fd fa11 	bl	8003e9c <memset>
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <std+0x38>)
 8006a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <std+0x3c>)
 8006a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <std+0x40>)
 8006a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x44>)
 8006a88:	6224      	str	r4, [r4, #32]
 8006a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	08008559 	.word	0x08008559
 8006a94:	0800857b 	.word	0x0800857b
 8006a98:	080085b3 	.word	0x080085b3
 8006a9c:	080085d7 	.word	0x080085d7

08006aa0 <_cleanup_r>:
 8006aa0:	4901      	ldr	r1, [pc, #4]	; (8006aa8 <_cleanup_r+0x8>)
 8006aa2:	f000 b8af 	b.w	8006c04 <_fwalk_reent>
 8006aa6:	bf00      	nop
 8006aa8:	080069e1 	.word	0x080069e1

08006aac <__sfmoreglue>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	2268      	movs	r2, #104	; 0x68
 8006ab0:	1e4d      	subs	r5, r1, #1
 8006ab2:	4355      	muls	r5, r2
 8006ab4:	460e      	mov	r6, r1
 8006ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aba:	f001 fa09 	bl	8007ed0 <_malloc_r>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	b140      	cbz	r0, 8006ad4 <__sfmoreglue+0x28>
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ac8:	300c      	adds	r0, #12
 8006aca:	60a0      	str	r0, [r4, #8]
 8006acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ad0:	f7fd f9e4 	bl	8003e9c <memset>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}

08006ad8 <__sfp_lock_acquire>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__sfp_lock_acquire+0x8>)
 8006ada:	f000 bc26 	b.w	800732a <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20001a89 	.word	0x20001a89

08006ae4 <__sfp_lock_release>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__sfp_lock_release+0x8>)
 8006ae6:	f000 bc21 	b.w	800732c <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	20001a89 	.word	0x20001a89

08006af0 <__sinit_lock_acquire>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sinit_lock_acquire+0x8>)
 8006af2:	f000 bc1a 	b.w	800732a <__retarget_lock_acquire_recursive>
 8006af6:	bf00      	nop
 8006af8:	20001a8a 	.word	0x20001a8a

08006afc <__sinit_lock_release>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__sinit_lock_release+0x8>)
 8006afe:	f000 bc15 	b.w	800732c <__retarget_lock_release_recursive>
 8006b02:	bf00      	nop
 8006b04:	20001a8a 	.word	0x20001a8a

08006b08 <__sinit>:
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	f7ff fff0 	bl	8006af0 <__sinit_lock_acquire>
 8006b10:	69a3      	ldr	r3, [r4, #24]
 8006b12:	b11b      	cbz	r3, 8006b1c <__sinit+0x14>
 8006b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b18:	f7ff bff0 	b.w	8006afc <__sinit_lock_release>
 8006b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b20:	6523      	str	r3, [r4, #80]	; 0x50
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <__sinit+0x68>)
 8006b24:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <__sinit+0x6c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	bf04      	itt	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	61a3      	streq	r3, [r4, #24]
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 f820 	bl	8006b78 <__sfp>
 8006b38:	6060      	str	r0, [r4, #4]
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f81c 	bl	8006b78 <__sfp>
 8006b40:	60a0      	str	r0, [r4, #8]
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f818 	bl	8006b78 <__sfp>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	60e0      	str	r0, [r4, #12]
 8006b4c:	2104      	movs	r1, #4
 8006b4e:	6860      	ldr	r0, [r4, #4]
 8006b50:	f7ff ff82 	bl	8006a58 <std>
 8006b54:	68a0      	ldr	r0, [r4, #8]
 8006b56:	2201      	movs	r2, #1
 8006b58:	2109      	movs	r1, #9
 8006b5a:	f7ff ff7d 	bl	8006a58 <std>
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	2202      	movs	r2, #2
 8006b62:	2112      	movs	r1, #18
 8006b64:	f7ff ff78 	bl	8006a58 <std>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	61a3      	str	r3, [r4, #24]
 8006b6c:	e7d2      	b.n	8006b14 <__sinit+0xc>
 8006b6e:	bf00      	nop
 8006b70:	0800898c 	.word	0x0800898c
 8006b74:	08006aa1 	.word	0x08006aa1

08006b78 <__sfp>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	f7ff ffac 	bl	8006ad8 <__sfp_lock_acquire>
 8006b80:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <__sfp+0x84>)
 8006b82:	681e      	ldr	r6, [r3, #0]
 8006b84:	69b3      	ldr	r3, [r6, #24]
 8006b86:	b913      	cbnz	r3, 8006b8e <__sfp+0x16>
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7ff ffbd 	bl	8006b08 <__sinit>
 8006b8e:	3648      	adds	r6, #72	; 0x48
 8006b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	d503      	bpl.n	8006ba0 <__sfp+0x28>
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	b30b      	cbz	r3, 8006be0 <__sfp+0x68>
 8006b9c:	6836      	ldr	r6, [r6, #0]
 8006b9e:	e7f7      	b.n	8006b90 <__sfp+0x18>
 8006ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ba4:	b9d5      	cbnz	r5, 8006bdc <__sfp+0x64>
 8006ba6:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <__sfp+0x88>)
 8006ba8:	60e3      	str	r3, [r4, #12]
 8006baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bae:	6665      	str	r5, [r4, #100]	; 0x64
 8006bb0:	f000 fbba 	bl	8007328 <__retarget_lock_init_recursive>
 8006bb4:	f7ff ff96 	bl	8006ae4 <__sfp_lock_release>
 8006bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bc0:	6025      	str	r5, [r4, #0]
 8006bc2:	61a5      	str	r5, [r4, #24]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bcc:	f7fd f966 	bl	8003e9c <memset>
 8006bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bd8:	4620      	mov	r0, r4
 8006bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bdc:	3468      	adds	r4, #104	; 0x68
 8006bde:	e7d9      	b.n	8006b94 <__sfp+0x1c>
 8006be0:	2104      	movs	r1, #4
 8006be2:	4638      	mov	r0, r7
 8006be4:	f7ff ff62 	bl	8006aac <__sfmoreglue>
 8006be8:	4604      	mov	r4, r0
 8006bea:	6030      	str	r0, [r6, #0]
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1d5      	bne.n	8006b9c <__sfp+0x24>
 8006bf0:	f7ff ff78 	bl	8006ae4 <__sfp_lock_release>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	e7ee      	b.n	8006bd8 <__sfp+0x60>
 8006bfa:	bf00      	nop
 8006bfc:	0800898c 	.word	0x0800898c
 8006c00:	ffff0001 	.word	0xffff0001

08006c04 <_fwalk_reent>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4688      	mov	r8, r1
 8006c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c10:	2700      	movs	r7, #0
 8006c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c16:	f1b9 0901 	subs.w	r9, r9, #1
 8006c1a:	d505      	bpl.n	8006c28 <_fwalk_reent+0x24>
 8006c1c:	6824      	ldr	r4, [r4, #0]
 8006c1e:	2c00      	cmp	r4, #0
 8006c20:	d1f7      	bne.n	8006c12 <_fwalk_reent+0xe>
 8006c22:	4638      	mov	r0, r7
 8006c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c28:	89ab      	ldrh	r3, [r5, #12]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d907      	bls.n	8006c3e <_fwalk_reent+0x3a>
 8006c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c32:	3301      	adds	r3, #1
 8006c34:	d003      	beq.n	8006c3e <_fwalk_reent+0x3a>
 8006c36:	4629      	mov	r1, r5
 8006c38:	4630      	mov	r0, r6
 8006c3a:	47c0      	blx	r8
 8006c3c:	4307      	orrs	r7, r0
 8006c3e:	3568      	adds	r5, #104	; 0x68
 8006c40:	e7e9      	b.n	8006c16 <_fwalk_reent+0x12>

08006c42 <rshift>:
 8006c42:	6903      	ldr	r3, [r0, #16]
 8006c44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c50:	f100 0414 	add.w	r4, r0, #20
 8006c54:	dd45      	ble.n	8006ce2 <rshift+0xa0>
 8006c56:	f011 011f 	ands.w	r1, r1, #31
 8006c5a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c5e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c62:	d10c      	bne.n	8006c7e <rshift+0x3c>
 8006c64:	f100 0710 	add.w	r7, r0, #16
 8006c68:	4629      	mov	r1, r5
 8006c6a:	42b1      	cmp	r1, r6
 8006c6c:	d334      	bcc.n	8006cd8 <rshift+0x96>
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	1eea      	subs	r2, r5, #3
 8006c74:	4296      	cmp	r6, r2
 8006c76:	bf38      	it	cc
 8006c78:	2300      	movcc	r3, #0
 8006c7a:	4423      	add	r3, r4
 8006c7c:	e015      	b.n	8006caa <rshift+0x68>
 8006c7e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c82:	f1c1 0820 	rsb	r8, r1, #32
 8006c86:	40cf      	lsrs	r7, r1
 8006c88:	f105 0e04 	add.w	lr, r5, #4
 8006c8c:	46a1      	mov	r9, r4
 8006c8e:	4576      	cmp	r6, lr
 8006c90:	46f4      	mov	ip, lr
 8006c92:	d815      	bhi.n	8006cc0 <rshift+0x7e>
 8006c94:	1a9a      	subs	r2, r3, r2
 8006c96:	0092      	lsls	r2, r2, #2
 8006c98:	3a04      	subs	r2, #4
 8006c9a:	3501      	adds	r5, #1
 8006c9c:	42ae      	cmp	r6, r5
 8006c9e:	bf38      	it	cc
 8006ca0:	2200      	movcc	r2, #0
 8006ca2:	18a3      	adds	r3, r4, r2
 8006ca4:	50a7      	str	r7, [r4, r2]
 8006ca6:	b107      	cbz	r7, 8006caa <rshift+0x68>
 8006ca8:	3304      	adds	r3, #4
 8006caa:	1b1a      	subs	r2, r3, r4
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006cb2:	bf08      	it	eq
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	6102      	str	r2, [r0, #16]
 8006cb8:	bf08      	it	eq
 8006cba:	6143      	streq	r3, [r0, #20]
 8006cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cc0:	f8dc c000 	ldr.w	ip, [ip]
 8006cc4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006cc8:	ea4c 0707 	orr.w	r7, ip, r7
 8006ccc:	f849 7b04 	str.w	r7, [r9], #4
 8006cd0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cd4:	40cf      	lsrs	r7, r1
 8006cd6:	e7da      	b.n	8006c8e <rshift+0x4c>
 8006cd8:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cdc:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ce0:	e7c3      	b.n	8006c6a <rshift+0x28>
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	e7e1      	b.n	8006caa <rshift+0x68>

08006ce6 <__hexdig_fun>:
 8006ce6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006cea:	2b09      	cmp	r3, #9
 8006cec:	d802      	bhi.n	8006cf4 <__hexdig_fun+0xe>
 8006cee:	3820      	subs	r0, #32
 8006cf0:	b2c0      	uxtb	r0, r0
 8006cf2:	4770      	bx	lr
 8006cf4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d801      	bhi.n	8006d00 <__hexdig_fun+0x1a>
 8006cfc:	3847      	subs	r0, #71	; 0x47
 8006cfe:	e7f7      	b.n	8006cf0 <__hexdig_fun+0xa>
 8006d00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d801      	bhi.n	8006d0c <__hexdig_fun+0x26>
 8006d08:	3827      	subs	r0, #39	; 0x27
 8006d0a:	e7f1      	b.n	8006cf0 <__hexdig_fun+0xa>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4770      	bx	lr

08006d10 <__gethex>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	ed2d 8b02 	vpush	{d8}
 8006d18:	b089      	sub	sp, #36	; 0x24
 8006d1a:	ee08 0a10 	vmov	s16, r0
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	4bb4      	ldr	r3, [pc, #720]	; (8006ff4 <__gethex+0x2e4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	4618      	mov	r0, r3
 8006d28:	468b      	mov	fp, r1
 8006d2a:	4690      	mov	r8, r2
 8006d2c:	f7f9 fa50 	bl	80001d0 <strlen>
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	f8db 2000 	ldr.w	r2, [fp]
 8006d36:	4403      	add	r3, r0
 8006d38:	4682      	mov	sl, r0
 8006d3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	1c93      	adds	r3, r2, #2
 8006d42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d4a:	32fe      	adds	r2, #254	; 0xfe
 8006d4c:	18d1      	adds	r1, r2, r3
 8006d4e:	461f      	mov	r7, r3
 8006d50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d54:	9100      	str	r1, [sp, #0]
 8006d56:	2830      	cmp	r0, #48	; 0x30
 8006d58:	d0f8      	beq.n	8006d4c <__gethex+0x3c>
 8006d5a:	f7ff ffc4 	bl	8006ce6 <__hexdig_fun>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d13a      	bne.n	8006dda <__gethex+0xca>
 8006d64:	9901      	ldr	r1, [sp, #4]
 8006d66:	4652      	mov	r2, sl
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f001 fc38 	bl	80085de <strncmp>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d168      	bne.n	8006e46 <__gethex+0x136>
 8006d74:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d78:	eb07 060a 	add.w	r6, r7, sl
 8006d7c:	f7ff ffb3 	bl	8006ce6 <__hexdig_fun>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d062      	beq.n	8006e4a <__gethex+0x13a>
 8006d84:	4633      	mov	r3, r6
 8006d86:	7818      	ldrb	r0, [r3, #0]
 8006d88:	2830      	cmp	r0, #48	; 0x30
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	f103 0301 	add.w	r3, r3, #1
 8006d90:	d0f9      	beq.n	8006d86 <__gethex+0x76>
 8006d92:	f7ff ffa8 	bl	8006ce6 <__hexdig_fun>
 8006d96:	2301      	movs	r3, #1
 8006d98:	fab0 f480 	clz	r4, r0
 8006d9c:	0964      	lsrs	r4, r4, #5
 8006d9e:	4635      	mov	r5, r6
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	463a      	mov	r2, r7
 8006da4:	4616      	mov	r6, r2
 8006da6:	3201      	adds	r2, #1
 8006da8:	7830      	ldrb	r0, [r6, #0]
 8006daa:	f7ff ff9c 	bl	8006ce6 <__hexdig_fun>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1f8      	bne.n	8006da4 <__gethex+0x94>
 8006db2:	9901      	ldr	r1, [sp, #4]
 8006db4:	4652      	mov	r2, sl
 8006db6:	4630      	mov	r0, r6
 8006db8:	f001 fc11 	bl	80085de <strncmp>
 8006dbc:	b980      	cbnz	r0, 8006de0 <__gethex+0xd0>
 8006dbe:	b94d      	cbnz	r5, 8006dd4 <__gethex+0xc4>
 8006dc0:	eb06 050a 	add.w	r5, r6, sl
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	4616      	mov	r6, r2
 8006dc8:	3201      	adds	r2, #1
 8006dca:	7830      	ldrb	r0, [r6, #0]
 8006dcc:	f7ff ff8b 	bl	8006ce6 <__hexdig_fun>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1f8      	bne.n	8006dc6 <__gethex+0xb6>
 8006dd4:	1bad      	subs	r5, r5, r6
 8006dd6:	00ad      	lsls	r5, r5, #2
 8006dd8:	e004      	b.n	8006de4 <__gethex+0xd4>
 8006dda:	2400      	movs	r4, #0
 8006ddc:	4625      	mov	r5, r4
 8006dde:	e7e0      	b.n	8006da2 <__gethex+0x92>
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	d1f7      	bne.n	8006dd4 <__gethex+0xc4>
 8006de4:	7833      	ldrb	r3, [r6, #0]
 8006de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dea:	2b50      	cmp	r3, #80	; 0x50
 8006dec:	d13b      	bne.n	8006e66 <__gethex+0x156>
 8006dee:	7873      	ldrb	r3, [r6, #1]
 8006df0:	2b2b      	cmp	r3, #43	; 0x2b
 8006df2:	d02c      	beq.n	8006e4e <__gethex+0x13e>
 8006df4:	2b2d      	cmp	r3, #45	; 0x2d
 8006df6:	d02e      	beq.n	8006e56 <__gethex+0x146>
 8006df8:	1c71      	adds	r1, r6, #1
 8006dfa:	f04f 0900 	mov.w	r9, #0
 8006dfe:	7808      	ldrb	r0, [r1, #0]
 8006e00:	f7ff ff71 	bl	8006ce6 <__hexdig_fun>
 8006e04:	1e43      	subs	r3, r0, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b18      	cmp	r3, #24
 8006e0a:	d82c      	bhi.n	8006e66 <__gethex+0x156>
 8006e0c:	f1a0 0210 	sub.w	r2, r0, #16
 8006e10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e14:	f7ff ff67 	bl	8006ce6 <__hexdig_fun>
 8006e18:	1e43      	subs	r3, r0, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b18      	cmp	r3, #24
 8006e1e:	d91d      	bls.n	8006e5c <__gethex+0x14c>
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	d000      	beq.n	8006e28 <__gethex+0x118>
 8006e26:	4252      	negs	r2, r2
 8006e28:	4415      	add	r5, r2
 8006e2a:	f8cb 1000 	str.w	r1, [fp]
 8006e2e:	b1e4      	cbz	r4, 8006e6a <__gethex+0x15a>
 8006e30:	9b00      	ldr	r3, [sp, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2700      	movne	r7, #0
 8006e38:	2706      	moveq	r7, #6
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	b009      	add	sp, #36	; 0x24
 8006e3e:	ecbd 8b02 	vpop	{d8}
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	463e      	mov	r6, r7
 8006e48:	4625      	mov	r5, r4
 8006e4a:	2401      	movs	r4, #1
 8006e4c:	e7ca      	b.n	8006de4 <__gethex+0xd4>
 8006e4e:	f04f 0900 	mov.w	r9, #0
 8006e52:	1cb1      	adds	r1, r6, #2
 8006e54:	e7d3      	b.n	8006dfe <__gethex+0xee>
 8006e56:	f04f 0901 	mov.w	r9, #1
 8006e5a:	e7fa      	b.n	8006e52 <__gethex+0x142>
 8006e5c:	230a      	movs	r3, #10
 8006e5e:	fb03 0202 	mla	r2, r3, r2, r0
 8006e62:	3a10      	subs	r2, #16
 8006e64:	e7d4      	b.n	8006e10 <__gethex+0x100>
 8006e66:	4631      	mov	r1, r6
 8006e68:	e7df      	b.n	8006e2a <__gethex+0x11a>
 8006e6a:	1bf3      	subs	r3, r6, r7
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	4621      	mov	r1, r4
 8006e70:	2b07      	cmp	r3, #7
 8006e72:	dc0b      	bgt.n	8006e8c <__gethex+0x17c>
 8006e74:	ee18 0a10 	vmov	r0, s16
 8006e78:	f000 fae6 	bl	8007448 <_Balloc>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	b940      	cbnz	r0, 8006e92 <__gethex+0x182>
 8006e80:	4b5d      	ldr	r3, [pc, #372]	; (8006ff8 <__gethex+0x2e8>)
 8006e82:	4602      	mov	r2, r0
 8006e84:	21de      	movs	r1, #222	; 0xde
 8006e86:	485d      	ldr	r0, [pc, #372]	; (8006ffc <__gethex+0x2ec>)
 8006e88:	f001 fbdc 	bl	8008644 <__assert_func>
 8006e8c:	3101      	adds	r1, #1
 8006e8e:	105b      	asrs	r3, r3, #1
 8006e90:	e7ee      	b.n	8006e70 <__gethex+0x160>
 8006e92:	f100 0914 	add.w	r9, r0, #20
 8006e96:	f04f 0b00 	mov.w	fp, #0
 8006e9a:	f1ca 0301 	rsb	r3, sl, #1
 8006e9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ea2:	f8cd b000 	str.w	fp, [sp]
 8006ea6:	9306      	str	r3, [sp, #24]
 8006ea8:	42b7      	cmp	r7, r6
 8006eaa:	d340      	bcc.n	8006f2e <__gethex+0x21e>
 8006eac:	9802      	ldr	r0, [sp, #8]
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	f840 3b04 	str.w	r3, [r0], #4
 8006eb4:	eba0 0009 	sub.w	r0, r0, r9
 8006eb8:	1080      	asrs	r0, r0, #2
 8006eba:	0146      	lsls	r6, r0, #5
 8006ebc:	6120      	str	r0, [r4, #16]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fbb4 	bl	800762c <__hi0bits>
 8006ec4:	1a30      	subs	r0, r6, r0
 8006ec6:	f8d8 6000 	ldr.w	r6, [r8]
 8006eca:	42b0      	cmp	r0, r6
 8006ecc:	dd63      	ble.n	8006f96 <__gethex+0x286>
 8006ece:	1b87      	subs	r7, r0, r6
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 ff58 	bl	8007d88 <__any_on>
 8006ed8:	4682      	mov	sl, r0
 8006eda:	b1a8      	cbz	r0, 8006f08 <__gethex+0x1f8>
 8006edc:	1e7b      	subs	r3, r7, #1
 8006ede:	1159      	asrs	r1, r3, #5
 8006ee0:	f003 021f 	and.w	r2, r3, #31
 8006ee4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ee8:	f04f 0a01 	mov.w	sl, #1
 8006eec:	fa0a f202 	lsl.w	r2, sl, r2
 8006ef0:	420a      	tst	r2, r1
 8006ef2:	d009      	beq.n	8006f08 <__gethex+0x1f8>
 8006ef4:	4553      	cmp	r3, sl
 8006ef6:	dd05      	ble.n	8006f04 <__gethex+0x1f4>
 8006ef8:	1eb9      	subs	r1, r7, #2
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 ff44 	bl	8007d88 <__any_on>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d145      	bne.n	8006f90 <__gethex+0x280>
 8006f04:	f04f 0a02 	mov.w	sl, #2
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7ff fe99 	bl	8006c42 <rshift>
 8006f10:	443d      	add	r5, r7
 8006f12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f16:	42ab      	cmp	r3, r5
 8006f18:	da4c      	bge.n	8006fb4 <__gethex+0x2a4>
 8006f1a:	ee18 0a10 	vmov	r0, s16
 8006f1e:	4621      	mov	r1, r4
 8006f20:	f000 fad2 	bl	80074c8 <_Bfree>
 8006f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f26:	2300      	movs	r3, #0
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	27a3      	movs	r7, #163	; 0xa3
 8006f2c:	e785      	b.n	8006e3a <__gethex+0x12a>
 8006f2e:	1e73      	subs	r3, r6, #1
 8006f30:	9a05      	ldr	r2, [sp, #20]
 8006f32:	9303      	str	r3, [sp, #12]
 8006f34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d019      	beq.n	8006f70 <__gethex+0x260>
 8006f3c:	f1bb 0f20 	cmp.w	fp, #32
 8006f40:	d107      	bne.n	8006f52 <__gethex+0x242>
 8006f42:	9b02      	ldr	r3, [sp, #8]
 8006f44:	9a00      	ldr	r2, [sp, #0]
 8006f46:	f843 2b04 	str.w	r2, [r3], #4
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	469b      	mov	fp, r3
 8006f52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f56:	f7ff fec6 	bl	8006ce6 <__hexdig_fun>
 8006f5a:	9b00      	ldr	r3, [sp, #0]
 8006f5c:	f000 000f 	and.w	r0, r0, #15
 8006f60:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f64:	4303      	orrs	r3, r0
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	f10b 0b04 	add.w	fp, fp, #4
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	e00d      	b.n	8006f8c <__gethex+0x27c>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	9a06      	ldr	r2, [sp, #24]
 8006f74:	4413      	add	r3, r2
 8006f76:	42bb      	cmp	r3, r7
 8006f78:	d3e0      	bcc.n	8006f3c <__gethex+0x22c>
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	9307      	str	r3, [sp, #28]
 8006f80:	4652      	mov	r2, sl
 8006f82:	f001 fb2c 	bl	80085de <strncmp>
 8006f86:	9b07      	ldr	r3, [sp, #28]
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d1d7      	bne.n	8006f3c <__gethex+0x22c>
 8006f8c:	461e      	mov	r6, r3
 8006f8e:	e78b      	b.n	8006ea8 <__gethex+0x198>
 8006f90:	f04f 0a03 	mov.w	sl, #3
 8006f94:	e7b8      	b.n	8006f08 <__gethex+0x1f8>
 8006f96:	da0a      	bge.n	8006fae <__gethex+0x29e>
 8006f98:	1a37      	subs	r7, r6, r0
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	ee18 0a10 	vmov	r0, s16
 8006fa0:	463a      	mov	r2, r7
 8006fa2:	f000 fcad 	bl	8007900 <__lshift>
 8006fa6:	1bed      	subs	r5, r5, r7
 8006fa8:	4604      	mov	r4, r0
 8006faa:	f100 0914 	add.w	r9, r0, #20
 8006fae:	f04f 0a00 	mov.w	sl, #0
 8006fb2:	e7ae      	b.n	8006f12 <__gethex+0x202>
 8006fb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006fb8:	42a8      	cmp	r0, r5
 8006fba:	dd72      	ble.n	80070a2 <__gethex+0x392>
 8006fbc:	1b45      	subs	r5, r0, r5
 8006fbe:	42ae      	cmp	r6, r5
 8006fc0:	dc36      	bgt.n	8007030 <__gethex+0x320>
 8006fc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d02a      	beq.n	8007020 <__gethex+0x310>
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d02c      	beq.n	8007028 <__gethex+0x318>
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d11c      	bne.n	800700c <__gethex+0x2fc>
 8006fd2:	42ae      	cmp	r6, r5
 8006fd4:	d11a      	bne.n	800700c <__gethex+0x2fc>
 8006fd6:	2e01      	cmp	r6, #1
 8006fd8:	d112      	bne.n	8007000 <__gethex+0x2f0>
 8006fda:	9a04      	ldr	r2, [sp, #16]
 8006fdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	f8c9 3000 	str.w	r3, [r9]
 8006fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fec:	2762      	movs	r7, #98	; 0x62
 8006fee:	601c      	str	r4, [r3, #0]
 8006ff0:	e723      	b.n	8006e3a <__gethex+0x12a>
 8006ff2:	bf00      	nop
 8006ff4:	08008c7c 	.word	0x08008c7c
 8006ff8:	08008ba0 	.word	0x08008ba0
 8006ffc:	08008c14 	.word	0x08008c14
 8007000:	1e71      	subs	r1, r6, #1
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fec0 	bl	8007d88 <__any_on>
 8007008:	2800      	cmp	r0, #0
 800700a:	d1e6      	bne.n	8006fda <__gethex+0x2ca>
 800700c:	ee18 0a10 	vmov	r0, s16
 8007010:	4621      	mov	r1, r4
 8007012:	f000 fa59 	bl	80074c8 <_Bfree>
 8007016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007018:	2300      	movs	r3, #0
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	2750      	movs	r7, #80	; 0x50
 800701e:	e70c      	b.n	8006e3a <__gethex+0x12a>
 8007020:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f2      	bne.n	800700c <__gethex+0x2fc>
 8007026:	e7d8      	b.n	8006fda <__gethex+0x2ca>
 8007028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1d5      	bne.n	8006fda <__gethex+0x2ca>
 800702e:	e7ed      	b.n	800700c <__gethex+0x2fc>
 8007030:	1e6f      	subs	r7, r5, #1
 8007032:	f1ba 0f00 	cmp.w	sl, #0
 8007036:	d131      	bne.n	800709c <__gethex+0x38c>
 8007038:	b127      	cbz	r7, 8007044 <__gethex+0x334>
 800703a:	4639      	mov	r1, r7
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fea3 	bl	8007d88 <__any_on>
 8007042:	4682      	mov	sl, r0
 8007044:	117b      	asrs	r3, r7, #5
 8007046:	2101      	movs	r1, #1
 8007048:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800704c:	f007 071f 	and.w	r7, r7, #31
 8007050:	fa01 f707 	lsl.w	r7, r1, r7
 8007054:	421f      	tst	r7, r3
 8007056:	4629      	mov	r1, r5
 8007058:	4620      	mov	r0, r4
 800705a:	bf18      	it	ne
 800705c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007060:	1b76      	subs	r6, r6, r5
 8007062:	f7ff fdee 	bl	8006c42 <rshift>
 8007066:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800706a:	2702      	movs	r7, #2
 800706c:	f1ba 0f00 	cmp.w	sl, #0
 8007070:	d048      	beq.n	8007104 <__gethex+0x3f4>
 8007072:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d015      	beq.n	80070a6 <__gethex+0x396>
 800707a:	2b03      	cmp	r3, #3
 800707c:	d017      	beq.n	80070ae <__gethex+0x39e>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d109      	bne.n	8007096 <__gethex+0x386>
 8007082:	f01a 0f02 	tst.w	sl, #2
 8007086:	d006      	beq.n	8007096 <__gethex+0x386>
 8007088:	f8d9 0000 	ldr.w	r0, [r9]
 800708c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007090:	f01a 0f01 	tst.w	sl, #1
 8007094:	d10e      	bne.n	80070b4 <__gethex+0x3a4>
 8007096:	f047 0710 	orr.w	r7, r7, #16
 800709a:	e033      	b.n	8007104 <__gethex+0x3f4>
 800709c:	f04f 0a01 	mov.w	sl, #1
 80070a0:	e7d0      	b.n	8007044 <__gethex+0x334>
 80070a2:	2701      	movs	r7, #1
 80070a4:	e7e2      	b.n	800706c <__gethex+0x35c>
 80070a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a8:	f1c3 0301 	rsb	r3, r3, #1
 80070ac:	9315      	str	r3, [sp, #84]	; 0x54
 80070ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <__gethex+0x386>
 80070b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80070b8:	f104 0314 	add.w	r3, r4, #20
 80070bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80070c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80070c4:	f04f 0c00 	mov.w	ip, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80070d2:	d01c      	beq.n	800710e <__gethex+0x3fe>
 80070d4:	3201      	adds	r2, #1
 80070d6:	6002      	str	r2, [r0, #0]
 80070d8:	2f02      	cmp	r7, #2
 80070da:	f104 0314 	add.w	r3, r4, #20
 80070de:	d13f      	bne.n	8007160 <__gethex+0x450>
 80070e0:	f8d8 2000 	ldr.w	r2, [r8]
 80070e4:	3a01      	subs	r2, #1
 80070e6:	42b2      	cmp	r2, r6
 80070e8:	d10a      	bne.n	8007100 <__gethex+0x3f0>
 80070ea:	1171      	asrs	r1, r6, #5
 80070ec:	2201      	movs	r2, #1
 80070ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070f2:	f006 061f 	and.w	r6, r6, #31
 80070f6:	fa02 f606 	lsl.w	r6, r2, r6
 80070fa:	421e      	tst	r6, r3
 80070fc:	bf18      	it	ne
 80070fe:	4617      	movne	r7, r2
 8007100:	f047 0720 	orr.w	r7, r7, #32
 8007104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007106:	601c      	str	r4, [r3, #0]
 8007108:	9b04      	ldr	r3, [sp, #16]
 800710a:	601d      	str	r5, [r3, #0]
 800710c:	e695      	b.n	8006e3a <__gethex+0x12a>
 800710e:	4299      	cmp	r1, r3
 8007110:	f843 cc04 	str.w	ip, [r3, #-4]
 8007114:	d8d8      	bhi.n	80070c8 <__gethex+0x3b8>
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	459b      	cmp	fp, r3
 800711a:	db19      	blt.n	8007150 <__gethex+0x440>
 800711c:	6861      	ldr	r1, [r4, #4]
 800711e:	ee18 0a10 	vmov	r0, s16
 8007122:	3101      	adds	r1, #1
 8007124:	f000 f990 	bl	8007448 <_Balloc>
 8007128:	4681      	mov	r9, r0
 800712a:	b918      	cbnz	r0, 8007134 <__gethex+0x424>
 800712c:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <__gethex+0x488>)
 800712e:	4602      	mov	r2, r0
 8007130:	2184      	movs	r1, #132	; 0x84
 8007132:	e6a8      	b.n	8006e86 <__gethex+0x176>
 8007134:	6922      	ldr	r2, [r4, #16]
 8007136:	3202      	adds	r2, #2
 8007138:	f104 010c 	add.w	r1, r4, #12
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	300c      	adds	r0, #12
 8007140:	f000 f974 	bl	800742c <memcpy>
 8007144:	4621      	mov	r1, r4
 8007146:	ee18 0a10 	vmov	r0, s16
 800714a:	f000 f9bd 	bl	80074c8 <_Bfree>
 800714e:	464c      	mov	r4, r9
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007158:	6122      	str	r2, [r4, #16]
 800715a:	2201      	movs	r2, #1
 800715c:	615a      	str	r2, [r3, #20]
 800715e:	e7bb      	b.n	80070d8 <__gethex+0x3c8>
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	455a      	cmp	r2, fp
 8007164:	dd0b      	ble.n	800717e <__gethex+0x46e>
 8007166:	2101      	movs	r1, #1
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fd6a 	bl	8006c42 <rshift>
 800716e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007172:	3501      	adds	r5, #1
 8007174:	42ab      	cmp	r3, r5
 8007176:	f6ff aed0 	blt.w	8006f1a <__gethex+0x20a>
 800717a:	2701      	movs	r7, #1
 800717c:	e7c0      	b.n	8007100 <__gethex+0x3f0>
 800717e:	f016 061f 	ands.w	r6, r6, #31
 8007182:	d0fa      	beq.n	800717a <__gethex+0x46a>
 8007184:	4453      	add	r3, sl
 8007186:	f1c6 0620 	rsb	r6, r6, #32
 800718a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800718e:	f000 fa4d 	bl	800762c <__hi0bits>
 8007192:	42b0      	cmp	r0, r6
 8007194:	dbe7      	blt.n	8007166 <__gethex+0x456>
 8007196:	e7f0      	b.n	800717a <__gethex+0x46a>
 8007198:	08008ba0 	.word	0x08008ba0

0800719c <L_shift>:
 800719c:	f1c2 0208 	rsb	r2, r2, #8
 80071a0:	0092      	lsls	r2, r2, #2
 80071a2:	b570      	push	{r4, r5, r6, lr}
 80071a4:	f1c2 0620 	rsb	r6, r2, #32
 80071a8:	6843      	ldr	r3, [r0, #4]
 80071aa:	6804      	ldr	r4, [r0, #0]
 80071ac:	fa03 f506 	lsl.w	r5, r3, r6
 80071b0:	432c      	orrs	r4, r5
 80071b2:	40d3      	lsrs	r3, r2
 80071b4:	6004      	str	r4, [r0, #0]
 80071b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80071ba:	4288      	cmp	r0, r1
 80071bc:	d3f4      	bcc.n	80071a8 <L_shift+0xc>
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <__match>:
 80071c0:	b530      	push	{r4, r5, lr}
 80071c2:	6803      	ldr	r3, [r0, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ca:	b914      	cbnz	r4, 80071d2 <__match+0x12>
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	2001      	movs	r0, #1
 80071d0:	bd30      	pop	{r4, r5, pc}
 80071d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80071da:	2d19      	cmp	r5, #25
 80071dc:	bf98      	it	ls
 80071de:	3220      	addls	r2, #32
 80071e0:	42a2      	cmp	r2, r4
 80071e2:	d0f0      	beq.n	80071c6 <__match+0x6>
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7f3      	b.n	80071d0 <__match+0x10>

080071e8 <__hexnan>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	680b      	ldr	r3, [r1, #0]
 80071ee:	115e      	asrs	r6, r3, #5
 80071f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071f4:	f013 031f 	ands.w	r3, r3, #31
 80071f8:	b087      	sub	sp, #28
 80071fa:	bf18      	it	ne
 80071fc:	3604      	addne	r6, #4
 80071fe:	2500      	movs	r5, #0
 8007200:	1f37      	subs	r7, r6, #4
 8007202:	4690      	mov	r8, r2
 8007204:	6802      	ldr	r2, [r0, #0]
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	4682      	mov	sl, r0
 800720a:	f846 5c04 	str.w	r5, [r6, #-4]
 800720e:	46b9      	mov	r9, r7
 8007210:	463c      	mov	r4, r7
 8007212:	9502      	str	r5, [sp, #8]
 8007214:	46ab      	mov	fp, r5
 8007216:	7851      	ldrb	r1, [r2, #1]
 8007218:	1c53      	adds	r3, r2, #1
 800721a:	9303      	str	r3, [sp, #12]
 800721c:	b341      	cbz	r1, 8007270 <__hexnan+0x88>
 800721e:	4608      	mov	r0, r1
 8007220:	9205      	str	r2, [sp, #20]
 8007222:	9104      	str	r1, [sp, #16]
 8007224:	f7ff fd5f 	bl	8006ce6 <__hexdig_fun>
 8007228:	2800      	cmp	r0, #0
 800722a:	d14f      	bne.n	80072cc <__hexnan+0xe4>
 800722c:	9904      	ldr	r1, [sp, #16]
 800722e:	9a05      	ldr	r2, [sp, #20]
 8007230:	2920      	cmp	r1, #32
 8007232:	d818      	bhi.n	8007266 <__hexnan+0x7e>
 8007234:	9b02      	ldr	r3, [sp, #8]
 8007236:	459b      	cmp	fp, r3
 8007238:	dd13      	ble.n	8007262 <__hexnan+0x7a>
 800723a:	454c      	cmp	r4, r9
 800723c:	d206      	bcs.n	800724c <__hexnan+0x64>
 800723e:	2d07      	cmp	r5, #7
 8007240:	dc04      	bgt.n	800724c <__hexnan+0x64>
 8007242:	462a      	mov	r2, r5
 8007244:	4649      	mov	r1, r9
 8007246:	4620      	mov	r0, r4
 8007248:	f7ff ffa8 	bl	800719c <L_shift>
 800724c:	4544      	cmp	r4, r8
 800724e:	d950      	bls.n	80072f2 <__hexnan+0x10a>
 8007250:	2300      	movs	r3, #0
 8007252:	f1a4 0904 	sub.w	r9, r4, #4
 8007256:	f844 3c04 	str.w	r3, [r4, #-4]
 800725a:	f8cd b008 	str.w	fp, [sp, #8]
 800725e:	464c      	mov	r4, r9
 8007260:	461d      	mov	r5, r3
 8007262:	9a03      	ldr	r2, [sp, #12]
 8007264:	e7d7      	b.n	8007216 <__hexnan+0x2e>
 8007266:	2929      	cmp	r1, #41	; 0x29
 8007268:	d156      	bne.n	8007318 <__hexnan+0x130>
 800726a:	3202      	adds	r2, #2
 800726c:	f8ca 2000 	str.w	r2, [sl]
 8007270:	f1bb 0f00 	cmp.w	fp, #0
 8007274:	d050      	beq.n	8007318 <__hexnan+0x130>
 8007276:	454c      	cmp	r4, r9
 8007278:	d206      	bcs.n	8007288 <__hexnan+0xa0>
 800727a:	2d07      	cmp	r5, #7
 800727c:	dc04      	bgt.n	8007288 <__hexnan+0xa0>
 800727e:	462a      	mov	r2, r5
 8007280:	4649      	mov	r1, r9
 8007282:	4620      	mov	r0, r4
 8007284:	f7ff ff8a 	bl	800719c <L_shift>
 8007288:	4544      	cmp	r4, r8
 800728a:	d934      	bls.n	80072f6 <__hexnan+0x10e>
 800728c:	f1a8 0204 	sub.w	r2, r8, #4
 8007290:	4623      	mov	r3, r4
 8007292:	f853 1b04 	ldr.w	r1, [r3], #4
 8007296:	f842 1f04 	str.w	r1, [r2, #4]!
 800729a:	429f      	cmp	r7, r3
 800729c:	d2f9      	bcs.n	8007292 <__hexnan+0xaa>
 800729e:	1b3b      	subs	r3, r7, r4
 80072a0:	f023 0303 	bic.w	r3, r3, #3
 80072a4:	3304      	adds	r3, #4
 80072a6:	3401      	adds	r4, #1
 80072a8:	3e03      	subs	r6, #3
 80072aa:	42b4      	cmp	r4, r6
 80072ac:	bf88      	it	hi
 80072ae:	2304      	movhi	r3, #4
 80072b0:	4443      	add	r3, r8
 80072b2:	2200      	movs	r2, #0
 80072b4:	f843 2b04 	str.w	r2, [r3], #4
 80072b8:	429f      	cmp	r7, r3
 80072ba:	d2fb      	bcs.n	80072b4 <__hexnan+0xcc>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b91b      	cbnz	r3, 80072c8 <__hexnan+0xe0>
 80072c0:	4547      	cmp	r7, r8
 80072c2:	d127      	bne.n	8007314 <__hexnan+0x12c>
 80072c4:	2301      	movs	r3, #1
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	2005      	movs	r0, #5
 80072ca:	e026      	b.n	800731a <__hexnan+0x132>
 80072cc:	3501      	adds	r5, #1
 80072ce:	2d08      	cmp	r5, #8
 80072d0:	f10b 0b01 	add.w	fp, fp, #1
 80072d4:	dd06      	ble.n	80072e4 <__hexnan+0xfc>
 80072d6:	4544      	cmp	r4, r8
 80072d8:	d9c3      	bls.n	8007262 <__hexnan+0x7a>
 80072da:	2300      	movs	r3, #0
 80072dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80072e0:	2501      	movs	r5, #1
 80072e2:	3c04      	subs	r4, #4
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	f000 000f 	and.w	r0, r0, #15
 80072ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072ee:	6022      	str	r2, [r4, #0]
 80072f0:	e7b7      	b.n	8007262 <__hexnan+0x7a>
 80072f2:	2508      	movs	r5, #8
 80072f4:	e7b5      	b.n	8007262 <__hexnan+0x7a>
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0df      	beq.n	80072bc <__hexnan+0xd4>
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	f1c3 0320 	rsb	r3, r3, #32
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800730c:	401a      	ands	r2, r3
 800730e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007312:	e7d3      	b.n	80072bc <__hexnan+0xd4>
 8007314:	3f04      	subs	r7, #4
 8007316:	e7d1      	b.n	80072bc <__hexnan+0xd4>
 8007318:	2004      	movs	r0, #4
 800731a:	b007      	add	sp, #28
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007320 <_localeconv_r>:
 8007320:	4800      	ldr	r0, [pc, #0]	; (8007324 <_localeconv_r+0x4>)
 8007322:	4770      	bx	lr
 8007324:	2000016c 	.word	0x2000016c

08007328 <__retarget_lock_init_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_acquire_recursive>:
 800732a:	4770      	bx	lr

0800732c <__retarget_lock_release_recursive>:
 800732c:	4770      	bx	lr

0800732e <__swhatbuf_r>:
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	460e      	mov	r6, r1
 8007332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007336:	2900      	cmp	r1, #0
 8007338:	b096      	sub	sp, #88	; 0x58
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	da08      	bge.n	8007352 <__swhatbuf_r+0x24>
 8007340:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	602a      	str	r2, [r5, #0]
 8007348:	061a      	lsls	r2, r3, #24
 800734a:	d410      	bmi.n	800736e <__swhatbuf_r+0x40>
 800734c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007350:	e00e      	b.n	8007370 <__swhatbuf_r+0x42>
 8007352:	466a      	mov	r2, sp
 8007354:	f001 f9b6 	bl	80086c4 <_fstat_r>
 8007358:	2800      	cmp	r0, #0
 800735a:	dbf1      	blt.n	8007340 <__swhatbuf_r+0x12>
 800735c:	9a01      	ldr	r2, [sp, #4]
 800735e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007362:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007366:	425a      	negs	r2, r3
 8007368:	415a      	adcs	r2, r3
 800736a:	602a      	str	r2, [r5, #0]
 800736c:	e7ee      	b.n	800734c <__swhatbuf_r+0x1e>
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	2000      	movs	r0, #0
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	b016      	add	sp, #88	; 0x58
 8007376:	bd70      	pop	{r4, r5, r6, pc}

08007378 <__smakebuf_r>:
 8007378:	898b      	ldrh	r3, [r1, #12]
 800737a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800737c:	079d      	lsls	r5, r3, #30
 800737e:	4606      	mov	r6, r0
 8007380:	460c      	mov	r4, r1
 8007382:	d507      	bpl.n	8007394 <__smakebuf_r+0x1c>
 8007384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	6123      	str	r3, [r4, #16]
 800738c:	2301      	movs	r3, #1
 800738e:	6163      	str	r3, [r4, #20]
 8007390:	b002      	add	sp, #8
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	ab01      	add	r3, sp, #4
 8007396:	466a      	mov	r2, sp
 8007398:	f7ff ffc9 	bl	800732e <__swhatbuf_r>
 800739c:	9900      	ldr	r1, [sp, #0]
 800739e:	4605      	mov	r5, r0
 80073a0:	4630      	mov	r0, r6
 80073a2:	f000 fd95 	bl	8007ed0 <_malloc_r>
 80073a6:	b948      	cbnz	r0, 80073bc <__smakebuf_r+0x44>
 80073a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d4ef      	bmi.n	8007390 <__smakebuf_r+0x18>
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	f043 0302 	orr.w	r3, r3, #2
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	e7e3      	b.n	8007384 <__smakebuf_r+0xc>
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <__smakebuf_r+0x7c>)
 80073be:	62b3      	str	r3, [r6, #40]	; 0x28
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	6020      	str	r0, [r4, #0]
 80073c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	9b00      	ldr	r3, [sp, #0]
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	6120      	str	r0, [r4, #16]
 80073d2:	b15b      	cbz	r3, 80073ec <__smakebuf_r+0x74>
 80073d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d8:	4630      	mov	r0, r6
 80073da:	f001 f985 	bl	80086e8 <_isatty_r>
 80073de:	b128      	cbz	r0, 80073ec <__smakebuf_r+0x74>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	89a0      	ldrh	r0, [r4, #12]
 80073ee:	4305      	orrs	r5, r0
 80073f0:	81a5      	strh	r5, [r4, #12]
 80073f2:	e7cd      	b.n	8007390 <__smakebuf_r+0x18>
 80073f4:	08006aa1 	.word	0x08006aa1

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 bd67 	b.w	8007ed0 <_malloc_r>
 8007402:	bf00      	nop
 8007404:	20000014 	.word	0x20000014

08007408 <__ascii_mbtowc>:
 8007408:	b082      	sub	sp, #8
 800740a:	b901      	cbnz	r1, 800740e <__ascii_mbtowc+0x6>
 800740c:	a901      	add	r1, sp, #4
 800740e:	b142      	cbz	r2, 8007422 <__ascii_mbtowc+0x1a>
 8007410:	b14b      	cbz	r3, 8007426 <__ascii_mbtowc+0x1e>
 8007412:	7813      	ldrb	r3, [r2, #0]
 8007414:	600b      	str	r3, [r1, #0]
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	1e10      	subs	r0, r2, #0
 800741a:	bf18      	it	ne
 800741c:	2001      	movne	r0, #1
 800741e:	b002      	add	sp, #8
 8007420:	4770      	bx	lr
 8007422:	4610      	mov	r0, r2
 8007424:	e7fb      	b.n	800741e <__ascii_mbtowc+0x16>
 8007426:	f06f 0001 	mvn.w	r0, #1
 800742a:	e7f8      	b.n	800741e <__ascii_mbtowc+0x16>

0800742c <memcpy>:
 800742c:	440a      	add	r2, r1
 800742e:	4291      	cmp	r1, r2
 8007430:	f100 33ff 	add.w	r3, r0, #4294967295
 8007434:	d100      	bne.n	8007438 <memcpy+0xc>
 8007436:	4770      	bx	lr
 8007438:	b510      	push	{r4, lr}
 800743a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007442:	4291      	cmp	r1, r2
 8007444:	d1f9      	bne.n	800743a <memcpy+0xe>
 8007446:	bd10      	pop	{r4, pc}

08007448 <_Balloc>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	b976      	cbnz	r6, 8007470 <_Balloc+0x28>
 8007452:	2010      	movs	r0, #16
 8007454:	f7ff ffd0 	bl	80073f8 <malloc>
 8007458:	4602      	mov	r2, r0
 800745a:	6260      	str	r0, [r4, #36]	; 0x24
 800745c:	b920      	cbnz	r0, 8007468 <_Balloc+0x20>
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <_Balloc+0x78>)
 8007460:	4818      	ldr	r0, [pc, #96]	; (80074c4 <_Balloc+0x7c>)
 8007462:	2166      	movs	r1, #102	; 0x66
 8007464:	f001 f8ee 	bl	8008644 <__assert_func>
 8007468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800746c:	6006      	str	r6, [r0, #0]
 800746e:	60c6      	str	r6, [r0, #12]
 8007470:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007472:	68f3      	ldr	r3, [r6, #12]
 8007474:	b183      	cbz	r3, 8007498 <_Balloc+0x50>
 8007476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800747e:	b9b8      	cbnz	r0, 80074b0 <_Balloc+0x68>
 8007480:	2101      	movs	r1, #1
 8007482:	fa01 f605 	lsl.w	r6, r1, r5
 8007486:	1d72      	adds	r2, r6, #5
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fc9d 	bl	8007dca <_calloc_r>
 8007490:	b160      	cbz	r0, 80074ac <_Balloc+0x64>
 8007492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007496:	e00e      	b.n	80074b6 <_Balloc+0x6e>
 8007498:	2221      	movs	r2, #33	; 0x21
 800749a:	2104      	movs	r1, #4
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fc94 	bl	8007dca <_calloc_r>
 80074a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a4:	60f0      	str	r0, [r6, #12]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e4      	bne.n	8007476 <_Balloc+0x2e>
 80074ac:	2000      	movs	r0, #0
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	6802      	ldr	r2, [r0, #0]
 80074b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074b6:	2300      	movs	r3, #0
 80074b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074bc:	e7f7      	b.n	80074ae <_Balloc+0x66>
 80074be:	bf00      	nop
 80074c0:	08008b2e 	.word	0x08008b2e
 80074c4:	08008c90 	.word	0x08008c90

080074c8 <_Bfree>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074cc:	4605      	mov	r5, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	b976      	cbnz	r6, 80074f0 <_Bfree+0x28>
 80074d2:	2010      	movs	r0, #16
 80074d4:	f7ff ff90 	bl	80073f8 <malloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	6268      	str	r0, [r5, #36]	; 0x24
 80074dc:	b920      	cbnz	r0, 80074e8 <_Bfree+0x20>
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <_Bfree+0x3c>)
 80074e0:	4809      	ldr	r0, [pc, #36]	; (8007508 <_Bfree+0x40>)
 80074e2:	218a      	movs	r1, #138	; 0x8a
 80074e4:	f001 f8ae 	bl	8008644 <__assert_func>
 80074e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074ec:	6006      	str	r6, [r0, #0]
 80074ee:	60c6      	str	r6, [r0, #12]
 80074f0:	b13c      	cbz	r4, 8007502 <_Bfree+0x3a>
 80074f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074f4:	6862      	ldr	r2, [r4, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074fc:	6021      	str	r1, [r4, #0]
 80074fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	08008b2e 	.word	0x08008b2e
 8007508:	08008c90 	.word	0x08008c90

0800750c <__multadd>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	690d      	ldr	r5, [r1, #16]
 8007512:	4607      	mov	r7, r0
 8007514:	460c      	mov	r4, r1
 8007516:	461e      	mov	r6, r3
 8007518:	f101 0c14 	add.w	ip, r1, #20
 800751c:	2000      	movs	r0, #0
 800751e:	f8dc 3000 	ldr.w	r3, [ip]
 8007522:	b299      	uxth	r1, r3
 8007524:	fb02 6101 	mla	r1, r2, r1, r6
 8007528:	0c1e      	lsrs	r6, r3, #16
 800752a:	0c0b      	lsrs	r3, r1, #16
 800752c:	fb02 3306 	mla	r3, r2, r6, r3
 8007530:	b289      	uxth	r1, r1
 8007532:	3001      	adds	r0, #1
 8007534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007538:	4285      	cmp	r5, r0
 800753a:	f84c 1b04 	str.w	r1, [ip], #4
 800753e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007542:	dcec      	bgt.n	800751e <__multadd+0x12>
 8007544:	b30e      	cbz	r6, 800758a <__multadd+0x7e>
 8007546:	68a3      	ldr	r3, [r4, #8]
 8007548:	42ab      	cmp	r3, r5
 800754a:	dc19      	bgt.n	8007580 <__multadd+0x74>
 800754c:	6861      	ldr	r1, [r4, #4]
 800754e:	4638      	mov	r0, r7
 8007550:	3101      	adds	r1, #1
 8007552:	f7ff ff79 	bl	8007448 <_Balloc>
 8007556:	4680      	mov	r8, r0
 8007558:	b928      	cbnz	r0, 8007566 <__multadd+0x5a>
 800755a:	4602      	mov	r2, r0
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <__multadd+0x84>)
 800755e:	480d      	ldr	r0, [pc, #52]	; (8007594 <__multadd+0x88>)
 8007560:	21b5      	movs	r1, #181	; 0xb5
 8007562:	f001 f86f 	bl	8008644 <__assert_func>
 8007566:	6922      	ldr	r2, [r4, #16]
 8007568:	3202      	adds	r2, #2
 800756a:	f104 010c 	add.w	r1, r4, #12
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	300c      	adds	r0, #12
 8007572:	f7ff ff5b 	bl	800742c <memcpy>
 8007576:	4621      	mov	r1, r4
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff ffa5 	bl	80074c8 <_Bfree>
 800757e:	4644      	mov	r4, r8
 8007580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007584:	3501      	adds	r5, #1
 8007586:	615e      	str	r6, [r3, #20]
 8007588:	6125      	str	r5, [r4, #16]
 800758a:	4620      	mov	r0, r4
 800758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007590:	08008ba0 	.word	0x08008ba0
 8007594:	08008c90 	.word	0x08008c90

08007598 <__s2b>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	460c      	mov	r4, r1
 800759e:	4615      	mov	r5, r2
 80075a0:	461f      	mov	r7, r3
 80075a2:	2209      	movs	r2, #9
 80075a4:	3308      	adds	r3, #8
 80075a6:	4606      	mov	r6, r0
 80075a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ac:	2100      	movs	r1, #0
 80075ae:	2201      	movs	r2, #1
 80075b0:	429a      	cmp	r2, r3
 80075b2:	db09      	blt.n	80075c8 <__s2b+0x30>
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff ff47 	bl	8007448 <_Balloc>
 80075ba:	b940      	cbnz	r0, 80075ce <__s2b+0x36>
 80075bc:	4602      	mov	r2, r0
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <__s2b+0x8c>)
 80075c0:	4819      	ldr	r0, [pc, #100]	; (8007628 <__s2b+0x90>)
 80075c2:	21ce      	movs	r1, #206	; 0xce
 80075c4:	f001 f83e 	bl	8008644 <__assert_func>
 80075c8:	0052      	lsls	r2, r2, #1
 80075ca:	3101      	adds	r1, #1
 80075cc:	e7f0      	b.n	80075b0 <__s2b+0x18>
 80075ce:	9b08      	ldr	r3, [sp, #32]
 80075d0:	6143      	str	r3, [r0, #20]
 80075d2:	2d09      	cmp	r5, #9
 80075d4:	f04f 0301 	mov.w	r3, #1
 80075d8:	6103      	str	r3, [r0, #16]
 80075da:	dd16      	ble.n	800760a <__s2b+0x72>
 80075dc:	f104 0909 	add.w	r9, r4, #9
 80075e0:	46c8      	mov	r8, r9
 80075e2:	442c      	add	r4, r5
 80075e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075e8:	4601      	mov	r1, r0
 80075ea:	3b30      	subs	r3, #48	; 0x30
 80075ec:	220a      	movs	r2, #10
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff ff8c 	bl	800750c <__multadd>
 80075f4:	45a0      	cmp	r8, r4
 80075f6:	d1f5      	bne.n	80075e4 <__s2b+0x4c>
 80075f8:	f1a5 0408 	sub.w	r4, r5, #8
 80075fc:	444c      	add	r4, r9
 80075fe:	1b2d      	subs	r5, r5, r4
 8007600:	1963      	adds	r3, r4, r5
 8007602:	42bb      	cmp	r3, r7
 8007604:	db04      	blt.n	8007610 <__s2b+0x78>
 8007606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760a:	340a      	adds	r4, #10
 800760c:	2509      	movs	r5, #9
 800760e:	e7f6      	b.n	80075fe <__s2b+0x66>
 8007610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007614:	4601      	mov	r1, r0
 8007616:	3b30      	subs	r3, #48	; 0x30
 8007618:	220a      	movs	r2, #10
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff ff76 	bl	800750c <__multadd>
 8007620:	e7ee      	b.n	8007600 <__s2b+0x68>
 8007622:	bf00      	nop
 8007624:	08008ba0 	.word	0x08008ba0
 8007628:	08008c90 	.word	0x08008c90

0800762c <__hi0bits>:
 800762c:	0c03      	lsrs	r3, r0, #16
 800762e:	041b      	lsls	r3, r3, #16
 8007630:	b9d3      	cbnz	r3, 8007668 <__hi0bits+0x3c>
 8007632:	0400      	lsls	r0, r0, #16
 8007634:	2310      	movs	r3, #16
 8007636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800763a:	bf04      	itt	eq
 800763c:	0200      	lsleq	r0, r0, #8
 800763e:	3308      	addeq	r3, #8
 8007640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007644:	bf04      	itt	eq
 8007646:	0100      	lsleq	r0, r0, #4
 8007648:	3304      	addeq	r3, #4
 800764a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800764e:	bf04      	itt	eq
 8007650:	0080      	lsleq	r0, r0, #2
 8007652:	3302      	addeq	r3, #2
 8007654:	2800      	cmp	r0, #0
 8007656:	db05      	blt.n	8007664 <__hi0bits+0x38>
 8007658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800765c:	f103 0301 	add.w	r3, r3, #1
 8007660:	bf08      	it	eq
 8007662:	2320      	moveq	r3, #32
 8007664:	4618      	mov	r0, r3
 8007666:	4770      	bx	lr
 8007668:	2300      	movs	r3, #0
 800766a:	e7e4      	b.n	8007636 <__hi0bits+0xa>

0800766c <__lo0bits>:
 800766c:	6803      	ldr	r3, [r0, #0]
 800766e:	f013 0207 	ands.w	r2, r3, #7
 8007672:	4601      	mov	r1, r0
 8007674:	d00b      	beq.n	800768e <__lo0bits+0x22>
 8007676:	07da      	lsls	r2, r3, #31
 8007678:	d423      	bmi.n	80076c2 <__lo0bits+0x56>
 800767a:	0798      	lsls	r0, r3, #30
 800767c:	bf49      	itett	mi
 800767e:	085b      	lsrmi	r3, r3, #1
 8007680:	089b      	lsrpl	r3, r3, #2
 8007682:	2001      	movmi	r0, #1
 8007684:	600b      	strmi	r3, [r1, #0]
 8007686:	bf5c      	itt	pl
 8007688:	600b      	strpl	r3, [r1, #0]
 800768a:	2002      	movpl	r0, #2
 800768c:	4770      	bx	lr
 800768e:	b298      	uxth	r0, r3
 8007690:	b9a8      	cbnz	r0, 80076be <__lo0bits+0x52>
 8007692:	0c1b      	lsrs	r3, r3, #16
 8007694:	2010      	movs	r0, #16
 8007696:	b2da      	uxtb	r2, r3
 8007698:	b90a      	cbnz	r2, 800769e <__lo0bits+0x32>
 800769a:	3008      	adds	r0, #8
 800769c:	0a1b      	lsrs	r3, r3, #8
 800769e:	071a      	lsls	r2, r3, #28
 80076a0:	bf04      	itt	eq
 80076a2:	091b      	lsreq	r3, r3, #4
 80076a4:	3004      	addeq	r0, #4
 80076a6:	079a      	lsls	r2, r3, #30
 80076a8:	bf04      	itt	eq
 80076aa:	089b      	lsreq	r3, r3, #2
 80076ac:	3002      	addeq	r0, #2
 80076ae:	07da      	lsls	r2, r3, #31
 80076b0:	d403      	bmi.n	80076ba <__lo0bits+0x4e>
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	f100 0001 	add.w	r0, r0, #1
 80076b8:	d005      	beq.n	80076c6 <__lo0bits+0x5a>
 80076ba:	600b      	str	r3, [r1, #0]
 80076bc:	4770      	bx	lr
 80076be:	4610      	mov	r0, r2
 80076c0:	e7e9      	b.n	8007696 <__lo0bits+0x2a>
 80076c2:	2000      	movs	r0, #0
 80076c4:	4770      	bx	lr
 80076c6:	2020      	movs	r0, #32
 80076c8:	4770      	bx	lr
	...

080076cc <__i2b>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	2101      	movs	r1, #1
 80076d2:	f7ff feb9 	bl	8007448 <_Balloc>
 80076d6:	4602      	mov	r2, r0
 80076d8:	b928      	cbnz	r0, 80076e6 <__i2b+0x1a>
 80076da:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <__i2b+0x24>)
 80076dc:	4805      	ldr	r0, [pc, #20]	; (80076f4 <__i2b+0x28>)
 80076de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076e2:	f000 ffaf 	bl	8008644 <__assert_func>
 80076e6:	2301      	movs	r3, #1
 80076e8:	6144      	str	r4, [r0, #20]
 80076ea:	6103      	str	r3, [r0, #16]
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	08008ba0 	.word	0x08008ba0
 80076f4:	08008c90 	.word	0x08008c90

080076f8 <__multiply>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	4691      	mov	r9, r2
 80076fe:	690a      	ldr	r2, [r1, #16]
 8007700:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007704:	429a      	cmp	r2, r3
 8007706:	bfb8      	it	lt
 8007708:	460b      	movlt	r3, r1
 800770a:	460c      	mov	r4, r1
 800770c:	bfbc      	itt	lt
 800770e:	464c      	movlt	r4, r9
 8007710:	4699      	movlt	r9, r3
 8007712:	6927      	ldr	r7, [r4, #16]
 8007714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	6861      	ldr	r1, [r4, #4]
 800771c:	eb07 060a 	add.w	r6, r7, sl
 8007720:	42b3      	cmp	r3, r6
 8007722:	b085      	sub	sp, #20
 8007724:	bfb8      	it	lt
 8007726:	3101      	addlt	r1, #1
 8007728:	f7ff fe8e 	bl	8007448 <_Balloc>
 800772c:	b930      	cbnz	r0, 800773c <__multiply+0x44>
 800772e:	4602      	mov	r2, r0
 8007730:	4b44      	ldr	r3, [pc, #272]	; (8007844 <__multiply+0x14c>)
 8007732:	4845      	ldr	r0, [pc, #276]	; (8007848 <__multiply+0x150>)
 8007734:	f240 115d 	movw	r1, #349	; 0x15d
 8007738:	f000 ff84 	bl	8008644 <__assert_func>
 800773c:	f100 0514 	add.w	r5, r0, #20
 8007740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007744:	462b      	mov	r3, r5
 8007746:	2200      	movs	r2, #0
 8007748:	4543      	cmp	r3, r8
 800774a:	d321      	bcc.n	8007790 <__multiply+0x98>
 800774c:	f104 0314 	add.w	r3, r4, #20
 8007750:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007754:	f109 0314 	add.w	r3, r9, #20
 8007758:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	1b3a      	subs	r2, r7, r4
 8007760:	3a15      	subs	r2, #21
 8007762:	f022 0203 	bic.w	r2, r2, #3
 8007766:	3204      	adds	r2, #4
 8007768:	f104 0115 	add.w	r1, r4, #21
 800776c:	428f      	cmp	r7, r1
 800776e:	bf38      	it	cc
 8007770:	2204      	movcc	r2, #4
 8007772:	9201      	str	r2, [sp, #4]
 8007774:	9a02      	ldr	r2, [sp, #8]
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	429a      	cmp	r2, r3
 800777a:	d80c      	bhi.n	8007796 <__multiply+0x9e>
 800777c:	2e00      	cmp	r6, #0
 800777e:	dd03      	ble.n	8007788 <__multiply+0x90>
 8007780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007784:	2b00      	cmp	r3, #0
 8007786:	d05a      	beq.n	800783e <__multiply+0x146>
 8007788:	6106      	str	r6, [r0, #16]
 800778a:	b005      	add	sp, #20
 800778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007790:	f843 2b04 	str.w	r2, [r3], #4
 8007794:	e7d8      	b.n	8007748 <__multiply+0x50>
 8007796:	f8b3 a000 	ldrh.w	sl, [r3]
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	d024      	beq.n	80077ea <__multiply+0xf2>
 80077a0:	f104 0e14 	add.w	lr, r4, #20
 80077a4:	46a9      	mov	r9, r5
 80077a6:	f04f 0c00 	mov.w	ip, #0
 80077aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077ae:	f8d9 1000 	ldr.w	r1, [r9]
 80077b2:	fa1f fb82 	uxth.w	fp, r2
 80077b6:	b289      	uxth	r1, r1
 80077b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80077bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077c0:	f8d9 2000 	ldr.w	r2, [r9]
 80077c4:	4461      	add	r1, ip
 80077c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80077ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077d2:	b289      	uxth	r1, r1
 80077d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077d8:	4577      	cmp	r7, lr
 80077da:	f849 1b04 	str.w	r1, [r9], #4
 80077de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077e2:	d8e2      	bhi.n	80077aa <__multiply+0xb2>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	f845 c002 	str.w	ip, [r5, r2]
 80077ea:	9a03      	ldr	r2, [sp, #12]
 80077ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077f0:	3304      	adds	r3, #4
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	d020      	beq.n	800783a <__multiply+0x142>
 80077f8:	6829      	ldr	r1, [r5, #0]
 80077fa:	f104 0c14 	add.w	ip, r4, #20
 80077fe:	46ae      	mov	lr, r5
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f8bc b000 	ldrh.w	fp, [ip]
 8007808:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800780c:	fb09 220b 	mla	r2, r9, fp, r2
 8007810:	4492      	add	sl, r2
 8007812:	b289      	uxth	r1, r1
 8007814:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007818:	f84e 1b04 	str.w	r1, [lr], #4
 800781c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007820:	f8be 1000 	ldrh.w	r1, [lr]
 8007824:	0c12      	lsrs	r2, r2, #16
 8007826:	fb09 1102 	mla	r1, r9, r2, r1
 800782a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800782e:	4567      	cmp	r7, ip
 8007830:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007834:	d8e6      	bhi.n	8007804 <__multiply+0x10c>
 8007836:	9a01      	ldr	r2, [sp, #4]
 8007838:	50a9      	str	r1, [r5, r2]
 800783a:	3504      	adds	r5, #4
 800783c:	e79a      	b.n	8007774 <__multiply+0x7c>
 800783e:	3e01      	subs	r6, #1
 8007840:	e79c      	b.n	800777c <__multiply+0x84>
 8007842:	bf00      	nop
 8007844:	08008ba0 	.word	0x08008ba0
 8007848:	08008c90 	.word	0x08008c90

0800784c <__pow5mult>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4615      	mov	r5, r2
 8007852:	f012 0203 	ands.w	r2, r2, #3
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	d007      	beq.n	800786c <__pow5mult+0x20>
 800785c:	4c25      	ldr	r4, [pc, #148]	; (80078f4 <__pow5mult+0xa8>)
 800785e:	3a01      	subs	r2, #1
 8007860:	2300      	movs	r3, #0
 8007862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007866:	f7ff fe51 	bl	800750c <__multadd>
 800786a:	4607      	mov	r7, r0
 800786c:	10ad      	asrs	r5, r5, #2
 800786e:	d03d      	beq.n	80078ec <__pow5mult+0xa0>
 8007870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007872:	b97c      	cbnz	r4, 8007894 <__pow5mult+0x48>
 8007874:	2010      	movs	r0, #16
 8007876:	f7ff fdbf 	bl	80073f8 <malloc>
 800787a:	4602      	mov	r2, r0
 800787c:	6270      	str	r0, [r6, #36]	; 0x24
 800787e:	b928      	cbnz	r0, 800788c <__pow5mult+0x40>
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <__pow5mult+0xac>)
 8007882:	481e      	ldr	r0, [pc, #120]	; (80078fc <__pow5mult+0xb0>)
 8007884:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007888:	f000 fedc 	bl	8008644 <__assert_func>
 800788c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007890:	6004      	str	r4, [r0, #0]
 8007892:	60c4      	str	r4, [r0, #12]
 8007894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800789c:	b94c      	cbnz	r4, 80078b2 <__pow5mult+0x66>
 800789e:	f240 2171 	movw	r1, #625	; 0x271
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ff12 	bl	80076cc <__i2b>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ae:	4604      	mov	r4, r0
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	07eb      	lsls	r3, r5, #31
 80078b8:	d50a      	bpl.n	80078d0 <__pow5mult+0x84>
 80078ba:	4639      	mov	r1, r7
 80078bc:	4622      	mov	r2, r4
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff ff1a 	bl	80076f8 <__multiply>
 80078c4:	4639      	mov	r1, r7
 80078c6:	4680      	mov	r8, r0
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7ff fdfd 	bl	80074c8 <_Bfree>
 80078ce:	4647      	mov	r7, r8
 80078d0:	106d      	asrs	r5, r5, #1
 80078d2:	d00b      	beq.n	80078ec <__pow5mult+0xa0>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	b938      	cbnz	r0, 80078e8 <__pow5mult+0x9c>
 80078d8:	4622      	mov	r2, r4
 80078da:	4621      	mov	r1, r4
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff ff0b 	bl	80076f8 <__multiply>
 80078e2:	6020      	str	r0, [r4, #0]
 80078e4:	f8c0 9000 	str.w	r9, [r0]
 80078e8:	4604      	mov	r4, r0
 80078ea:	e7e4      	b.n	80078b6 <__pow5mult+0x6a>
 80078ec:	4638      	mov	r0, r7
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	bf00      	nop
 80078f4:	08008de0 	.word	0x08008de0
 80078f8:	08008b2e 	.word	0x08008b2e
 80078fc:	08008c90 	.word	0x08008c90

08007900 <__lshift>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	6849      	ldr	r1, [r1, #4]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	4607      	mov	r7, r0
 8007912:	4691      	mov	r9, r2
 8007914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007918:	f108 0601 	add.w	r6, r8, #1
 800791c:	42b3      	cmp	r3, r6
 800791e:	db0b      	blt.n	8007938 <__lshift+0x38>
 8007920:	4638      	mov	r0, r7
 8007922:	f7ff fd91 	bl	8007448 <_Balloc>
 8007926:	4605      	mov	r5, r0
 8007928:	b948      	cbnz	r0, 800793e <__lshift+0x3e>
 800792a:	4602      	mov	r2, r0
 800792c:	4b2a      	ldr	r3, [pc, #168]	; (80079d8 <__lshift+0xd8>)
 800792e:	482b      	ldr	r0, [pc, #172]	; (80079dc <__lshift+0xdc>)
 8007930:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007934:	f000 fe86 	bl	8008644 <__assert_func>
 8007938:	3101      	adds	r1, #1
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	e7ee      	b.n	800791c <__lshift+0x1c>
 800793e:	2300      	movs	r3, #0
 8007940:	f100 0114 	add.w	r1, r0, #20
 8007944:	f100 0210 	add.w	r2, r0, #16
 8007948:	4618      	mov	r0, r3
 800794a:	4553      	cmp	r3, sl
 800794c:	db37      	blt.n	80079be <__lshift+0xbe>
 800794e:	6920      	ldr	r0, [r4, #16]
 8007950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007954:	f104 0314 	add.w	r3, r4, #20
 8007958:	f019 091f 	ands.w	r9, r9, #31
 800795c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007964:	d02f      	beq.n	80079c6 <__lshift+0xc6>
 8007966:	f1c9 0e20 	rsb	lr, r9, #32
 800796a:	468a      	mov	sl, r1
 800796c:	f04f 0c00 	mov.w	ip, #0
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	fa02 f209 	lsl.w	r2, r2, r9
 8007976:	ea42 020c 	orr.w	r2, r2, ip
 800797a:	f84a 2b04 	str.w	r2, [sl], #4
 800797e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007982:	4298      	cmp	r0, r3
 8007984:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007988:	d8f2      	bhi.n	8007970 <__lshift+0x70>
 800798a:	1b03      	subs	r3, r0, r4
 800798c:	3b15      	subs	r3, #21
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	3304      	adds	r3, #4
 8007994:	f104 0215 	add.w	r2, r4, #21
 8007998:	4290      	cmp	r0, r2
 800799a:	bf38      	it	cc
 800799c:	2304      	movcc	r3, #4
 800799e:	f841 c003 	str.w	ip, [r1, r3]
 80079a2:	f1bc 0f00 	cmp.w	ip, #0
 80079a6:	d001      	beq.n	80079ac <__lshift+0xac>
 80079a8:	f108 0602 	add.w	r6, r8, #2
 80079ac:	3e01      	subs	r6, #1
 80079ae:	4638      	mov	r0, r7
 80079b0:	612e      	str	r6, [r5, #16]
 80079b2:	4621      	mov	r1, r4
 80079b4:	f7ff fd88 	bl	80074c8 <_Bfree>
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079be:	f842 0f04 	str.w	r0, [r2, #4]!
 80079c2:	3301      	adds	r3, #1
 80079c4:	e7c1      	b.n	800794a <__lshift+0x4a>
 80079c6:	3904      	subs	r1, #4
 80079c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80079d0:	4298      	cmp	r0, r3
 80079d2:	d8f9      	bhi.n	80079c8 <__lshift+0xc8>
 80079d4:	e7ea      	b.n	80079ac <__lshift+0xac>
 80079d6:	bf00      	nop
 80079d8:	08008ba0 	.word	0x08008ba0
 80079dc:	08008c90 	.word	0x08008c90

080079e0 <__mcmp>:
 80079e0:	b530      	push	{r4, r5, lr}
 80079e2:	6902      	ldr	r2, [r0, #16]
 80079e4:	690c      	ldr	r4, [r1, #16]
 80079e6:	1b12      	subs	r2, r2, r4
 80079e8:	d10e      	bne.n	8007a08 <__mcmp+0x28>
 80079ea:	f100 0314 	add.w	r3, r0, #20
 80079ee:	3114      	adds	r1, #20
 80079f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a00:	42a5      	cmp	r5, r4
 8007a02:	d003      	beq.n	8007a0c <__mcmp+0x2c>
 8007a04:	d305      	bcc.n	8007a12 <__mcmp+0x32>
 8007a06:	2201      	movs	r2, #1
 8007a08:	4610      	mov	r0, r2
 8007a0a:	bd30      	pop	{r4, r5, pc}
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	d3f3      	bcc.n	80079f8 <__mcmp+0x18>
 8007a10:	e7fa      	b.n	8007a08 <__mcmp+0x28>
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	e7f7      	b.n	8007a08 <__mcmp+0x28>

08007a18 <__mdiff>:
 8007a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	4606      	mov	r6, r0
 8007a20:	4611      	mov	r1, r2
 8007a22:	4620      	mov	r0, r4
 8007a24:	4690      	mov	r8, r2
 8007a26:	f7ff ffdb 	bl	80079e0 <__mcmp>
 8007a2a:	1e05      	subs	r5, r0, #0
 8007a2c:	d110      	bne.n	8007a50 <__mdiff+0x38>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7ff fd09 	bl	8007448 <_Balloc>
 8007a36:	b930      	cbnz	r0, 8007a46 <__mdiff+0x2e>
 8007a38:	4b3a      	ldr	r3, [pc, #232]	; (8007b24 <__mdiff+0x10c>)
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	f240 2132 	movw	r1, #562	; 0x232
 8007a40:	4839      	ldr	r0, [pc, #228]	; (8007b28 <__mdiff+0x110>)
 8007a42:	f000 fdff 	bl	8008644 <__assert_func>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a50:	bfa4      	itt	ge
 8007a52:	4643      	movge	r3, r8
 8007a54:	46a0      	movge	r8, r4
 8007a56:	4630      	mov	r0, r6
 8007a58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a5c:	bfa6      	itte	ge
 8007a5e:	461c      	movge	r4, r3
 8007a60:	2500      	movge	r5, #0
 8007a62:	2501      	movlt	r5, #1
 8007a64:	f7ff fcf0 	bl	8007448 <_Balloc>
 8007a68:	b920      	cbnz	r0, 8007a74 <__mdiff+0x5c>
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <__mdiff+0x10c>)
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a72:	e7e5      	b.n	8007a40 <__mdiff+0x28>
 8007a74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a78:	6926      	ldr	r6, [r4, #16]
 8007a7a:	60c5      	str	r5, [r0, #12]
 8007a7c:	f104 0914 	add.w	r9, r4, #20
 8007a80:	f108 0514 	add.w	r5, r8, #20
 8007a84:	f100 0e14 	add.w	lr, r0, #20
 8007a88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a90:	f108 0210 	add.w	r2, r8, #16
 8007a94:	46f2      	mov	sl, lr
 8007a96:	2100      	movs	r1, #0
 8007a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007aa0:	fa1f f883 	uxth.w	r8, r3
 8007aa4:	fa11 f18b 	uxtah	r1, r1, fp
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	eba1 0808 	sub.w	r8, r1, r8
 8007aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ab2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ab6:	fa1f f888 	uxth.w	r8, r8
 8007aba:	1419      	asrs	r1, r3, #16
 8007abc:	454e      	cmp	r6, r9
 8007abe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8007ac6:	d8e7      	bhi.n	8007a98 <__mdiff+0x80>
 8007ac8:	1b33      	subs	r3, r6, r4
 8007aca:	3b15      	subs	r3, #21
 8007acc:	f023 0303 	bic.w	r3, r3, #3
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	3415      	adds	r4, #21
 8007ad4:	42a6      	cmp	r6, r4
 8007ad6:	bf38      	it	cc
 8007ad8:	2304      	movcc	r3, #4
 8007ada:	441d      	add	r5, r3
 8007adc:	4473      	add	r3, lr
 8007ade:	469e      	mov	lr, r3
 8007ae0:	462e      	mov	r6, r5
 8007ae2:	4566      	cmp	r6, ip
 8007ae4:	d30e      	bcc.n	8007b04 <__mdiff+0xec>
 8007ae6:	f10c 0203 	add.w	r2, ip, #3
 8007aea:	1b52      	subs	r2, r2, r5
 8007aec:	f022 0203 	bic.w	r2, r2, #3
 8007af0:	3d03      	subs	r5, #3
 8007af2:	45ac      	cmp	ip, r5
 8007af4:	bf38      	it	cc
 8007af6:	2200      	movcc	r2, #0
 8007af8:	441a      	add	r2, r3
 8007afa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007afe:	b17b      	cbz	r3, 8007b20 <__mdiff+0x108>
 8007b00:	6107      	str	r7, [r0, #16]
 8007b02:	e7a3      	b.n	8007a4c <__mdiff+0x34>
 8007b04:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b08:	fa11 f288 	uxtah	r2, r1, r8
 8007b0c:	1414      	asrs	r4, r2, #16
 8007b0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b12:	b292      	uxth	r2, r2
 8007b14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b18:	f84e 2b04 	str.w	r2, [lr], #4
 8007b1c:	1421      	asrs	r1, r4, #16
 8007b1e:	e7e0      	b.n	8007ae2 <__mdiff+0xca>
 8007b20:	3f01      	subs	r7, #1
 8007b22:	e7ea      	b.n	8007afa <__mdiff+0xe2>
 8007b24:	08008ba0 	.word	0x08008ba0
 8007b28:	08008c90 	.word	0x08008c90

08007b2c <__ulp>:
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	ed8d 0b00 	vstr	d0, [sp]
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	4912      	ldr	r1, [pc, #72]	; (8007b80 <__ulp+0x54>)
 8007b36:	4019      	ands	r1, r3
 8007b38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	dd05      	ble.n	8007b4c <__ulp+0x20>
 8007b40:	2200      	movs	r2, #0
 8007b42:	460b      	mov	r3, r1
 8007b44:	ec43 2b10 	vmov	d0, r2, r3
 8007b48:	b002      	add	sp, #8
 8007b4a:	4770      	bx	lr
 8007b4c:	4249      	negs	r1, r1
 8007b4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b52:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	da04      	bge.n	8007b6a <__ulp+0x3e>
 8007b60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007b64:	fa41 f300 	asr.w	r3, r1, r0
 8007b68:	e7ec      	b.n	8007b44 <__ulp+0x18>
 8007b6a:	f1a0 0114 	sub.w	r1, r0, #20
 8007b6e:	291e      	cmp	r1, #30
 8007b70:	bfda      	itte	le
 8007b72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007b76:	fa20 f101 	lsrle.w	r1, r0, r1
 8007b7a:	2101      	movgt	r1, #1
 8007b7c:	460a      	mov	r2, r1
 8007b7e:	e7e1      	b.n	8007b44 <__ulp+0x18>
 8007b80:	7ff00000 	.word	0x7ff00000

08007b84 <__b2d>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	6905      	ldr	r5, [r0, #16]
 8007b88:	f100 0714 	add.w	r7, r0, #20
 8007b8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b90:	1f2e      	subs	r6, r5, #4
 8007b92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff fd48 	bl	800762c <__hi0bits>
 8007b9c:	f1c0 0320 	rsb	r3, r0, #32
 8007ba0:	280a      	cmp	r0, #10
 8007ba2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007c20 <__b2d+0x9c>
 8007ba6:	600b      	str	r3, [r1, #0]
 8007ba8:	dc14      	bgt.n	8007bd4 <__b2d+0x50>
 8007baa:	f1c0 0e0b 	rsb	lr, r0, #11
 8007bae:	fa24 f10e 	lsr.w	r1, r4, lr
 8007bb2:	42b7      	cmp	r7, r6
 8007bb4:	ea41 030c 	orr.w	r3, r1, ip
 8007bb8:	bf34      	ite	cc
 8007bba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bbe:	2100      	movcs	r1, #0
 8007bc0:	3015      	adds	r0, #21
 8007bc2:	fa04 f000 	lsl.w	r0, r4, r0
 8007bc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8007bca:	ea40 0201 	orr.w	r2, r0, r1
 8007bce:	ec43 2b10 	vmov	d0, r2, r3
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd4:	42b7      	cmp	r7, r6
 8007bd6:	bf3a      	itte	cc
 8007bd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bdc:	f1a5 0608 	subcc.w	r6, r5, #8
 8007be0:	2100      	movcs	r1, #0
 8007be2:	380b      	subs	r0, #11
 8007be4:	d017      	beq.n	8007c16 <__b2d+0x92>
 8007be6:	f1c0 0c20 	rsb	ip, r0, #32
 8007bea:	fa04 f500 	lsl.w	r5, r4, r0
 8007bee:	42be      	cmp	r6, r7
 8007bf0:	fa21 f40c 	lsr.w	r4, r1, ip
 8007bf4:	ea45 0504 	orr.w	r5, r5, r4
 8007bf8:	bf8c      	ite	hi
 8007bfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007bfe:	2400      	movls	r4, #0
 8007c00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007c04:	fa01 f000 	lsl.w	r0, r1, r0
 8007c08:	fa24 f40c 	lsr.w	r4, r4, ip
 8007c0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c10:	ea40 0204 	orr.w	r2, r0, r4
 8007c14:	e7db      	b.n	8007bce <__b2d+0x4a>
 8007c16:	ea44 030c 	orr.w	r3, r4, ip
 8007c1a:	460a      	mov	r2, r1
 8007c1c:	e7d7      	b.n	8007bce <__b2d+0x4a>
 8007c1e:	bf00      	nop
 8007c20:	3ff00000 	.word	0x3ff00000

08007c24 <__d2b>:
 8007c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	4689      	mov	r9, r1
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	ec57 6b10 	vmov	r6, r7, d0
 8007c30:	4690      	mov	r8, r2
 8007c32:	f7ff fc09 	bl	8007448 <_Balloc>
 8007c36:	4604      	mov	r4, r0
 8007c38:	b930      	cbnz	r0, 8007c48 <__d2b+0x24>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <__d2b+0xb0>)
 8007c3e:	4826      	ldr	r0, [pc, #152]	; (8007cd8 <__d2b+0xb4>)
 8007c40:	f240 310a 	movw	r1, #778	; 0x30a
 8007c44:	f000 fcfe 	bl	8008644 <__assert_func>
 8007c48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c50:	bb35      	cbnz	r5, 8007ca0 <__d2b+0x7c>
 8007c52:	2e00      	cmp	r6, #0
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	d028      	beq.n	8007caa <__d2b+0x86>
 8007c58:	4668      	mov	r0, sp
 8007c5a:	9600      	str	r6, [sp, #0]
 8007c5c:	f7ff fd06 	bl	800766c <__lo0bits>
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	b300      	cbz	r0, 8007ca6 <__d2b+0x82>
 8007c64:	9a01      	ldr	r2, [sp, #4]
 8007c66:	f1c0 0320 	rsb	r3, r0, #32
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	40c2      	lsrs	r2, r0
 8007c72:	6163      	str	r3, [r4, #20]
 8007c74:	9201      	str	r2, [sp, #4]
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	61a3      	str	r3, [r4, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf14      	ite	ne
 8007c7e:	2202      	movne	r2, #2
 8007c80:	2201      	moveq	r2, #1
 8007c82:	6122      	str	r2, [r4, #16]
 8007c84:	b1d5      	cbz	r5, 8007cbc <__d2b+0x98>
 8007c86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c8a:	4405      	add	r5, r0
 8007c8c:	f8c9 5000 	str.w	r5, [r9]
 8007c90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c94:	f8c8 0000 	str.w	r0, [r8]
 8007c98:	4620      	mov	r0, r4
 8007c9a:	b003      	add	sp, #12
 8007c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ca4:	e7d5      	b.n	8007c52 <__d2b+0x2e>
 8007ca6:	6161      	str	r1, [r4, #20]
 8007ca8:	e7e5      	b.n	8007c76 <__d2b+0x52>
 8007caa:	a801      	add	r0, sp, #4
 8007cac:	f7ff fcde 	bl	800766c <__lo0bits>
 8007cb0:	9b01      	ldr	r3, [sp, #4]
 8007cb2:	6163      	str	r3, [r4, #20]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	6122      	str	r2, [r4, #16]
 8007cb8:	3020      	adds	r0, #32
 8007cba:	e7e3      	b.n	8007c84 <__d2b+0x60>
 8007cbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cc4:	f8c9 0000 	str.w	r0, [r9]
 8007cc8:	6918      	ldr	r0, [r3, #16]
 8007cca:	f7ff fcaf 	bl	800762c <__hi0bits>
 8007cce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cd2:	e7df      	b.n	8007c94 <__d2b+0x70>
 8007cd4:	08008ba0 	.word	0x08008ba0
 8007cd8:	08008c90 	.word	0x08008c90

08007cdc <__ratio>:
 8007cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	4688      	mov	r8, r1
 8007ce2:	4669      	mov	r1, sp
 8007ce4:	4681      	mov	r9, r0
 8007ce6:	f7ff ff4d 	bl	8007b84 <__b2d>
 8007cea:	a901      	add	r1, sp, #4
 8007cec:	4640      	mov	r0, r8
 8007cee:	ec55 4b10 	vmov	r4, r5, d0
 8007cf2:	f7ff ff47 	bl	8007b84 <__b2d>
 8007cf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cfa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cfe:	eba3 0c02 	sub.w	ip, r3, r2
 8007d02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d0c:	ec51 0b10 	vmov	r0, r1, d0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfd6      	itet	le
 8007d14:	460a      	movle	r2, r1
 8007d16:	462a      	movgt	r2, r5
 8007d18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d1c:	468b      	mov	fp, r1
 8007d1e:	462f      	mov	r7, r5
 8007d20:	bfd4      	ite	le
 8007d22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	ee10 2a10 	vmov	r2, s0
 8007d30:	465b      	mov	r3, fp
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 fd8a 	bl	800084c <__aeabi_ddiv>
 8007d38:	ec41 0b10 	vmov	d0, r0, r1
 8007d3c:	b003      	add	sp, #12
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d42 <__copybits>:
 8007d42:	3901      	subs	r1, #1
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	1149      	asrs	r1, r1, #5
 8007d48:	6914      	ldr	r4, [r2, #16]
 8007d4a:	3101      	adds	r1, #1
 8007d4c:	f102 0314 	add.w	r3, r2, #20
 8007d50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d58:	1f05      	subs	r5, r0, #4
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	d30c      	bcc.n	8007d78 <__copybits+0x36>
 8007d5e:	1aa3      	subs	r3, r4, r2
 8007d60:	3b11      	subs	r3, #17
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	3211      	adds	r2, #17
 8007d68:	42a2      	cmp	r2, r4
 8007d6a:	bf88      	it	hi
 8007d6c:	2300      	movhi	r3, #0
 8007d6e:	4418      	add	r0, r3
 8007d70:	2300      	movs	r3, #0
 8007d72:	4288      	cmp	r0, r1
 8007d74:	d305      	bcc.n	8007d82 <__copybits+0x40>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d7c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d80:	e7eb      	b.n	8007d5a <__copybits+0x18>
 8007d82:	f840 3b04 	str.w	r3, [r0], #4
 8007d86:	e7f4      	b.n	8007d72 <__copybits+0x30>

08007d88 <__any_on>:
 8007d88:	f100 0214 	add.w	r2, r0, #20
 8007d8c:	6900      	ldr	r0, [r0, #16]
 8007d8e:	114b      	asrs	r3, r1, #5
 8007d90:	4298      	cmp	r0, r3
 8007d92:	b510      	push	{r4, lr}
 8007d94:	db11      	blt.n	8007dba <__any_on+0x32>
 8007d96:	dd0a      	ble.n	8007dae <__any_on+0x26>
 8007d98:	f011 011f 	ands.w	r1, r1, #31
 8007d9c:	d007      	beq.n	8007dae <__any_on+0x26>
 8007d9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007da2:	fa24 f001 	lsr.w	r0, r4, r1
 8007da6:	fa00 f101 	lsl.w	r1, r0, r1
 8007daa:	428c      	cmp	r4, r1
 8007dac:	d10b      	bne.n	8007dc6 <__any_on+0x3e>
 8007dae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d803      	bhi.n	8007dbe <__any_on+0x36>
 8007db6:	2000      	movs	r0, #0
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	4603      	mov	r3, r0
 8007dbc:	e7f7      	b.n	8007dae <__any_on+0x26>
 8007dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dc2:	2900      	cmp	r1, #0
 8007dc4:	d0f5      	beq.n	8007db2 <__any_on+0x2a>
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7f6      	b.n	8007db8 <__any_on+0x30>

08007dca <_calloc_r>:
 8007dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dcc:	fba1 2402 	umull	r2, r4, r1, r2
 8007dd0:	b94c      	cbnz	r4, 8007de6 <_calloc_r+0x1c>
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	9201      	str	r2, [sp, #4]
 8007dd6:	f000 f87b 	bl	8007ed0 <_malloc_r>
 8007dda:	9a01      	ldr	r2, [sp, #4]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b930      	cbnz	r0, 8007dee <_calloc_r+0x24>
 8007de0:	4628      	mov	r0, r5
 8007de2:	b003      	add	sp, #12
 8007de4:	bd30      	pop	{r4, r5, pc}
 8007de6:	220c      	movs	r2, #12
 8007de8:	6002      	str	r2, [r0, #0]
 8007dea:	2500      	movs	r5, #0
 8007dec:	e7f8      	b.n	8007de0 <_calloc_r+0x16>
 8007dee:	4621      	mov	r1, r4
 8007df0:	f7fc f854 	bl	8003e9c <memset>
 8007df4:	e7f4      	b.n	8007de0 <_calloc_r+0x16>
	...

08007df8 <_free_r>:
 8007df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d044      	beq.n	8007e88 <_free_r+0x90>
 8007dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e02:	9001      	str	r0, [sp, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f1a1 0404 	sub.w	r4, r1, #4
 8007e0a:	bfb8      	it	lt
 8007e0c:	18e4      	addlt	r4, r4, r3
 8007e0e:	f000 fca7 	bl	8008760 <__malloc_lock>
 8007e12:	4a1e      	ldr	r2, [pc, #120]	; (8007e8c <_free_r+0x94>)
 8007e14:	9801      	ldr	r0, [sp, #4]
 8007e16:	6813      	ldr	r3, [r2, #0]
 8007e18:	b933      	cbnz	r3, 8007e28 <_free_r+0x30>
 8007e1a:	6063      	str	r3, [r4, #4]
 8007e1c:	6014      	str	r4, [r2, #0]
 8007e1e:	b003      	add	sp, #12
 8007e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e24:	f000 bca2 	b.w	800876c <__malloc_unlock>
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	d908      	bls.n	8007e3e <_free_r+0x46>
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1961      	adds	r1, r4, r5
 8007e30:	428b      	cmp	r3, r1
 8007e32:	bf01      	itttt	eq
 8007e34:	6819      	ldreq	r1, [r3, #0]
 8007e36:	685b      	ldreq	r3, [r3, #4]
 8007e38:	1949      	addeq	r1, r1, r5
 8007e3a:	6021      	streq	r1, [r4, #0]
 8007e3c:	e7ed      	b.n	8007e1a <_free_r+0x22>
 8007e3e:	461a      	mov	r2, r3
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	b10b      	cbz	r3, 8007e48 <_free_r+0x50>
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d9fa      	bls.n	8007e3e <_free_r+0x46>
 8007e48:	6811      	ldr	r1, [r2, #0]
 8007e4a:	1855      	adds	r5, r2, r1
 8007e4c:	42a5      	cmp	r5, r4
 8007e4e:	d10b      	bne.n	8007e68 <_free_r+0x70>
 8007e50:	6824      	ldr	r4, [r4, #0]
 8007e52:	4421      	add	r1, r4
 8007e54:	1854      	adds	r4, r2, r1
 8007e56:	42a3      	cmp	r3, r4
 8007e58:	6011      	str	r1, [r2, #0]
 8007e5a:	d1e0      	bne.n	8007e1e <_free_r+0x26>
 8007e5c:	681c      	ldr	r4, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	6053      	str	r3, [r2, #4]
 8007e62:	4421      	add	r1, r4
 8007e64:	6011      	str	r1, [r2, #0]
 8007e66:	e7da      	b.n	8007e1e <_free_r+0x26>
 8007e68:	d902      	bls.n	8007e70 <_free_r+0x78>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	e7d6      	b.n	8007e1e <_free_r+0x26>
 8007e70:	6825      	ldr	r5, [r4, #0]
 8007e72:	1961      	adds	r1, r4, r5
 8007e74:	428b      	cmp	r3, r1
 8007e76:	bf04      	itt	eq
 8007e78:	6819      	ldreq	r1, [r3, #0]
 8007e7a:	685b      	ldreq	r3, [r3, #4]
 8007e7c:	6063      	str	r3, [r4, #4]
 8007e7e:	bf04      	itt	eq
 8007e80:	1949      	addeq	r1, r1, r5
 8007e82:	6021      	streq	r1, [r4, #0]
 8007e84:	6054      	str	r4, [r2, #4]
 8007e86:	e7ca      	b.n	8007e1e <_free_r+0x26>
 8007e88:	b003      	add	sp, #12
 8007e8a:	bd30      	pop	{r4, r5, pc}
 8007e8c:	20001a8c 	.word	0x20001a8c

08007e90 <sbrk_aligned>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4e0e      	ldr	r6, [pc, #56]	; (8007ecc <sbrk_aligned+0x3c>)
 8007e94:	460c      	mov	r4, r1
 8007e96:	6831      	ldr	r1, [r6, #0]
 8007e98:	4605      	mov	r5, r0
 8007e9a:	b911      	cbnz	r1, 8007ea2 <sbrk_aligned+0x12>
 8007e9c:	f000 fb4c 	bl	8008538 <_sbrk_r>
 8007ea0:	6030      	str	r0, [r6, #0]
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fb47 	bl	8008538 <_sbrk_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d00a      	beq.n	8007ec4 <sbrk_aligned+0x34>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d007      	beq.n	8007ec8 <sbrk_aligned+0x38>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 fb3c 	bl	8008538 <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d101      	bne.n	8007ec8 <sbrk_aligned+0x38>
 8007ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec8:	4620      	mov	r0, r4
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	20001a90 	.word	0x20001a90

08007ed0 <_malloc_r>:
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	1ccd      	adds	r5, r1, #3
 8007ed6:	f025 0503 	bic.w	r5, r5, #3
 8007eda:	3508      	adds	r5, #8
 8007edc:	2d0c      	cmp	r5, #12
 8007ede:	bf38      	it	cc
 8007ee0:	250c      	movcc	r5, #12
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	db01      	blt.n	8007eec <_malloc_r+0x1c>
 8007ee8:	42a9      	cmp	r1, r5
 8007eea:	d905      	bls.n	8007ef8 <_malloc_r+0x28>
 8007eec:	230c      	movs	r3, #12
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	4e2e      	ldr	r6, [pc, #184]	; (8007fb4 <_malloc_r+0xe4>)
 8007efa:	f000 fc31 	bl	8008760 <__malloc_lock>
 8007efe:	6833      	ldr	r3, [r6, #0]
 8007f00:	461c      	mov	r4, r3
 8007f02:	bb34      	cbnz	r4, 8007f52 <_malloc_r+0x82>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7ff ffc2 	bl	8007e90 <sbrk_aligned>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	4604      	mov	r4, r0
 8007f10:	d14d      	bne.n	8007fae <_malloc_r+0xde>
 8007f12:	6834      	ldr	r4, [r6, #0]
 8007f14:	4626      	mov	r6, r4
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	d140      	bne.n	8007f9c <_malloc_r+0xcc>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4638      	mov	r0, r7
 8007f20:	eb04 0803 	add.w	r8, r4, r3
 8007f24:	f000 fb08 	bl	8008538 <_sbrk_r>
 8007f28:	4580      	cmp	r8, r0
 8007f2a:	d13a      	bne.n	8007fa2 <_malloc_r+0xd2>
 8007f2c:	6821      	ldr	r1, [r4, #0]
 8007f2e:	3503      	adds	r5, #3
 8007f30:	1a6d      	subs	r5, r5, r1
 8007f32:	f025 0503 	bic.w	r5, r5, #3
 8007f36:	3508      	adds	r5, #8
 8007f38:	2d0c      	cmp	r5, #12
 8007f3a:	bf38      	it	cc
 8007f3c:	250c      	movcc	r5, #12
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff ffa5 	bl	8007e90 <sbrk_aligned>
 8007f46:	3001      	adds	r0, #1
 8007f48:	d02b      	beq.n	8007fa2 <_malloc_r+0xd2>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	442b      	add	r3, r5
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	e00e      	b.n	8007f70 <_malloc_r+0xa0>
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	d41e      	bmi.n	8007f96 <_malloc_r+0xc6>
 8007f58:	2a0b      	cmp	r2, #11
 8007f5a:	d916      	bls.n	8007f8a <_malloc_r+0xba>
 8007f5c:	1961      	adds	r1, r4, r5
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	6025      	str	r5, [r4, #0]
 8007f62:	bf18      	it	ne
 8007f64:	6059      	strne	r1, [r3, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	bf08      	it	eq
 8007f6a:	6031      	streq	r1, [r6, #0]
 8007f6c:	5162      	str	r2, [r4, r5]
 8007f6e:	604b      	str	r3, [r1, #4]
 8007f70:	4638      	mov	r0, r7
 8007f72:	f104 060b 	add.w	r6, r4, #11
 8007f76:	f000 fbf9 	bl	800876c <__malloc_unlock>
 8007f7a:	f026 0607 	bic.w	r6, r6, #7
 8007f7e:	1d23      	adds	r3, r4, #4
 8007f80:	1af2      	subs	r2, r6, r3
 8007f82:	d0b6      	beq.n	8007ef2 <_malloc_r+0x22>
 8007f84:	1b9b      	subs	r3, r3, r6
 8007f86:	50a3      	str	r3, [r4, r2]
 8007f88:	e7b3      	b.n	8007ef2 <_malloc_r+0x22>
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	bf0c      	ite	eq
 8007f90:	6032      	streq	r2, [r6, #0]
 8007f92:	605a      	strne	r2, [r3, #4]
 8007f94:	e7ec      	b.n	8007f70 <_malloc_r+0xa0>
 8007f96:	4623      	mov	r3, r4
 8007f98:	6864      	ldr	r4, [r4, #4]
 8007f9a:	e7b2      	b.n	8007f02 <_malloc_r+0x32>
 8007f9c:	4634      	mov	r4, r6
 8007f9e:	6876      	ldr	r6, [r6, #4]
 8007fa0:	e7b9      	b.n	8007f16 <_malloc_r+0x46>
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	603b      	str	r3, [r7, #0]
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f000 fbe0 	bl	800876c <__malloc_unlock>
 8007fac:	e7a1      	b.n	8007ef2 <_malloc_r+0x22>
 8007fae:	6025      	str	r5, [r4, #0]
 8007fb0:	e7de      	b.n	8007f70 <_malloc_r+0xa0>
 8007fb2:	bf00      	nop
 8007fb4:	20001a8c 	.word	0x20001a8c

08007fb8 <__ssputs_r>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	688e      	ldr	r6, [r1, #8]
 8007fbe:	429e      	cmp	r6, r3
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4690      	mov	r8, r2
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	d838      	bhi.n	800803c <__ssputs_r+0x84>
 8007fca:	898a      	ldrh	r2, [r1, #12]
 8007fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fd0:	d032      	beq.n	8008038 <__ssputs_r+0x80>
 8007fd2:	6825      	ldr	r5, [r4, #0]
 8007fd4:	6909      	ldr	r1, [r1, #16]
 8007fd6:	eba5 0901 	sub.w	r9, r5, r1
 8007fda:	6965      	ldr	r5, [r4, #20]
 8007fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	444b      	add	r3, r9
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	429d      	cmp	r5, r3
 8007fec:	bf38      	it	cc
 8007fee:	461d      	movcc	r5, r3
 8007ff0:	0553      	lsls	r3, r2, #21
 8007ff2:	d531      	bpl.n	8008058 <__ssputs_r+0xa0>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7ff ff6b 	bl	8007ed0 <_malloc_r>
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	b950      	cbnz	r0, 8008014 <__ssputs_r+0x5c>
 8007ffe:	230c      	movs	r3, #12
 8008000:	f8ca 3000 	str.w	r3, [sl]
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008014:	6921      	ldr	r1, [r4, #16]
 8008016:	464a      	mov	r2, r9
 8008018:	f7ff fa08 	bl	800742c <memcpy>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	6126      	str	r6, [r4, #16]
 800802a:	6165      	str	r5, [r4, #20]
 800802c:	444e      	add	r6, r9
 800802e:	eba5 0509 	sub.w	r5, r5, r9
 8008032:	6026      	str	r6, [r4, #0]
 8008034:	60a5      	str	r5, [r4, #8]
 8008036:	463e      	mov	r6, r7
 8008038:	42be      	cmp	r6, r7
 800803a:	d900      	bls.n	800803e <__ssputs_r+0x86>
 800803c:	463e      	mov	r6, r7
 800803e:	6820      	ldr	r0, [r4, #0]
 8008040:	4632      	mov	r2, r6
 8008042:	4641      	mov	r1, r8
 8008044:	f000 fb72 	bl	800872c <memmove>
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	1b9b      	subs	r3, r3, r6
 800804c:	60a3      	str	r3, [r4, #8]
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	4433      	add	r3, r6
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	2000      	movs	r0, #0
 8008056:	e7db      	b.n	8008010 <__ssputs_r+0x58>
 8008058:	462a      	mov	r2, r5
 800805a:	f000 fb8d 	bl	8008778 <_realloc_r>
 800805e:	4606      	mov	r6, r0
 8008060:	2800      	cmp	r0, #0
 8008062:	d1e1      	bne.n	8008028 <__ssputs_r+0x70>
 8008064:	6921      	ldr	r1, [r4, #16]
 8008066:	4650      	mov	r0, sl
 8008068:	f7ff fec6 	bl	8007df8 <_free_r>
 800806c:	e7c7      	b.n	8007ffe <__ssputs_r+0x46>
	...

08008070 <_svfiprintf_r>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4698      	mov	r8, r3
 8008076:	898b      	ldrh	r3, [r1, #12]
 8008078:	061b      	lsls	r3, r3, #24
 800807a:	b09d      	sub	sp, #116	; 0x74
 800807c:	4607      	mov	r7, r0
 800807e:	460d      	mov	r5, r1
 8008080:	4614      	mov	r4, r2
 8008082:	d50e      	bpl.n	80080a2 <_svfiprintf_r+0x32>
 8008084:	690b      	ldr	r3, [r1, #16]
 8008086:	b963      	cbnz	r3, 80080a2 <_svfiprintf_r+0x32>
 8008088:	2140      	movs	r1, #64	; 0x40
 800808a:	f7ff ff21 	bl	8007ed0 <_malloc_r>
 800808e:	6028      	str	r0, [r5, #0]
 8008090:	6128      	str	r0, [r5, #16]
 8008092:	b920      	cbnz	r0, 800809e <_svfiprintf_r+0x2e>
 8008094:	230c      	movs	r3, #12
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e0d1      	b.n	8008242 <_svfiprintf_r+0x1d2>
 800809e:	2340      	movs	r3, #64	; 0x40
 80080a0:	616b      	str	r3, [r5, #20]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9309      	str	r3, [sp, #36]	; 0x24
 80080a6:	2320      	movs	r3, #32
 80080a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b0:	2330      	movs	r3, #48	; 0x30
 80080b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800825c <_svfiprintf_r+0x1ec>
 80080b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ba:	f04f 0901 	mov.w	r9, #1
 80080be:	4623      	mov	r3, r4
 80080c0:	469a      	mov	sl, r3
 80080c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c6:	b10a      	cbz	r2, 80080cc <_svfiprintf_r+0x5c>
 80080c8:	2a25      	cmp	r2, #37	; 0x25
 80080ca:	d1f9      	bne.n	80080c0 <_svfiprintf_r+0x50>
 80080cc:	ebba 0b04 	subs.w	fp, sl, r4
 80080d0:	d00b      	beq.n	80080ea <_svfiprintf_r+0x7a>
 80080d2:	465b      	mov	r3, fp
 80080d4:	4622      	mov	r2, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff ff6d 	bl	8007fb8 <__ssputs_r>
 80080de:	3001      	adds	r0, #1
 80080e0:	f000 80aa 	beq.w	8008238 <_svfiprintf_r+0x1c8>
 80080e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e6:	445a      	add	r2, fp
 80080e8:	9209      	str	r2, [sp, #36]	; 0x24
 80080ea:	f89a 3000 	ldrb.w	r3, [sl]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80a2 	beq.w	8008238 <_svfiprintf_r+0x1c8>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fe:	f10a 0a01 	add.w	sl, sl, #1
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	9307      	str	r3, [sp, #28]
 8008106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800810a:	931a      	str	r3, [sp, #104]	; 0x68
 800810c:	4654      	mov	r4, sl
 800810e:	2205      	movs	r2, #5
 8008110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008114:	4851      	ldr	r0, [pc, #324]	; (800825c <_svfiprintf_r+0x1ec>)
 8008116:	f7f8 f863 	bl	80001e0 <memchr>
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	b9d8      	cbnz	r0, 8008156 <_svfiprintf_r+0xe6>
 800811e:	06d0      	lsls	r0, r2, #27
 8008120:	bf44      	itt	mi
 8008122:	2320      	movmi	r3, #32
 8008124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008128:	0711      	lsls	r1, r2, #28
 800812a:	bf44      	itt	mi
 800812c:	232b      	movmi	r3, #43	; 0x2b
 800812e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d015      	beq.n	8008166 <_svfiprintf_r+0xf6>
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	4654      	mov	r4, sl
 800813e:	2000      	movs	r0, #0
 8008140:	f04f 0c0a 	mov.w	ip, #10
 8008144:	4621      	mov	r1, r4
 8008146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800814a:	3b30      	subs	r3, #48	; 0x30
 800814c:	2b09      	cmp	r3, #9
 800814e:	d94e      	bls.n	80081ee <_svfiprintf_r+0x17e>
 8008150:	b1b0      	cbz	r0, 8008180 <_svfiprintf_r+0x110>
 8008152:	9207      	str	r2, [sp, #28]
 8008154:	e014      	b.n	8008180 <_svfiprintf_r+0x110>
 8008156:	eba0 0308 	sub.w	r3, r0, r8
 800815a:	fa09 f303 	lsl.w	r3, r9, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	9304      	str	r3, [sp, #16]
 8008162:	46a2      	mov	sl, r4
 8008164:	e7d2      	b.n	800810c <_svfiprintf_r+0x9c>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	1d19      	adds	r1, r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	bfbb      	ittet	lt
 8008172:	425b      	neglt	r3, r3
 8008174:	f042 0202 	orrlt.w	r2, r2, #2
 8008178:	9307      	strge	r3, [sp, #28]
 800817a:	9307      	strlt	r3, [sp, #28]
 800817c:	bfb8      	it	lt
 800817e:	9204      	strlt	r2, [sp, #16]
 8008180:	7823      	ldrb	r3, [r4, #0]
 8008182:	2b2e      	cmp	r3, #46	; 0x2e
 8008184:	d10c      	bne.n	80081a0 <_svfiprintf_r+0x130>
 8008186:	7863      	ldrb	r3, [r4, #1]
 8008188:	2b2a      	cmp	r3, #42	; 0x2a
 800818a:	d135      	bne.n	80081f8 <_svfiprintf_r+0x188>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1d1a      	adds	r2, r3, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	9203      	str	r2, [sp, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfb8      	it	lt
 8008198:	f04f 33ff 	movlt.w	r3, #4294967295
 800819c:	3402      	adds	r4, #2
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800826c <_svfiprintf_r+0x1fc>
 80081a4:	7821      	ldrb	r1, [r4, #0]
 80081a6:	2203      	movs	r2, #3
 80081a8:	4650      	mov	r0, sl
 80081aa:	f7f8 f819 	bl	80001e0 <memchr>
 80081ae:	b140      	cbz	r0, 80081c2 <_svfiprintf_r+0x152>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	eba0 000a 	sub.w	r0, r0, sl
 80081b6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	4303      	orrs	r3, r0
 80081be:	3401      	adds	r4, #1
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c6:	4826      	ldr	r0, [pc, #152]	; (8008260 <_svfiprintf_r+0x1f0>)
 80081c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081cc:	2206      	movs	r2, #6
 80081ce:	f7f8 f807 	bl	80001e0 <memchr>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d038      	beq.n	8008248 <_svfiprintf_r+0x1d8>
 80081d6:	4b23      	ldr	r3, [pc, #140]	; (8008264 <_svfiprintf_r+0x1f4>)
 80081d8:	bb1b      	cbnz	r3, 8008222 <_svfiprintf_r+0x1b2>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	3307      	adds	r3, #7
 80081de:	f023 0307 	bic.w	r3, r3, #7
 80081e2:	3308      	adds	r3, #8
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	4433      	add	r3, r6
 80081ea:	9309      	str	r3, [sp, #36]	; 0x24
 80081ec:	e767      	b.n	80080be <_svfiprintf_r+0x4e>
 80081ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f2:	460c      	mov	r4, r1
 80081f4:	2001      	movs	r0, #1
 80081f6:	e7a5      	b.n	8008144 <_svfiprintf_r+0xd4>
 80081f8:	2300      	movs	r3, #0
 80081fa:	3401      	adds	r4, #1
 80081fc:	9305      	str	r3, [sp, #20]
 80081fe:	4619      	mov	r1, r3
 8008200:	f04f 0c0a 	mov.w	ip, #10
 8008204:	4620      	mov	r0, r4
 8008206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820a:	3a30      	subs	r2, #48	; 0x30
 800820c:	2a09      	cmp	r2, #9
 800820e:	d903      	bls.n	8008218 <_svfiprintf_r+0x1a8>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c5      	beq.n	80081a0 <_svfiprintf_r+0x130>
 8008214:	9105      	str	r1, [sp, #20]
 8008216:	e7c3      	b.n	80081a0 <_svfiprintf_r+0x130>
 8008218:	fb0c 2101 	mla	r1, ip, r1, r2
 800821c:	4604      	mov	r4, r0
 800821e:	2301      	movs	r3, #1
 8008220:	e7f0      	b.n	8008204 <_svfiprintf_r+0x194>
 8008222:	ab03      	add	r3, sp, #12
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	462a      	mov	r2, r5
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <_svfiprintf_r+0x1f8>)
 800822a:	a904      	add	r1, sp, #16
 800822c:	4638      	mov	r0, r7
 800822e:	f7fb fedd 	bl	8003fec <_printf_float>
 8008232:	1c42      	adds	r2, r0, #1
 8008234:	4606      	mov	r6, r0
 8008236:	d1d6      	bne.n	80081e6 <_svfiprintf_r+0x176>
 8008238:	89ab      	ldrh	r3, [r5, #12]
 800823a:	065b      	lsls	r3, r3, #25
 800823c:	f53f af2c 	bmi.w	8008098 <_svfiprintf_r+0x28>
 8008240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008242:	b01d      	add	sp, #116	; 0x74
 8008244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	462a      	mov	r2, r5
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <_svfiprintf_r+0x1f8>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	4638      	mov	r0, r7
 8008254:	f7fc f96e 	bl	8004534 <_printf_i>
 8008258:	e7eb      	b.n	8008232 <_svfiprintf_r+0x1c2>
 800825a:	bf00      	nop
 800825c:	08008dec 	.word	0x08008dec
 8008260:	08008df6 	.word	0x08008df6
 8008264:	08003fed 	.word	0x08003fed
 8008268:	08007fb9 	.word	0x08007fb9
 800826c:	08008df2 	.word	0x08008df2

08008270 <__sfputc_r>:
 8008270:	6893      	ldr	r3, [r2, #8]
 8008272:	3b01      	subs	r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	b410      	push	{r4}
 8008278:	6093      	str	r3, [r2, #8]
 800827a:	da08      	bge.n	800828e <__sfputc_r+0x1e>
 800827c:	6994      	ldr	r4, [r2, #24]
 800827e:	42a3      	cmp	r3, r4
 8008280:	db01      	blt.n	8008286 <__sfputc_r+0x16>
 8008282:	290a      	cmp	r1, #10
 8008284:	d103      	bne.n	800828e <__sfputc_r+0x1e>
 8008286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828a:	f7fd bbe9 	b.w	8005a60 <__swbuf_r>
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	1c58      	adds	r0, r3, #1
 8008292:	6010      	str	r0, [r2, #0]
 8008294:	7019      	strb	r1, [r3, #0]
 8008296:	4608      	mov	r0, r1
 8008298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800829c:	4770      	bx	lr

0800829e <__sfputs_r>:
 800829e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	4614      	mov	r4, r2
 80082a6:	18d5      	adds	r5, r2, r3
 80082a8:	42ac      	cmp	r4, r5
 80082aa:	d101      	bne.n	80082b0 <__sfputs_r+0x12>
 80082ac:	2000      	movs	r0, #0
 80082ae:	e007      	b.n	80082c0 <__sfputs_r+0x22>
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	463a      	mov	r2, r7
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ffda 	bl	8008270 <__sfputc_r>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d1f3      	bne.n	80082a8 <__sfputs_r+0xa>
 80082c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c4 <_vfiprintf_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	460d      	mov	r5, r1
 80082ca:	b09d      	sub	sp, #116	; 0x74
 80082cc:	4614      	mov	r4, r2
 80082ce:	4698      	mov	r8, r3
 80082d0:	4606      	mov	r6, r0
 80082d2:	b118      	cbz	r0, 80082dc <_vfiprintf_r+0x18>
 80082d4:	6983      	ldr	r3, [r0, #24]
 80082d6:	b90b      	cbnz	r3, 80082dc <_vfiprintf_r+0x18>
 80082d8:	f7fe fc16 	bl	8006b08 <__sinit>
 80082dc:	4b89      	ldr	r3, [pc, #548]	; (8008504 <_vfiprintf_r+0x240>)
 80082de:	429d      	cmp	r5, r3
 80082e0:	d11b      	bne.n	800831a <_vfiprintf_r+0x56>
 80082e2:	6875      	ldr	r5, [r6, #4]
 80082e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e6:	07d9      	lsls	r1, r3, #31
 80082e8:	d405      	bmi.n	80082f6 <_vfiprintf_r+0x32>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	059a      	lsls	r2, r3, #22
 80082ee:	d402      	bmi.n	80082f6 <_vfiprintf_r+0x32>
 80082f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f2:	f7ff f81a 	bl	800732a <__retarget_lock_acquire_recursive>
 80082f6:	89ab      	ldrh	r3, [r5, #12]
 80082f8:	071b      	lsls	r3, r3, #28
 80082fa:	d501      	bpl.n	8008300 <_vfiprintf_r+0x3c>
 80082fc:	692b      	ldr	r3, [r5, #16]
 80082fe:	b9eb      	cbnz	r3, 800833c <_vfiprintf_r+0x78>
 8008300:	4629      	mov	r1, r5
 8008302:	4630      	mov	r0, r6
 8008304:	f7fd fbfe 	bl	8005b04 <__swsetup_r>
 8008308:	b1c0      	cbz	r0, 800833c <_vfiprintf_r+0x78>
 800830a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800830c:	07dc      	lsls	r4, r3, #31
 800830e:	d50e      	bpl.n	800832e <_vfiprintf_r+0x6a>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b01d      	add	sp, #116	; 0x74
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	4b7b      	ldr	r3, [pc, #492]	; (8008508 <_vfiprintf_r+0x244>)
 800831c:	429d      	cmp	r5, r3
 800831e:	d101      	bne.n	8008324 <_vfiprintf_r+0x60>
 8008320:	68b5      	ldr	r5, [r6, #8]
 8008322:	e7df      	b.n	80082e4 <_vfiprintf_r+0x20>
 8008324:	4b79      	ldr	r3, [pc, #484]	; (800850c <_vfiprintf_r+0x248>)
 8008326:	429d      	cmp	r5, r3
 8008328:	bf08      	it	eq
 800832a:	68f5      	ldreq	r5, [r6, #12]
 800832c:	e7da      	b.n	80082e4 <_vfiprintf_r+0x20>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	0598      	lsls	r0, r3, #22
 8008332:	d4ed      	bmi.n	8008310 <_vfiprintf_r+0x4c>
 8008334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008336:	f7fe fff9 	bl	800732c <__retarget_lock_release_recursive>
 800833a:	e7e9      	b.n	8008310 <_vfiprintf_r+0x4c>
 800833c:	2300      	movs	r3, #0
 800833e:	9309      	str	r3, [sp, #36]	; 0x24
 8008340:	2320      	movs	r3, #32
 8008342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008346:	f8cd 800c 	str.w	r8, [sp, #12]
 800834a:	2330      	movs	r3, #48	; 0x30
 800834c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008510 <_vfiprintf_r+0x24c>
 8008350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008354:	f04f 0901 	mov.w	r9, #1
 8008358:	4623      	mov	r3, r4
 800835a:	469a      	mov	sl, r3
 800835c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008360:	b10a      	cbz	r2, 8008366 <_vfiprintf_r+0xa2>
 8008362:	2a25      	cmp	r2, #37	; 0x25
 8008364:	d1f9      	bne.n	800835a <_vfiprintf_r+0x96>
 8008366:	ebba 0b04 	subs.w	fp, sl, r4
 800836a:	d00b      	beq.n	8008384 <_vfiprintf_r+0xc0>
 800836c:	465b      	mov	r3, fp
 800836e:	4622      	mov	r2, r4
 8008370:	4629      	mov	r1, r5
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff93 	bl	800829e <__sfputs_r>
 8008378:	3001      	adds	r0, #1
 800837a:	f000 80aa 	beq.w	80084d2 <_vfiprintf_r+0x20e>
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	445a      	add	r2, fp
 8008382:	9209      	str	r2, [sp, #36]	; 0x24
 8008384:	f89a 3000 	ldrb.w	r3, [sl]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80a2 	beq.w	80084d2 <_vfiprintf_r+0x20e>
 800838e:	2300      	movs	r3, #0
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008398:	f10a 0a01 	add.w	sl, sl, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	9307      	str	r3, [sp, #28]
 80083a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a4:	931a      	str	r3, [sp, #104]	; 0x68
 80083a6:	4654      	mov	r4, sl
 80083a8:	2205      	movs	r2, #5
 80083aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ae:	4858      	ldr	r0, [pc, #352]	; (8008510 <_vfiprintf_r+0x24c>)
 80083b0:	f7f7 ff16 	bl	80001e0 <memchr>
 80083b4:	9a04      	ldr	r2, [sp, #16]
 80083b6:	b9d8      	cbnz	r0, 80083f0 <_vfiprintf_r+0x12c>
 80083b8:	06d1      	lsls	r1, r2, #27
 80083ba:	bf44      	itt	mi
 80083bc:	2320      	movmi	r3, #32
 80083be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c2:	0713      	lsls	r3, r2, #28
 80083c4:	bf44      	itt	mi
 80083c6:	232b      	movmi	r3, #43	; 0x2b
 80083c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083cc:	f89a 3000 	ldrb.w	r3, [sl]
 80083d0:	2b2a      	cmp	r3, #42	; 0x2a
 80083d2:	d015      	beq.n	8008400 <_vfiprintf_r+0x13c>
 80083d4:	9a07      	ldr	r2, [sp, #28]
 80083d6:	4654      	mov	r4, sl
 80083d8:	2000      	movs	r0, #0
 80083da:	f04f 0c0a 	mov.w	ip, #10
 80083de:	4621      	mov	r1, r4
 80083e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e4:	3b30      	subs	r3, #48	; 0x30
 80083e6:	2b09      	cmp	r3, #9
 80083e8:	d94e      	bls.n	8008488 <_vfiprintf_r+0x1c4>
 80083ea:	b1b0      	cbz	r0, 800841a <_vfiprintf_r+0x156>
 80083ec:	9207      	str	r2, [sp, #28]
 80083ee:	e014      	b.n	800841a <_vfiprintf_r+0x156>
 80083f0:	eba0 0308 	sub.w	r3, r0, r8
 80083f4:	fa09 f303 	lsl.w	r3, r9, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	46a2      	mov	sl, r4
 80083fe:	e7d2      	b.n	80083a6 <_vfiprintf_r+0xe2>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	1d19      	adds	r1, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	9103      	str	r1, [sp, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbb      	ittet	lt
 800840c:	425b      	neglt	r3, r3
 800840e:	f042 0202 	orrlt.w	r2, r2, #2
 8008412:	9307      	strge	r3, [sp, #28]
 8008414:	9307      	strlt	r3, [sp, #28]
 8008416:	bfb8      	it	lt
 8008418:	9204      	strlt	r2, [sp, #16]
 800841a:	7823      	ldrb	r3, [r4, #0]
 800841c:	2b2e      	cmp	r3, #46	; 0x2e
 800841e:	d10c      	bne.n	800843a <_vfiprintf_r+0x176>
 8008420:	7863      	ldrb	r3, [r4, #1]
 8008422:	2b2a      	cmp	r3, #42	; 0x2a
 8008424:	d135      	bne.n	8008492 <_vfiprintf_r+0x1ce>
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	1d1a      	adds	r2, r3, #4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	9203      	str	r2, [sp, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	bfb8      	it	lt
 8008432:	f04f 33ff 	movlt.w	r3, #4294967295
 8008436:	3402      	adds	r4, #2
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008520 <_vfiprintf_r+0x25c>
 800843e:	7821      	ldrb	r1, [r4, #0]
 8008440:	2203      	movs	r2, #3
 8008442:	4650      	mov	r0, sl
 8008444:	f7f7 fecc 	bl	80001e0 <memchr>
 8008448:	b140      	cbz	r0, 800845c <_vfiprintf_r+0x198>
 800844a:	2340      	movs	r3, #64	; 0x40
 800844c:	eba0 000a 	sub.w	r0, r0, sl
 8008450:	fa03 f000 	lsl.w	r0, r3, r0
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	4303      	orrs	r3, r0
 8008458:	3401      	adds	r4, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008460:	482c      	ldr	r0, [pc, #176]	; (8008514 <_vfiprintf_r+0x250>)
 8008462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008466:	2206      	movs	r2, #6
 8008468:	f7f7 feba 	bl	80001e0 <memchr>
 800846c:	2800      	cmp	r0, #0
 800846e:	d03f      	beq.n	80084f0 <_vfiprintf_r+0x22c>
 8008470:	4b29      	ldr	r3, [pc, #164]	; (8008518 <_vfiprintf_r+0x254>)
 8008472:	bb1b      	cbnz	r3, 80084bc <_vfiprintf_r+0x1f8>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	3307      	adds	r3, #7
 8008478:	f023 0307 	bic.w	r3, r3, #7
 800847c:	3308      	adds	r3, #8
 800847e:	9303      	str	r3, [sp, #12]
 8008480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008482:	443b      	add	r3, r7
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	e767      	b.n	8008358 <_vfiprintf_r+0x94>
 8008488:	fb0c 3202 	mla	r2, ip, r2, r3
 800848c:	460c      	mov	r4, r1
 800848e:	2001      	movs	r0, #1
 8008490:	e7a5      	b.n	80083de <_vfiprintf_r+0x11a>
 8008492:	2300      	movs	r3, #0
 8008494:	3401      	adds	r4, #1
 8008496:	9305      	str	r3, [sp, #20]
 8008498:	4619      	mov	r1, r3
 800849a:	f04f 0c0a 	mov.w	ip, #10
 800849e:	4620      	mov	r0, r4
 80084a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a4:	3a30      	subs	r2, #48	; 0x30
 80084a6:	2a09      	cmp	r2, #9
 80084a8:	d903      	bls.n	80084b2 <_vfiprintf_r+0x1ee>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0c5      	beq.n	800843a <_vfiprintf_r+0x176>
 80084ae:	9105      	str	r1, [sp, #20]
 80084b0:	e7c3      	b.n	800843a <_vfiprintf_r+0x176>
 80084b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b6:	4604      	mov	r4, r0
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7f0      	b.n	800849e <_vfiprintf_r+0x1da>
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4b16      	ldr	r3, [pc, #88]	; (800851c <_vfiprintf_r+0x258>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7fb fd90 	bl	8003fec <_printf_float>
 80084cc:	4607      	mov	r7, r0
 80084ce:	1c78      	adds	r0, r7, #1
 80084d0:	d1d6      	bne.n	8008480 <_vfiprintf_r+0x1bc>
 80084d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d4:	07d9      	lsls	r1, r3, #31
 80084d6:	d405      	bmi.n	80084e4 <_vfiprintf_r+0x220>
 80084d8:	89ab      	ldrh	r3, [r5, #12]
 80084da:	059a      	lsls	r2, r3, #22
 80084dc:	d402      	bmi.n	80084e4 <_vfiprintf_r+0x220>
 80084de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e0:	f7fe ff24 	bl	800732c <__retarget_lock_release_recursive>
 80084e4:	89ab      	ldrh	r3, [r5, #12]
 80084e6:	065b      	lsls	r3, r3, #25
 80084e8:	f53f af12 	bmi.w	8008310 <_vfiprintf_r+0x4c>
 80084ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ee:	e711      	b.n	8008314 <_vfiprintf_r+0x50>
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	462a      	mov	r2, r5
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <_vfiprintf_r+0x258>)
 80084f8:	a904      	add	r1, sp, #16
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7fc f81a 	bl	8004534 <_printf_i>
 8008500:	e7e4      	b.n	80084cc <_vfiprintf_r+0x208>
 8008502:	bf00      	nop
 8008504:	08008bd4 	.word	0x08008bd4
 8008508:	08008bf4 	.word	0x08008bf4
 800850c:	08008bb4 	.word	0x08008bb4
 8008510:	08008dec 	.word	0x08008dec
 8008514:	08008df6 	.word	0x08008df6
 8008518:	08003fed 	.word	0x08003fed
 800851c:	0800829f 	.word	0x0800829f
 8008520:	08008df2 	.word	0x08008df2
 8008524:	00000000 	.word	0x00000000

08008528 <nan>:
 8008528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008530 <nan+0x8>
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	00000000 	.word	0x00000000
 8008534:	7ff80000 	.word	0x7ff80000

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	; (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f9 fcc6 	bl	8001ed4 <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20001a94 	.word	0x20001a94

08008558 <__sread>:
 8008558:	b510      	push	{r4, lr}
 800855a:	460c      	mov	r4, r1
 800855c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008560:	f000 f93a 	bl	80087d8 <_read_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	bfab      	itete	ge
 8008568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800856a:	89a3      	ldrhlt	r3, [r4, #12]
 800856c:	181b      	addge	r3, r3, r0
 800856e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008572:	bfac      	ite	ge
 8008574:	6563      	strge	r3, [r4, #84]	; 0x54
 8008576:	81a3      	strhlt	r3, [r4, #12]
 8008578:	bd10      	pop	{r4, pc}

0800857a <__swrite>:
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	461f      	mov	r7, r3
 8008580:	898b      	ldrh	r3, [r1, #12]
 8008582:	05db      	lsls	r3, r3, #23
 8008584:	4605      	mov	r5, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4616      	mov	r6, r2
 800858a:	d505      	bpl.n	8008598 <__swrite+0x1e>
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	2302      	movs	r3, #2
 8008592:	2200      	movs	r2, #0
 8008594:	f000 f8b8 	bl	8008708 <_lseek_r>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800859e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	f000 b837 	b.w	8008620 <_write_r>

080085b2 <__sseek>:
 80085b2:	b510      	push	{r4, lr}
 80085b4:	460c      	mov	r4, r1
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 f8a5 	bl	8008708 <_lseek_r>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	bf15      	itete	ne
 80085c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ce:	81a3      	strheq	r3, [r4, #12]
 80085d0:	bf18      	it	ne
 80085d2:	81a3      	strhne	r3, [r4, #12]
 80085d4:	bd10      	pop	{r4, pc}

080085d6 <__sclose>:
 80085d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085da:	f000 b851 	b.w	8008680 <_close_r>

080085de <strncmp>:
 80085de:	b510      	push	{r4, lr}
 80085e0:	b17a      	cbz	r2, 8008602 <strncmp+0x24>
 80085e2:	4603      	mov	r3, r0
 80085e4:	3901      	subs	r1, #1
 80085e6:	1884      	adds	r4, r0, r2
 80085e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80085ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80085f0:	4290      	cmp	r0, r2
 80085f2:	d101      	bne.n	80085f8 <strncmp+0x1a>
 80085f4:	42a3      	cmp	r3, r4
 80085f6:	d101      	bne.n	80085fc <strncmp+0x1e>
 80085f8:	1a80      	subs	r0, r0, r2
 80085fa:	bd10      	pop	{r4, pc}
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1f3      	bne.n	80085e8 <strncmp+0xa>
 8008600:	e7fa      	b.n	80085f8 <strncmp+0x1a>
 8008602:	4610      	mov	r0, r2
 8008604:	e7f9      	b.n	80085fa <strncmp+0x1c>

08008606 <__ascii_wctomb>:
 8008606:	b149      	cbz	r1, 800861c <__ascii_wctomb+0x16>
 8008608:	2aff      	cmp	r2, #255	; 0xff
 800860a:	bf85      	ittet	hi
 800860c:	238a      	movhi	r3, #138	; 0x8a
 800860e:	6003      	strhi	r3, [r0, #0]
 8008610:	700a      	strbls	r2, [r1, #0]
 8008612:	f04f 30ff 	movhi.w	r0, #4294967295
 8008616:	bf98      	it	ls
 8008618:	2001      	movls	r0, #1
 800861a:	4770      	bx	lr
 800861c:	4608      	mov	r0, r1
 800861e:	4770      	bx	lr

08008620 <_write_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d07      	ldr	r5, [pc, #28]	; (8008640 <_write_r+0x20>)
 8008624:	4604      	mov	r4, r0
 8008626:	4608      	mov	r0, r1
 8008628:	4611      	mov	r1, r2
 800862a:	2200      	movs	r2, #0
 800862c:	602a      	str	r2, [r5, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f7f9 fbff 	bl	8001e32 <_write>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_write_r+0x1e>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_write_r+0x1e>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20001a94 	.word	0x20001a94

08008644 <__assert_func>:
 8008644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008646:	4614      	mov	r4, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <__assert_func+0x2c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4605      	mov	r5, r0
 8008650:	68d8      	ldr	r0, [r3, #12]
 8008652:	b14c      	cbz	r4, 8008668 <__assert_func+0x24>
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <__assert_func+0x30>)
 8008656:	9100      	str	r1, [sp, #0]
 8008658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <__assert_func+0x34>)
 800865e:	462b      	mov	r3, r5
 8008660:	f000 f81e 	bl	80086a0 <fiprintf>
 8008664:	f000 f8ca 	bl	80087fc <abort>
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <__assert_func+0x38>)
 800866a:	461c      	mov	r4, r3
 800866c:	e7f3      	b.n	8008656 <__assert_func+0x12>
 800866e:	bf00      	nop
 8008670:	20000014 	.word	0x20000014
 8008674:	08008dfd 	.word	0x08008dfd
 8008678:	08008e0a 	.word	0x08008e0a
 800867c:	08008e38 	.word	0x08008e38

08008680 <_close_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	; (800869c <_close_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f9 fbed 	bl	8001e6a <_close>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_close_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_close_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20001a94 	.word	0x20001a94

080086a0 <fiprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	b503      	push	{r0, r1, lr}
 80086a4:	4601      	mov	r1, r0
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <fiprintf+0x20>)
 80086aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f7ff fe07 	bl	80082c4 <_vfiprintf_r>
 80086b6:	b002      	add	sp, #8
 80086b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086bc:	b003      	add	sp, #12
 80086be:	4770      	bx	lr
 80086c0:	20000014 	.word	0x20000014

080086c4 <_fstat_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	; (80086e4 <_fstat_r+0x20>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	602b      	str	r3, [r5, #0]
 80086d2:	f7f9 fbd6 	bl	8001e82 <_fstat>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d102      	bne.n	80086e0 <_fstat_r+0x1c>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	b103      	cbz	r3, 80086e0 <_fstat_r+0x1c>
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	20001a94 	.word	0x20001a94

080086e8 <_isatty_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	; (8008704 <_isatty_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7f9 fbd5 	bl	8001ea2 <_isatty>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_isatty_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_isatty_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	20001a94 	.word	0x20001a94

08008708 <_lseek_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d07      	ldr	r5, [pc, #28]	; (8008728 <_lseek_r+0x20>)
 800870c:	4604      	mov	r4, r0
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	2200      	movs	r2, #0
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f7f9 fbce 	bl	8001eb8 <_lseek>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_lseek_r+0x1e>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_lseek_r+0x1e>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20001a94 	.word	0x20001a94

0800872c <memmove>:
 800872c:	4288      	cmp	r0, r1
 800872e:	b510      	push	{r4, lr}
 8008730:	eb01 0402 	add.w	r4, r1, r2
 8008734:	d902      	bls.n	800873c <memmove+0x10>
 8008736:	4284      	cmp	r4, r0
 8008738:	4623      	mov	r3, r4
 800873a:	d807      	bhi.n	800874c <memmove+0x20>
 800873c:	1e43      	subs	r3, r0, #1
 800873e:	42a1      	cmp	r1, r4
 8008740:	d008      	beq.n	8008754 <memmove+0x28>
 8008742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874a:	e7f8      	b.n	800873e <memmove+0x12>
 800874c:	4402      	add	r2, r0
 800874e:	4601      	mov	r1, r0
 8008750:	428a      	cmp	r2, r1
 8008752:	d100      	bne.n	8008756 <memmove+0x2a>
 8008754:	bd10      	pop	{r4, pc}
 8008756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800875e:	e7f7      	b.n	8008750 <memmove+0x24>

08008760 <__malloc_lock>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__malloc_lock+0x8>)
 8008762:	f7fe bde2 	b.w	800732a <__retarget_lock_acquire_recursive>
 8008766:	bf00      	nop
 8008768:	20001a88 	.word	0x20001a88

0800876c <__malloc_unlock>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__malloc_unlock+0x8>)
 800876e:	f7fe bddd 	b.w	800732c <__retarget_lock_release_recursive>
 8008772:	bf00      	nop
 8008774:	20001a88 	.word	0x20001a88

08008778 <_realloc_r>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	4680      	mov	r8, r0
 800877e:	4614      	mov	r4, r2
 8008780:	460e      	mov	r6, r1
 8008782:	b921      	cbnz	r1, 800878e <_realloc_r+0x16>
 8008784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008788:	4611      	mov	r1, r2
 800878a:	f7ff bba1 	b.w	8007ed0 <_malloc_r>
 800878e:	b92a      	cbnz	r2, 800879c <_realloc_r+0x24>
 8008790:	f7ff fb32 	bl	8007df8 <_free_r>
 8008794:	4625      	mov	r5, r4
 8008796:	4628      	mov	r0, r5
 8008798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800879c:	f000 f835 	bl	800880a <_malloc_usable_size_r>
 80087a0:	4284      	cmp	r4, r0
 80087a2:	4607      	mov	r7, r0
 80087a4:	d802      	bhi.n	80087ac <_realloc_r+0x34>
 80087a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087aa:	d812      	bhi.n	80087d2 <_realloc_r+0x5a>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7ff fb8e 	bl	8007ed0 <_malloc_r>
 80087b4:	4605      	mov	r5, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d0ed      	beq.n	8008796 <_realloc_r+0x1e>
 80087ba:	42bc      	cmp	r4, r7
 80087bc:	4622      	mov	r2, r4
 80087be:	4631      	mov	r1, r6
 80087c0:	bf28      	it	cs
 80087c2:	463a      	movcs	r2, r7
 80087c4:	f7fe fe32 	bl	800742c <memcpy>
 80087c8:	4631      	mov	r1, r6
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7ff fb14 	bl	8007df8 <_free_r>
 80087d0:	e7e1      	b.n	8008796 <_realloc_r+0x1e>
 80087d2:	4635      	mov	r5, r6
 80087d4:	e7df      	b.n	8008796 <_realloc_r+0x1e>
	...

080087d8 <_read_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	; (80087f8 <_read_r+0x20>)
 80087dc:	4604      	mov	r4, r0
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7f9 fb06 	bl	8001df8 <_read>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_read_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_read_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20001a94 	.word	0x20001a94

080087fc <abort>:
 80087fc:	b508      	push	{r3, lr}
 80087fe:	2006      	movs	r0, #6
 8008800:	f000 f834 	bl	800886c <raise>
 8008804:	2001      	movs	r0, #1
 8008806:	f7f9 faed 	bl	8001de4 <_exit>

0800880a <_malloc_usable_size_r>:
 800880a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880e:	1f18      	subs	r0, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfbc      	itt	lt
 8008814:	580b      	ldrlt	r3, [r1, r0]
 8008816:	18c0      	addlt	r0, r0, r3
 8008818:	4770      	bx	lr

0800881a <_raise_r>:
 800881a:	291f      	cmp	r1, #31
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	d904      	bls.n	800882e <_raise_r+0x14>
 8008824:	2316      	movs	r3, #22
 8008826:	6003      	str	r3, [r0, #0]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	bd38      	pop	{r3, r4, r5, pc}
 800882e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008830:	b112      	cbz	r2, 8008838 <_raise_r+0x1e>
 8008832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008836:	b94b      	cbnz	r3, 800884c <_raise_r+0x32>
 8008838:	4620      	mov	r0, r4
 800883a:	f000 f831 	bl	80088a0 <_getpid_r>
 800883e:	462a      	mov	r2, r5
 8008840:	4601      	mov	r1, r0
 8008842:	4620      	mov	r0, r4
 8008844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008848:	f000 b818 	b.w	800887c <_kill_r>
 800884c:	2b01      	cmp	r3, #1
 800884e:	d00a      	beq.n	8008866 <_raise_r+0x4c>
 8008850:	1c59      	adds	r1, r3, #1
 8008852:	d103      	bne.n	800885c <_raise_r+0x42>
 8008854:	2316      	movs	r3, #22
 8008856:	6003      	str	r3, [r0, #0]
 8008858:	2001      	movs	r0, #1
 800885a:	e7e7      	b.n	800882c <_raise_r+0x12>
 800885c:	2400      	movs	r4, #0
 800885e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008862:	4628      	mov	r0, r5
 8008864:	4798      	blx	r3
 8008866:	2000      	movs	r0, #0
 8008868:	e7e0      	b.n	800882c <_raise_r+0x12>
	...

0800886c <raise>:
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <raise+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f7ff bfd2 	b.w	800881a <_raise_r>
 8008876:	bf00      	nop
 8008878:	20000014 	.word	0x20000014

0800887c <_kill_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d07      	ldr	r5, [pc, #28]	; (800889c <_kill_r+0x20>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	f7f9 fa9b 	bl	8001dc4 <_kill>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d102      	bne.n	8008898 <_kill_r+0x1c>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	b103      	cbz	r3, 8008898 <_kill_r+0x1c>
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	bd38      	pop	{r3, r4, r5, pc}
 800889a:	bf00      	nop
 800889c:	20001a94 	.word	0x20001a94

080088a0 <_getpid_r>:
 80088a0:	f7f9 ba88 	b.w	8001db4 <_getpid>

080088a4 <_init>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	bf00      	nop
 80088a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088aa:	bc08      	pop	{r3}
 80088ac:	469e      	mov	lr, r3
 80088ae:	4770      	bx	lr

080088b0 <_fini>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr
