
UART_No6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004138  08004138  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000854  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fe3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edd  00000000  00000000  00028083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  00029f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000790  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a08  00000000  00000000  0002af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3cd  00000000  00000000  0002e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9e3  00000000  00000000  00039d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106750  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028cc  00000000  00000000  001067a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004040 	.word	0x08004040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004040 	.word	0x08004040

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <LL_DMA_EnableStream+0x3c>)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <LL_DMA_EnableStream+0x3c>)
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	440a      	add	r2, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	4611      	mov	r1, r2
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	440a      	add	r2, r1
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	08004068 	.word	0x08004068

080005b4 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <LL_DMA_DisableStream+0x3c>)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <LL_DMA_DisableStream+0x3c>)
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	440a      	add	r2, r1
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	440a      	add	r2, r1
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	08004068 	.word	0x08004068

080005f4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LL_DMA_SetDataLength+0x44>)
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	4908      	ldr	r1, [pc, #32]	; (8000638 <LL_DMA_SetDataLength+0x44>)
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	440a      	add	r2, r1
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	4611      	mov	r1, r2
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	440a      	add	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	08004068 	.word	0x08004068

0800063c <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <LL_DMA_GetDataLength+0x28>)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	b29b      	uxth	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	08004068 	.word	0x08004068

08000668 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <LL_DMA_SetMemoryAddress+0x2c>)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60d3      	str	r3, [r2, #12]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	08004068 	.word	0x08004068

08000698 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <LL_DMA_SetPeriphAddress+0x2c>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6093      	str	r3, [r2, #8]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	08004068 	.word	0x08004068

080006c8 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d6:	609a      	str	r2, [r3, #8]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	2b10      	cmp	r3, #16
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	2b40      	cmp	r3, #64	; 0x40
 800071c:	bf0c      	ite	eq
 800071e:	2301      	moveq	r3, #1
 8000720:	2300      	movne	r3, #0
 8000722:	b2db      	uxtb	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800073e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	330c      	adds	r3, #12
 800077c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	e853 3f00 	ldrex	r3, [r3]
 8000784:	60bb      	str	r3, [r7, #8]
   return(result);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	330c      	adds	r3, #12
 8000792:	69fa      	ldr	r2, [r7, #28]
 8000794:	61ba      	str	r2, [r7, #24]
 8000796:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000798:	6979      	ldr	r1, [r7, #20]
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	e841 2300 	strex	r3, r2, [r1]
 80007a0:	613b      	str	r3, [r7, #16]
   return(result);
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e7      	bne.n	8000778 <LL_USART_EnableIT_IDLE+0x8>
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b089      	sub	sp, #36	; 0x24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3314      	adds	r3, #20
 80007c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	e853 3f00 	ldrex	r3, [r3]
 80007ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3314      	adds	r3, #20
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	61ba      	str	r2, [r7, #24]
 80007dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007de:	6979      	ldr	r1, [r7, #20]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	e841 2300 	strex	r3, r2, [r1]
 80007e6:	613b      	str	r3, [r7, #16]
   return(result);
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1e7      	bne.n	80007be <LL_USART_EnableDMAReq_RX+0x8>
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3724      	adds	r7, #36	; 0x24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	605a      	str	r2, [r3, #4]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	LL_USART_TransmitData8(USART3,(uint8_t)ch);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <__io_putchar+0x2c>)
 800082c:	f7ff ffe6 	bl	80007fc <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TC(USART3) == RESET);
 8000830:	bf00      	nop
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <__io_putchar+0x2c>)
 8000834:	f7ff ff69 	bl	800070a <LL_USART_IsActiveFlag_TC>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f9      	beq.n	8000832 <__io_putchar+0x16>

	return ch;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004800 	.word	0x40004800

0800084c <__irq_lock>:


uart_t debug;

static void __irq_lock(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
	__disable_irq();
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <__irq_unlock>:

static void __irq_unlock(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000862:	b662      	cpsie	i
}
 8000864:	bf00      	nop
	__enable_irq();
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <bsp_uart_init>:


void bsp_uart_init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	/*Initialize DMA-UART*/
	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)debug.rx_buff);
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <bsp_uart_init+0x4c>)
 8000876:	461a      	mov	r2, r3
 8000878:	2101      	movs	r1, #1
 800087a:	4811      	ldr	r0, [pc, #68]	; (80008c0 <bsp_uart_init+0x50>)
 800087c:	f7ff fef4 	bl	8000668 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)(&USART3->DR));
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <bsp_uart_init+0x54>)
 8000882:	2101      	movs	r1, #1
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <bsp_uart_init+0x50>)
 8000886:	f7ff ff07 	bl	8000698 <LL_DMA_SetPeriphAddress>
	 LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_LEN);
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	2101      	movs	r1, #1
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <bsp_uart_init+0x50>)
 8000892:	f7ff feaf 	bl	80005f4 <LL_DMA_SetDataLength>
	 LL_USART_EnableDMAReq_RX(USART3); 				 //dma uart rx
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <bsp_uart_init+0x58>)
 8000898:	f7ff ff8d 	bl	80007b6 <LL_USART_EnableDMAReq_RX>
	 LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);	//enable dma
 800089c:	2101      	movs	r1, #1
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <bsp_uart_init+0x50>)
 80008a0:	f7ff fe68 	bl	8000574 <LL_DMA_EnableStream>

	/*Initialize hardware */
	//Go to main.c ---> MX_USART3_UART_Init()

	/*Enable IT RXNE and IDLE*/
	LL_USART_EnableIT_IDLE(USART3);
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <bsp_uart_init+0x58>)
 80008a6:	f7ff ff63 	bl	8000770 <LL_USART_EnableIT_IDLE>

	/*Clear receive buffer*/
	bsp_uart_rx_clear(&debug);
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <bsp_uart_init+0x5c>)
 80008ac:	f000 f810 	bl	80008d0 <bsp_uart_rx_clear>

	/*Clear Flag_TC*/
	LL_USART_ClearFlag_TC(USART3);
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <bsp_uart_init+0x58>)
 80008b2:	f7ff ff4f 	bl	8000754 <LL_USART_ClearFlag_TC>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000090 	.word	0x20000090
 80008c0:	40026000 	.word	0x40026000
 80008c4:	40004804 	.word	0x40004804
 80008c8:	40004800 	.word	0x40004800
 80008cc:	2000008c 	.word	0x2000008c

080008d0 <bsp_uart_rx_clear>:

void bsp_uart_rx_clear(uart_t *uart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	__irq_lock();
 80008d8:	f7ff ffb8 	bl	800084c <__irq_lock>
	memset(uart->rx_buff, 0x00, RX_LEN);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3304      	adds	r3, #4
 80008e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fb9e 	bl	8003028 <memset>
	uart->rx_finish = false;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	uart->rx_count = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	805a      	strh	r2, [r3, #2]
	__irq_unlock();
 80008f8:	f7ff ffb1 	bl	800085e <__irq_unlock>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <USER_UART3_IRQHandler>:



#if 1
void USER_UART3_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	if(RESET != LL_USART_IsActiveFlag_IDLE(USART3))	//receive 1 packet
 8000908:	480f      	ldr	r0, [pc, #60]	; (8000948 <USER_UART3_IRQHandler+0x44>)
 800090a:	f7ff feeb 	bl	80006e4 <LL_USART_IsActiveFlag_IDLE>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d017      	beq.n	8000944 <USER_UART3_IRQHandler+0x40>
	{
		LL_USART_ClearFlag_IDLE(USART3);		//Clears the UART IDLE pending flag.
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <USER_UART3_IRQHandler+0x44>)
 8000916:	f7ff ff0b 	bl	8000730 <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);	//STOP DMA
 800091a:	2101      	movs	r1, #1
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <USER_UART3_IRQHandler+0x48>)
 800091e:	f7ff fe49 	bl	80005b4 <LL_DMA_DisableStream>
		LL_DMA_ClearFlag_TC1(DMA1);				//Clear Stream 1 transfer complete flag.
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <USER_UART3_IRQHandler+0x48>)
 8000924:	f7ff fed0 	bl	80006c8 <LL_DMA_ClearFlag_TC1>
		debug.rx_count = RX_LEN - LL_DMA_GetDataLength(DMA1, LL_DMA_STREAM_1);	//receive how many count
 8000928:	2101      	movs	r1, #1
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <USER_UART3_IRQHandler+0x48>)
 800092c:	f7ff fe86 	bl	800063c <LL_DMA_GetDataLength>
 8000930:	4603      	mov	r3, r0
 8000932:	b29b      	uxth	r3, r3
 8000934:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <USER_UART3_IRQHandler+0x4c>)
 800093c:	805a      	strh	r2, [r3, #2]
		debug.rx_finish = true;
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <USER_UART3_IRQHandler+0x4c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	}
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004800 	.word	0x40004800
 800094c:	40026000 	.word	0x40026000
 8000950:	2000008c 	.word	0x2000008c

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4907      	ldr	r1, [pc, #28]	; (80009a8 <__NVIC_EnableIRQ+0x38>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4013      	ands	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000a9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000aa0:	f7ff ffe2 	bl	8000a68 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000aa4:	f7ff ff56 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffa6 	bl	8000a00 <NVIC_EncodePriority>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f7ff ff77 	bl	80009ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000abe:	200c      	movs	r0, #12
 8000ac0:	f7ff ff56 	bl	8000970 <__NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	481f      	ldr	r0, [pc, #124]	; (8000c08 <MX_GPIO_Init+0x140>)
 8000b8c:	f001 f80c 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x144>)
 8000b98:	f001 f806 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power5V_GPIO_Port, Power5V_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <MX_GPIO_Init+0x148>)
 8000ba2:	f001 f801 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_EN_Pin;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_EN_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_GPIO_Init+0x140>)
 8000bbe:	f000 fe57 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Beep_Pin;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_GPIO_Init+0x144>)
 8000bdc:	f000 fe48 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power5V_Pin;
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power5V_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x148>)
 8000bf8:	f000 fe3a 	bl	8001870 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40021400 	.word	0x40021400
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40020c00 	.word	0x40020c00

08000c14 <LL_DMA_EnableStream>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <LL_DMA_EnableStream+0x3c>)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <LL_DMA_EnableStream+0x3c>)
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	440a      	add	r2, r1
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	440a      	add	r2, r1
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	08004070 	.word	0x08004070

08000c54 <LL_DMA_SetDataLength>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <LL_DMA_SetDataLength+0x44>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0c1b      	lsrs	r3, r3, #16
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	4908      	ldr	r1, [pc, #32]	; (8000c98 <LL_DMA_SetDataLength+0x44>)
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	440a      	add	r2, r1
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	440a      	add	r2, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	604b      	str	r3, [r1, #4]
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	08004070 	.word	0x08004070

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 fc8e 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f82c 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f7ff ff0e 	bl	8000ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cac:	f7ff fef4 	bl	8000a98 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cb0:	f000 fbca 	bl	8001448 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  bsp_uart_init();
 8000cb4:	f7ff fddc 	bl	8000870 <bsp_uart_init>

  printf("LL UART OK\r\n");
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <main+0x50>)
 8000cba:	f002 fa43 	bl	8003144 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(debug.rx_finish ==  true)
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <main+0x54>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fb      	beq.n	8000cbe <main+0x22>
	  {
		  printf("%s",debug.rx_buff);
 8000cc6:	490b      	ldr	r1, [pc, #44]	; (8000cf4 <main+0x58>)
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <main+0x5c>)
 8000cca:	f002 f9b5 	bl	8003038 <iprintf>

		  bsp_uart_rx_clear(&debug);
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <main+0x54>)
 8000cd0:	f7ff fdfe 	bl	80008d0 <bsp_uart_rx_clear>
		  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_LEN);	// start receive next
 8000cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <main+0x60>)
 8000cdc:	f7ff ffba 	bl	8000c54 <LL_DMA_SetDataLength>
		  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <main+0x60>)
 8000ce4:	f7ff ff96 	bl	8000c14 <LL_DMA_EnableStream>
	  if(debug.rx_finish ==  true)
 8000ce8:	e7e9      	b.n	8000cbe <main+0x22>
 8000cea:	bf00      	nop
 8000cec:	08004058 	.word	0x08004058
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	08004064 	.word	0x08004064
 8000cfc:	40026000 	.word	0x40026000

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f98a 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d74:	23a8      	movs	r3, #168	; 0xa8
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 ff29 	bl	8001bdc <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f820 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2105      	movs	r1, #5
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f98a 	bl	80020cc <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dbe:	f000 f809 	bl	8000dd4 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3750      	adds	r7, #80	; 0x50
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 fbf2 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

	USER_UART3_IRQHandler();
 8000e96:	f7ff fd35 	bl	8000904 <USER_UART3_IRQHandler>

  /* USER CODE END USART3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e00a      	b.n	8000ec6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb0:	f3af 8000 	nop.w
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	60ba      	str	r2, [r7, #8]
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf0      	blt.n	8000eb0 <_read+0x12>
  }

  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e009      	b.n	8000efe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc92 	bl	800081c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf1      	blt.n	8000eea <_write+0x12>
  }
  return len;
 8000f06:	687b      	ldr	r3, [r7, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_close>:

int _close(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f38:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_isatty>:

int _isatty(int file)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f002 f814 	bl	8002fd4 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20020000 	.word	0x20020000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	200008ac 	.word	0x200008ac
 8000fe0:	200008c8 	.word	0x200008c8

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <LL_DMA_SetDataTransferDirection>:
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LL_DMA_SetDataTransferDirection+0x44>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <LL_DMA_SetDataTransferDirection+0x44>)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	440b      	add	r3, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	4619      	mov	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	08004090 	.word	0x08004090

08001164 <LL_DMA_SetMode>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LL_DMA_SetMode+0x44>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001184:	4908      	ldr	r1, [pc, #32]	; (80011a8 <LL_DMA_SetMode+0x44>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	440b      	add	r3, r1
 8001192:	4619      	mov	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	08004090 	.word	0x08004090

080011ac <LL_DMA_SetPeriphIncMode>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LL_DMA_SetPeriphIncMode+0x44>)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011cc:	4908      	ldr	r1, [pc, #32]	; (80011f0 <LL_DMA_SetPeriphIncMode+0x44>)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	440b      	add	r3, r1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	440b      	add	r3, r1
 80011da:	4619      	mov	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	08004090 	.word	0x08004090

080011f4 <LL_DMA_SetMemoryIncMode>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LL_DMA_SetMemoryIncMode+0x44>)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001214:	4908      	ldr	r1, [pc, #32]	; (8001238 <LL_DMA_SetMemoryIncMode+0x44>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	440b      	add	r3, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	440b      	add	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	08004090 	.word	0x08004090

0800123c <LL_DMA_SetPeriphSize>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LL_DMA_SetPeriphSize+0x44>)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800125c:	4908      	ldr	r1, [pc, #32]	; (8001280 <LL_DMA_SetPeriphSize+0x44>)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	440b      	add	r3, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	440b      	add	r3, r1
 800126a:	4619      	mov	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	08004090 	.word	0x08004090

08001284 <LL_DMA_SetMemorySize>:
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LL_DMA_SetMemorySize+0x44>)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80012a4:	4908      	ldr	r1, [pc, #32]	; (80012c8 <LL_DMA_SetMemorySize+0x44>)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	440b      	add	r3, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	440b      	add	r3, r1
 80012b2:	4619      	mov	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	08004090 	.word	0x08004090

080012cc <LL_DMA_SetStreamPriorityLevel>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012ec:	4908      	ldr	r1, [pc, #32]	; (8001310 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	440b      	add	r3, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	440b      	add	r3, r1
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	08004090 	.word	0x08004090

08001314 <LL_DMA_SetChannelSelection>:
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LL_DMA_SetChannelSelection+0x44>)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001334:	4908      	ldr	r1, [pc, #32]	; (8001358 <LL_DMA_SetChannelSelection+0x44>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	440b      	add	r3, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	440b      	add	r3, r1
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	08004090 	.word	0x08004090

0800135c <LL_DMA_DisableFifoMode>:
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <LL_DMA_DisableFifoMode+0x3c>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <LL_DMA_DisableFifoMode+0x3c>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	440a      	add	r2, r1
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	4611      	mov	r1, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	440a      	add	r2, r1
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6153      	str	r3, [r2, #20]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	08004090 	.word	0x08004090

0800139c <LL_USART_Enable>:
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_USART_ConfigAsyncMode>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	615a      	str	r2, [r3, #20]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_AHB1_GRP1_EnableClock>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40023800 	.word	0x40023800

08001418 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <LL_APB1_GRP1_EnableClock+0x2c>)
 800142e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40023800 	.word	0x40023800

08001448 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001472:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001476:	f7ff ffcf 	bl	8001418 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800147a:	2008      	movs	r0, #8
 800147c:	f7ff ffb4 	bl	80013e8 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001486:	2302      	movs	r3, #2
 8001488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001496:	2307      	movs	r3, #7
 8001498:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4830      	ldr	r0, [pc, #192]	; (8001560 <MX_USART3_UART_Init+0x118>)
 80014a0:	f001 f905 	bl	80026ae <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 80014a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a8:	2101      	movs	r1, #1
 80014aa:	482e      	ldr	r0, [pc, #184]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014ac:	f7ff ff32 	bl	8001314 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2101      	movs	r1, #1
 80014b4:	482b      	ldr	r0, [pc, #172]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014b6:	f7ff fe31 	bl	800111c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_HIGH);
 80014ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014be:	2101      	movs	r1, #1
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014c2:	f7ff ff03 	bl	80012cc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014cc:	f7ff fe4a 	bl	8001164 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014d6:	f7ff fe69 	bl	80011ac <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80014da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014de:	2101      	movs	r1, #1
 80014e0:	4820      	ldr	r0, [pc, #128]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014e2:	f7ff fe87 	bl	80011f4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2101      	movs	r1, #1
 80014ea:	481e      	ldr	r0, [pc, #120]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014ec:	f7ff fea6 	bl	800123c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	481b      	ldr	r0, [pc, #108]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014f6:	f7ff fec5 	bl	8001284 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80014fa:	2101      	movs	r1, #1
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <MX_USART3_UART_Init+0x11c>)
 80014fe:	f7ff ff2d 	bl	800135c <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001502:	f7ff fd81 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001506:	4603      	mov	r3, r0
 8001508:	2200      	movs	r2, #0
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fdd1 	bl	80010b4 <NVIC_EncodePriority>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	2027      	movs	r0, #39	; 0x27
 8001518:	f7ff fda2 	bl	8001060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800151c:	2027      	movs	r0, #39	; 0x27
 800151e:	f7ff fd81 	bl	8001024 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001522:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001526:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001534:	230c      	movs	r3, #12
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x120>)
 8001548:	f001 fcc4 	bl	8002ed4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_USART3_UART_Init+0x120>)
 800154e:	f7ff ff35 	bl	80013bc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART3_UART_Init+0x120>)
 8001554:	f7ff ff22 	bl	800139c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40026000 	.word	0x40026000
 8001568:	40004800 	.word	0x40004800

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001572:	490e      	ldr	r1, [pc, #56]	; (80015ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001588:	4c0b      	ldr	r4, [pc, #44]	; (80015b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001596:	f7ff fd25 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f001 fd21 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff fb7d 	bl	8000c9c <main>
  bx  lr    
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015b0:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 80015b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015b8:	200008c4 	.word	0x200008c4

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_Init+0x40>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_Init+0x40>)
 80015d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x40>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f90d 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fbf4 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f917 	bl	8001856 <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f8ed 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	200008b0 	.word	0x200008b0

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200008b0 	.word	0x200008b0

080016a4 <__NVIC_SetPriorityGrouping>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_SetPriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff47 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5c 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e16b      	b.n	8001b64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 815a 	bne.w	8001b5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80b4 	beq.w	8001b5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x314>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x318>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x31c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x320>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x216>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x212>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_GPIO_Init+0x32c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x20a>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00e      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a32      	ldr	r2, [pc, #200]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f ae90 	bls.w	800188c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e267      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b85      	ldr	r3, [pc, #532]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b7e      	ldr	r3, [pc, #504]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e242      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x74>
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6f      	ldr	r2, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6c      	ldr	r2, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c74:	4b69      	ldr	r3, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a68      	ldr	r2, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a65      	ldr	r2, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fcfa 	bl	800168c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fcf6 	bl	800168c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e207      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fce6 	bl	800168c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fce2 	bl	800168c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1f3      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0a:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1c7      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4937      	ldr	r1, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x244>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fc9b 	bl	800168c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fc97 	bl	800168c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1a8      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4925      	ldr	r1, [pc, #148]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x244>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc7a 	bl	800168c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc76 	bl	800168c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e187      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d036      	beq.n	8001e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x248>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fc5a 	bl	800168c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc56 	bl	800168c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e167      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x200>
 8001dfa:	e01b      	b.n	8001e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_OscConfig+0x248>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fc43 	bl	800168c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e00e      	b.n	8001e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fc3f 	bl	800168c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d907      	bls.n	8001e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e150      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	42470000 	.word	0x42470000
 8001e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ea      	bne.n	8001e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8097 	beq.w	8001f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b77      	ldr	r3, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a73      	ldr	r2, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fbff 	bl	800168c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fbfb 	bl	800168c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e10c      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2ea>
 8001eb8:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x324>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x30c>
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a5b      	ldr	r2, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0x324>
 8001ee8:	4b58      	ldr	r3, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fbc0 	bl	800168c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff fbbc 	bl	800168c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0cb      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ee      	beq.n	8001f10 <HAL_RCC_OscConfig+0x334>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fbaa 	bl	800168c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fba6 	bl	800168c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0b5      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ee      	bne.n	8001f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a1 	beq.w	80020bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d05c      	beq.n	8002040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d141      	bne.n	8002012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb7a 	bl	800168c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fb76 	bl	800168c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e087      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	491b      	ldr	r1, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb4f 	bl	800168c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff fb4b 	bl	800168c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e05c      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x416>
 8002010:	e054      	b.n	80020bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fb38 	bl	800168c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff fb34 	bl	800168c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e045      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x444>
 800203e:	e03d      	b.n	80020bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e038      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000
 8002054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4ec>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d028      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d121      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d11a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800208e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0cc      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d90c      	bls.n	8002108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800212a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d044      	beq.n	80021ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d119      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002186:	2b03      	cmp	r3, #3
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e067      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4934      	ldr	r1, [pc, #208]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7ff fa66 	bl	800168c <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7ff fa62 	bl	800168c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e04f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d20c      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f9c6 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00
 8002288:	40023800 	.word	0x40023800
 800228c:	08004078 	.word	0x08004078
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b094      	sub	sp, #80	; 0x50
 800229e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
 80022a4:	2300      	movs	r3, #0
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a8:	2300      	movs	r3, #0
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b0:	4b79      	ldr	r3, [pc, #484]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d00d      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x40>
 80022bc:	2b08      	cmp	r3, #8
 80022be:	f200 80e1 	bhi.w	8002484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ca:	e0db      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_GetSysClockFreq+0x204>)
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022d0:	e0db      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80022d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022d6:	e0d8      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	2200      	movs	r2, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800230a:	4622      	mov	r2, r4
 800230c:	462b      	mov	r3, r5
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	0159      	lsls	r1, r3, #5
 8002318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231c:	0150      	lsls	r0, r2, #5
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4621      	mov	r1, r4
 8002324:	1a51      	subs	r1, r2, r1
 8002326:	6139      	str	r1, [r7, #16]
 8002328:	4629      	mov	r1, r5
 800232a:	eb63 0301 	sbc.w	r3, r3, r1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800233c:	4659      	mov	r1, fp
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	4651      	mov	r1, sl
 8002342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002346:	4651      	mov	r1, sl
 8002348:	018a      	lsls	r2, r1, #6
 800234a:	4651      	mov	r1, sl
 800234c:	ebb2 0801 	subs.w	r8, r2, r1
 8002350:	4659      	mov	r1, fp
 8002352:	eb63 0901 	sbc.w	r9, r3, r1
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236a:	4690      	mov	r8, r2
 800236c:	4699      	mov	r9, r3
 800236e:	4623      	mov	r3, r4
 8002370:	eb18 0303 	adds.w	r3, r8, r3
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	462b      	mov	r3, r5
 8002378:	eb49 0303 	adc.w	r3, r9, r3
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800238a:	4629      	mov	r1, r5
 800238c:	024b      	lsls	r3, r1, #9
 800238e:	4621      	mov	r1, r4
 8002390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002394:	4621      	mov	r1, r4
 8002396:	024a      	lsls	r2, r1, #9
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	2200      	movs	r2, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a8:	f7fd ff62 	bl	8000270 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b4:	e058      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	2200      	movs	r2, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	4611      	mov	r1, r2
 80023c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	f04f 0000 	mov.w	r0, #0
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	0159      	lsls	r1, r3, #5
 80023de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e2:	0150      	lsls	r0, r2, #5
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4641      	mov	r1, r8
 80023ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ee:	4649      	mov	r1, r9
 80023f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002408:	ebb2 040a 	subs.w	r4, r2, sl
 800240c:	eb63 050b 	sbc.w	r5, r3, fp
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	00eb      	lsls	r3, r5, #3
 800241a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800241e:	00e2      	lsls	r2, r4, #3
 8002420:	4614      	mov	r4, r2
 8002422:	461d      	mov	r5, r3
 8002424:	4643      	mov	r3, r8
 8002426:	18e3      	adds	r3, r4, r3
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	464b      	mov	r3, r9
 800242c:	eb45 0303 	adc.w	r3, r5, r3
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800243e:	4629      	mov	r1, r5
 8002440:	028b      	lsls	r3, r1, #10
 8002442:	4621      	mov	r1, r4
 8002444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002448:	4621      	mov	r1, r4
 800244a:	028a      	lsls	r2, r1, #10
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	2200      	movs	r2, #0
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	61fa      	str	r2, [r7, #28]
 8002458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245c:	f7fd ff08 	bl	8000270 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4613      	mov	r3, r2
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetSysClockFreq+0x204>)
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800248c:	4618      	mov	r0, r3
 800248e:	3750      	adds	r7, #80	; 0x50
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	613b      	str	r3, [r7, #16]
  return result;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2103      	movs	r1, #3
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	61bb      	str	r3, [r7, #24]
  return result;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	601a      	str	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002532:	b480      	push	{r7}
 8002534:	b089      	sub	sp, #36	; 0x24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	613b      	str	r3, [r7, #16]
  return result;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2103      	movs	r1, #3
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	401a      	ands	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	61bb      	str	r3, [r7, #24]
  return result;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	431a      	orrs	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002584:	bf00      	nop
 8002586:	3724      	adds	r7, #36	; 0x24
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	613b      	str	r3, [r7, #16]
  return result;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2103      	movs	r1, #3
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	61bb      	str	r3, [r7, #24]
  return result;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	60da      	str	r2, [r3, #12]
}
 80025e2:	bf00      	nop
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b089      	sub	sp, #36	; 0x24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	613b      	str	r3, [r7, #16]
  return result;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	210f      	movs	r1, #15
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	61bb      	str	r3, [r7, #24]
  return result;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002640:	bf00      	nop
 8002642:	3724      	adds	r7, #36	; 0x24
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	613b      	str	r3, [r7, #16]
  return result;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	210f      	movs	r1, #15
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	401a      	ands	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61bb      	str	r3, [r7, #24]
  return result;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	613b      	str	r3, [r7, #16]
  return result;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026d8:	e050      	b.n	800277c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d042      	beq.n	8002776 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d003      	beq.n	8002700 <LL_GPIO_Init+0x52>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d10d      	bne.n	800271c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	461a      	mov	r2, r3
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff12 	bl	8002532 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	461a      	mov	r2, r3
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fef3 	bl	8002502 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	461a      	mov	r2, r3
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff33 	bl	8002590 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d11a      	bne.n	8002768 <LL_GPIO_Init+0xba>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	60bb      	str	r3, [r7, #8]
  return result;
 800273e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b07      	cmp	r3, #7
 8002748:	d807      	bhi.n	800275a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	461a      	mov	r2, r3
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff4b 	bl	80025ee <LL_GPIO_SetAFPin_0_7>
 8002758:	e006      	b.n	8002768 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	461a      	mov	r2, r3
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff72 	bl	800264c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	461a      	mov	r2, r3
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fe97 	bl	80024a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1a7      	bne.n	80026da <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <LL_RCC_GetSysClkSource+0x18>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <LL_RCC_GetAHBPrescaler+0x18>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800

080027cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <LL_RCC_GetAPB2Prescaler+0x18>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800

08002804 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <LL_RCC_PLL_GetMainSource+0x18>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <LL_RCC_PLL_GetN+0x18>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40023800 	.word	0x40023800

0800283c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <LL_RCC_PLL_GetP+0x18>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <LL_RCC_PLL_GetDivider+0x18>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800287c:	f000 f820 	bl	80028c0 <RCC_GetSystemClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f840 	bl	8002910 <RCC_GetHCLKClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f84e 	bl	800293c <RCC_GetPCLK1ClockFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f85a 	bl	8002964 <RCC_GetPCLK2ClockFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028ca:	f7ff ff63 	bl	8002794 <LL_RCC_GetSysClkSource>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00c      	beq.n	80028ee <RCC_GetSystemClockFreq+0x2e>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d80f      	bhi.n	80028f8 <RCC_GetSystemClockFreq+0x38>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <RCC_GetSystemClockFreq+0x22>
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d003      	beq.n	80028e8 <RCC_GetSystemClockFreq+0x28>
 80028e0:	e00a      	b.n	80028f8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <RCC_GetSystemClockFreq+0x48>)
 80028e4:	607b      	str	r3, [r7, #4]
      break;
 80028e6:	e00a      	b.n	80028fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <RCC_GetSystemClockFreq+0x4c>)
 80028ea:	607b      	str	r3, [r7, #4]
      break;
 80028ec:	e007      	b.n	80028fe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80028ee:	2008      	movs	r0, #8
 80028f0:	f000 f84c 	bl	800298c <RCC_PLL_GetFreqDomain_SYS>
 80028f4:	6078      	str	r0, [r7, #4]
      break;
 80028f6:	e002      	b.n	80028fe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <RCC_GetSystemClockFreq+0x48>)
 80028fa:	607b      	str	r3, [r7, #4]
      break;
 80028fc:	bf00      	nop
  }

  return frequency;
 80028fe:	687b      	ldr	r3, [r7, #4]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002918:	f7ff ff4a 	bl	80027b0 <LL_RCC_GetAHBPrescaler>
 800291c:	4603      	mov	r3, r0
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <RCC_GetHCLKClockFreq+0x28>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	40d3      	lsrs	r3, r2
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	08004078 	.word	0x08004078

0800293c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002944:	f7ff ff42 	bl	80027cc <LL_RCC_GetAPB1Prescaler>
 8002948:	4603      	mov	r3, r0
 800294a:	0a9b      	lsrs	r3, r3, #10
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <RCC_GetPCLK1ClockFreq+0x24>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	40d3      	lsrs	r3, r2
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	08004088 	.word	0x08004088

08002964 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800296c:	f7ff ff3c 	bl	80027e8 <LL_RCC_GetAPB2Prescaler>
 8002970:	4603      	mov	r3, r0
 8002972:	0b5b      	lsrs	r3, r3, #13
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <RCC_GetPCLK2ClockFreq+0x24>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	40d3      	lsrs	r3, r2
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08004088 	.word	0x08004088

0800298c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029a0:	f7ff ff30 	bl	8002804 <LL_RCC_PLL_GetMainSource>
 80029a4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b2:	d003      	beq.n	80029bc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80029b4:	e005      	b.n	80029c2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80029b8:	617b      	str	r3, [r7, #20]
      break;
 80029ba:	e005      	b.n	80029c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80029be:	617b      	str	r3, [r7, #20]
      break;
 80029c0:	e002      	b.n	80029c8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80029c4:	617b      	str	r3, [r7, #20]
      break;
 80029c6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d113      	bne.n	80029f6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029ce:	f7ff ff43 	bl	8002858 <LL_RCC_PLL_GetDivider>
 80029d2:	4602      	mov	r2, r0
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fbb3 f4f2 	udiv	r4, r3, r2
 80029da:	f7ff ff21 	bl	8002820 <LL_RCC_PLL_GetN>
 80029de:	4603      	mov	r3, r0
 80029e0:	fb03 f404 	mul.w	r4, r3, r4
 80029e4:	f7ff ff2a 	bl	800283c <LL_RCC_PLL_GetP>
 80029e8:	4603      	mov	r3, r0
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	3301      	adds	r3, #1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80029f4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80029f6:	693b      	ldr	r3, [r7, #16]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	007a1200 	.word	0x007a1200

08002a08 <LL_USART_IsEnabled>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_USART_SetStopBitsLength>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_USART_SetHWFlowCtrl>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	615a      	str	r2, [r3, #20]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_USART_SetBaudRate>:
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0c0      	sub	sp, #256	; 0x100
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a88:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002a8c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	f040 810c 	bne.w	8002cb8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002aa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	1891      	adds	r1, r2, r2
 8002ab8:	6639      	str	r1, [r7, #96]	; 0x60
 8002aba:	415b      	adcs	r3, r3
 8002abc:	667b      	str	r3, [r7, #100]	; 0x64
 8002abe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	eb12 0801 	adds.w	r8, r2, r1
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb43 0901 	adc.w	r9, r3, r1
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	eb18 0303 	adds.w	r3, r8, r3
 8002aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002af0:	462b      	mov	r3, r5
 8002af2:	eb49 0303 	adc.w	r3, r9, r3
 8002af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002afa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002afe:	2200      	movs	r2, #0
 8002b00:	469a      	mov	sl, r3
 8002b02:	4693      	mov	fp, r2
 8002b04:	eb1a 030a 	adds.w	r3, sl, sl
 8002b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b0a:	eb4b 030b 	adc.w	r3, fp, fp
 8002b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b18:	f7fd fbaa 	bl	8000270 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <LL_USART_SetBaudRate+0x238>)
 8002b22:	fba3 2302 	umull	r2, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	b29c      	uxth	r4, r3
 8002b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b38:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b3c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	6539      	str	r1, [r7, #80]	; 0x50
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b84:	464b      	mov	r3, r9
 8002b86:	460a      	mov	r2, r1
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b9a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002b9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bb4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002bb8:	f7fd fb5a 	bl	8000270 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <LL_USART_SetBaudRate+0x238>)
 8002bc4:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2264      	movs	r2, #100	; 0x64
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	1acb      	subs	r3, r1, r3
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <LL_USART_SetBaudRate+0x238>)
 8002bda:	fba3 2302 	umull	r2, r3, r3, r2
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4423      	add	r3, r4
 8002bee:	b29c      	uxth	r4, r3
 8002bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bfa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bfe:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002c02:	4642      	mov	r2, r8
 8002c04:	464b      	mov	r3, r9
 8002c06:	1891      	adds	r1, r2, r2
 8002c08:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c0a:	415b      	adcs	r3, r3
 8002c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c12:	4641      	mov	r1, r8
 8002c14:	1851      	adds	r1, r2, r1
 8002c16:	6339      	str	r1, [r7, #48]	; 0x30
 8002c18:	4649      	mov	r1, r9
 8002c1a:	414b      	adcs	r3, r1
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	00cb      	lsls	r3, r1, #3
 8002c2e:	4651      	mov	r1, sl
 8002c30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c34:	4651      	mov	r1, sl
 8002c36:	00ca      	lsls	r2, r1, #3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4642      	mov	r2, r8
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c46:	464b      	mov	r3, r9
 8002c48:	460a      	mov	r2, r1
 8002c4a:	eb42 0303 	adc.w	r3, r2, r3
 8002c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c5c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002c60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c64:	460b      	mov	r3, r1
 8002c66:	18db      	adds	r3, r3, r3
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	eb42 0303 	adc.w	r3, r2, r3
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c76:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002c7a:	f7fd faf9 	bl	8000270 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <LL_USART_SetBaudRate+0x238>)
 8002c84:	fba3 1302 	umull	r1, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2164      	movs	r1, #100	; 0x64
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <LL_USART_SetBaudRate+0x238>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4423      	add	r3, r4
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb0:	609a      	str	r2, [r3, #8]
}
 8002cb2:	e107      	b.n	8002ec4 <LL_USART_SetBaudRate+0x448>
 8002cb4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cc2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cc6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002cca:	4642      	mov	r2, r8
 8002ccc:	464b      	mov	r3, r9
 8002cce:	1891      	adds	r1, r2, r2
 8002cd0:	6239      	str	r1, [r7, #32]
 8002cd2:	415b      	adcs	r3, r3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cda:	4641      	mov	r1, r8
 8002cdc:	1854      	adds	r4, r2, r1
 8002cde:	4649      	mov	r1, r9
 8002ce0:	eb43 0501 	adc.w	r5, r3, r1
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	00eb      	lsls	r3, r5, #3
 8002cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf2:	00e2      	lsls	r2, r4, #3
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	461d      	mov	r5, r3
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	18e3      	adds	r3, r4, r3
 8002cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d00:	464b      	mov	r3, r9
 8002d02:	eb45 0303 	adc.w	r3, r5, r3
 8002d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002d24:	4629      	mov	r1, r5
 8002d26:	008b      	lsls	r3, r1, #2
 8002d28:	4621      	mov	r1, r4
 8002d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d2e:	4621      	mov	r1, r4
 8002d30:	008a      	lsls	r2, r1, #2
 8002d32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002d36:	f7fd fa9b 	bl	8000270 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <LL_USART_SetBaudRate+0x454>)
 8002d40:	fba3 2302 	umull	r2, r3, r3, r2
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	b29c      	uxth	r4, r3
 8002d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d5a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	61b9      	str	r1, [r7, #24]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1851      	adds	r1, r2, r1
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	4649      	mov	r1, r9
 8002d76:	414b      	adcs	r3, r1
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d86:	4659      	mov	r1, fp
 8002d88:	00cb      	lsls	r3, r1, #3
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d90:	4651      	mov	r1, sl
 8002d92:	00ca      	lsls	r2, r1, #3
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da2:	464b      	mov	r3, r9
 8002da4:	460a      	mov	r2, r1
 8002da6:	eb42 0303 	adc.w	r3, r2, r3
 8002daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002db8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002dc8:	4649      	mov	r1, r9
 8002dca:	008b      	lsls	r3, r1, #2
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	008a      	lsls	r2, r1, #2
 8002dd6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002dda:	f7fd fa49 	bl	8000270 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <LL_USART_SetBaudRate+0x454>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <LL_USART_SetBaudRate+0x454>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4423      	add	r3, r4
 8002e08:	b29c      	uxth	r4, r3
 8002e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e0e:	2200      	movs	r2, #0
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e18:	4642      	mov	r2, r8
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	1891      	adds	r1, r2, r2
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	415b      	adcs	r3, r3
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e28:	4641      	mov	r1, r8
 8002e2a:	1851      	adds	r1, r2, r1
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	4649      	mov	r1, r9
 8002e30:	414b      	adcs	r3, r1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e40:	4659      	mov	r1, fp
 8002e42:	00cb      	lsls	r3, r1, #3
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	00ca      	lsls	r2, r1, #3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	4642      	mov	r2, r8
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	673b      	str	r3, [r7, #112]	; 0x70
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	eb42 0303 	adc.w	r3, r2, r3
 8002e62:	677b      	str	r3, [r7, #116]	; 0x74
 8002e64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e68:	2200      	movs	r2, #0
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	4641      	mov	r1, r8
 8002e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e84:	4641      	mov	r1, r8
 8002e86:	008a      	lsls	r2, r1, #2
 8002e88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002e8c:	f7fd f9f0 	bl	8000270 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <LL_USART_SetBaudRate+0x454>)
 8002e96:	fba3 1302 	umull	r1, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2164      	movs	r1, #100	; 0x64
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	3332      	adds	r3, #50	; 0x32
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <LL_USART_SetBaudRate+0x454>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4423      	add	r3, r4
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed0:	51eb851f 	.word	0x51eb851f

08002ed4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fd8e 	bl	8002a08 <LL_USART_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d15e      	bne.n	8002fb0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002efa:	f023 030c 	bic.w	r3, r3, #12
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	6851      	ldr	r1, [r2, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6912      	ldr	r2, [r2, #16]
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	6992      	ldr	r2, [r2, #24]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fd85 	bl	8002a30 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fd92 	bl	8002a56 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fc9c 	bl	8002874 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <LL_USART_Init+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e021      	b.n	8002f8e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <LL_USART_Init+0xec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d102      	bne.n	8002f58 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	e01a      	b.n	8002f8e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <LL_USART_Init+0xf0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d102      	bne.n	8002f66 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e013      	b.n	8002f8e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <LL_USART_Init+0xf4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d102      	bne.n	8002f74 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e00c      	b.n	8002f8e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <LL_USART_Init+0xf8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e005      	b.n	8002f8e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <LL_USART_Init+0xfc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fd66 	bl	8002a7c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40011400 	.word	0x40011400
 8002fcc:	40004c00 	.word	0x40004c00
 8002fd0:	40005000 	.word	0x40005000

08002fd4 <__errno>:
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <__errno+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4d0d      	ldr	r5, [pc, #52]	; (8003018 <__libc_init_array+0x38>)
 8002fe4:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe6:	1b64      	subs	r4, r4, r5
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	2600      	movs	r6, #0
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	4d0b      	ldr	r5, [pc, #44]	; (8003020 <__libc_init_array+0x40>)
 8002ff2:	4c0c      	ldr	r4, [pc, #48]	; (8003024 <__libc_init_array+0x44>)
 8002ff4:	f001 f824 	bl	8004040 <_init>
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	f855 3b04 	ldr.w	r3, [r5], #4
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	08004138 	.word	0x08004138
 800301c:	08004138 	.word	0x08004138
 8003020:	08004138 	.word	0x08004138
 8003024:	0800413c 	.word	0x0800413c

08003028 <memset>:
 8003028:	4402      	add	r2, r0
 800302a:	4603      	mov	r3, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <iprintf>:
 8003038:	b40f      	push	{r0, r1, r2, r3}
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <iprintf+0x2c>)
 800303c:	b513      	push	{r0, r1, r4, lr}
 800303e:	681c      	ldr	r4, [r3, #0]
 8003040:	b124      	cbz	r4, 800304c <iprintf+0x14>
 8003042:	69a3      	ldr	r3, [r4, #24]
 8003044:	b913      	cbnz	r3, 800304c <iprintf+0x14>
 8003046:	4620      	mov	r0, r4
 8003048:	f000 fa5e 	bl	8003508 <__sinit>
 800304c:	ab05      	add	r3, sp, #20
 800304e:	9a04      	ldr	r2, [sp, #16]
 8003050:	68a1      	ldr	r1, [r4, #8]
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	4620      	mov	r0, r4
 8003056:	f000 fc67 	bl	8003928 <_vfiprintf_r>
 800305a:	b002      	add	sp, #8
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003060:	b004      	add	sp, #16
 8003062:	4770      	bx	lr
 8003064:	2000000c 	.word	0x2000000c

08003068 <_puts_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	4605      	mov	r5, r0
 800306e:	b118      	cbz	r0, 8003078 <_puts_r+0x10>
 8003070:	6983      	ldr	r3, [r0, #24]
 8003072:	b90b      	cbnz	r3, 8003078 <_puts_r+0x10>
 8003074:	f000 fa48 	bl	8003508 <__sinit>
 8003078:	69ab      	ldr	r3, [r5, #24]
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	b913      	cbnz	r3, 8003084 <_puts_r+0x1c>
 800307e:	4628      	mov	r0, r5
 8003080:	f000 fa42 	bl	8003508 <__sinit>
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <_puts_r+0xd0>)
 8003086:	429c      	cmp	r4, r3
 8003088:	d120      	bne.n	80030cc <_puts_r+0x64>
 800308a:	686c      	ldr	r4, [r5, #4]
 800308c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800308e:	07db      	lsls	r3, r3, #31
 8003090:	d405      	bmi.n	800309e <_puts_r+0x36>
 8003092:	89a3      	ldrh	r3, [r4, #12]
 8003094:	0598      	lsls	r0, r3, #22
 8003096:	d402      	bmi.n	800309e <_puts_r+0x36>
 8003098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800309a:	f000 fad3 	bl	8003644 <__retarget_lock_acquire_recursive>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	0719      	lsls	r1, r3, #28
 80030a2:	d51d      	bpl.n	80030e0 <_puts_r+0x78>
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	b1db      	cbz	r3, 80030e0 <_puts_r+0x78>
 80030a8:	3e01      	subs	r6, #1
 80030aa:	68a3      	ldr	r3, [r4, #8]
 80030ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60a3      	str	r3, [r4, #8]
 80030b4:	bb39      	cbnz	r1, 8003106 <_puts_r+0x9e>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da38      	bge.n	800312c <_puts_r+0xc4>
 80030ba:	4622      	mov	r2, r4
 80030bc:	210a      	movs	r1, #10
 80030be:	4628      	mov	r0, r5
 80030c0:	f000 f848 	bl	8003154 <__swbuf_r>
 80030c4:	3001      	adds	r0, #1
 80030c6:	d011      	beq.n	80030ec <_puts_r+0x84>
 80030c8:	250a      	movs	r5, #10
 80030ca:	e011      	b.n	80030f0 <_puts_r+0x88>
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <_puts_r+0xd4>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d101      	bne.n	80030d6 <_puts_r+0x6e>
 80030d2:	68ac      	ldr	r4, [r5, #8]
 80030d4:	e7da      	b.n	800308c <_puts_r+0x24>
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <_puts_r+0xd8>)
 80030d8:	429c      	cmp	r4, r3
 80030da:	bf08      	it	eq
 80030dc:	68ec      	ldreq	r4, [r5, #12]
 80030de:	e7d5      	b.n	800308c <_puts_r+0x24>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 f888 	bl	80031f8 <__swsetup_r>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d0dd      	beq.n	80030a8 <_puts_r+0x40>
 80030ec:	f04f 35ff 	mov.w	r5, #4294967295
 80030f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f2:	07da      	lsls	r2, r3, #31
 80030f4:	d405      	bmi.n	8003102 <_puts_r+0x9a>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	059b      	lsls	r3, r3, #22
 80030fa:	d402      	bmi.n	8003102 <_puts_r+0x9a>
 80030fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030fe:	f000 faa2 	bl	8003646 <__retarget_lock_release_recursive>
 8003102:	4628      	mov	r0, r5
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	2b00      	cmp	r3, #0
 8003108:	da04      	bge.n	8003114 <_puts_r+0xac>
 800310a:	69a2      	ldr	r2, [r4, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	dc06      	bgt.n	800311e <_puts_r+0xb6>
 8003110:	290a      	cmp	r1, #10
 8003112:	d004      	beq.n	800311e <_puts_r+0xb6>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	6022      	str	r2, [r4, #0]
 800311a:	7019      	strb	r1, [r3, #0]
 800311c:	e7c5      	b.n	80030aa <_puts_r+0x42>
 800311e:	4622      	mov	r2, r4
 8003120:	4628      	mov	r0, r5
 8003122:	f000 f817 	bl	8003154 <__swbuf_r>
 8003126:	3001      	adds	r0, #1
 8003128:	d1bf      	bne.n	80030aa <_puts_r+0x42>
 800312a:	e7df      	b.n	80030ec <_puts_r+0x84>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	250a      	movs	r5, #10
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	6022      	str	r2, [r4, #0]
 8003134:	701d      	strb	r5, [r3, #0]
 8003136:	e7db      	b.n	80030f0 <_puts_r+0x88>
 8003138:	080040bc 	.word	0x080040bc
 800313c:	080040dc 	.word	0x080040dc
 8003140:	0800409c 	.word	0x0800409c

08003144 <puts>:
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <puts+0xc>)
 8003146:	4601      	mov	r1, r0
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7ff bf8d 	b.w	8003068 <_puts_r>
 800314e:	bf00      	nop
 8003150:	2000000c 	.word	0x2000000c

08003154 <__swbuf_r>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	460e      	mov	r6, r1
 8003158:	4614      	mov	r4, r2
 800315a:	4605      	mov	r5, r0
 800315c:	b118      	cbz	r0, 8003166 <__swbuf_r+0x12>
 800315e:	6983      	ldr	r3, [r0, #24]
 8003160:	b90b      	cbnz	r3, 8003166 <__swbuf_r+0x12>
 8003162:	f000 f9d1 	bl	8003508 <__sinit>
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <__swbuf_r+0x98>)
 8003168:	429c      	cmp	r4, r3
 800316a:	d12b      	bne.n	80031c4 <__swbuf_r+0x70>
 800316c:	686c      	ldr	r4, [r5, #4]
 800316e:	69a3      	ldr	r3, [r4, #24]
 8003170:	60a3      	str	r3, [r4, #8]
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	071a      	lsls	r2, r3, #28
 8003176:	d52f      	bpl.n	80031d8 <__swbuf_r+0x84>
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	b36b      	cbz	r3, 80031d8 <__swbuf_r+0x84>
 800317c:	6923      	ldr	r3, [r4, #16]
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	1ac0      	subs	r0, r0, r3
 8003182:	6963      	ldr	r3, [r4, #20]
 8003184:	b2f6      	uxtb	r6, r6
 8003186:	4283      	cmp	r3, r0
 8003188:	4637      	mov	r7, r6
 800318a:	dc04      	bgt.n	8003196 <__swbuf_r+0x42>
 800318c:	4621      	mov	r1, r4
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f926 	bl	80033e0 <_fflush_r>
 8003194:	bb30      	cbnz	r0, 80031e4 <__swbuf_r+0x90>
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	60a3      	str	r3, [r4, #8]
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	6022      	str	r2, [r4, #0]
 80031a2:	701e      	strb	r6, [r3, #0]
 80031a4:	6963      	ldr	r3, [r4, #20]
 80031a6:	3001      	adds	r0, #1
 80031a8:	4283      	cmp	r3, r0
 80031aa:	d004      	beq.n	80031b6 <__swbuf_r+0x62>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	07db      	lsls	r3, r3, #31
 80031b0:	d506      	bpl.n	80031c0 <__swbuf_r+0x6c>
 80031b2:	2e0a      	cmp	r6, #10
 80031b4:	d104      	bne.n	80031c0 <__swbuf_r+0x6c>
 80031b6:	4621      	mov	r1, r4
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f911 	bl	80033e0 <_fflush_r>
 80031be:	b988      	cbnz	r0, 80031e4 <__swbuf_r+0x90>
 80031c0:	4638      	mov	r0, r7
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <__swbuf_r+0x9c>)
 80031c6:	429c      	cmp	r4, r3
 80031c8:	d101      	bne.n	80031ce <__swbuf_r+0x7a>
 80031ca:	68ac      	ldr	r4, [r5, #8]
 80031cc:	e7cf      	b.n	800316e <__swbuf_r+0x1a>
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <__swbuf_r+0xa0>)
 80031d0:	429c      	cmp	r4, r3
 80031d2:	bf08      	it	eq
 80031d4:	68ec      	ldreq	r4, [r5, #12]
 80031d6:	e7ca      	b.n	800316e <__swbuf_r+0x1a>
 80031d8:	4621      	mov	r1, r4
 80031da:	4628      	mov	r0, r5
 80031dc:	f000 f80c 	bl	80031f8 <__swsetup_r>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d0cb      	beq.n	800317c <__swbuf_r+0x28>
 80031e4:	f04f 37ff 	mov.w	r7, #4294967295
 80031e8:	e7ea      	b.n	80031c0 <__swbuf_r+0x6c>
 80031ea:	bf00      	nop
 80031ec:	080040bc 	.word	0x080040bc
 80031f0:	080040dc 	.word	0x080040dc
 80031f4:	0800409c 	.word	0x0800409c

080031f8 <__swsetup_r>:
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <__swsetup_r+0xcc>)
 80031fa:	b570      	push	{r4, r5, r6, lr}
 80031fc:	681d      	ldr	r5, [r3, #0]
 80031fe:	4606      	mov	r6, r0
 8003200:	460c      	mov	r4, r1
 8003202:	b125      	cbz	r5, 800320e <__swsetup_r+0x16>
 8003204:	69ab      	ldr	r3, [r5, #24]
 8003206:	b913      	cbnz	r3, 800320e <__swsetup_r+0x16>
 8003208:	4628      	mov	r0, r5
 800320a:	f000 f97d 	bl	8003508 <__sinit>
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <__swsetup_r+0xd0>)
 8003210:	429c      	cmp	r4, r3
 8003212:	d10f      	bne.n	8003234 <__swsetup_r+0x3c>
 8003214:	686c      	ldr	r4, [r5, #4]
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800321c:	0719      	lsls	r1, r3, #28
 800321e:	d42c      	bmi.n	800327a <__swsetup_r+0x82>
 8003220:	06dd      	lsls	r5, r3, #27
 8003222:	d411      	bmi.n	8003248 <__swsetup_r+0x50>
 8003224:	2309      	movs	r3, #9
 8003226:	6033      	str	r3, [r6, #0]
 8003228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	e03e      	b.n	80032b2 <__swsetup_r+0xba>
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <__swsetup_r+0xd4>)
 8003236:	429c      	cmp	r4, r3
 8003238:	d101      	bne.n	800323e <__swsetup_r+0x46>
 800323a:	68ac      	ldr	r4, [r5, #8]
 800323c:	e7eb      	b.n	8003216 <__swsetup_r+0x1e>
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <__swsetup_r+0xd8>)
 8003240:	429c      	cmp	r4, r3
 8003242:	bf08      	it	eq
 8003244:	68ec      	ldreq	r4, [r5, #12]
 8003246:	e7e6      	b.n	8003216 <__swsetup_r+0x1e>
 8003248:	0758      	lsls	r0, r3, #29
 800324a:	d512      	bpl.n	8003272 <__swsetup_r+0x7a>
 800324c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800324e:	b141      	cbz	r1, 8003262 <__swsetup_r+0x6a>
 8003250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003254:	4299      	cmp	r1, r3
 8003256:	d002      	beq.n	800325e <__swsetup_r+0x66>
 8003258:	4630      	mov	r0, r6
 800325a:	f000 fa5b 	bl	8003714 <_free_r>
 800325e:	2300      	movs	r3, #0
 8003260:	6363      	str	r3, [r4, #52]	; 0x34
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	2300      	movs	r3, #0
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	6923      	ldr	r3, [r4, #16]
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	b94b      	cbnz	r3, 8003292 <__swsetup_r+0x9a>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d003      	beq.n	8003292 <__swsetup_r+0x9a>
 800328a:	4621      	mov	r1, r4
 800328c:	4630      	mov	r0, r6
 800328e:	f000 fa01 	bl	8003694 <__smakebuf_r>
 8003292:	89a0      	ldrh	r0, [r4, #12]
 8003294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003298:	f010 0301 	ands.w	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <__swsetup_r+0xbc>
 800329e:	2300      	movs	r3, #0
 80032a0:	60a3      	str	r3, [r4, #8]
 80032a2:	6963      	ldr	r3, [r4, #20]
 80032a4:	425b      	negs	r3, r3
 80032a6:	61a3      	str	r3, [r4, #24]
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	b943      	cbnz	r3, 80032be <__swsetup_r+0xc6>
 80032ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032b0:	d1ba      	bne.n	8003228 <__swsetup_r+0x30>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	0781      	lsls	r1, r0, #30
 80032b6:	bf58      	it	pl
 80032b8:	6963      	ldrpl	r3, [r4, #20]
 80032ba:	60a3      	str	r3, [r4, #8]
 80032bc:	e7f4      	b.n	80032a8 <__swsetup_r+0xb0>
 80032be:	2000      	movs	r0, #0
 80032c0:	e7f7      	b.n	80032b2 <__swsetup_r+0xba>
 80032c2:	bf00      	nop
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	080040bc 	.word	0x080040bc
 80032cc:	080040dc 	.word	0x080040dc
 80032d0:	0800409c 	.word	0x0800409c

080032d4 <__sflush_r>:
 80032d4:	898a      	ldrh	r2, [r1, #12]
 80032d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	0710      	lsls	r0, r2, #28
 80032de:	460c      	mov	r4, r1
 80032e0:	d458      	bmi.n	8003394 <__sflush_r+0xc0>
 80032e2:	684b      	ldr	r3, [r1, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	dc05      	bgt.n	80032f4 <__sflush_r+0x20>
 80032e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dc02      	bgt.n	80032f4 <__sflush_r+0x20>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d0f9      	beq.n	80032ee <__sflush_r+0x1a>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003300:	682f      	ldr	r7, [r5, #0]
 8003302:	602b      	str	r3, [r5, #0]
 8003304:	d032      	beq.n	800336c <__sflush_r+0x98>
 8003306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	075a      	lsls	r2, r3, #29
 800330c:	d505      	bpl.n	800331a <__sflush_r+0x46>
 800330e:	6863      	ldr	r3, [r4, #4]
 8003310:	1ac0      	subs	r0, r0, r3
 8003312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003314:	b10b      	cbz	r3, 800331a <__sflush_r+0x46>
 8003316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003318:	1ac0      	subs	r0, r0, r3
 800331a:	2300      	movs	r3, #0
 800331c:	4602      	mov	r2, r0
 800331e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003320:	6a21      	ldr	r1, [r4, #32]
 8003322:	4628      	mov	r0, r5
 8003324:	47b0      	blx	r6
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	d106      	bne.n	800333a <__sflush_r+0x66>
 800332c:	6829      	ldr	r1, [r5, #0]
 800332e:	291d      	cmp	r1, #29
 8003330:	d82c      	bhi.n	800338c <__sflush_r+0xb8>
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <__sflush_r+0x108>)
 8003334:	40ca      	lsrs	r2, r1
 8003336:	07d6      	lsls	r6, r2, #31
 8003338:	d528      	bpl.n	800338c <__sflush_r+0xb8>
 800333a:	2200      	movs	r2, #0
 800333c:	6062      	str	r2, [r4, #4]
 800333e:	04d9      	lsls	r1, r3, #19
 8003340:	6922      	ldr	r2, [r4, #16]
 8003342:	6022      	str	r2, [r4, #0]
 8003344:	d504      	bpl.n	8003350 <__sflush_r+0x7c>
 8003346:	1c42      	adds	r2, r0, #1
 8003348:	d101      	bne.n	800334e <__sflush_r+0x7a>
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	b903      	cbnz	r3, 8003350 <__sflush_r+0x7c>
 800334e:	6560      	str	r0, [r4, #84]	; 0x54
 8003350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003352:	602f      	str	r7, [r5, #0]
 8003354:	2900      	cmp	r1, #0
 8003356:	d0ca      	beq.n	80032ee <__sflush_r+0x1a>
 8003358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800335c:	4299      	cmp	r1, r3
 800335e:	d002      	beq.n	8003366 <__sflush_r+0x92>
 8003360:	4628      	mov	r0, r5
 8003362:	f000 f9d7 	bl	8003714 <_free_r>
 8003366:	2000      	movs	r0, #0
 8003368:	6360      	str	r0, [r4, #52]	; 0x34
 800336a:	e7c1      	b.n	80032f0 <__sflush_r+0x1c>
 800336c:	6a21      	ldr	r1, [r4, #32]
 800336e:	2301      	movs	r3, #1
 8003370:	4628      	mov	r0, r5
 8003372:	47b0      	blx	r6
 8003374:	1c41      	adds	r1, r0, #1
 8003376:	d1c7      	bne.n	8003308 <__sflush_r+0x34>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0c4      	beq.n	8003308 <__sflush_r+0x34>
 800337e:	2b1d      	cmp	r3, #29
 8003380:	d001      	beq.n	8003386 <__sflush_r+0xb2>
 8003382:	2b16      	cmp	r3, #22
 8003384:	d101      	bne.n	800338a <__sflush_r+0xb6>
 8003386:	602f      	str	r7, [r5, #0]
 8003388:	e7b1      	b.n	80032ee <__sflush_r+0x1a>
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	e7ad      	b.n	80032f0 <__sflush_r+0x1c>
 8003394:	690f      	ldr	r7, [r1, #16]
 8003396:	2f00      	cmp	r7, #0
 8003398:	d0a9      	beq.n	80032ee <__sflush_r+0x1a>
 800339a:	0793      	lsls	r3, r2, #30
 800339c:	680e      	ldr	r6, [r1, #0]
 800339e:	bf08      	it	eq
 80033a0:	694b      	ldreq	r3, [r1, #20]
 80033a2:	600f      	str	r7, [r1, #0]
 80033a4:	bf18      	it	ne
 80033a6:	2300      	movne	r3, #0
 80033a8:	eba6 0807 	sub.w	r8, r6, r7
 80033ac:	608b      	str	r3, [r1, #8]
 80033ae:	f1b8 0f00 	cmp.w	r8, #0
 80033b2:	dd9c      	ble.n	80032ee <__sflush_r+0x1a>
 80033b4:	6a21      	ldr	r1, [r4, #32]
 80033b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033b8:	4643      	mov	r3, r8
 80033ba:	463a      	mov	r2, r7
 80033bc:	4628      	mov	r0, r5
 80033be:	47b0      	blx	r6
 80033c0:	2800      	cmp	r0, #0
 80033c2:	dc06      	bgt.n	80033d2 <__sflush_r+0xfe>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	e78e      	b.n	80032f0 <__sflush_r+0x1c>
 80033d2:	4407      	add	r7, r0
 80033d4:	eba8 0800 	sub.w	r8, r8, r0
 80033d8:	e7e9      	b.n	80033ae <__sflush_r+0xda>
 80033da:	bf00      	nop
 80033dc:	20400001 	.word	0x20400001

080033e0 <_fflush_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	690b      	ldr	r3, [r1, #16]
 80033e4:	4605      	mov	r5, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	b913      	cbnz	r3, 80033f0 <_fflush_r+0x10>
 80033ea:	2500      	movs	r5, #0
 80033ec:	4628      	mov	r0, r5
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	b118      	cbz	r0, 80033fa <_fflush_r+0x1a>
 80033f2:	6983      	ldr	r3, [r0, #24]
 80033f4:	b90b      	cbnz	r3, 80033fa <_fflush_r+0x1a>
 80033f6:	f000 f887 	bl	8003508 <__sinit>
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <_fflush_r+0x6c>)
 80033fc:	429c      	cmp	r4, r3
 80033fe:	d11b      	bne.n	8003438 <_fflush_r+0x58>
 8003400:	686c      	ldr	r4, [r5, #4]
 8003402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ef      	beq.n	80033ea <_fflush_r+0xa>
 800340a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800340c:	07d0      	lsls	r0, r2, #31
 800340e:	d404      	bmi.n	800341a <_fflush_r+0x3a>
 8003410:	0599      	lsls	r1, r3, #22
 8003412:	d402      	bmi.n	800341a <_fflush_r+0x3a>
 8003414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003416:	f000 f915 	bl	8003644 <__retarget_lock_acquire_recursive>
 800341a:	4628      	mov	r0, r5
 800341c:	4621      	mov	r1, r4
 800341e:	f7ff ff59 	bl	80032d4 <__sflush_r>
 8003422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003424:	07da      	lsls	r2, r3, #31
 8003426:	4605      	mov	r5, r0
 8003428:	d4e0      	bmi.n	80033ec <_fflush_r+0xc>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	059b      	lsls	r3, r3, #22
 800342e:	d4dd      	bmi.n	80033ec <_fflush_r+0xc>
 8003430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003432:	f000 f908 	bl	8003646 <__retarget_lock_release_recursive>
 8003436:	e7d9      	b.n	80033ec <_fflush_r+0xc>
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <_fflush_r+0x70>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d101      	bne.n	8003442 <_fflush_r+0x62>
 800343e:	68ac      	ldr	r4, [r5, #8]
 8003440:	e7df      	b.n	8003402 <_fflush_r+0x22>
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <_fflush_r+0x74>)
 8003444:	429c      	cmp	r4, r3
 8003446:	bf08      	it	eq
 8003448:	68ec      	ldreq	r4, [r5, #12]
 800344a:	e7da      	b.n	8003402 <_fflush_r+0x22>
 800344c:	080040bc 	.word	0x080040bc
 8003450:	080040dc 	.word	0x080040dc
 8003454:	0800409c 	.word	0x0800409c

08003458 <std>:
 8003458:	2300      	movs	r3, #0
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	e9c0 3300 	strd	r3, r3, [r0]
 8003462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003466:	6083      	str	r3, [r0, #8]
 8003468:	8181      	strh	r1, [r0, #12]
 800346a:	6643      	str	r3, [r0, #100]	; 0x64
 800346c:	81c2      	strh	r2, [r0, #14]
 800346e:	6183      	str	r3, [r0, #24]
 8003470:	4619      	mov	r1, r3
 8003472:	2208      	movs	r2, #8
 8003474:	305c      	adds	r0, #92	; 0x5c
 8003476:	f7ff fdd7 	bl	8003028 <memset>
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <std+0x38>)
 800347c:	6263      	str	r3, [r4, #36]	; 0x24
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <std+0x3c>)
 8003480:	62a3      	str	r3, [r4, #40]	; 0x28
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <std+0x40>)
 8003484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <std+0x44>)
 8003488:	6224      	str	r4, [r4, #32]
 800348a:	6323      	str	r3, [r4, #48]	; 0x30
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	08003ed1 	.word	0x08003ed1
 8003494:	08003ef3 	.word	0x08003ef3
 8003498:	08003f2b 	.word	0x08003f2b
 800349c:	08003f4f 	.word	0x08003f4f

080034a0 <_cleanup_r>:
 80034a0:	4901      	ldr	r1, [pc, #4]	; (80034a8 <_cleanup_r+0x8>)
 80034a2:	f000 b8af 	b.w	8003604 <_fwalk_reent>
 80034a6:	bf00      	nop
 80034a8:	080033e1 	.word	0x080033e1

080034ac <__sfmoreglue>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2268      	movs	r2, #104	; 0x68
 80034b0:	1e4d      	subs	r5, r1, #1
 80034b2:	4355      	muls	r5, r2
 80034b4:	460e      	mov	r6, r1
 80034b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034ba:	f000 f997 	bl	80037ec <_malloc_r>
 80034be:	4604      	mov	r4, r0
 80034c0:	b140      	cbz	r0, 80034d4 <__sfmoreglue+0x28>
 80034c2:	2100      	movs	r1, #0
 80034c4:	e9c0 1600 	strd	r1, r6, [r0]
 80034c8:	300c      	adds	r0, #12
 80034ca:	60a0      	str	r0, [r4, #8]
 80034cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034d0:	f7ff fdaa 	bl	8003028 <memset>
 80034d4:	4620      	mov	r0, r4
 80034d6:	bd70      	pop	{r4, r5, r6, pc}

080034d8 <__sfp_lock_acquire>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__sfp_lock_acquire+0x8>)
 80034da:	f000 b8b3 	b.w	8003644 <__retarget_lock_acquire_recursive>
 80034de:	bf00      	nop
 80034e0:	200008b5 	.word	0x200008b5

080034e4 <__sfp_lock_release>:
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <__sfp_lock_release+0x8>)
 80034e6:	f000 b8ae 	b.w	8003646 <__retarget_lock_release_recursive>
 80034ea:	bf00      	nop
 80034ec:	200008b5 	.word	0x200008b5

080034f0 <__sinit_lock_acquire>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__sinit_lock_acquire+0x8>)
 80034f2:	f000 b8a7 	b.w	8003644 <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	200008b6 	.word	0x200008b6

080034fc <__sinit_lock_release>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__sinit_lock_release+0x8>)
 80034fe:	f000 b8a2 	b.w	8003646 <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	200008b6 	.word	0x200008b6

08003508 <__sinit>:
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	f7ff fff0 	bl	80034f0 <__sinit_lock_acquire>
 8003510:	69a3      	ldr	r3, [r4, #24]
 8003512:	b11b      	cbz	r3, 800351c <__sinit+0x14>
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003518:	f7ff bff0 	b.w	80034fc <__sinit_lock_release>
 800351c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003520:	6523      	str	r3, [r4, #80]	; 0x50
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <__sinit+0x68>)
 8003524:	4a13      	ldr	r2, [pc, #76]	; (8003574 <__sinit+0x6c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	62a2      	str	r2, [r4, #40]	; 0x28
 800352a:	42a3      	cmp	r3, r4
 800352c:	bf04      	itt	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	61a3      	streq	r3, [r4, #24]
 8003532:	4620      	mov	r0, r4
 8003534:	f000 f820 	bl	8003578 <__sfp>
 8003538:	6060      	str	r0, [r4, #4]
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f81c 	bl	8003578 <__sfp>
 8003540:	60a0      	str	r0, [r4, #8]
 8003542:	4620      	mov	r0, r4
 8003544:	f000 f818 	bl	8003578 <__sfp>
 8003548:	2200      	movs	r2, #0
 800354a:	60e0      	str	r0, [r4, #12]
 800354c:	2104      	movs	r1, #4
 800354e:	6860      	ldr	r0, [r4, #4]
 8003550:	f7ff ff82 	bl	8003458 <std>
 8003554:	68a0      	ldr	r0, [r4, #8]
 8003556:	2201      	movs	r2, #1
 8003558:	2109      	movs	r1, #9
 800355a:	f7ff ff7d 	bl	8003458 <std>
 800355e:	68e0      	ldr	r0, [r4, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	2112      	movs	r1, #18
 8003564:	f7ff ff78 	bl	8003458 <std>
 8003568:	2301      	movs	r3, #1
 800356a:	61a3      	str	r3, [r4, #24]
 800356c:	e7d2      	b.n	8003514 <__sinit+0xc>
 800356e:	bf00      	nop
 8003570:	08004098 	.word	0x08004098
 8003574:	080034a1 	.word	0x080034a1

08003578 <__sfp>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	4607      	mov	r7, r0
 800357c:	f7ff ffac 	bl	80034d8 <__sfp_lock_acquire>
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <__sfp+0x84>)
 8003582:	681e      	ldr	r6, [r3, #0]
 8003584:	69b3      	ldr	r3, [r6, #24]
 8003586:	b913      	cbnz	r3, 800358e <__sfp+0x16>
 8003588:	4630      	mov	r0, r6
 800358a:	f7ff ffbd 	bl	8003508 <__sinit>
 800358e:	3648      	adds	r6, #72	; 0x48
 8003590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003594:	3b01      	subs	r3, #1
 8003596:	d503      	bpl.n	80035a0 <__sfp+0x28>
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	b30b      	cbz	r3, 80035e0 <__sfp+0x68>
 800359c:	6836      	ldr	r6, [r6, #0]
 800359e:	e7f7      	b.n	8003590 <__sfp+0x18>
 80035a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035a4:	b9d5      	cbnz	r5, 80035dc <__sfp+0x64>
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <__sfp+0x88>)
 80035a8:	60e3      	str	r3, [r4, #12]
 80035aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035ae:	6665      	str	r5, [r4, #100]	; 0x64
 80035b0:	f000 f847 	bl	8003642 <__retarget_lock_init_recursive>
 80035b4:	f7ff ff96 	bl	80034e4 <__sfp_lock_release>
 80035b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	61a5      	str	r5, [r4, #24]
 80035c4:	2208      	movs	r2, #8
 80035c6:	4629      	mov	r1, r5
 80035c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035cc:	f7ff fd2c 	bl	8003028 <memset>
 80035d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035d8:	4620      	mov	r0, r4
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	3468      	adds	r4, #104	; 0x68
 80035de:	e7d9      	b.n	8003594 <__sfp+0x1c>
 80035e0:	2104      	movs	r1, #4
 80035e2:	4638      	mov	r0, r7
 80035e4:	f7ff ff62 	bl	80034ac <__sfmoreglue>
 80035e8:	4604      	mov	r4, r0
 80035ea:	6030      	str	r0, [r6, #0]
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1d5      	bne.n	800359c <__sfp+0x24>
 80035f0:	f7ff ff78 	bl	80034e4 <__sfp_lock_release>
 80035f4:	230c      	movs	r3, #12
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	e7ee      	b.n	80035d8 <__sfp+0x60>
 80035fa:	bf00      	nop
 80035fc:	08004098 	.word	0x08004098
 8003600:	ffff0001 	.word	0xffff0001

08003604 <_fwalk_reent>:
 8003604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003608:	4606      	mov	r6, r0
 800360a:	4688      	mov	r8, r1
 800360c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003610:	2700      	movs	r7, #0
 8003612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003616:	f1b9 0901 	subs.w	r9, r9, #1
 800361a:	d505      	bpl.n	8003628 <_fwalk_reent+0x24>
 800361c:	6824      	ldr	r4, [r4, #0]
 800361e:	2c00      	cmp	r4, #0
 8003620:	d1f7      	bne.n	8003612 <_fwalk_reent+0xe>
 8003622:	4638      	mov	r0, r7
 8003624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d907      	bls.n	800363e <_fwalk_reent+0x3a>
 800362e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003632:	3301      	adds	r3, #1
 8003634:	d003      	beq.n	800363e <_fwalk_reent+0x3a>
 8003636:	4629      	mov	r1, r5
 8003638:	4630      	mov	r0, r6
 800363a:	47c0      	blx	r8
 800363c:	4307      	orrs	r7, r0
 800363e:	3568      	adds	r5, #104	; 0x68
 8003640:	e7e9      	b.n	8003616 <_fwalk_reent+0x12>

08003642 <__retarget_lock_init_recursive>:
 8003642:	4770      	bx	lr

08003644 <__retarget_lock_acquire_recursive>:
 8003644:	4770      	bx	lr

08003646 <__retarget_lock_release_recursive>:
 8003646:	4770      	bx	lr

08003648 <__swhatbuf_r>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	460e      	mov	r6, r1
 800364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003650:	2900      	cmp	r1, #0
 8003652:	b096      	sub	sp, #88	; 0x58
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	da08      	bge.n	800366c <__swhatbuf_r+0x24>
 800365a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	602a      	str	r2, [r5, #0]
 8003662:	061a      	lsls	r2, r3, #24
 8003664:	d410      	bmi.n	8003688 <__swhatbuf_r+0x40>
 8003666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366a:	e00e      	b.n	800368a <__swhatbuf_r+0x42>
 800366c:	466a      	mov	r2, sp
 800366e:	f000 fc95 	bl	8003f9c <_fstat_r>
 8003672:	2800      	cmp	r0, #0
 8003674:	dbf1      	blt.n	800365a <__swhatbuf_r+0x12>
 8003676:	9a01      	ldr	r2, [sp, #4]
 8003678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800367c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003680:	425a      	negs	r2, r3
 8003682:	415a      	adcs	r2, r3
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	e7ee      	b.n	8003666 <__swhatbuf_r+0x1e>
 8003688:	2340      	movs	r3, #64	; 0x40
 800368a:	2000      	movs	r0, #0
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	b016      	add	sp, #88	; 0x58
 8003690:	bd70      	pop	{r4, r5, r6, pc}
	...

08003694 <__smakebuf_r>:
 8003694:	898b      	ldrh	r3, [r1, #12]
 8003696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003698:	079d      	lsls	r5, r3, #30
 800369a:	4606      	mov	r6, r0
 800369c:	460c      	mov	r4, r1
 800369e:	d507      	bpl.n	80036b0 <__smakebuf_r+0x1c>
 80036a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	2301      	movs	r3, #1
 80036aa:	6163      	str	r3, [r4, #20]
 80036ac:	b002      	add	sp, #8
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	ab01      	add	r3, sp, #4
 80036b2:	466a      	mov	r2, sp
 80036b4:	f7ff ffc8 	bl	8003648 <__swhatbuf_r>
 80036b8:	9900      	ldr	r1, [sp, #0]
 80036ba:	4605      	mov	r5, r0
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 f895 	bl	80037ec <_malloc_r>
 80036c2:	b948      	cbnz	r0, 80036d8 <__smakebuf_r+0x44>
 80036c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c8:	059a      	lsls	r2, r3, #22
 80036ca:	d4ef      	bmi.n	80036ac <__smakebuf_r+0x18>
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	e7e3      	b.n	80036a0 <__smakebuf_r+0xc>
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <__smakebuf_r+0x7c>)
 80036da:	62b3      	str	r3, [r6, #40]	; 0x28
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	6020      	str	r0, [r4, #0]
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	9b00      	ldr	r3, [sp, #0]
 80036e8:	6163      	str	r3, [r4, #20]
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	6120      	str	r0, [r4, #16]
 80036ee:	b15b      	cbz	r3, 8003708 <__smakebuf_r+0x74>
 80036f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f4:	4630      	mov	r0, r6
 80036f6:	f000 fc63 	bl	8003fc0 <_isatty_r>
 80036fa:	b128      	cbz	r0, 8003708 <__smakebuf_r+0x74>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	89a0      	ldrh	r0, [r4, #12]
 800370a:	4305      	orrs	r5, r0
 800370c:	81a5      	strh	r5, [r4, #12]
 800370e:	e7cd      	b.n	80036ac <__smakebuf_r+0x18>
 8003710:	080034a1 	.word	0x080034a1

08003714 <_free_r>:
 8003714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003716:	2900      	cmp	r1, #0
 8003718:	d044      	beq.n	80037a4 <_free_r+0x90>
 800371a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371e:	9001      	str	r0, [sp, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f1a1 0404 	sub.w	r4, r1, #4
 8003726:	bfb8      	it	lt
 8003728:	18e4      	addlt	r4, r4, r3
 800372a:	f000 fc6b 	bl	8004004 <__malloc_lock>
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <_free_r+0x94>)
 8003730:	9801      	ldr	r0, [sp, #4]
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	b933      	cbnz	r3, 8003744 <_free_r+0x30>
 8003736:	6063      	str	r3, [r4, #4]
 8003738:	6014      	str	r4, [r2, #0]
 800373a:	b003      	add	sp, #12
 800373c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003740:	f000 bc66 	b.w	8004010 <__malloc_unlock>
 8003744:	42a3      	cmp	r3, r4
 8003746:	d908      	bls.n	800375a <_free_r+0x46>
 8003748:	6825      	ldr	r5, [r4, #0]
 800374a:	1961      	adds	r1, r4, r5
 800374c:	428b      	cmp	r3, r1
 800374e:	bf01      	itttt	eq
 8003750:	6819      	ldreq	r1, [r3, #0]
 8003752:	685b      	ldreq	r3, [r3, #4]
 8003754:	1949      	addeq	r1, r1, r5
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	e7ed      	b.n	8003736 <_free_r+0x22>
 800375a:	461a      	mov	r2, r3
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b10b      	cbz	r3, 8003764 <_free_r+0x50>
 8003760:	42a3      	cmp	r3, r4
 8003762:	d9fa      	bls.n	800375a <_free_r+0x46>
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	1855      	adds	r5, r2, r1
 8003768:	42a5      	cmp	r5, r4
 800376a:	d10b      	bne.n	8003784 <_free_r+0x70>
 800376c:	6824      	ldr	r4, [r4, #0]
 800376e:	4421      	add	r1, r4
 8003770:	1854      	adds	r4, r2, r1
 8003772:	42a3      	cmp	r3, r4
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	d1e0      	bne.n	800373a <_free_r+0x26>
 8003778:	681c      	ldr	r4, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	6053      	str	r3, [r2, #4]
 800377e:	4421      	add	r1, r4
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	e7da      	b.n	800373a <_free_r+0x26>
 8003784:	d902      	bls.n	800378c <_free_r+0x78>
 8003786:	230c      	movs	r3, #12
 8003788:	6003      	str	r3, [r0, #0]
 800378a:	e7d6      	b.n	800373a <_free_r+0x26>
 800378c:	6825      	ldr	r5, [r4, #0]
 800378e:	1961      	adds	r1, r4, r5
 8003790:	428b      	cmp	r3, r1
 8003792:	bf04      	itt	eq
 8003794:	6819      	ldreq	r1, [r3, #0]
 8003796:	685b      	ldreq	r3, [r3, #4]
 8003798:	6063      	str	r3, [r4, #4]
 800379a:	bf04      	itt	eq
 800379c:	1949      	addeq	r1, r1, r5
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	6054      	str	r4, [r2, #4]
 80037a2:	e7ca      	b.n	800373a <_free_r+0x26>
 80037a4:	b003      	add	sp, #12
 80037a6:	bd30      	pop	{r4, r5, pc}
 80037a8:	200008b8 	.word	0x200008b8

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0e      	ldr	r6, [pc, #56]	; (80037e8 <sbrk_aligned+0x3c>)
 80037b0:	460c      	mov	r4, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	4605      	mov	r5, r0
 80037b6:	b911      	cbnz	r1, 80037be <sbrk_aligned+0x12>
 80037b8:	f000 fb7a 	bl	8003eb0 <_sbrk_r>
 80037bc:	6030      	str	r0, [r6, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 fb75 	bl	8003eb0 <_sbrk_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d00a      	beq.n	80037e0 <sbrk_aligned+0x34>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d007      	beq.n	80037e4 <sbrk_aligned+0x38>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 fb6a 	bl	8003eb0 <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d101      	bne.n	80037e4 <sbrk_aligned+0x38>
 80037e0:	f04f 34ff 	mov.w	r4, #4294967295
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	200008bc 	.word	0x200008bc

080037ec <_malloc_r>:
 80037ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f0:	1ccd      	adds	r5, r1, #3
 80037f2:	f025 0503 	bic.w	r5, r5, #3
 80037f6:	3508      	adds	r5, #8
 80037f8:	2d0c      	cmp	r5, #12
 80037fa:	bf38      	it	cc
 80037fc:	250c      	movcc	r5, #12
 80037fe:	2d00      	cmp	r5, #0
 8003800:	4607      	mov	r7, r0
 8003802:	db01      	blt.n	8003808 <_malloc_r+0x1c>
 8003804:	42a9      	cmp	r1, r5
 8003806:	d905      	bls.n	8003814 <_malloc_r+0x28>
 8003808:	230c      	movs	r3, #12
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	2600      	movs	r6, #0
 800380e:	4630      	mov	r0, r6
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	4e2e      	ldr	r6, [pc, #184]	; (80038d0 <_malloc_r+0xe4>)
 8003816:	f000 fbf5 	bl	8004004 <__malloc_lock>
 800381a:	6833      	ldr	r3, [r6, #0]
 800381c:	461c      	mov	r4, r3
 800381e:	bb34      	cbnz	r4, 800386e <_malloc_r+0x82>
 8003820:	4629      	mov	r1, r5
 8003822:	4638      	mov	r0, r7
 8003824:	f7ff ffc2 	bl	80037ac <sbrk_aligned>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	4604      	mov	r4, r0
 800382c:	d14d      	bne.n	80038ca <_malloc_r+0xde>
 800382e:	6834      	ldr	r4, [r6, #0]
 8003830:	4626      	mov	r6, r4
 8003832:	2e00      	cmp	r6, #0
 8003834:	d140      	bne.n	80038b8 <_malloc_r+0xcc>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	4631      	mov	r1, r6
 800383a:	4638      	mov	r0, r7
 800383c:	eb04 0803 	add.w	r8, r4, r3
 8003840:	f000 fb36 	bl	8003eb0 <_sbrk_r>
 8003844:	4580      	cmp	r8, r0
 8003846:	d13a      	bne.n	80038be <_malloc_r+0xd2>
 8003848:	6821      	ldr	r1, [r4, #0]
 800384a:	3503      	adds	r5, #3
 800384c:	1a6d      	subs	r5, r5, r1
 800384e:	f025 0503 	bic.w	r5, r5, #3
 8003852:	3508      	adds	r5, #8
 8003854:	2d0c      	cmp	r5, #12
 8003856:	bf38      	it	cc
 8003858:	250c      	movcc	r5, #12
 800385a:	4629      	mov	r1, r5
 800385c:	4638      	mov	r0, r7
 800385e:	f7ff ffa5 	bl	80037ac <sbrk_aligned>
 8003862:	3001      	adds	r0, #1
 8003864:	d02b      	beq.n	80038be <_malloc_r+0xd2>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	442b      	add	r3, r5
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	e00e      	b.n	800388c <_malloc_r+0xa0>
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	1b52      	subs	r2, r2, r5
 8003872:	d41e      	bmi.n	80038b2 <_malloc_r+0xc6>
 8003874:	2a0b      	cmp	r2, #11
 8003876:	d916      	bls.n	80038a6 <_malloc_r+0xba>
 8003878:	1961      	adds	r1, r4, r5
 800387a:	42a3      	cmp	r3, r4
 800387c:	6025      	str	r5, [r4, #0]
 800387e:	bf18      	it	ne
 8003880:	6059      	strne	r1, [r3, #4]
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	bf08      	it	eq
 8003886:	6031      	streq	r1, [r6, #0]
 8003888:	5162      	str	r2, [r4, r5]
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	4638      	mov	r0, r7
 800388e:	f104 060b 	add.w	r6, r4, #11
 8003892:	f000 fbbd 	bl	8004010 <__malloc_unlock>
 8003896:	f026 0607 	bic.w	r6, r6, #7
 800389a:	1d23      	adds	r3, r4, #4
 800389c:	1af2      	subs	r2, r6, r3
 800389e:	d0b6      	beq.n	800380e <_malloc_r+0x22>
 80038a0:	1b9b      	subs	r3, r3, r6
 80038a2:	50a3      	str	r3, [r4, r2]
 80038a4:	e7b3      	b.n	800380e <_malloc_r+0x22>
 80038a6:	6862      	ldr	r2, [r4, #4]
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	bf0c      	ite	eq
 80038ac:	6032      	streq	r2, [r6, #0]
 80038ae:	605a      	strne	r2, [r3, #4]
 80038b0:	e7ec      	b.n	800388c <_malloc_r+0xa0>
 80038b2:	4623      	mov	r3, r4
 80038b4:	6864      	ldr	r4, [r4, #4]
 80038b6:	e7b2      	b.n	800381e <_malloc_r+0x32>
 80038b8:	4634      	mov	r4, r6
 80038ba:	6876      	ldr	r6, [r6, #4]
 80038bc:	e7b9      	b.n	8003832 <_malloc_r+0x46>
 80038be:	230c      	movs	r3, #12
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4638      	mov	r0, r7
 80038c4:	f000 fba4 	bl	8004010 <__malloc_unlock>
 80038c8:	e7a1      	b.n	800380e <_malloc_r+0x22>
 80038ca:	6025      	str	r5, [r4, #0]
 80038cc:	e7de      	b.n	800388c <_malloc_r+0xa0>
 80038ce:	bf00      	nop
 80038d0:	200008b8 	.word	0x200008b8

080038d4 <__sfputc_r>:
 80038d4:	6893      	ldr	r3, [r2, #8]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	b410      	push	{r4}
 80038dc:	6093      	str	r3, [r2, #8]
 80038de:	da08      	bge.n	80038f2 <__sfputc_r+0x1e>
 80038e0:	6994      	ldr	r4, [r2, #24]
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	db01      	blt.n	80038ea <__sfputc_r+0x16>
 80038e6:	290a      	cmp	r1, #10
 80038e8:	d103      	bne.n	80038f2 <__sfputc_r+0x1e>
 80038ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ee:	f7ff bc31 	b.w	8003154 <__swbuf_r>
 80038f2:	6813      	ldr	r3, [r2, #0]
 80038f4:	1c58      	adds	r0, r3, #1
 80038f6:	6010      	str	r0, [r2, #0]
 80038f8:	7019      	strb	r1, [r3, #0]
 80038fa:	4608      	mov	r0, r1
 80038fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003900:	4770      	bx	lr

08003902 <__sfputs_r>:
 8003902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003904:	4606      	mov	r6, r0
 8003906:	460f      	mov	r7, r1
 8003908:	4614      	mov	r4, r2
 800390a:	18d5      	adds	r5, r2, r3
 800390c:	42ac      	cmp	r4, r5
 800390e:	d101      	bne.n	8003914 <__sfputs_r+0x12>
 8003910:	2000      	movs	r0, #0
 8003912:	e007      	b.n	8003924 <__sfputs_r+0x22>
 8003914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003918:	463a      	mov	r2, r7
 800391a:	4630      	mov	r0, r6
 800391c:	f7ff ffda 	bl	80038d4 <__sfputc_r>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d1f3      	bne.n	800390c <__sfputs_r+0xa>
 8003924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003928 <_vfiprintf_r>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	460d      	mov	r5, r1
 800392e:	b09d      	sub	sp, #116	; 0x74
 8003930:	4614      	mov	r4, r2
 8003932:	4698      	mov	r8, r3
 8003934:	4606      	mov	r6, r0
 8003936:	b118      	cbz	r0, 8003940 <_vfiprintf_r+0x18>
 8003938:	6983      	ldr	r3, [r0, #24]
 800393a:	b90b      	cbnz	r3, 8003940 <_vfiprintf_r+0x18>
 800393c:	f7ff fde4 	bl	8003508 <__sinit>
 8003940:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <_vfiprintf_r+0x240>)
 8003942:	429d      	cmp	r5, r3
 8003944:	d11b      	bne.n	800397e <_vfiprintf_r+0x56>
 8003946:	6875      	ldr	r5, [r6, #4]
 8003948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394a:	07d9      	lsls	r1, r3, #31
 800394c:	d405      	bmi.n	800395a <_vfiprintf_r+0x32>
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	059a      	lsls	r2, r3, #22
 8003952:	d402      	bmi.n	800395a <_vfiprintf_r+0x32>
 8003954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003956:	f7ff fe75 	bl	8003644 <__retarget_lock_acquire_recursive>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	d501      	bpl.n	8003964 <_vfiprintf_r+0x3c>
 8003960:	692b      	ldr	r3, [r5, #16]
 8003962:	b9eb      	cbnz	r3, 80039a0 <_vfiprintf_r+0x78>
 8003964:	4629      	mov	r1, r5
 8003966:	4630      	mov	r0, r6
 8003968:	f7ff fc46 	bl	80031f8 <__swsetup_r>
 800396c:	b1c0      	cbz	r0, 80039a0 <_vfiprintf_r+0x78>
 800396e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003970:	07dc      	lsls	r4, r3, #31
 8003972:	d50e      	bpl.n	8003992 <_vfiprintf_r+0x6a>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b01d      	add	sp, #116	; 0x74
 800397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397e:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <_vfiprintf_r+0x244>)
 8003980:	429d      	cmp	r5, r3
 8003982:	d101      	bne.n	8003988 <_vfiprintf_r+0x60>
 8003984:	68b5      	ldr	r5, [r6, #8]
 8003986:	e7df      	b.n	8003948 <_vfiprintf_r+0x20>
 8003988:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <_vfiprintf_r+0x248>)
 800398a:	429d      	cmp	r5, r3
 800398c:	bf08      	it	eq
 800398e:	68f5      	ldreq	r5, [r6, #12]
 8003990:	e7da      	b.n	8003948 <_vfiprintf_r+0x20>
 8003992:	89ab      	ldrh	r3, [r5, #12]
 8003994:	0598      	lsls	r0, r3, #22
 8003996:	d4ed      	bmi.n	8003974 <_vfiprintf_r+0x4c>
 8003998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399a:	f7ff fe54 	bl	8003646 <__retarget_lock_release_recursive>
 800399e:	e7e9      	b.n	8003974 <_vfiprintf_r+0x4c>
 80039a0:	2300      	movs	r3, #0
 80039a2:	9309      	str	r3, [sp, #36]	; 0x24
 80039a4:	2320      	movs	r3, #32
 80039a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ae:	2330      	movs	r3, #48	; 0x30
 80039b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b74 <_vfiprintf_r+0x24c>
 80039b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b8:	f04f 0901 	mov.w	r9, #1
 80039bc:	4623      	mov	r3, r4
 80039be:	469a      	mov	sl, r3
 80039c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c4:	b10a      	cbz	r2, 80039ca <_vfiprintf_r+0xa2>
 80039c6:	2a25      	cmp	r2, #37	; 0x25
 80039c8:	d1f9      	bne.n	80039be <_vfiprintf_r+0x96>
 80039ca:	ebba 0b04 	subs.w	fp, sl, r4
 80039ce:	d00b      	beq.n	80039e8 <_vfiprintf_r+0xc0>
 80039d0:	465b      	mov	r3, fp
 80039d2:	4622      	mov	r2, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	4630      	mov	r0, r6
 80039d8:	f7ff ff93 	bl	8003902 <__sfputs_r>
 80039dc:	3001      	adds	r0, #1
 80039de:	f000 80aa 	beq.w	8003b36 <_vfiprintf_r+0x20e>
 80039e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e4:	445a      	add	r2, fp
 80039e6:	9209      	str	r2, [sp, #36]	; 0x24
 80039e8:	f89a 3000 	ldrb.w	r3, [sl]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a2 	beq.w	8003b36 <_vfiprintf_r+0x20e>
 80039f2:	2300      	movs	r3, #0
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039fc:	f10a 0a01 	add.w	sl, sl, #1
 8003a00:	9304      	str	r3, [sp, #16]
 8003a02:	9307      	str	r3, [sp, #28]
 8003a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a08:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0a:	4654      	mov	r4, sl
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a12:	4858      	ldr	r0, [pc, #352]	; (8003b74 <_vfiprintf_r+0x24c>)
 8003a14:	f7fc fbdc 	bl	80001d0 <memchr>
 8003a18:	9a04      	ldr	r2, [sp, #16]
 8003a1a:	b9d8      	cbnz	r0, 8003a54 <_vfiprintf_r+0x12c>
 8003a1c:	06d1      	lsls	r1, r2, #27
 8003a1e:	bf44      	itt	mi
 8003a20:	2320      	movmi	r3, #32
 8003a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a26:	0713      	lsls	r3, r2, #28
 8003a28:	bf44      	itt	mi
 8003a2a:	232b      	movmi	r3, #43	; 0x2b
 8003a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a30:	f89a 3000 	ldrb.w	r3, [sl]
 8003a34:	2b2a      	cmp	r3, #42	; 0x2a
 8003a36:	d015      	beq.n	8003a64 <_vfiprintf_r+0x13c>
 8003a38:	9a07      	ldr	r2, [sp, #28]
 8003a3a:	4654      	mov	r4, sl
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f04f 0c0a 	mov.w	ip, #10
 8003a42:	4621      	mov	r1, r4
 8003a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a48:	3b30      	subs	r3, #48	; 0x30
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	d94e      	bls.n	8003aec <_vfiprintf_r+0x1c4>
 8003a4e:	b1b0      	cbz	r0, 8003a7e <_vfiprintf_r+0x156>
 8003a50:	9207      	str	r2, [sp, #28]
 8003a52:	e014      	b.n	8003a7e <_vfiprintf_r+0x156>
 8003a54:	eba0 0308 	sub.w	r3, r0, r8
 8003a58:	fa09 f303 	lsl.w	r3, r9, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	9304      	str	r3, [sp, #16]
 8003a60:	46a2      	mov	sl, r4
 8003a62:	e7d2      	b.n	8003a0a <_vfiprintf_r+0xe2>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	1d19      	adds	r1, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	9103      	str	r1, [sp, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bfbb      	ittet	lt
 8003a70:	425b      	neglt	r3, r3
 8003a72:	f042 0202 	orrlt.w	r2, r2, #2
 8003a76:	9307      	strge	r3, [sp, #28]
 8003a78:	9307      	strlt	r3, [sp, #28]
 8003a7a:	bfb8      	it	lt
 8003a7c:	9204      	strlt	r2, [sp, #16]
 8003a7e:	7823      	ldrb	r3, [r4, #0]
 8003a80:	2b2e      	cmp	r3, #46	; 0x2e
 8003a82:	d10c      	bne.n	8003a9e <_vfiprintf_r+0x176>
 8003a84:	7863      	ldrb	r3, [r4, #1]
 8003a86:	2b2a      	cmp	r3, #42	; 0x2a
 8003a88:	d135      	bne.n	8003af6 <_vfiprintf_r+0x1ce>
 8003a8a:	9b03      	ldr	r3, [sp, #12]
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	9203      	str	r2, [sp, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfb8      	it	lt
 8003a96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a9a:	3402      	adds	r4, #2
 8003a9c:	9305      	str	r3, [sp, #20]
 8003a9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b84 <_vfiprintf_r+0x25c>
 8003aa2:	7821      	ldrb	r1, [r4, #0]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4650      	mov	r0, sl
 8003aa8:	f7fc fb92 	bl	80001d0 <memchr>
 8003aac:	b140      	cbz	r0, 8003ac0 <_vfiprintf_r+0x198>
 8003aae:	2340      	movs	r3, #64	; 0x40
 8003ab0:	eba0 000a 	sub.w	r0, r0, sl
 8003ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab8:	9b04      	ldr	r3, [sp, #16]
 8003aba:	4303      	orrs	r3, r0
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	482c      	ldr	r0, [pc, #176]	; (8003b78 <_vfiprintf_r+0x250>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb80 	bl	80001d0 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d03f      	beq.n	8003b54 <_vfiprintf_r+0x22c>
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <_vfiprintf_r+0x254>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_vfiprintf_r+0x1f8>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae6:	443b      	add	r3, r7
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	e767      	b.n	80039bc <_vfiprintf_r+0x94>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a5      	b.n	8003a42 <_vfiprintf_r+0x11a>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	; 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_vfiprintf_r+0x1ee>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c5      	beq.n	8003a9e <_vfiprintf_r+0x176>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c3      	b.n	8003a9e <_vfiprintf_r+0x176>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_vfiprintf_r+0x1da>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <_vfiprintf_r+0x258>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f3af 8000 	nop.w
 8003b30:	4607      	mov	r7, r0
 8003b32:	1c78      	adds	r0, r7, #1
 8003b34:	d1d6      	bne.n	8003ae4 <_vfiprintf_r+0x1bc>
 8003b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b38:	07d9      	lsls	r1, r3, #31
 8003b3a:	d405      	bmi.n	8003b48 <_vfiprintf_r+0x220>
 8003b3c:	89ab      	ldrh	r3, [r5, #12]
 8003b3e:	059a      	lsls	r2, r3, #22
 8003b40:	d402      	bmi.n	8003b48 <_vfiprintf_r+0x220>
 8003b42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b44:	f7ff fd7f 	bl	8003646 <__retarget_lock_release_recursive>
 8003b48:	89ab      	ldrh	r3, [r5, #12]
 8003b4a:	065b      	lsls	r3, r3, #25
 8003b4c:	f53f af12 	bmi.w	8003974 <_vfiprintf_r+0x4c>
 8003b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b52:	e711      	b.n	8003978 <_vfiprintf_r+0x50>
 8003b54:	ab03      	add	r3, sp, #12
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <_vfiprintf_r+0x258>)
 8003b5c:	a904      	add	r1, sp, #16
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 f880 	bl	8003c64 <_printf_i>
 8003b64:	e7e4      	b.n	8003b30 <_vfiprintf_r+0x208>
 8003b66:	bf00      	nop
 8003b68:	080040bc 	.word	0x080040bc
 8003b6c:	080040dc 	.word	0x080040dc
 8003b70:	0800409c 	.word	0x0800409c
 8003b74:	080040fc 	.word	0x080040fc
 8003b78:	08004106 	.word	0x08004106
 8003b7c:	00000000 	.word	0x00000000
 8003b80:	08003903 	.word	0x08003903
 8003b84:	08004102 	.word	0x08004102

08003b88 <_printf_common>:
 8003b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	4699      	mov	r9, r3
 8003b90:	688a      	ldr	r2, [r1, #8]
 8003b92:	690b      	ldr	r3, [r1, #16]
 8003b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bfb8      	it	lt
 8003b9c:	4613      	movlt	r3, r2
 8003b9e:	6033      	str	r3, [r6, #0]
 8003ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	b10a      	cbz	r2, 8003bae <_printf_common+0x26>
 8003baa:	3301      	adds	r3, #1
 8003bac:	6033      	str	r3, [r6, #0]
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	0699      	lsls	r1, r3, #26
 8003bb2:	bf42      	ittt	mi
 8003bb4:	6833      	ldrmi	r3, [r6, #0]
 8003bb6:	3302      	addmi	r3, #2
 8003bb8:	6033      	strmi	r3, [r6, #0]
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	f015 0506 	ands.w	r5, r5, #6
 8003bc0:	d106      	bne.n	8003bd0 <_printf_common+0x48>
 8003bc2:	f104 0a19 	add.w	sl, r4, #25
 8003bc6:	68e3      	ldr	r3, [r4, #12]
 8003bc8:	6832      	ldr	r2, [r6, #0]
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	42ab      	cmp	r3, r5
 8003bce:	dc26      	bgt.n	8003c1e <_printf_common+0x96>
 8003bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd4:	1e13      	subs	r3, r2, #0
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	0692      	lsls	r2, r2, #26
 8003bde:	d42b      	bmi.n	8003c38 <_printf_common+0xb0>
 8003be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be4:	4649      	mov	r1, r9
 8003be6:	4638      	mov	r0, r7
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d01e      	beq.n	8003c2c <_printf_common+0xa4>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	68e5      	ldr	r5, [r4, #12]
 8003bf2:	6832      	ldr	r2, [r6, #0]
 8003bf4:	f003 0306 	and.w	r3, r3, #6
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	bf08      	it	eq
 8003bfc:	1aad      	subeq	r5, r5, r2
 8003bfe:	68a3      	ldr	r3, [r4, #8]
 8003c00:	6922      	ldr	r2, [r4, #16]
 8003c02:	bf0c      	ite	eq
 8003c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c08:	2500      	movne	r5, #0
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bfc4      	itt	gt
 8003c0e:	1a9b      	subgt	r3, r3, r2
 8003c10:	18ed      	addgt	r5, r5, r3
 8003c12:	2600      	movs	r6, #0
 8003c14:	341a      	adds	r4, #26
 8003c16:	42b5      	cmp	r5, r6
 8003c18:	d11a      	bne.n	8003c50 <_printf_common+0xc8>
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	e008      	b.n	8003c30 <_printf_common+0xa8>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4652      	mov	r2, sl
 8003c22:	4649      	mov	r1, r9
 8003c24:	4638      	mov	r0, r7
 8003c26:	47c0      	blx	r8
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d103      	bne.n	8003c34 <_printf_common+0xac>
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	3501      	adds	r5, #1
 8003c36:	e7c6      	b.n	8003bc6 <_printf_common+0x3e>
 8003c38:	18e1      	adds	r1, r4, r3
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	2030      	movs	r0, #48	; 0x30
 8003c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c42:	4422      	add	r2, r4
 8003c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	e7c7      	b.n	8003be0 <_printf_common+0x58>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4622      	mov	r2, r4
 8003c54:	4649      	mov	r1, r9
 8003c56:	4638      	mov	r0, r7
 8003c58:	47c0      	blx	r8
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d0e6      	beq.n	8003c2c <_printf_common+0xa4>
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7d9      	b.n	8003c16 <_printf_common+0x8e>
	...

08003c64 <_printf_i>:
 8003c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	7e0f      	ldrb	r7, [r1, #24]
 8003c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c6c:	2f78      	cmp	r7, #120	; 0x78
 8003c6e:	4691      	mov	r9, r2
 8003c70:	4680      	mov	r8, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	469a      	mov	sl, r3
 8003c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c7a:	d807      	bhi.n	8003c8c <_printf_i+0x28>
 8003c7c:	2f62      	cmp	r7, #98	; 0x62
 8003c7e:	d80a      	bhi.n	8003c96 <_printf_i+0x32>
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	f000 80d8 	beq.w	8003e36 <_printf_i+0x1d2>
 8003c86:	2f58      	cmp	r7, #88	; 0x58
 8003c88:	f000 80a3 	beq.w	8003dd2 <_printf_i+0x16e>
 8003c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c94:	e03a      	b.n	8003d0c <_printf_i+0xa8>
 8003c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c9a:	2b15      	cmp	r3, #21
 8003c9c:	d8f6      	bhi.n	8003c8c <_printf_i+0x28>
 8003c9e:	a101      	add	r1, pc, #4	; (adr r1, 8003ca4 <_printf_i+0x40>)
 8003ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003c8d 	.word	0x08003c8d
 8003cb0:	08003c8d 	.word	0x08003c8d
 8003cb4:	08003c8d 	.word	0x08003c8d
 8003cb8:	08003c8d 	.word	0x08003c8d
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003c8d 	.word	0x08003c8d
 8003cc4:	08003c8d 	.word	0x08003c8d
 8003cc8:	08003c8d 	.word	0x08003c8d
 8003ccc:	08003c8d 	.word	0x08003c8d
 8003cd0:	08003e1d 	.word	0x08003e1d
 8003cd4:	08003d41 	.word	0x08003d41
 8003cd8:	08003dff 	.word	0x08003dff
 8003cdc:	08003c8d 	.word	0x08003c8d
 8003ce0:	08003c8d 	.word	0x08003c8d
 8003ce4:	08003e3f 	.word	0x08003e3f
 8003ce8:	08003c8d 	.word	0x08003c8d
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003c8d 	.word	0x08003c8d
 8003cf4:	08003c8d 	.word	0x08003c8d
 8003cf8:	08003e07 	.word	0x08003e07
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	602a      	str	r2, [r5, #0]
 8003d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0a3      	b.n	8003e58 <_printf_i+0x1f4>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	6829      	ldr	r1, [r5, #0]
 8003d14:	0606      	lsls	r6, r0, #24
 8003d16:	f101 0304 	add.w	r3, r1, #4
 8003d1a:	d50a      	bpl.n	8003d32 <_printf_i+0xce>
 8003d1c:	680e      	ldr	r6, [r1, #0]
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	2e00      	cmp	r6, #0
 8003d22:	da03      	bge.n	8003d2c <_printf_i+0xc8>
 8003d24:	232d      	movs	r3, #45	; 0x2d
 8003d26:	4276      	negs	r6, r6
 8003d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2c:	485e      	ldr	r0, [pc, #376]	; (8003ea8 <_printf_i+0x244>)
 8003d2e:	230a      	movs	r3, #10
 8003d30:	e019      	b.n	8003d66 <_printf_i+0x102>
 8003d32:	680e      	ldr	r6, [r1, #0]
 8003d34:	602b      	str	r3, [r5, #0]
 8003d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d3a:	bf18      	it	ne
 8003d3c:	b236      	sxthne	r6, r6
 8003d3e:	e7ef      	b.n	8003d20 <_printf_i+0xbc>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	6029      	str	r1, [r5, #0]
 8003d48:	0601      	lsls	r1, r0, #24
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0xec>
 8003d4c:	681e      	ldr	r6, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <_printf_i+0xf2>
 8003d50:	0646      	lsls	r6, r0, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0xe8>
 8003d54:	881e      	ldrh	r6, [r3, #0]
 8003d56:	4854      	ldr	r0, [pc, #336]	; (8003ea8 <_printf_i+0x244>)
 8003d58:	2f6f      	cmp	r7, #111	; 0x6f
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2308      	moveq	r3, #8
 8003d5e:	230a      	movne	r3, #10
 8003d60:	2100      	movs	r1, #0
 8003d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d66:	6865      	ldr	r5, [r4, #4]
 8003d68:	60a5      	str	r5, [r4, #8]
 8003d6a:	2d00      	cmp	r5, #0
 8003d6c:	bfa2      	ittt	ge
 8003d6e:	6821      	ldrge	r1, [r4, #0]
 8003d70:	f021 0104 	bicge.w	r1, r1, #4
 8003d74:	6021      	strge	r1, [r4, #0]
 8003d76:	b90e      	cbnz	r6, 8003d7c <_printf_i+0x118>
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	d04d      	beq.n	8003e18 <_printf_i+0x1b4>
 8003d7c:	4615      	mov	r5, r2
 8003d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d82:	fb03 6711 	mls	r7, r3, r1, r6
 8003d86:	5dc7      	ldrb	r7, [r0, r7]
 8003d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d8c:	4637      	mov	r7, r6
 8003d8e:	42bb      	cmp	r3, r7
 8003d90:	460e      	mov	r6, r1
 8003d92:	d9f4      	bls.n	8003d7e <_printf_i+0x11a>
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d10b      	bne.n	8003db0 <_printf_i+0x14c>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	07de      	lsls	r6, r3, #31
 8003d9c:	d508      	bpl.n	8003db0 <_printf_i+0x14c>
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	6861      	ldr	r1, [r4, #4]
 8003da2:	4299      	cmp	r1, r3
 8003da4:	bfde      	ittt	le
 8003da6:	2330      	movle	r3, #48	; 0x30
 8003da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db0:	1b52      	subs	r2, r2, r5
 8003db2:	6122      	str	r2, [r4, #16]
 8003db4:	f8cd a000 	str.w	sl, [sp]
 8003db8:	464b      	mov	r3, r9
 8003dba:	aa03      	add	r2, sp, #12
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f7ff fee2 	bl	8003b88 <_printf_common>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d14c      	bne.n	8003e62 <_printf_i+0x1fe>
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	b004      	add	sp, #16
 8003dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd2:	4835      	ldr	r0, [pc, #212]	; (8003ea8 <_printf_i+0x244>)
 8003dd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dd8:	6829      	ldr	r1, [r5, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003de0:	6029      	str	r1, [r5, #0]
 8003de2:	061d      	lsls	r5, r3, #24
 8003de4:	d514      	bpl.n	8003e10 <_printf_i+0x1ac>
 8003de6:	07df      	lsls	r7, r3, #31
 8003de8:	bf44      	itt	mi
 8003dea:	f043 0320 	orrmi.w	r3, r3, #32
 8003dee:	6023      	strmi	r3, [r4, #0]
 8003df0:	b91e      	cbnz	r6, 8003dfa <_printf_i+0x196>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f023 0320 	bic.w	r3, r3, #32
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	e7b0      	b.n	8003d60 <_printf_i+0xfc>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f043 0320 	orr.w	r3, r3, #32
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	2378      	movs	r3, #120	; 0x78
 8003e08:	4828      	ldr	r0, [pc, #160]	; (8003eac <_printf_i+0x248>)
 8003e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e0e:	e7e3      	b.n	8003dd8 <_printf_i+0x174>
 8003e10:	0659      	lsls	r1, r3, #25
 8003e12:	bf48      	it	mi
 8003e14:	b2b6      	uxthmi	r6, r6
 8003e16:	e7e6      	b.n	8003de6 <_printf_i+0x182>
 8003e18:	4615      	mov	r5, r2
 8003e1a:	e7bb      	b.n	8003d94 <_printf_i+0x130>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	6826      	ldr	r6, [r4, #0]
 8003e20:	6961      	ldr	r1, [r4, #20]
 8003e22:	1d18      	adds	r0, r3, #4
 8003e24:	6028      	str	r0, [r5, #0]
 8003e26:	0635      	lsls	r5, r6, #24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0x1cc>
 8003e2c:	6019      	str	r1, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0x1d2>
 8003e30:	0670      	lsls	r0, r6, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0x1c8>
 8003e34:	8019      	strh	r1, [r3, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	e7ba      	b.n	8003db4 <_printf_i+0x150>
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	1d1a      	adds	r2, r3, #4
 8003e42:	602a      	str	r2, [r5, #0]
 8003e44:	681d      	ldr	r5, [r3, #0]
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f7fc f9c0 	bl	80001d0 <memchr>
 8003e50:	b108      	cbz	r0, 8003e56 <_printf_i+0x1f2>
 8003e52:	1b40      	subs	r0, r0, r5
 8003e54:	6060      	str	r0, [r4, #4]
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	6123      	str	r3, [r4, #16]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e60:	e7a8      	b.n	8003db4 <_printf_i+0x150>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	462a      	mov	r2, r5
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	47d0      	blx	sl
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d0ab      	beq.n	8003dc8 <_printf_i+0x164>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	079b      	lsls	r3, r3, #30
 8003e74:	d413      	bmi.n	8003e9e <_printf_i+0x23a>
 8003e76:	68e0      	ldr	r0, [r4, #12]
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	4298      	cmp	r0, r3
 8003e7c:	bfb8      	it	lt
 8003e7e:	4618      	movlt	r0, r3
 8003e80:	e7a4      	b.n	8003dcc <_printf_i+0x168>
 8003e82:	2301      	movs	r3, #1
 8003e84:	4632      	mov	r2, r6
 8003e86:	4649      	mov	r1, r9
 8003e88:	4640      	mov	r0, r8
 8003e8a:	47d0      	blx	sl
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d09b      	beq.n	8003dc8 <_printf_i+0x164>
 8003e90:	3501      	adds	r5, #1
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	9903      	ldr	r1, [sp, #12]
 8003e96:	1a5b      	subs	r3, r3, r1
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dcf2      	bgt.n	8003e82 <_printf_i+0x21e>
 8003e9c:	e7eb      	b.n	8003e76 <_printf_i+0x212>
 8003e9e:	2500      	movs	r5, #0
 8003ea0:	f104 0619 	add.w	r6, r4, #25
 8003ea4:	e7f5      	b.n	8003e92 <_printf_i+0x22e>
 8003ea6:	bf00      	nop
 8003ea8:	0800410d 	.word	0x0800410d
 8003eac:	0800411e 	.word	0x0800411e

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d06      	ldr	r5, [pc, #24]	; (8003ecc <_sbrk_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fd f85c 	bl	8000f78 <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	200008c0 	.word	0x200008c0

08003ed0 <__sread>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	f000 f8a0 	bl	800401c <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	bfab      	itete	ge
 8003ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee4:	181b      	addge	r3, r3, r0
 8003ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eea:	bfac      	ite	ge
 8003eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eee:	81a3      	strhlt	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__swrite>:
 8003ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	898b      	ldrh	r3, [r1, #12]
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	4605      	mov	r5, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	4616      	mov	r6, r2
 8003f02:	d505      	bpl.n	8003f10 <__swrite+0x1e>
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	2302      	movs	r3, #2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f000 f868 	bl	8003fe0 <_lseek_r>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4628      	mov	r0, r5
 8003f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	f000 b817 	b.w	8003f58 <_write_r>

08003f2a <__sseek>:
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f32:	f000 f855 	bl	8003fe0 <_lseek_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	bf15      	itete	ne
 8003f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f46:	81a3      	strheq	r3, [r4, #12]
 8003f48:	bf18      	it	ne
 8003f4a:	81a3      	strhne	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__sclose>:
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 b813 	b.w	8003f7c <_close_r>
	...

08003f58 <_write_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d07      	ldr	r5, [pc, #28]	; (8003f78 <_write_r+0x20>)
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	4608      	mov	r0, r1
 8003f60:	4611      	mov	r1, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	602a      	str	r2, [r5, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fc ffb6 	bl	8000ed8 <_write>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_write_r+0x1e>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_write_r+0x1e>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	200008c0 	.word	0x200008c0

08003f7c <_close_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d06      	ldr	r5, [pc, #24]	; (8003f98 <_close_r+0x1c>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc ffc2 	bl	8000f10 <_close>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_close_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_close_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	200008c0 	.word	0x200008c0

08003f9c <_fstat_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_fstat_r+0x20>)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	f7fc ffbd 	bl	8000f28 <_fstat>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d102      	bne.n	8003fb8 <_fstat_r+0x1c>
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	b103      	cbz	r3, 8003fb8 <_fstat_r+0x1c>
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	200008c0 	.word	0x200008c0

08003fc0 <_isatty_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_isatty_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fc ffbc 	bl	8000f48 <_isatty>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_isatty_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_isatty_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	200008c0 	.word	0x200008c0

08003fe0 <_lseek_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	; (8004000 <_lseek_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc ffb5 	bl	8000f5e <_lseek>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_lseek_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_lseek_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	200008c0 	.word	0x200008c0

08004004 <__malloc_lock>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__malloc_lock+0x8>)
 8004006:	f7ff bb1d 	b.w	8003644 <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	200008b4 	.word	0x200008b4

08004010 <__malloc_unlock>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__malloc_unlock+0x8>)
 8004012:	f7ff bb18 	b.w	8003646 <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	200008b4 	.word	0x200008b4

0800401c <_read_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d07      	ldr	r5, [pc, #28]	; (800403c <_read_r+0x20>)
 8004020:	4604      	mov	r4, r0
 8004022:	4608      	mov	r0, r1
 8004024:	4611      	mov	r1, r2
 8004026:	2200      	movs	r2, #0
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fc ff37 	bl	8000e9e <_read>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_read_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_read_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	200008c0 	.word	0x200008c0

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr
