
UART_No2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000047c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ec  200004ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000987c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5a  00000000  00000000  0002991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000708  00000000  00000000  0002bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033a9  00000000  00000000  0002c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb2a  00000000  00000000  0002f7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3ff4  00000000  00000000  0003b323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ff317  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025c8  00000000  00000000  000ff368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e34 	.word	0x08003e34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003e34 	.word	0x08003e34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f001 fc58 	bl	8001e3a <HAL_UART_Transmit>
    return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000494 	.word	0x20000494

08000598 <bsp_uart_init>:


uart_t debug;

void bsp_uart_init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	/*Initialize hardware */

	/*Clear receive buffer*/
	bsp_uart_rx_clear(&debug);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <bsp_uart_init+0x10>)
 800059e:	f000 f805 	bl	80005ac <bsp_uart_rx_clear>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c

080005ac <bsp_uart_rx_clear>:

void bsp_uart_rx_clear(uart_t *uart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	memset(uart->rx_buff, 0x00, RX_LEN);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3304      	adds	r3, #4
 80005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fc2c 	bl	8002e1c <memset>
	uart->rx_finish = FALSE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	uart->rx_count = 0;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	805a      	strh	r2, [r3, #2]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <USER_UART_IRQHandler>:


void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a24      	ldr	r2, [pc, #144]	; (8000678 <USER_UART_IRQHandler+0xa0>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d140      	bne.n	800066c <USER_UART_IRQHandler+0x94>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE))	//receive 1 byte
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <USER_UART_IRQHandler+0xa4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	d121      	bne.n	800063c <USER_UART_IRQHandler+0x64>
		{
			__HAL_UART_CLEAR_FLAG(&huart3,UART_FLAG_RXNE);	//Clears the UART RXNE pending flag.
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <USER_UART_IRQHandler+0xa4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f06f 0220 	mvn.w	r2, #32
 8000600:	601a      	str	r2, [r3, #0]
			if(debug.rx_count < RX_LEN)		//Max receive count = RX_LEN
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000604:	885b      	ldrh	r3, [r3, #2]
 8000606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060a:	d22f      	bcs.n	800066c <USER_UART_IRQHandler+0x94>
			{
				debug.rx_buff[debug.rx_count++] = huart->Instance->DR;	////receive 1 byte
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6858      	ldr	r0, [r3, #4]
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000614:	885b      	ldrh	r3, [r3, #2]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	b291      	uxth	r1, r2
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 800061c:	8051      	strh	r1, [r2, #2]
 800061e:	4619      	mov	r1, r3
 8000620:	b2c2      	uxtb	r2, r0
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000624:	440b      	add	r3, r1
 8000626:	711a      	strb	r2, [r3, #4]
				if(debug.rx_count == RX_LEN)
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 800062a:	885b      	ldrh	r3, [r3, #2]
 800062c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000630:	d11c      	bne.n	800066c <USER_UART_IRQHandler+0x94>
				{
					debug.rx_count = RX_LEN - 1;	// truncation
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000634:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000638:	805a      	strh	r2, [r3, #2]
			__HAL_UART_CLEAR_IDLEFLAG(&huart3);		//Clears the UART IDLE pending flag.
			debug.rx_count = 0;
			debug.rx_finish = TRUE;
		}
	}
}
 800063a:	e017      	b.n	800066c <USER_UART_IRQHandler+0x94>
		else if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))	//receive 1 packet
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <USER_UART_IRQHandler+0xa4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0310 	and.w	r3, r3, #16
 8000646:	2b10      	cmp	r3, #16
 8000648:	d110      	bne.n	800066c <USER_UART_IRQHandler+0x94>
			__HAL_UART_CLEAR_IDLEFLAG(&huart3);		//Clears the UART IDLE pending flag.
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <USER_UART_IRQHandler+0xa4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <USER_UART_IRQHandler+0xa4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
			debug.rx_count = 0;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000662:	2200      	movs	r2, #0
 8000664:	805a      	strh	r2, [r3, #2]
			debug.rx_finish = TRUE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <USER_UART_IRQHandler+0xa8>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40004800 	.word	0x40004800
 800067c:	20000494 	.word	0x20000494
 8000680:	2000008c 	.word	0x2000008c

08000684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	4b48      	ldr	r3, [pc, #288]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a47      	ldr	r2, [pc, #284]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b45      	ldr	r3, [pc, #276]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a40      	ldr	r2, [pc, #256]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a39      	ldr	r2, [pc, #228]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <MX_GPIO_Init+0x13c>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_GPIO_Init+0x13c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <MX_GPIO_Init+0x13c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <MX_GPIO_Init+0x13c>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_GPIO_Init+0x13c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_GPIO_Init+0x13c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <MX_GPIO_Init+0x13c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_GPIO_Init+0x13c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <MX_GPIO_Init+0x140>)
 8000748:	f000 fe78 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <MX_GPIO_Init+0x144>)
 8000754:	f000 fe72 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power5V_GPIO_Port, Power5V_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0x148>)
 800075e:	f000 fe6d 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_EN_Pin;
 8000762:	2340      	movs	r3, #64	; 0x40
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_EN_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <MX_GPIO_Init+0x140>)
 800077a:	f000 fcc3 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Beep_Pin;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0x144>)
 8000798:	f000 fcb4 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power5V_Pin;
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power5V_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_GPIO_Init+0x148>)
 80007b4:	f000 fca6 	bl	8001104 <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fa5c 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f820 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f7ff ff52 	bl	8000684 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007e0:	f000 f9a0 	bl	8000b24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  bsp_uart_init();
 80007e4:	f7ff fed8 	bl	8000598 <bsp_uart_init>

  printf("OK\r\n");
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <main+0x3c>)
 80007ea:	f002 fba5 	bl	8002f38 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(debug.rx_finish == TRUE)
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <main+0x40>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d106      	bne.n	8000804 <main+0x34>
	  {
		  printf("%s",debug.rx_buff);	//处理数据
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <main+0x44>)
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <main+0x48>)
 80007fa:	f002 fb17 	bl	8002e2c <iprintf>

		  bsp_uart_rx_clear(&debug);
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x40>)
 8000800:	f7ff fed4 	bl	80005ac <bsp_uart_rx_clear>
	  }
	  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 fab5 	bl	8000d74 <HAL_Delay>
	  if(debug.rx_finish == TRUE)
 800080a:	e7f0      	b.n	80007ee <main+0x1e>
 800080c:	08003e4c 	.word	0x08003e4c
 8000810:	2000008c 	.word	0x2000008c
 8000814:	20000090 	.word	0x20000090
 8000818:	08003e50 	.word	0x08003e50

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f002 faf6 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SystemClock_Config+0xd0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000890:	23a8      	movs	r3, #168	; 0xa8
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fde5 	bl	8001470 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f820 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2105      	movs	r1, #5
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f846 	bl	8001960 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008da:	f000 f809 	bl	80008f0 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f9cc 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <USART3_IRQHandler+0x14>)
 80009a6:	f001 fadb 	bl	8001f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  USER_UART_IRQHandler(&huart3);
 80009aa:	4802      	ldr	r0, [pc, #8]	; (80009b4 <USART3_IRQHandler+0x14>)
 80009ac:	f7ff fe14 	bl	80005d8 <USER_UART_IRQHandler>

  /* USER CODE END USART3_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000494 	.word	0x20000494

080009b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
  }

  return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fdb1 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
  }
  return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a52:	605a      	str	r2, [r3, #4]
  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 f980 	bl	8002dc8 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20020000 	.word	0x20020000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	20000490 	.word	0x20000490
 8000afc:	200004f0 	.word	0x200004f0

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_USART3_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f001 f920 	bl	8001da0 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f7ff fec3 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000494 	.word	0x20000494
 8000b74:	40004800 	.word	0x40004800

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_UART_MspInit+0xb4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d144      	bne.n	8000c24 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be4:	2307      	movs	r3, #7
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0xbc>)
 8000bf0:	f000 fa88 	bl	8001104 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2027      	movs	r0, #39	; 0x27
 8000bfa:	f000 f9ba 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bfe:	2027      	movs	r0, #39	; 0x27
 8000c00:	f000 f9d3 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0220 	orr.w	r2, r2, #32
 8000c12:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0210 	orr.w	r2, r2, #16
 8000c22:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	20000494 	.word	0x20000494

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ff4b 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 f8b3 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fdaf 	bl	80007d0 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c80:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000c84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c88:	200004ec 	.word	0x200004ec

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f94f 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe1a 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f967 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f92f 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200004d8 	.word	0x200004d8

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200004d8 	.word	0x200004d8

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff feb6 	bl	8000d5c <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d008      	beq.n	8001010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e052      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0216 	bic.w	r2, r2, #22
 800101e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800102e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <HAL_DMA_Abort+0x62>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0208 	bic.w	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	e013      	b.n	800108a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001062:	f7ff fe7b 	bl	8000d5c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b05      	cmp	r3, #5
 800106e:	d90c      	bls.n	800108a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e015      	b.n	80010b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e4      	bne.n	8001062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	223f      	movs	r2, #63	; 0x3f
 800109e:	409a      	lsls	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00c      	b.n	80010f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2205      	movs	r2, #5
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e16b      	b.n	80013f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 815a 	bne.w	80013f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80b4 	beq.w	80013f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x30c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_GPIO_Init+0x318>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x324>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x328>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20a>
 800130a:	2307      	movs	r3, #7
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x228>
 800130e:	2308      	movs	r3, #8
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x228>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x310>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_GPIO_Init+0x334>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a32      	ldr	r2, [pc, #200]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_GPIO_Init+0x334>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a27      	ldr	r2, [pc, #156]	; (8001438 <HAL_GPIO_Init+0x334>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae90 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc18 	bl	8000d5c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fc14 	bl	8000d5c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fc04 	bl	8000d5c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc00 	bl	8000d5c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fbb9 	bl	8000d5c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbb5 	bl	8000d5c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb98 	bl	8000d5c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fb94 	bl	8000d5c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fb78 	bl	8000d5c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fb74 	bl	8000d5c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb61 	bl	8000d5c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fb5d 	bl	8000d5c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb1d 	bl	8000d5c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fb19 	bl	8000d5c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fade 	bl	8000d5c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fada 	bl	8000d5c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fac8 	bl	8000d5c <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fac4 	bl	8000d5c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa98 	bl	8000d5c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fa94 	bl	8000d5c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa6d 	bl	8000d5c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fa69 	bl	8000d5c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa56 	bl	8000d5c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fa52 	bl	8000d5c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f984 	bl	8000d5c <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f980 	bl	8000d5c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f8e4 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08003e54 	.word	0x08003e54
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b094      	sub	sp, #80	; 0x50
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80e1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b64:	e0db      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	6139      	str	r1, [r7, #16]
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4651      	mov	r1, sl
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ebb2 0801 	subs.w	r8, r2, r1
 8001be4:	4659      	mov	r1, fp
 8001be6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	eb49 0303 	adc.w	r3, r9, r3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	024b      	lsls	r3, r1, #9
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c28:	4621      	mov	r1, r4
 8001c2a:	024a      	lsls	r2, r1, #9
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c3c:	f7fe fb18 	bl	8000270 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4611      	mov	r1, r2
 8001c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf0:	f7fe fabe 	bl	8000270 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3750      	adds	r7, #80	; 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08003e64 	.word	0x08003e64

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08003e64 	.word	0x08003e64

08001da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e03f      	b.n	8001e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fed6 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fd7b 	bl	80028e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af02      	add	r7, sp, #8
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d17c      	bne.n	8001f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_UART_Transmit+0x2c>
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e075      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Transmit+0x3e>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e06e      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe ff65 	bl	8000d5c <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ecc:	e02a      	b.n	8001f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 faf9 	bl	80024d0 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e036      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10b      	bne.n	8001f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3302      	adds	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	e007      	b.n	8001f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1cf      	bne.n	8001ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fac9 	bl	80024d0 <UART_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e006      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0ba      	sub	sp, #232	; 0xe8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x66>
 8001fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fbd3 	bl	800276a <UART_Receive_IT>
      return;
 8001fc4:	e256      	b.n	8002474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80de 	beq.w	800218c <HAL_UART_IRQHandler+0x22c>
 8001fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80d1 	beq.w	800218c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_UART_IRQHandler+0xae>
 8001ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800200e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_UART_IRQHandler+0xd2>
 800201a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_UART_IRQHandler+0xf6>
 800203e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <HAL_UART_IRQHandler+0x126>
 8002062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800206e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f043 0208 	orr.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 81ed 	beq.w	800246a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_UART_IRQHandler+0x14e>
 800209c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fb5e 	bl	800276a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <HAL_UART_IRQHandler+0x17a>
 80020d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d04f      	beq.n	800217a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fa66 	bl	80025ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d141      	bne.n	8002172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3314      	adds	r3, #20
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020fc:	e853 3f00 	ldrex	r3, [r3]
 8002100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3314      	adds	r3, #20
 8002116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800211a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800211e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800212a:	e841 2300 	strex	r3, r2, [r1]
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1d9      	bne.n	80020ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	2b00      	cmp	r3, #0
 8002140:	d013      	beq.n	800216a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	4a7d      	ldr	r2, [pc, #500]	; (800233c <HAL_UART_IRQHandler+0x3dc>)
 8002148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ffb5 	bl	80010be <HAL_DMA_Abort_IT>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002164:	4610      	mov	r0, r2
 8002166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	e00e      	b.n	8002188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f99a 	bl	80024a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	e00a      	b.n	8002188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f996 	bl	80024a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002178:	e006      	b.n	8002188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f992 	bl	80024a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002186:	e170      	b.n	800246a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002188:	bf00      	nop
    return;
 800218a:	e16e      	b.n	800246a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 814a 	bne.w	800242a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8143 	beq.w	800242a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 813c 	beq.w	800242a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	f040 80b4 	bne.w	8002340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8140 	beq.w	800246e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021f6:	429a      	cmp	r2, r3
 80021f8:	f080 8139 	bcs.w	800246e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	f000 8088 	beq.w	8002322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800223e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800224a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800224e:	e841 2300 	strex	r3, r2, [r1]
 8002252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1d9      	bne.n	8002212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3314      	adds	r3, #20
 8002264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002268:	e853 3f00 	ldrex	r3, [r3]
 800226c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800226e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3314      	adds	r3, #20
 800227e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800228a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e1      	bne.n	800225e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3314      	adds	r3, #20
 80022a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a4:	e853 3f00 	ldrex	r3, [r3]
 80022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80022aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3314      	adds	r3, #20
 80022ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80022be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e3      	bne.n	800229a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ea:	e853 3f00 	ldrex	r3, [r3]
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f2:	f023 0310 	bic.w	r3, r3, #16
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002304:	65ba      	str	r2, [r7, #88]	; 0x58
 8002306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800230a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e3      	bne.n	80022e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fe5e 	bl	8000fde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800232a:	b29b      	uxth	r3, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8c0 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002338:	e099      	b.n	800246e <HAL_UART_IRQHandler+0x50e>
 800233a:	bf00      	nop
 800233c:	08002673 	.word	0x08002673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002348:	b29b      	uxth	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 808b 	beq.w	8002472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800235c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8086 	beq.w	8002472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800237c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800238a:	647a      	str	r2, [r7, #68]	; 0x44
 800238c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e3      	bne.n	8002366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3314      	adds	r3, #20
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	623b      	str	r3, [r7, #32]
   return(result);
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3314      	adds	r3, #20
 80023be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023c2:	633a      	str	r2, [r7, #48]	; 0x30
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ca:	e841 2300 	strex	r3, r2, [r1]
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e3      	bne.n	800239e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002408:	61fa      	str	r2, [r7, #28]
 800240a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	69b9      	ldr	r1, [r7, #24]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	617b      	str	r3, [r7, #20]
   return(result);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e3      	bne.n	80023e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800241c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f848 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002428:	e023      	b.n	8002472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_UART_IRQHandler+0x4ea>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f929 	bl	800269a <UART_Transmit_IT>
    return;
 8002448:	e014      	b.n	8002474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800244a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <HAL_UART_IRQHandler+0x514>
 8002456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f969 	bl	800273a <UART_EndTransmit_IT>
    return;
 8002468:	e004      	b.n	8002474 <HAL_UART_IRQHandler+0x514>
    return;
 800246a:	bf00      	nop
 800246c:	e002      	b.n	8002474 <HAL_UART_IRQHandler+0x514>
      return;
 800246e:	bf00      	nop
 8002470:	e000      	b.n	8002474 <HAL_UART_IRQHandler+0x514>
      return;
 8002472:	bf00      	nop
  }
}
 8002474:	37e8      	adds	r7, #232	; 0xe8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop

0800247c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b090      	sub	sp, #64	; 0x40
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e0:	e050      	b.n	8002584 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d04c      	beq.n	8002584 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f0:	f7fe fc34 	bl	8000d5c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d241      	bcs.n	8002584 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002520:	637a      	str	r2, [r7, #52]	; 0x34
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002528:	e841 2300 	strex	r3, r2, [r1]
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e5      	bne.n	8002500 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3314      	adds	r3, #20
 800253a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	613b      	str	r3, [r7, #16]
   return(result);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	623a      	str	r2, [r7, #32]
 8002556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002558:	69f9      	ldr	r1, [r7, #28]
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	e841 2300 	strex	r3, r2, [r1]
 8002560:	61bb      	str	r3, [r7, #24]
   return(result);
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e5      	bne.n	8002534 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e00f      	b.n	80025a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4013      	ands	r3, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d09f      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3740      	adds	r7, #64	; 0x40
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b095      	sub	sp, #84	; 0x54
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025d4:	643a      	str	r2, [r7, #64]	; 0x40
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025dc:	e841 2300 	strex	r3, r2, [r1]
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	e853 3f00 	ldrex	r3, [r3]
 80025f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3314      	adds	r3, #20
 8002606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e5      	bne.n	80025e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	2b01      	cmp	r3, #1
 8002622:	d119      	bne.n	8002658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	60bb      	str	r3, [r7, #8]
   return(result);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f023 0310 	bic.w	r3, r3, #16
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002644:	61ba      	str	r2, [r7, #24]
 8002646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	6979      	ldr	r1, [r7, #20]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	613b      	str	r3, [r7, #16]
   return(result);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e5      	bne.n	8002624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002666:	bf00      	nop
 8002668:	3754      	adds	r7, #84	; 0x54
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff ff09 	bl	80024a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b21      	cmp	r3, #33	; 0x21
 80026ac:	d13e      	bne.n	800272c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d114      	bne.n	80026e2 <UART_Transmit_IT+0x48>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d110      	bne.n	80026e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	1c9a      	adds	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	621a      	str	r2, [r3, #32]
 80026e0:	e008      	b.n	80026f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	1c59      	adds	r1, r3, #1
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6211      	str	r1, [r2, #32]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe8e 	bl	800247c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08c      	sub	sp, #48	; 0x30
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b22      	cmp	r3, #34	; 0x22
 800277c:	f040 80ab 	bne.w	80028d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d117      	bne.n	80027ba <UART_Receive_IT+0x50>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d113      	bne.n	80027ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	1c9a      	adds	r2, r3, #2
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
 80027b8:	e026      	b.n	8002808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	d007      	beq.n	80027de <UART_Receive_IT+0x74>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <UART_Receive_IT+0x82>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e008      	b.n	80027fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002818:	2b00      	cmp	r3, #0
 800281a:	d15a      	bne.n	80028d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0220 	bic.w	r2, r2, #32
 800282a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800283a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	d135      	bne.n	80028c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	613b      	str	r3, [r7, #16]
   return(result);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f023 0310 	bic.w	r3, r3, #16
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	330c      	adds	r3, #12
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	623a      	str	r2, [r7, #32]
 8002884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	69f9      	ldr	r1, [r7, #28]
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e5      	bne.n	8002862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d10a      	bne.n	80028ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fdf9 	bl	80024b8 <HAL_UARTEx_RxEventCallback>
 80028c6:	e002      	b.n	80028ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fde1 	bl	8002490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e002      	b.n	80028d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b0c0      	sub	sp, #256	; 0x100
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	ea40 0301 	orr.w	r3, r0, r1
 8002908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	431a      	orrs	r2, r3
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002938:	f021 010c 	bic.w	r1, r1, #12
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002946:	430b      	orrs	r3, r1
 8002948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	6999      	ldr	r1, [r3, #24]
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	ea40 0301 	orr.w	r3, r0, r1
 8002966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <UART_SetConfig+0x2cc>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <UART_SetConfig+0xa0>
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <UART_SetConfig+0x2d0>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d104      	bne.n	800298a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff f9fa 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002988:	e003      	b.n	8002992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800298a:	f7ff f9e1 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800298e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	f040 810c 	bne.w	8002bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ba:	415b      	adcs	r3, r3
 80029bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029c2:	4621      	mov	r1, r4
 80029c4:	eb12 0801 	adds.w	r8, r2, r1
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb43 0901 	adc.w	r9, r3, r1
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e2:	4690      	mov	r8, r2
 80029e4:	4699      	mov	r9, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	eb18 0303 	adds.w	r3, r8, r3
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029f0:	462b      	mov	r3, r5
 80029f2:	eb49 0303 	adc.w	r3, r9, r3
 80029f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a0e:	460b      	mov	r3, r1
 8002a10:	18db      	adds	r3, r3, r3
 8002a12:	653b      	str	r3, [r7, #80]	; 0x50
 8002a14:	4613      	mov	r3, r2
 8002a16:	eb42 0303 	adc.w	r3, r2, r3
 8002a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a24:	f7fd fc24 	bl	8000270 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	011c      	lsls	r4, r3, #4
 8002a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a50:	415b      	adcs	r3, r3
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a58:	4641      	mov	r1, r8
 8002a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a5e:	4649      	mov	r1, r9
 8002a60:	eb43 0b01 	adc.w	fp, r3, r1
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a78:	4692      	mov	sl, r2
 8002a7a:	469b      	mov	fp, r3
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a86:	464b      	mov	r3, r9
 8002a88:	eb4b 0303 	adc.w	r3, fp, r3
 8002a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	18db      	adds	r3, r3, r3
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aaa:	4613      	mov	r3, r2
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aba:	f7fd fbd9 	bl	8000270 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002adc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	1891      	adds	r1, r2, r2
 8002b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b04:	415b      	adcs	r3, r3
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	1851      	adds	r1, r2, r1
 8002b10:	6339      	str	r1, [r7, #48]	; 0x30
 8002b12:	4649      	mov	r1, r9
 8002b14:	414b      	adcs	r3, r1
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b24:	4659      	mov	r1, fp
 8002b26:	00cb      	lsls	r3, r1, #3
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2e:	4651      	mov	r1, sl
 8002b30:	00ca      	lsls	r2, r1, #3
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	4642      	mov	r2, r8
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b40:	464b      	mov	r3, r9
 8002b42:	460a      	mov	r2, r1
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b60:	460b      	mov	r3, r1
 8002b62:	18db      	adds	r3, r3, r3
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	4613      	mov	r3, r2
 8002b68:	eb42 0303 	adc.w	r3, r2, r3
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b76:	f7fd fb7b 	bl	8000270 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <UART_SetConfig+0x2d4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba8:	e105      	b.n	8002db6 <UART_SetConfig+0x4d6>
 8002baa:	bf00      	nop
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	40011400 	.word	0x40011400
 8002bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bca:	4642      	mov	r2, r8
 8002bcc:	464b      	mov	r3, r9
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	6239      	str	r1, [r7, #32]
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bda:	4641      	mov	r1, r8
 8002bdc:	1854      	adds	r4, r2, r1
 8002bde:	4649      	mov	r1, r9
 8002be0:	eb43 0501 	adc.w	r5, r3, r1
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	00eb      	lsls	r3, r5, #3
 8002bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf2:	00e2      	lsls	r2, r4, #3
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	4643      	mov	r3, r8
 8002bfa:	18e3      	adds	r3, r4, r3
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c00:	464b      	mov	r3, r9
 8002c02:	eb45 0303 	adc.w	r3, r5, r3
 8002c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c26:	4629      	mov	r1, r5
 8002c28:	008b      	lsls	r3, r1, #2
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c30:	4621      	mov	r1, r4
 8002c32:	008a      	lsls	r2, r1, #2
 8002c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c38:	f7fd fb1a 	bl	8000270 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002c42:	fba3 2302 	umull	r2, r3, r3, r2
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	011c      	lsls	r4, r3, #4
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	61b9      	str	r1, [r7, #24]
 8002c64:	415b      	adcs	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6139      	str	r1, [r7, #16]
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cce:	4641      	mov	r1, r8
 8002cd0:	008a      	lsls	r2, r1, #2
 8002cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cd6:	f7fd facb 	bl	8000270 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	; 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	3332      	adds	r3, #50	; 0x32
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfe:	441c      	add	r4, r3
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	673b      	str	r3, [r7, #112]	; 0x70
 8002d08:	677a      	str	r2, [r7, #116]	; 0x74
 8002d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d0e:	4642      	mov	r2, r8
 8002d10:	464b      	mov	r3, r9
 8002d12:	1891      	adds	r1, r2, r2
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	415b      	adcs	r3, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1e:	4641      	mov	r1, r8
 8002d20:	1851      	adds	r1, r2, r1
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	4649      	mov	r1, r9
 8002d26:	414b      	adcs	r3, r1
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d36:	4659      	mov	r1, fp
 8002d38:	00cb      	lsls	r3, r1, #3
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d40:	4651      	mov	r1, sl
 8002d42:	00ca      	lsls	r2, r1, #3
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
 8002d64:	667a      	str	r2, [r7, #100]	; 0x64
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d72:	4649      	mov	r1, r9
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	4641      	mov	r1, r8
 8002d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	008a      	lsls	r2, r1, #2
 8002d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d84:	f7fd fa74 	bl	8000270 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2164      	movs	r1, #100	; 0x64
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <UART_SetConfig+0x4e4>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4422      	add	r2, r4
 8002db4:	609a      	str	r2, [r3, #8]
}
 8002db6:	bf00      	nop
 8002db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	51eb851f 	.word	0x51eb851f

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4d0d      	ldr	r5, [pc, #52]	; (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2600      	movs	r6, #0
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4d0b      	ldr	r5, [pc, #44]	; (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	; (8002e18 <__libc_init_array+0x44>)
 8002de8:	f001 f824 	bl	8003e34 <_init>
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2600      	movs	r6, #0
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08003f0c 	.word	0x08003f0c
 8002e10:	08003f0c 	.word	0x08003f0c
 8002e14:	08003f0c 	.word	0x08003f0c
 8002e18:	08003f10 	.word	0x08003f10

08002e1c <memset>:
 8002e1c:	4402      	add	r2, r0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <iprintf>:
 8002e2c:	b40f      	push	{r0, r1, r2, r3}
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <iprintf+0x2c>)
 8002e30:	b513      	push	{r0, r1, r4, lr}
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	b124      	cbz	r4, 8002e40 <iprintf+0x14>
 8002e36:	69a3      	ldr	r3, [r4, #24]
 8002e38:	b913      	cbnz	r3, 8002e40 <iprintf+0x14>
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 fa5e 	bl	80032fc <__sinit>
 8002e40:	ab05      	add	r3, sp, #20
 8002e42:	9a04      	ldr	r2, [sp, #16]
 8002e44:	68a1      	ldr	r1, [r4, #8]
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f000 fc67 	bl	800371c <_vfiprintf_r>
 8002e4e:	b002      	add	sp, #8
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	b004      	add	sp, #16
 8002e56:	4770      	bx	lr
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <_puts_r>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	460e      	mov	r6, r1
 8002e60:	4605      	mov	r5, r0
 8002e62:	b118      	cbz	r0, 8002e6c <_puts_r+0x10>
 8002e64:	6983      	ldr	r3, [r0, #24]
 8002e66:	b90b      	cbnz	r3, 8002e6c <_puts_r+0x10>
 8002e68:	f000 fa48 	bl	80032fc <__sinit>
 8002e6c:	69ab      	ldr	r3, [r5, #24]
 8002e6e:	68ac      	ldr	r4, [r5, #8]
 8002e70:	b913      	cbnz	r3, 8002e78 <_puts_r+0x1c>
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 fa42 	bl	80032fc <__sinit>
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <_puts_r+0xd0>)
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	d120      	bne.n	8002ec0 <_puts_r+0x64>
 8002e7e:	686c      	ldr	r4, [r5, #4]
 8002e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e82:	07db      	lsls	r3, r3, #31
 8002e84:	d405      	bmi.n	8002e92 <_puts_r+0x36>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	0598      	lsls	r0, r3, #22
 8002e8a:	d402      	bmi.n	8002e92 <_puts_r+0x36>
 8002e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e8e:	f000 fad3 	bl	8003438 <__retarget_lock_acquire_recursive>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	0719      	lsls	r1, r3, #28
 8002e96:	d51d      	bpl.n	8002ed4 <_puts_r+0x78>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	b1db      	cbz	r3, 8002ed4 <_puts_r+0x78>
 8002e9c:	3e01      	subs	r6, #1
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60a3      	str	r3, [r4, #8]
 8002ea8:	bb39      	cbnz	r1, 8002efa <_puts_r+0x9e>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da38      	bge.n	8002f20 <_puts_r+0xc4>
 8002eae:	4622      	mov	r2, r4
 8002eb0:	210a      	movs	r1, #10
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f000 f848 	bl	8002f48 <__swbuf_r>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d011      	beq.n	8002ee0 <_puts_r+0x84>
 8002ebc:	250a      	movs	r5, #10
 8002ebe:	e011      	b.n	8002ee4 <_puts_r+0x88>
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <_puts_r+0xd4>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d101      	bne.n	8002eca <_puts_r+0x6e>
 8002ec6:	68ac      	ldr	r4, [r5, #8]
 8002ec8:	e7da      	b.n	8002e80 <_puts_r+0x24>
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <_puts_r+0xd8>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	bf08      	it	eq
 8002ed0:	68ec      	ldreq	r4, [r5, #12]
 8002ed2:	e7d5      	b.n	8002e80 <_puts_r+0x24>
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f888 	bl	8002fec <__swsetup_r>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d0dd      	beq.n	8002e9c <_puts_r+0x40>
 8002ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ee6:	07da      	lsls	r2, r3, #31
 8002ee8:	d405      	bmi.n	8002ef6 <_puts_r+0x9a>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	059b      	lsls	r3, r3, #22
 8002eee:	d402      	bmi.n	8002ef6 <_puts_r+0x9a>
 8002ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ef2:	f000 faa2 	bl	800343a <__retarget_lock_release_recursive>
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da04      	bge.n	8002f08 <_puts_r+0xac>
 8002efe:	69a2      	ldr	r2, [r4, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	dc06      	bgt.n	8002f12 <_puts_r+0xb6>
 8002f04:	290a      	cmp	r1, #10
 8002f06:	d004      	beq.n	8002f12 <_puts_r+0xb6>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	7019      	strb	r1, [r3, #0]
 8002f10:	e7c5      	b.n	8002e9e <_puts_r+0x42>
 8002f12:	4622      	mov	r2, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f817 	bl	8002f48 <__swbuf_r>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d1bf      	bne.n	8002e9e <_puts_r+0x42>
 8002f1e:	e7df      	b.n	8002ee0 <_puts_r+0x84>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	250a      	movs	r5, #10
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	701d      	strb	r5, [r3, #0]
 8002f2a:	e7db      	b.n	8002ee4 <_puts_r+0x88>
 8002f2c:	08003e90 	.word	0x08003e90
 8002f30:	08003eb0 	.word	0x08003eb0
 8002f34:	08003e70 	.word	0x08003e70

08002f38 <puts>:
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <puts+0xc>)
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f7ff bf8d 	b.w	8002e5c <_puts_r>
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__swbuf_r>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	460e      	mov	r6, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	4605      	mov	r5, r0
 8002f50:	b118      	cbz	r0, 8002f5a <__swbuf_r+0x12>
 8002f52:	6983      	ldr	r3, [r0, #24]
 8002f54:	b90b      	cbnz	r3, 8002f5a <__swbuf_r+0x12>
 8002f56:	f000 f9d1 	bl	80032fc <__sinit>
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <__swbuf_r+0x98>)
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d12b      	bne.n	8002fb8 <__swbuf_r+0x70>
 8002f60:	686c      	ldr	r4, [r5, #4]
 8002f62:	69a3      	ldr	r3, [r4, #24]
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	89a3      	ldrh	r3, [r4, #12]
 8002f68:	071a      	lsls	r2, r3, #28
 8002f6a:	d52f      	bpl.n	8002fcc <__swbuf_r+0x84>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	b36b      	cbz	r3, 8002fcc <__swbuf_r+0x84>
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	6963      	ldr	r3, [r4, #20]
 8002f78:	b2f6      	uxtb	r6, r6
 8002f7a:	4283      	cmp	r3, r0
 8002f7c:	4637      	mov	r7, r6
 8002f7e:	dc04      	bgt.n	8002f8a <__swbuf_r+0x42>
 8002f80:	4621      	mov	r1, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 f926 	bl	80031d4 <_fflush_r>
 8002f88:	bb30      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60a3      	str	r3, [r4, #8]
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	701e      	strb	r6, [r3, #0]
 8002f98:	6963      	ldr	r3, [r4, #20]
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	4283      	cmp	r3, r0
 8002f9e:	d004      	beq.n	8002faa <__swbuf_r+0x62>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	07db      	lsls	r3, r3, #31
 8002fa4:	d506      	bpl.n	8002fb4 <__swbuf_r+0x6c>
 8002fa6:	2e0a      	cmp	r6, #10
 8002fa8:	d104      	bne.n	8002fb4 <__swbuf_r+0x6c>
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f911 	bl	80031d4 <_fflush_r>
 8002fb2:	b988      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <__swbuf_r+0x9c>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <__swbuf_r+0x7a>
 8002fbe:	68ac      	ldr	r4, [r5, #8]
 8002fc0:	e7cf      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <__swbuf_r+0xa0>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68ec      	ldreq	r4, [r5, #12]
 8002fca:	e7ca      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f80c 	bl	8002fec <__swsetup_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0cb      	beq.n	8002f70 <__swbuf_r+0x28>
 8002fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8002fdc:	e7ea      	b.n	8002fb4 <__swbuf_r+0x6c>
 8002fde:	bf00      	nop
 8002fe0:	08003e90 	.word	0x08003e90
 8002fe4:	08003eb0 	.word	0x08003eb0
 8002fe8:	08003e70 	.word	0x08003e70

08002fec <__swsetup_r>:
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <__swsetup_r+0xcc>)
 8002fee:	b570      	push	{r4, r5, r6, lr}
 8002ff0:	681d      	ldr	r5, [r3, #0]
 8002ff2:	4606      	mov	r6, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	b125      	cbz	r5, 8003002 <__swsetup_r+0x16>
 8002ff8:	69ab      	ldr	r3, [r5, #24]
 8002ffa:	b913      	cbnz	r3, 8003002 <__swsetup_r+0x16>
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f97d 	bl	80032fc <__sinit>
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <__swsetup_r+0xd0>)
 8003004:	429c      	cmp	r4, r3
 8003006:	d10f      	bne.n	8003028 <__swsetup_r+0x3c>
 8003008:	686c      	ldr	r4, [r5, #4]
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003010:	0719      	lsls	r1, r3, #28
 8003012:	d42c      	bmi.n	800306e <__swsetup_r+0x82>
 8003014:	06dd      	lsls	r5, r3, #27
 8003016:	d411      	bmi.n	800303c <__swsetup_r+0x50>
 8003018:	2309      	movs	r3, #9
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	f04f 30ff 	mov.w	r0, #4294967295
 8003026:	e03e      	b.n	80030a6 <__swsetup_r+0xba>
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <__swsetup_r+0xd4>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d101      	bne.n	8003032 <__swsetup_r+0x46>
 800302e:	68ac      	ldr	r4, [r5, #8]
 8003030:	e7eb      	b.n	800300a <__swsetup_r+0x1e>
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <__swsetup_r+0xd8>)
 8003034:	429c      	cmp	r4, r3
 8003036:	bf08      	it	eq
 8003038:	68ec      	ldreq	r4, [r5, #12]
 800303a:	e7e6      	b.n	800300a <__swsetup_r+0x1e>
 800303c:	0758      	lsls	r0, r3, #29
 800303e:	d512      	bpl.n	8003066 <__swsetup_r+0x7a>
 8003040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003042:	b141      	cbz	r1, 8003056 <__swsetup_r+0x6a>
 8003044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <__swsetup_r+0x66>
 800304c:	4630      	mov	r0, r6
 800304e:	f000 fa5b 	bl	8003508 <_free_r>
 8003052:	2300      	movs	r3, #0
 8003054:	6363      	str	r3, [r4, #52]	; 0x34
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	6923      	ldr	r3, [r4, #16]
 8003070:	b94b      	cbnz	r3, 8003086 <__swsetup_r+0x9a>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d003      	beq.n	8003086 <__swsetup_r+0x9a>
 800307e:	4621      	mov	r1, r4
 8003080:	4630      	mov	r0, r6
 8003082:	f000 fa01 	bl	8003488 <__smakebuf_r>
 8003086:	89a0      	ldrh	r0, [r4, #12]
 8003088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308c:	f010 0301 	ands.w	r3, r0, #1
 8003090:	d00a      	beq.n	80030a8 <__swsetup_r+0xbc>
 8003092:	2300      	movs	r3, #0
 8003094:	60a3      	str	r3, [r4, #8]
 8003096:	6963      	ldr	r3, [r4, #20]
 8003098:	425b      	negs	r3, r3
 800309a:	61a3      	str	r3, [r4, #24]
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b943      	cbnz	r3, 80030b2 <__swsetup_r+0xc6>
 80030a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030a4:	d1ba      	bne.n	800301c <__swsetup_r+0x30>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	0781      	lsls	r1, r0, #30
 80030aa:	bf58      	it	pl
 80030ac:	6963      	ldrpl	r3, [r4, #20]
 80030ae:	60a3      	str	r3, [r4, #8]
 80030b0:	e7f4      	b.n	800309c <__swsetup_r+0xb0>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e7f7      	b.n	80030a6 <__swsetup_r+0xba>
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c
 80030bc:	08003e90 	.word	0x08003e90
 80030c0:	08003eb0 	.word	0x08003eb0
 80030c4:	08003e70 	.word	0x08003e70

080030c8 <__sflush_r>:
 80030c8:	898a      	ldrh	r2, [r1, #12]
 80030ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	0710      	lsls	r0, r2, #28
 80030d2:	460c      	mov	r4, r1
 80030d4:	d458      	bmi.n	8003188 <__sflush_r+0xc0>
 80030d6:	684b      	ldr	r3, [r1, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dc05      	bgt.n	80030e8 <__sflush_r+0x20>
 80030dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dc02      	bgt.n	80030e8 <__sflush_r+0x20>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	d0f9      	beq.n	80030e2 <__sflush_r+0x1a>
 80030ee:	2300      	movs	r3, #0
 80030f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f4:	682f      	ldr	r7, [r5, #0]
 80030f6:	602b      	str	r3, [r5, #0]
 80030f8:	d032      	beq.n	8003160 <__sflush_r+0x98>
 80030fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	075a      	lsls	r2, r3, #29
 8003100:	d505      	bpl.n	800310e <__sflush_r+0x46>
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	1ac0      	subs	r0, r0, r3
 8003106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003108:	b10b      	cbz	r3, 800310e <__sflush_r+0x46>
 800310a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800310c:	1ac0      	subs	r0, r0, r3
 800310e:	2300      	movs	r3, #0
 8003110:	4602      	mov	r2, r0
 8003112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003114:	6a21      	ldr	r1, [r4, #32]
 8003116:	4628      	mov	r0, r5
 8003118:	47b0      	blx	r6
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	d106      	bne.n	800312e <__sflush_r+0x66>
 8003120:	6829      	ldr	r1, [r5, #0]
 8003122:	291d      	cmp	r1, #29
 8003124:	d82c      	bhi.n	8003180 <__sflush_r+0xb8>
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <__sflush_r+0x108>)
 8003128:	40ca      	lsrs	r2, r1
 800312a:	07d6      	lsls	r6, r2, #31
 800312c:	d528      	bpl.n	8003180 <__sflush_r+0xb8>
 800312e:	2200      	movs	r2, #0
 8003130:	6062      	str	r2, [r4, #4]
 8003132:	04d9      	lsls	r1, r3, #19
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	6022      	str	r2, [r4, #0]
 8003138:	d504      	bpl.n	8003144 <__sflush_r+0x7c>
 800313a:	1c42      	adds	r2, r0, #1
 800313c:	d101      	bne.n	8003142 <__sflush_r+0x7a>
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	b903      	cbnz	r3, 8003144 <__sflush_r+0x7c>
 8003142:	6560      	str	r0, [r4, #84]	; 0x54
 8003144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003146:	602f      	str	r7, [r5, #0]
 8003148:	2900      	cmp	r1, #0
 800314a:	d0ca      	beq.n	80030e2 <__sflush_r+0x1a>
 800314c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003150:	4299      	cmp	r1, r3
 8003152:	d002      	beq.n	800315a <__sflush_r+0x92>
 8003154:	4628      	mov	r0, r5
 8003156:	f000 f9d7 	bl	8003508 <_free_r>
 800315a:	2000      	movs	r0, #0
 800315c:	6360      	str	r0, [r4, #52]	; 0x34
 800315e:	e7c1      	b.n	80030e4 <__sflush_r+0x1c>
 8003160:	6a21      	ldr	r1, [r4, #32]
 8003162:	2301      	movs	r3, #1
 8003164:	4628      	mov	r0, r5
 8003166:	47b0      	blx	r6
 8003168:	1c41      	adds	r1, r0, #1
 800316a:	d1c7      	bne.n	80030fc <__sflush_r+0x34>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0c4      	beq.n	80030fc <__sflush_r+0x34>
 8003172:	2b1d      	cmp	r3, #29
 8003174:	d001      	beq.n	800317a <__sflush_r+0xb2>
 8003176:	2b16      	cmp	r3, #22
 8003178:	d101      	bne.n	800317e <__sflush_r+0xb6>
 800317a:	602f      	str	r7, [r5, #0]
 800317c:	e7b1      	b.n	80030e2 <__sflush_r+0x1a>
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	e7ad      	b.n	80030e4 <__sflush_r+0x1c>
 8003188:	690f      	ldr	r7, [r1, #16]
 800318a:	2f00      	cmp	r7, #0
 800318c:	d0a9      	beq.n	80030e2 <__sflush_r+0x1a>
 800318e:	0793      	lsls	r3, r2, #30
 8003190:	680e      	ldr	r6, [r1, #0]
 8003192:	bf08      	it	eq
 8003194:	694b      	ldreq	r3, [r1, #20]
 8003196:	600f      	str	r7, [r1, #0]
 8003198:	bf18      	it	ne
 800319a:	2300      	movne	r3, #0
 800319c:	eba6 0807 	sub.w	r8, r6, r7
 80031a0:	608b      	str	r3, [r1, #8]
 80031a2:	f1b8 0f00 	cmp.w	r8, #0
 80031a6:	dd9c      	ble.n	80030e2 <__sflush_r+0x1a>
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031ac:	4643      	mov	r3, r8
 80031ae:	463a      	mov	r2, r7
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b0      	blx	r6
 80031b4:	2800      	cmp	r0, #0
 80031b6:	dc06      	bgt.n	80031c6 <__sflush_r+0xfe>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	81a3      	strh	r3, [r4, #12]
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	e78e      	b.n	80030e4 <__sflush_r+0x1c>
 80031c6:	4407      	add	r7, r0
 80031c8:	eba8 0800 	sub.w	r8, r8, r0
 80031cc:	e7e9      	b.n	80031a2 <__sflush_r+0xda>
 80031ce:	bf00      	nop
 80031d0:	20400001 	.word	0x20400001

080031d4 <_fflush_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	4605      	mov	r5, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b913      	cbnz	r3, 80031e4 <_fflush_r+0x10>
 80031de:	2500      	movs	r5, #0
 80031e0:	4628      	mov	r0, r5
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	b118      	cbz	r0, 80031ee <_fflush_r+0x1a>
 80031e6:	6983      	ldr	r3, [r0, #24]
 80031e8:	b90b      	cbnz	r3, 80031ee <_fflush_r+0x1a>
 80031ea:	f000 f887 	bl	80032fc <__sinit>
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <_fflush_r+0x6c>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	d11b      	bne.n	800322c <_fflush_r+0x58>
 80031f4:	686c      	ldr	r4, [r5, #4]
 80031f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <_fflush_r+0xa>
 80031fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003200:	07d0      	lsls	r0, r2, #31
 8003202:	d404      	bmi.n	800320e <_fflush_r+0x3a>
 8003204:	0599      	lsls	r1, r3, #22
 8003206:	d402      	bmi.n	800320e <_fflush_r+0x3a>
 8003208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320a:	f000 f915 	bl	8003438 <__retarget_lock_acquire_recursive>
 800320e:	4628      	mov	r0, r5
 8003210:	4621      	mov	r1, r4
 8003212:	f7ff ff59 	bl	80030c8 <__sflush_r>
 8003216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003218:	07da      	lsls	r2, r3, #31
 800321a:	4605      	mov	r5, r0
 800321c:	d4e0      	bmi.n	80031e0 <_fflush_r+0xc>
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	059b      	lsls	r3, r3, #22
 8003222:	d4dd      	bmi.n	80031e0 <_fflush_r+0xc>
 8003224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003226:	f000 f908 	bl	800343a <__retarget_lock_release_recursive>
 800322a:	e7d9      	b.n	80031e0 <_fflush_r+0xc>
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <_fflush_r+0x70>)
 800322e:	429c      	cmp	r4, r3
 8003230:	d101      	bne.n	8003236 <_fflush_r+0x62>
 8003232:	68ac      	ldr	r4, [r5, #8]
 8003234:	e7df      	b.n	80031f6 <_fflush_r+0x22>
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <_fflush_r+0x74>)
 8003238:	429c      	cmp	r4, r3
 800323a:	bf08      	it	eq
 800323c:	68ec      	ldreq	r4, [r5, #12]
 800323e:	e7da      	b.n	80031f6 <_fflush_r+0x22>
 8003240:	08003e90 	.word	0x08003e90
 8003244:	08003eb0 	.word	0x08003eb0
 8003248:	08003e70 	.word	0x08003e70

0800324c <std>:
 800324c:	2300      	movs	r3, #0
 800324e:	b510      	push	{r4, lr}
 8003250:	4604      	mov	r4, r0
 8003252:	e9c0 3300 	strd	r3, r3, [r0]
 8003256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800325a:	6083      	str	r3, [r0, #8]
 800325c:	8181      	strh	r1, [r0, #12]
 800325e:	6643      	str	r3, [r0, #100]	; 0x64
 8003260:	81c2      	strh	r2, [r0, #14]
 8003262:	6183      	str	r3, [r0, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	2208      	movs	r2, #8
 8003268:	305c      	adds	r0, #92	; 0x5c
 800326a:	f7ff fdd7 	bl	8002e1c <memset>
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <std+0x38>)
 8003270:	6263      	str	r3, [r4, #36]	; 0x24
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <std+0x3c>)
 8003274:	62a3      	str	r3, [r4, #40]	; 0x28
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <std+0x40>)
 8003278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <std+0x44>)
 800327c:	6224      	str	r4, [r4, #32]
 800327e:	6323      	str	r3, [r4, #48]	; 0x30
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	08003cc5 	.word	0x08003cc5
 8003288:	08003ce7 	.word	0x08003ce7
 800328c:	08003d1f 	.word	0x08003d1f
 8003290:	08003d43 	.word	0x08003d43

08003294 <_cleanup_r>:
 8003294:	4901      	ldr	r1, [pc, #4]	; (800329c <_cleanup_r+0x8>)
 8003296:	f000 b8af 	b.w	80033f8 <_fwalk_reent>
 800329a:	bf00      	nop
 800329c:	080031d5 	.word	0x080031d5

080032a0 <__sfmoreglue>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2268      	movs	r2, #104	; 0x68
 80032a4:	1e4d      	subs	r5, r1, #1
 80032a6:	4355      	muls	r5, r2
 80032a8:	460e      	mov	r6, r1
 80032aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ae:	f000 f997 	bl	80035e0 <_malloc_r>
 80032b2:	4604      	mov	r4, r0
 80032b4:	b140      	cbz	r0, 80032c8 <__sfmoreglue+0x28>
 80032b6:	2100      	movs	r1, #0
 80032b8:	e9c0 1600 	strd	r1, r6, [r0]
 80032bc:	300c      	adds	r0, #12
 80032be:	60a0      	str	r0, [r4, #8]
 80032c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032c4:	f7ff fdaa 	bl	8002e1c <memset>
 80032c8:	4620      	mov	r0, r4
 80032ca:	bd70      	pop	{r4, r5, r6, pc}

080032cc <__sfp_lock_acquire>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__sfp_lock_acquire+0x8>)
 80032ce:	f000 b8b3 	b.w	8003438 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	200004dd 	.word	0x200004dd

080032d8 <__sfp_lock_release>:
 80032d8:	4801      	ldr	r0, [pc, #4]	; (80032e0 <__sfp_lock_release+0x8>)
 80032da:	f000 b8ae 	b.w	800343a <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	200004dd 	.word	0x200004dd

080032e4 <__sinit_lock_acquire>:
 80032e4:	4801      	ldr	r0, [pc, #4]	; (80032ec <__sinit_lock_acquire+0x8>)
 80032e6:	f000 b8a7 	b.w	8003438 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	200004de 	.word	0x200004de

080032f0 <__sinit_lock_release>:
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <__sinit_lock_release+0x8>)
 80032f2:	f000 b8a2 	b.w	800343a <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	200004de 	.word	0x200004de

080032fc <__sinit>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4604      	mov	r4, r0
 8003300:	f7ff fff0 	bl	80032e4 <__sinit_lock_acquire>
 8003304:	69a3      	ldr	r3, [r4, #24]
 8003306:	b11b      	cbz	r3, 8003310 <__sinit+0x14>
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f7ff bff0 	b.w	80032f0 <__sinit_lock_release>
 8003310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003314:	6523      	str	r3, [r4, #80]	; 0x50
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <__sinit+0x68>)
 8003318:	4a13      	ldr	r2, [pc, #76]	; (8003368 <__sinit+0x6c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	62a2      	str	r2, [r4, #40]	; 0x28
 800331e:	42a3      	cmp	r3, r4
 8003320:	bf04      	itt	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	61a3      	streq	r3, [r4, #24]
 8003326:	4620      	mov	r0, r4
 8003328:	f000 f820 	bl	800336c <__sfp>
 800332c:	6060      	str	r0, [r4, #4]
 800332e:	4620      	mov	r0, r4
 8003330:	f000 f81c 	bl	800336c <__sfp>
 8003334:	60a0      	str	r0, [r4, #8]
 8003336:	4620      	mov	r0, r4
 8003338:	f000 f818 	bl	800336c <__sfp>
 800333c:	2200      	movs	r2, #0
 800333e:	60e0      	str	r0, [r4, #12]
 8003340:	2104      	movs	r1, #4
 8003342:	6860      	ldr	r0, [r4, #4]
 8003344:	f7ff ff82 	bl	800324c <std>
 8003348:	68a0      	ldr	r0, [r4, #8]
 800334a:	2201      	movs	r2, #1
 800334c:	2109      	movs	r1, #9
 800334e:	f7ff ff7d 	bl	800324c <std>
 8003352:	68e0      	ldr	r0, [r4, #12]
 8003354:	2202      	movs	r2, #2
 8003356:	2112      	movs	r1, #18
 8003358:	f7ff ff78 	bl	800324c <std>
 800335c:	2301      	movs	r3, #1
 800335e:	61a3      	str	r3, [r4, #24]
 8003360:	e7d2      	b.n	8003308 <__sinit+0xc>
 8003362:	bf00      	nop
 8003364:	08003e6c 	.word	0x08003e6c
 8003368:	08003295 	.word	0x08003295

0800336c <__sfp>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	4607      	mov	r7, r0
 8003370:	f7ff ffac 	bl	80032cc <__sfp_lock_acquire>
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <__sfp+0x84>)
 8003376:	681e      	ldr	r6, [r3, #0]
 8003378:	69b3      	ldr	r3, [r6, #24]
 800337a:	b913      	cbnz	r3, 8003382 <__sfp+0x16>
 800337c:	4630      	mov	r0, r6
 800337e:	f7ff ffbd 	bl	80032fc <__sinit>
 8003382:	3648      	adds	r6, #72	; 0x48
 8003384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	d503      	bpl.n	8003394 <__sfp+0x28>
 800338c:	6833      	ldr	r3, [r6, #0]
 800338e:	b30b      	cbz	r3, 80033d4 <__sfp+0x68>
 8003390:	6836      	ldr	r6, [r6, #0]
 8003392:	e7f7      	b.n	8003384 <__sfp+0x18>
 8003394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003398:	b9d5      	cbnz	r5, 80033d0 <__sfp+0x64>
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <__sfp+0x88>)
 800339c:	60e3      	str	r3, [r4, #12]
 800339e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033a2:	6665      	str	r5, [r4, #100]	; 0x64
 80033a4:	f000 f847 	bl	8003436 <__retarget_lock_init_recursive>
 80033a8:	f7ff ff96 	bl	80032d8 <__sfp_lock_release>
 80033ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033b4:	6025      	str	r5, [r4, #0]
 80033b6:	61a5      	str	r5, [r4, #24]
 80033b8:	2208      	movs	r2, #8
 80033ba:	4629      	mov	r1, r5
 80033bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033c0:	f7ff fd2c 	bl	8002e1c <memset>
 80033c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033cc:	4620      	mov	r0, r4
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d0:	3468      	adds	r4, #104	; 0x68
 80033d2:	e7d9      	b.n	8003388 <__sfp+0x1c>
 80033d4:	2104      	movs	r1, #4
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ff62 	bl	80032a0 <__sfmoreglue>
 80033dc:	4604      	mov	r4, r0
 80033de:	6030      	str	r0, [r6, #0]
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d1d5      	bne.n	8003390 <__sfp+0x24>
 80033e4:	f7ff ff78 	bl	80032d8 <__sfp_lock_release>
 80033e8:	230c      	movs	r3, #12
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	e7ee      	b.n	80033cc <__sfp+0x60>
 80033ee:	bf00      	nop
 80033f0:	08003e6c 	.word	0x08003e6c
 80033f4:	ffff0001 	.word	0xffff0001

080033f8 <_fwalk_reent>:
 80033f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033fc:	4606      	mov	r6, r0
 80033fe:	4688      	mov	r8, r1
 8003400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003404:	2700      	movs	r7, #0
 8003406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800340a:	f1b9 0901 	subs.w	r9, r9, #1
 800340e:	d505      	bpl.n	800341c <_fwalk_reent+0x24>
 8003410:	6824      	ldr	r4, [r4, #0]
 8003412:	2c00      	cmp	r4, #0
 8003414:	d1f7      	bne.n	8003406 <_fwalk_reent+0xe>
 8003416:	4638      	mov	r0, r7
 8003418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800341c:	89ab      	ldrh	r3, [r5, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d907      	bls.n	8003432 <_fwalk_reent+0x3a>
 8003422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003426:	3301      	adds	r3, #1
 8003428:	d003      	beq.n	8003432 <_fwalk_reent+0x3a>
 800342a:	4629      	mov	r1, r5
 800342c:	4630      	mov	r0, r6
 800342e:	47c0      	blx	r8
 8003430:	4307      	orrs	r7, r0
 8003432:	3568      	adds	r5, #104	; 0x68
 8003434:	e7e9      	b.n	800340a <_fwalk_reent+0x12>

08003436 <__retarget_lock_init_recursive>:
 8003436:	4770      	bx	lr

08003438 <__retarget_lock_acquire_recursive>:
 8003438:	4770      	bx	lr

0800343a <__retarget_lock_release_recursive>:
 800343a:	4770      	bx	lr

0800343c <__swhatbuf_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	460e      	mov	r6, r1
 8003440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003444:	2900      	cmp	r1, #0
 8003446:	b096      	sub	sp, #88	; 0x58
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	da08      	bge.n	8003460 <__swhatbuf_r+0x24>
 800344e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	602a      	str	r2, [r5, #0]
 8003456:	061a      	lsls	r2, r3, #24
 8003458:	d410      	bmi.n	800347c <__swhatbuf_r+0x40>
 800345a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345e:	e00e      	b.n	800347e <__swhatbuf_r+0x42>
 8003460:	466a      	mov	r2, sp
 8003462:	f000 fc95 	bl	8003d90 <_fstat_r>
 8003466:	2800      	cmp	r0, #0
 8003468:	dbf1      	blt.n	800344e <__swhatbuf_r+0x12>
 800346a:	9a01      	ldr	r2, [sp, #4]
 800346c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003470:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003474:	425a      	negs	r2, r3
 8003476:	415a      	adcs	r2, r3
 8003478:	602a      	str	r2, [r5, #0]
 800347a:	e7ee      	b.n	800345a <__swhatbuf_r+0x1e>
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	2000      	movs	r0, #0
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	b016      	add	sp, #88	; 0x58
 8003484:	bd70      	pop	{r4, r5, r6, pc}
	...

08003488 <__smakebuf_r>:
 8003488:	898b      	ldrh	r3, [r1, #12]
 800348a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800348c:	079d      	lsls	r5, r3, #30
 800348e:	4606      	mov	r6, r0
 8003490:	460c      	mov	r4, r1
 8003492:	d507      	bpl.n	80034a4 <__smakebuf_r+0x1c>
 8003494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	2301      	movs	r3, #1
 800349e:	6163      	str	r3, [r4, #20]
 80034a0:	b002      	add	sp, #8
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	ab01      	add	r3, sp, #4
 80034a6:	466a      	mov	r2, sp
 80034a8:	f7ff ffc8 	bl	800343c <__swhatbuf_r>
 80034ac:	9900      	ldr	r1, [sp, #0]
 80034ae:	4605      	mov	r5, r0
 80034b0:	4630      	mov	r0, r6
 80034b2:	f000 f895 	bl	80035e0 <_malloc_r>
 80034b6:	b948      	cbnz	r0, 80034cc <__smakebuf_r+0x44>
 80034b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034bc:	059a      	lsls	r2, r3, #22
 80034be:	d4ef      	bmi.n	80034a0 <__smakebuf_r+0x18>
 80034c0:	f023 0303 	bic.w	r3, r3, #3
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	e7e3      	b.n	8003494 <__smakebuf_r+0xc>
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <__smakebuf_r+0x7c>)
 80034ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	6020      	str	r0, [r4, #0]
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	9b00      	ldr	r3, [sp, #0]
 80034dc:	6163      	str	r3, [r4, #20]
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	6120      	str	r0, [r4, #16]
 80034e2:	b15b      	cbz	r3, 80034fc <__smakebuf_r+0x74>
 80034e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 fc63 	bl	8003db4 <_isatty_r>
 80034ee:	b128      	cbz	r0, 80034fc <__smakebuf_r+0x74>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	81a3      	strh	r3, [r4, #12]
 80034fc:	89a0      	ldrh	r0, [r4, #12]
 80034fe:	4305      	orrs	r5, r0
 8003500:	81a5      	strh	r5, [r4, #12]
 8003502:	e7cd      	b.n	80034a0 <__smakebuf_r+0x18>
 8003504:	08003295 	.word	0x08003295

08003508 <_free_r>:
 8003508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800350a:	2900      	cmp	r1, #0
 800350c:	d044      	beq.n	8003598 <_free_r+0x90>
 800350e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003512:	9001      	str	r0, [sp, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f1a1 0404 	sub.w	r4, r1, #4
 800351a:	bfb8      	it	lt
 800351c:	18e4      	addlt	r4, r4, r3
 800351e:	f000 fc6b 	bl	8003df8 <__malloc_lock>
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <_free_r+0x94>)
 8003524:	9801      	ldr	r0, [sp, #4]
 8003526:	6813      	ldr	r3, [r2, #0]
 8003528:	b933      	cbnz	r3, 8003538 <_free_r+0x30>
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	6014      	str	r4, [r2, #0]
 800352e:	b003      	add	sp, #12
 8003530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003534:	f000 bc66 	b.w	8003e04 <__malloc_unlock>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d908      	bls.n	800354e <_free_r+0x46>
 800353c:	6825      	ldr	r5, [r4, #0]
 800353e:	1961      	adds	r1, r4, r5
 8003540:	428b      	cmp	r3, r1
 8003542:	bf01      	itttt	eq
 8003544:	6819      	ldreq	r1, [r3, #0]
 8003546:	685b      	ldreq	r3, [r3, #4]
 8003548:	1949      	addeq	r1, r1, r5
 800354a:	6021      	streq	r1, [r4, #0]
 800354c:	e7ed      	b.n	800352a <_free_r+0x22>
 800354e:	461a      	mov	r2, r3
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	b10b      	cbz	r3, 8003558 <_free_r+0x50>
 8003554:	42a3      	cmp	r3, r4
 8003556:	d9fa      	bls.n	800354e <_free_r+0x46>
 8003558:	6811      	ldr	r1, [r2, #0]
 800355a:	1855      	adds	r5, r2, r1
 800355c:	42a5      	cmp	r5, r4
 800355e:	d10b      	bne.n	8003578 <_free_r+0x70>
 8003560:	6824      	ldr	r4, [r4, #0]
 8003562:	4421      	add	r1, r4
 8003564:	1854      	adds	r4, r2, r1
 8003566:	42a3      	cmp	r3, r4
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	d1e0      	bne.n	800352e <_free_r+0x26>
 800356c:	681c      	ldr	r4, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	4421      	add	r1, r4
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	e7da      	b.n	800352e <_free_r+0x26>
 8003578:	d902      	bls.n	8003580 <_free_r+0x78>
 800357a:	230c      	movs	r3, #12
 800357c:	6003      	str	r3, [r0, #0]
 800357e:	e7d6      	b.n	800352e <_free_r+0x26>
 8003580:	6825      	ldr	r5, [r4, #0]
 8003582:	1961      	adds	r1, r4, r5
 8003584:	428b      	cmp	r3, r1
 8003586:	bf04      	itt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	bf04      	itt	eq
 8003590:	1949      	addeq	r1, r1, r5
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	6054      	str	r4, [r2, #4]
 8003596:	e7ca      	b.n	800352e <_free_r+0x26>
 8003598:	b003      	add	sp, #12
 800359a:	bd30      	pop	{r4, r5, pc}
 800359c:	200004e0 	.word	0x200004e0

080035a0 <sbrk_aligned>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4e0e      	ldr	r6, [pc, #56]	; (80035dc <sbrk_aligned+0x3c>)
 80035a4:	460c      	mov	r4, r1
 80035a6:	6831      	ldr	r1, [r6, #0]
 80035a8:	4605      	mov	r5, r0
 80035aa:	b911      	cbnz	r1, 80035b2 <sbrk_aligned+0x12>
 80035ac:	f000 fb7a 	bl	8003ca4 <_sbrk_r>
 80035b0:	6030      	str	r0, [r6, #0]
 80035b2:	4621      	mov	r1, r4
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 fb75 	bl	8003ca4 <_sbrk_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	d00a      	beq.n	80035d4 <sbrk_aligned+0x34>
 80035be:	1cc4      	adds	r4, r0, #3
 80035c0:	f024 0403 	bic.w	r4, r4, #3
 80035c4:	42a0      	cmp	r0, r4
 80035c6:	d007      	beq.n	80035d8 <sbrk_aligned+0x38>
 80035c8:	1a21      	subs	r1, r4, r0
 80035ca:	4628      	mov	r0, r5
 80035cc:	f000 fb6a 	bl	8003ca4 <_sbrk_r>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d101      	bne.n	80035d8 <sbrk_aligned+0x38>
 80035d4:	f04f 34ff 	mov.w	r4, #4294967295
 80035d8:	4620      	mov	r0, r4
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	200004e4 	.word	0x200004e4

080035e0 <_malloc_r>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	1ccd      	adds	r5, r1, #3
 80035e6:	f025 0503 	bic.w	r5, r5, #3
 80035ea:	3508      	adds	r5, #8
 80035ec:	2d0c      	cmp	r5, #12
 80035ee:	bf38      	it	cc
 80035f0:	250c      	movcc	r5, #12
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	4607      	mov	r7, r0
 80035f6:	db01      	blt.n	80035fc <_malloc_r+0x1c>
 80035f8:	42a9      	cmp	r1, r5
 80035fa:	d905      	bls.n	8003608 <_malloc_r+0x28>
 80035fc:	230c      	movs	r3, #12
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	2600      	movs	r6, #0
 8003602:	4630      	mov	r0, r6
 8003604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003608:	4e2e      	ldr	r6, [pc, #184]	; (80036c4 <_malloc_r+0xe4>)
 800360a:	f000 fbf5 	bl	8003df8 <__malloc_lock>
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	461c      	mov	r4, r3
 8003612:	bb34      	cbnz	r4, 8003662 <_malloc_r+0x82>
 8003614:	4629      	mov	r1, r5
 8003616:	4638      	mov	r0, r7
 8003618:	f7ff ffc2 	bl	80035a0 <sbrk_aligned>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	4604      	mov	r4, r0
 8003620:	d14d      	bne.n	80036be <_malloc_r+0xde>
 8003622:	6834      	ldr	r4, [r6, #0]
 8003624:	4626      	mov	r6, r4
 8003626:	2e00      	cmp	r6, #0
 8003628:	d140      	bne.n	80036ac <_malloc_r+0xcc>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	4631      	mov	r1, r6
 800362e:	4638      	mov	r0, r7
 8003630:	eb04 0803 	add.w	r8, r4, r3
 8003634:	f000 fb36 	bl	8003ca4 <_sbrk_r>
 8003638:	4580      	cmp	r8, r0
 800363a:	d13a      	bne.n	80036b2 <_malloc_r+0xd2>
 800363c:	6821      	ldr	r1, [r4, #0]
 800363e:	3503      	adds	r5, #3
 8003640:	1a6d      	subs	r5, r5, r1
 8003642:	f025 0503 	bic.w	r5, r5, #3
 8003646:	3508      	adds	r5, #8
 8003648:	2d0c      	cmp	r5, #12
 800364a:	bf38      	it	cc
 800364c:	250c      	movcc	r5, #12
 800364e:	4629      	mov	r1, r5
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ffa5 	bl	80035a0 <sbrk_aligned>
 8003656:	3001      	adds	r0, #1
 8003658:	d02b      	beq.n	80036b2 <_malloc_r+0xd2>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	442b      	add	r3, r5
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	e00e      	b.n	8003680 <_malloc_r+0xa0>
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	1b52      	subs	r2, r2, r5
 8003666:	d41e      	bmi.n	80036a6 <_malloc_r+0xc6>
 8003668:	2a0b      	cmp	r2, #11
 800366a:	d916      	bls.n	800369a <_malloc_r+0xba>
 800366c:	1961      	adds	r1, r4, r5
 800366e:	42a3      	cmp	r3, r4
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	bf18      	it	ne
 8003674:	6059      	strne	r1, [r3, #4]
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	bf08      	it	eq
 800367a:	6031      	streq	r1, [r6, #0]
 800367c:	5162      	str	r2, [r4, r5]
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	4638      	mov	r0, r7
 8003682:	f104 060b 	add.w	r6, r4, #11
 8003686:	f000 fbbd 	bl	8003e04 <__malloc_unlock>
 800368a:	f026 0607 	bic.w	r6, r6, #7
 800368e:	1d23      	adds	r3, r4, #4
 8003690:	1af2      	subs	r2, r6, r3
 8003692:	d0b6      	beq.n	8003602 <_malloc_r+0x22>
 8003694:	1b9b      	subs	r3, r3, r6
 8003696:	50a3      	str	r3, [r4, r2]
 8003698:	e7b3      	b.n	8003602 <_malloc_r+0x22>
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	42a3      	cmp	r3, r4
 800369e:	bf0c      	ite	eq
 80036a0:	6032      	streq	r2, [r6, #0]
 80036a2:	605a      	strne	r2, [r3, #4]
 80036a4:	e7ec      	b.n	8003680 <_malloc_r+0xa0>
 80036a6:	4623      	mov	r3, r4
 80036a8:	6864      	ldr	r4, [r4, #4]
 80036aa:	e7b2      	b.n	8003612 <_malloc_r+0x32>
 80036ac:	4634      	mov	r4, r6
 80036ae:	6876      	ldr	r6, [r6, #4]
 80036b0:	e7b9      	b.n	8003626 <_malloc_r+0x46>
 80036b2:	230c      	movs	r3, #12
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4638      	mov	r0, r7
 80036b8:	f000 fba4 	bl	8003e04 <__malloc_unlock>
 80036bc:	e7a1      	b.n	8003602 <_malloc_r+0x22>
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	e7de      	b.n	8003680 <_malloc_r+0xa0>
 80036c2:	bf00      	nop
 80036c4:	200004e0 	.word	0x200004e0

080036c8 <__sfputc_r>:
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	b410      	push	{r4}
 80036d0:	6093      	str	r3, [r2, #8]
 80036d2:	da08      	bge.n	80036e6 <__sfputc_r+0x1e>
 80036d4:	6994      	ldr	r4, [r2, #24]
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	db01      	blt.n	80036de <__sfputc_r+0x16>
 80036da:	290a      	cmp	r1, #10
 80036dc:	d103      	bne.n	80036e6 <__sfputc_r+0x1e>
 80036de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036e2:	f7ff bc31 	b.w	8002f48 <__swbuf_r>
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	1c58      	adds	r0, r3, #1
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	7019      	strb	r1, [r3, #0]
 80036ee:	4608      	mov	r0, r1
 80036f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <__sfputs_r>:
 80036f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f8:	4606      	mov	r6, r0
 80036fa:	460f      	mov	r7, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	18d5      	adds	r5, r2, r3
 8003700:	42ac      	cmp	r4, r5
 8003702:	d101      	bne.n	8003708 <__sfputs_r+0x12>
 8003704:	2000      	movs	r0, #0
 8003706:	e007      	b.n	8003718 <__sfputs_r+0x22>
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	463a      	mov	r2, r7
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff ffda 	bl	80036c8 <__sfputc_r>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d1f3      	bne.n	8003700 <__sfputs_r+0xa>
 8003718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800371c <_vfiprintf_r>:
 800371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	460d      	mov	r5, r1
 8003722:	b09d      	sub	sp, #116	; 0x74
 8003724:	4614      	mov	r4, r2
 8003726:	4698      	mov	r8, r3
 8003728:	4606      	mov	r6, r0
 800372a:	b118      	cbz	r0, 8003734 <_vfiprintf_r+0x18>
 800372c:	6983      	ldr	r3, [r0, #24]
 800372e:	b90b      	cbnz	r3, 8003734 <_vfiprintf_r+0x18>
 8003730:	f7ff fde4 	bl	80032fc <__sinit>
 8003734:	4b89      	ldr	r3, [pc, #548]	; (800395c <_vfiprintf_r+0x240>)
 8003736:	429d      	cmp	r5, r3
 8003738:	d11b      	bne.n	8003772 <_vfiprintf_r+0x56>
 800373a:	6875      	ldr	r5, [r6, #4]
 800373c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373e:	07d9      	lsls	r1, r3, #31
 8003740:	d405      	bmi.n	800374e <_vfiprintf_r+0x32>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d402      	bmi.n	800374e <_vfiprintf_r+0x32>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff fe75 	bl	8003438 <__retarget_lock_acquire_recursive>
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	d501      	bpl.n	8003758 <_vfiprintf_r+0x3c>
 8003754:	692b      	ldr	r3, [r5, #16]
 8003756:	b9eb      	cbnz	r3, 8003794 <_vfiprintf_r+0x78>
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff fc46 	bl	8002fec <__swsetup_r>
 8003760:	b1c0      	cbz	r0, 8003794 <_vfiprintf_r+0x78>
 8003762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003764:	07dc      	lsls	r4, r3, #31
 8003766:	d50e      	bpl.n	8003786 <_vfiprintf_r+0x6a>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	b01d      	add	sp, #116	; 0x74
 800376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <_vfiprintf_r+0x244>)
 8003774:	429d      	cmp	r5, r3
 8003776:	d101      	bne.n	800377c <_vfiprintf_r+0x60>
 8003778:	68b5      	ldr	r5, [r6, #8]
 800377a:	e7df      	b.n	800373c <_vfiprintf_r+0x20>
 800377c:	4b79      	ldr	r3, [pc, #484]	; (8003964 <_vfiprintf_r+0x248>)
 800377e:	429d      	cmp	r5, r3
 8003780:	bf08      	it	eq
 8003782:	68f5      	ldreq	r5, [r6, #12]
 8003784:	e7da      	b.n	800373c <_vfiprintf_r+0x20>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	0598      	lsls	r0, r3, #22
 800378a:	d4ed      	bmi.n	8003768 <_vfiprintf_r+0x4c>
 800378c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800378e:	f7ff fe54 	bl	800343a <__retarget_lock_release_recursive>
 8003792:	e7e9      	b.n	8003768 <_vfiprintf_r+0x4c>
 8003794:	2300      	movs	r3, #0
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	2320      	movs	r3, #32
 800379a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800379e:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a2:	2330      	movs	r3, #48	; 0x30
 80037a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003968 <_vfiprintf_r+0x24c>
 80037a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ac:	f04f 0901 	mov.w	r9, #1
 80037b0:	4623      	mov	r3, r4
 80037b2:	469a      	mov	sl, r3
 80037b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b8:	b10a      	cbz	r2, 80037be <_vfiprintf_r+0xa2>
 80037ba:	2a25      	cmp	r2, #37	; 0x25
 80037bc:	d1f9      	bne.n	80037b2 <_vfiprintf_r+0x96>
 80037be:	ebba 0b04 	subs.w	fp, sl, r4
 80037c2:	d00b      	beq.n	80037dc <_vfiprintf_r+0xc0>
 80037c4:	465b      	mov	r3, fp
 80037c6:	4622      	mov	r2, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff ff93 	bl	80036f6 <__sfputs_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	f000 80aa 	beq.w	800392a <_vfiprintf_r+0x20e>
 80037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d8:	445a      	add	r2, fp
 80037da:	9209      	str	r2, [sp, #36]	; 0x24
 80037dc:	f89a 3000 	ldrb.w	r3, [sl]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a2 	beq.w	800392a <_vfiprintf_r+0x20e>
 80037e6:	2300      	movs	r3, #0
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037f0:	f10a 0a01 	add.w	sl, sl, #1
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037fc:	931a      	str	r3, [sp, #104]	; 0x68
 80037fe:	4654      	mov	r4, sl
 8003800:	2205      	movs	r2, #5
 8003802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003806:	4858      	ldr	r0, [pc, #352]	; (8003968 <_vfiprintf_r+0x24c>)
 8003808:	f7fc fce2 	bl	80001d0 <memchr>
 800380c:	9a04      	ldr	r2, [sp, #16]
 800380e:	b9d8      	cbnz	r0, 8003848 <_vfiprintf_r+0x12c>
 8003810:	06d1      	lsls	r1, r2, #27
 8003812:	bf44      	itt	mi
 8003814:	2320      	movmi	r3, #32
 8003816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800381a:	0713      	lsls	r3, r2, #28
 800381c:	bf44      	itt	mi
 800381e:	232b      	movmi	r3, #43	; 0x2b
 8003820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003824:	f89a 3000 	ldrb.w	r3, [sl]
 8003828:	2b2a      	cmp	r3, #42	; 0x2a
 800382a:	d015      	beq.n	8003858 <_vfiprintf_r+0x13c>
 800382c:	9a07      	ldr	r2, [sp, #28]
 800382e:	4654      	mov	r4, sl
 8003830:	2000      	movs	r0, #0
 8003832:	f04f 0c0a 	mov.w	ip, #10
 8003836:	4621      	mov	r1, r4
 8003838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800383c:	3b30      	subs	r3, #48	; 0x30
 800383e:	2b09      	cmp	r3, #9
 8003840:	d94e      	bls.n	80038e0 <_vfiprintf_r+0x1c4>
 8003842:	b1b0      	cbz	r0, 8003872 <_vfiprintf_r+0x156>
 8003844:	9207      	str	r2, [sp, #28]
 8003846:	e014      	b.n	8003872 <_vfiprintf_r+0x156>
 8003848:	eba0 0308 	sub.w	r3, r0, r8
 800384c:	fa09 f303 	lsl.w	r3, r9, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	46a2      	mov	sl, r4
 8003856:	e7d2      	b.n	80037fe <_vfiprintf_r+0xe2>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	1d19      	adds	r1, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	9103      	str	r1, [sp, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfbb      	ittet	lt
 8003864:	425b      	neglt	r3, r3
 8003866:	f042 0202 	orrlt.w	r2, r2, #2
 800386a:	9307      	strge	r3, [sp, #28]
 800386c:	9307      	strlt	r3, [sp, #28]
 800386e:	bfb8      	it	lt
 8003870:	9204      	strlt	r2, [sp, #16]
 8003872:	7823      	ldrb	r3, [r4, #0]
 8003874:	2b2e      	cmp	r3, #46	; 0x2e
 8003876:	d10c      	bne.n	8003892 <_vfiprintf_r+0x176>
 8003878:	7863      	ldrb	r3, [r4, #1]
 800387a:	2b2a      	cmp	r3, #42	; 0x2a
 800387c:	d135      	bne.n	80038ea <_vfiprintf_r+0x1ce>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	9203      	str	r2, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	f04f 33ff 	movlt.w	r3, #4294967295
 800388e:	3402      	adds	r4, #2
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003978 <_vfiprintf_r+0x25c>
 8003896:	7821      	ldrb	r1, [r4, #0]
 8003898:	2203      	movs	r2, #3
 800389a:	4650      	mov	r0, sl
 800389c:	f7fc fc98 	bl	80001d0 <memchr>
 80038a0:	b140      	cbz	r0, 80038b4 <_vfiprintf_r+0x198>
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	eba0 000a 	sub.w	r0, r0, sl
 80038a8:	fa03 f000 	lsl.w	r0, r3, r0
 80038ac:	9b04      	ldr	r3, [sp, #16]
 80038ae:	4303      	orrs	r3, r0
 80038b0:	3401      	adds	r4, #1
 80038b2:	9304      	str	r3, [sp, #16]
 80038b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b8:	482c      	ldr	r0, [pc, #176]	; (800396c <_vfiprintf_r+0x250>)
 80038ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038be:	2206      	movs	r2, #6
 80038c0:	f7fc fc86 	bl	80001d0 <memchr>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d03f      	beq.n	8003948 <_vfiprintf_r+0x22c>
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <_vfiprintf_r+0x254>)
 80038ca:	bb1b      	cbnz	r3, 8003914 <_vfiprintf_r+0x1f8>
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	3307      	adds	r3, #7
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	3308      	adds	r3, #8
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038da:	443b      	add	r3, r7
 80038dc:	9309      	str	r3, [sp, #36]	; 0x24
 80038de:	e767      	b.n	80037b0 <_vfiprintf_r+0x94>
 80038e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038e4:	460c      	mov	r4, r1
 80038e6:	2001      	movs	r0, #1
 80038e8:	e7a5      	b.n	8003836 <_vfiprintf_r+0x11a>
 80038ea:	2300      	movs	r3, #0
 80038ec:	3401      	adds	r4, #1
 80038ee:	9305      	str	r3, [sp, #20]
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 0c0a 	mov.w	ip, #10
 80038f6:	4620      	mov	r0, r4
 80038f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038fc:	3a30      	subs	r2, #48	; 0x30
 80038fe:	2a09      	cmp	r2, #9
 8003900:	d903      	bls.n	800390a <_vfiprintf_r+0x1ee>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0c5      	beq.n	8003892 <_vfiprintf_r+0x176>
 8003906:	9105      	str	r1, [sp, #20]
 8003908:	e7c3      	b.n	8003892 <_vfiprintf_r+0x176>
 800390a:	fb0c 2101 	mla	r1, ip, r1, r2
 800390e:	4604      	mov	r4, r0
 8003910:	2301      	movs	r3, #1
 8003912:	e7f0      	b.n	80038f6 <_vfiprintf_r+0x1da>
 8003914:	ab03      	add	r3, sp, #12
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	462a      	mov	r2, r5
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <_vfiprintf_r+0x258>)
 800391c:	a904      	add	r1, sp, #16
 800391e:	4630      	mov	r0, r6
 8003920:	f3af 8000 	nop.w
 8003924:	4607      	mov	r7, r0
 8003926:	1c78      	adds	r0, r7, #1
 8003928:	d1d6      	bne.n	80038d8 <_vfiprintf_r+0x1bc>
 800392a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800392c:	07d9      	lsls	r1, r3, #31
 800392e:	d405      	bmi.n	800393c <_vfiprintf_r+0x220>
 8003930:	89ab      	ldrh	r3, [r5, #12]
 8003932:	059a      	lsls	r2, r3, #22
 8003934:	d402      	bmi.n	800393c <_vfiprintf_r+0x220>
 8003936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003938:	f7ff fd7f 	bl	800343a <__retarget_lock_release_recursive>
 800393c:	89ab      	ldrh	r3, [r5, #12]
 800393e:	065b      	lsls	r3, r3, #25
 8003940:	f53f af12 	bmi.w	8003768 <_vfiprintf_r+0x4c>
 8003944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003946:	e711      	b.n	800376c <_vfiprintf_r+0x50>
 8003948:	ab03      	add	r3, sp, #12
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <_vfiprintf_r+0x258>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	4630      	mov	r0, r6
 8003954:	f000 f880 	bl	8003a58 <_printf_i>
 8003958:	e7e4      	b.n	8003924 <_vfiprintf_r+0x208>
 800395a:	bf00      	nop
 800395c:	08003e90 	.word	0x08003e90
 8003960:	08003eb0 	.word	0x08003eb0
 8003964:	08003e70 	.word	0x08003e70
 8003968:	08003ed0 	.word	0x08003ed0
 800396c:	08003eda 	.word	0x08003eda
 8003970:	00000000 	.word	0x00000000
 8003974:	080036f7 	.word	0x080036f7
 8003978:	08003ed6 	.word	0x08003ed6

0800397c <_printf_common>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	4616      	mov	r6, r2
 8003982:	4699      	mov	r9, r3
 8003984:	688a      	ldr	r2, [r1, #8]
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800398c:	4293      	cmp	r3, r2
 800398e:	bfb8      	it	lt
 8003990:	4613      	movlt	r3, r2
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003998:	4607      	mov	r7, r0
 800399a:	460c      	mov	r4, r1
 800399c:	b10a      	cbz	r2, 80039a2 <_printf_common+0x26>
 800399e:	3301      	adds	r3, #1
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	0699      	lsls	r1, r3, #26
 80039a6:	bf42      	ittt	mi
 80039a8:	6833      	ldrmi	r3, [r6, #0]
 80039aa:	3302      	addmi	r3, #2
 80039ac:	6033      	strmi	r3, [r6, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	f015 0506 	ands.w	r5, r5, #6
 80039b4:	d106      	bne.n	80039c4 <_printf_common+0x48>
 80039b6:	f104 0a19 	add.w	sl, r4, #25
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	6832      	ldr	r2, [r6, #0]
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dc26      	bgt.n	8003a12 <_printf_common+0x96>
 80039c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d42b      	bmi.n	8003a2c <_printf_common+0xb0>
 80039d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d8:	4649      	mov	r1, r9
 80039da:	4638      	mov	r0, r7
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d01e      	beq.n	8003a20 <_printf_common+0xa4>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	68e5      	ldr	r5, [r4, #12]
 80039e6:	6832      	ldr	r2, [r6, #0]
 80039e8:	f003 0306 	and.w	r3, r3, #6
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	bf08      	it	eq
 80039f0:	1aad      	subeq	r5, r5, r2
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	6922      	ldr	r2, [r4, #16]
 80039f6:	bf0c      	ite	eq
 80039f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039fc:	2500      	movne	r5, #0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bfc4      	itt	gt
 8003a02:	1a9b      	subgt	r3, r3, r2
 8003a04:	18ed      	addgt	r5, r5, r3
 8003a06:	2600      	movs	r6, #0
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xc8>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xa8>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xac>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c6      	b.n	80039ba <_printf_common+0x3e>
 8003a2c:	18e1      	adds	r1, r4, r3
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a36:	4422      	add	r2, r4
 8003a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a40:	3302      	adds	r3, #2
 8003a42:	e7c7      	b.n	80039d4 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa4>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x8e>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	7e0f      	ldrb	r7, [r1, #24]
 8003a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a60:	2f78      	cmp	r7, #120	; 0x78
 8003a62:	4691      	mov	r9, r2
 8003a64:	4680      	mov	r8, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	; 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d8 	beq.w	8003c2a <_printf_i+0x1d2>
 8003a7a:	2f58      	cmp	r7, #88	; 0x58
 8003a7c:	f000 80a3 	beq.w	8003bc6 <_printf_i+0x16e>
 8003a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a101      	add	r1, pc, #4	; (adr r1, 8003a98 <_printf_i+0x40>)
 8003a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c11 	.word	0x08003c11
 8003ac8:	08003b35 	.word	0x08003b35
 8003acc:	08003bf3 	.word	0x08003bf3
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c33 	.word	0x08003c33
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bfb 	.word	0x08003bfb
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a3      	b.n	8003c4c <_printf_i+0x1f4>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	6829      	ldr	r1, [r5, #0]
 8003b08:	0606      	lsls	r6, r0, #24
 8003b0a:	f101 0304 	add.w	r3, r1, #4
 8003b0e:	d50a      	bpl.n	8003b26 <_printf_i+0xce>
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xc8>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	4276      	negs	r6, r6
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b20:	485e      	ldr	r0, [pc, #376]	; (8003c9c <_printf_i+0x244>)
 8003b22:	230a      	movs	r3, #10
 8003b24:	e019      	b.n	8003b5a <_printf_i+0x102>
 8003b26:	680e      	ldr	r6, [r1, #0]
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b2e:	bf18      	it	ne
 8003b30:	b236      	sxthne	r6, r6
 8003b32:	e7ef      	b.n	8003b14 <_printf_i+0xbc>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	6029      	str	r1, [r5, #0]
 8003b3c:	0601      	lsls	r1, r0, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xec>
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0xf2>
 8003b44:	0646      	lsls	r6, r0, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xe8>
 8003b48:	881e      	ldrh	r6, [r3, #0]
 8003b4a:	4854      	ldr	r0, [pc, #336]	; (8003c9c <_printf_i+0x244>)
 8003b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4e:	bf0c      	ite	eq
 8003b50:	2308      	moveq	r3, #8
 8003b52:	230a      	movne	r3, #10
 8003b54:	2100      	movs	r1, #0
 8003b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5a:	6865      	ldr	r5, [r4, #4]
 8003b5c:	60a5      	str	r5, [r4, #8]
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	bfa2      	ittt	ge
 8003b62:	6821      	ldrge	r1, [r4, #0]
 8003b64:	f021 0104 	bicge.w	r1, r1, #4
 8003b68:	6021      	strge	r1, [r4, #0]
 8003b6a:	b90e      	cbnz	r6, 8003b70 <_printf_i+0x118>
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d04d      	beq.n	8003c0c <_printf_i+0x1b4>
 8003b70:	4615      	mov	r5, r2
 8003b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b76:	fb03 6711 	mls	r7, r3, r1, r6
 8003b7a:	5dc7      	ldrb	r7, [r0, r7]
 8003b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b80:	4637      	mov	r7, r6
 8003b82:	42bb      	cmp	r3, r7
 8003b84:	460e      	mov	r6, r1
 8003b86:	d9f4      	bls.n	8003b72 <_printf_i+0x11a>
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d10b      	bne.n	8003ba4 <_printf_i+0x14c>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	07de      	lsls	r6, r3, #31
 8003b90:	d508      	bpl.n	8003ba4 <_printf_i+0x14c>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	6861      	ldr	r1, [r4, #4]
 8003b96:	4299      	cmp	r1, r3
 8003b98:	bfde      	ittt	le
 8003b9a:	2330      	movle	r3, #48	; 0x30
 8003b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ba4:	1b52      	subs	r2, r2, r5
 8003ba6:	6122      	str	r2, [r4, #16]
 8003ba8:	f8cd a000 	str.w	sl, [sp]
 8003bac:	464b      	mov	r3, r9
 8003bae:	aa03      	add	r2, sp, #12
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f7ff fee2 	bl	800397c <_printf_common>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d14c      	bne.n	8003c56 <_printf_i+0x1fe>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b004      	add	sp, #16
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	4835      	ldr	r0, [pc, #212]	; (8003c9c <_printf_i+0x244>)
 8003bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bcc:	6829      	ldr	r1, [r5, #0]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd4:	6029      	str	r1, [r5, #0]
 8003bd6:	061d      	lsls	r5, r3, #24
 8003bd8:	d514      	bpl.n	8003c04 <_printf_i+0x1ac>
 8003bda:	07df      	lsls	r7, r3, #31
 8003bdc:	bf44      	itt	mi
 8003bde:	f043 0320 	orrmi.w	r3, r3, #32
 8003be2:	6023      	strmi	r3, [r4, #0]
 8003be4:	b91e      	cbnz	r6, 8003bee <_printf_i+0x196>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f023 0320 	bic.w	r3, r3, #32
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	2310      	movs	r3, #16
 8003bf0:	e7b0      	b.n	8003b54 <_printf_i+0xfc>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	f043 0320 	orr.w	r3, r3, #32
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	2378      	movs	r3, #120	; 0x78
 8003bfc:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <_printf_i+0x248>)
 8003bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c02:	e7e3      	b.n	8003bcc <_printf_i+0x174>
 8003c04:	0659      	lsls	r1, r3, #25
 8003c06:	bf48      	it	mi
 8003c08:	b2b6      	uxthmi	r6, r6
 8003c0a:	e7e6      	b.n	8003bda <_printf_i+0x182>
 8003c0c:	4615      	mov	r5, r2
 8003c0e:	e7bb      	b.n	8003b88 <_printf_i+0x130>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	6826      	ldr	r6, [r4, #0]
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6028      	str	r0, [r5, #0]
 8003c1a:	0635      	lsls	r5, r6, #24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0x1cc>
 8003c20:	6019      	str	r1, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0x1d2>
 8003c24:	0670      	lsls	r0, r6, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0x1c8>
 8003c28:	8019      	strh	r1, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	4615      	mov	r5, r2
 8003c30:	e7ba      	b.n	8003ba8 <_printf_i+0x150>
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	602a      	str	r2, [r5, #0]
 8003c38:	681d      	ldr	r5, [r3, #0]
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7fc fac6 	bl	80001d0 <memchr>
 8003c44:	b108      	cbz	r0, 8003c4a <_printf_i+0x1f2>
 8003c46:	1b40      	subs	r0, r0, r5
 8003c48:	6060      	str	r0, [r4, #4]
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c54:	e7a8      	b.n	8003ba8 <_printf_i+0x150>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0ab      	beq.n	8003bbc <_printf_i+0x164>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	079b      	lsls	r3, r3, #30
 8003c68:	d413      	bmi.n	8003c92 <_printf_i+0x23a>
 8003c6a:	68e0      	ldr	r0, [r4, #12]
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	4298      	cmp	r0, r3
 8003c70:	bfb8      	it	lt
 8003c72:	4618      	movlt	r0, r3
 8003c74:	e7a4      	b.n	8003bc0 <_printf_i+0x168>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	47d0      	blx	sl
 8003c80:	3001      	adds	r0, #1
 8003c82:	d09b      	beq.n	8003bbc <_printf_i+0x164>
 8003c84:	3501      	adds	r5, #1
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	9903      	ldr	r1, [sp, #12]
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dcf2      	bgt.n	8003c76 <_printf_i+0x21e>
 8003c90:	e7eb      	b.n	8003c6a <_printf_i+0x212>
 8003c92:	2500      	movs	r5, #0
 8003c94:	f104 0619 	add.w	r6, r4, #25
 8003c98:	e7f5      	b.n	8003c86 <_printf_i+0x22e>
 8003c9a:	bf00      	nop
 8003c9c:	08003ee1 	.word	0x08003ee1
 8003ca0:	08003ef2 	.word	0x08003ef2

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	4d06      	ldr	r5, [pc, #24]	; (8003cc0 <_sbrk_r+0x1c>)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fc fef0 	bl	8000a94 <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200004e8 	.word	0x200004e8

08003cc4 <__sread>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ccc:	f000 f8a0 	bl	8003e10 <_read_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bfab      	itete	ge
 8003cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cd8:	181b      	addge	r3, r3, r0
 8003cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cde:	bfac      	ite	ge
 8003ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ce2:	81a3      	strhlt	r3, [r4, #12]
 8003ce4:	bd10      	pop	{r4, pc}

08003ce6 <__swrite>:
 8003ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cea:	461f      	mov	r7, r3
 8003cec:	898b      	ldrh	r3, [r1, #12]
 8003cee:	05db      	lsls	r3, r3, #23
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	d505      	bpl.n	8003d04 <__swrite+0x1e>
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f000 f868 	bl	8003dd4 <_lseek_r>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	4632      	mov	r2, r6
 8003d12:	463b      	mov	r3, r7
 8003d14:	4628      	mov	r0, r5
 8003d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1a:	f000 b817 	b.w	8003d4c <_write_r>

08003d1e <__sseek>:
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	460c      	mov	r4, r1
 8003d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d26:	f000 f855 	bl	8003dd4 <_lseek_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	bf15      	itete	ne
 8003d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d3a:	81a3      	strheq	r3, [r4, #12]
 8003d3c:	bf18      	it	ne
 8003d3e:	81a3      	strhne	r3, [r4, #12]
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <__sclose>:
 8003d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d46:	f000 b813 	b.w	8003d70 <_close_r>
	...

08003d4c <_write_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d07      	ldr	r5, [pc, #28]	; (8003d6c <_write_r+0x20>)
 8003d50:	4604      	mov	r4, r0
 8003d52:	4608      	mov	r0, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	602a      	str	r2, [r5, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7fc fe49 	bl	80009f2 <_write>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_write_r+0x1e>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_write_r+0x1e>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	200004e8 	.word	0x200004e8

08003d70 <_close_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_close_r+0x1c>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	f7fc fe55 	bl	8000a2a <_close>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_close_r+0x1a>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_close_r+0x1a>
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	200004e8 	.word	0x200004e8

08003d90 <_fstat_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d07      	ldr	r5, [pc, #28]	; (8003db0 <_fstat_r+0x20>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	f7fc fe50 	bl	8000a42 <_fstat>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d102      	bne.n	8003dac <_fstat_r+0x1c>
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	b103      	cbz	r3, 8003dac <_fstat_r+0x1c>
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	200004e8 	.word	0x200004e8

08003db4 <_isatty_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4d06      	ldr	r5, [pc, #24]	; (8003dd0 <_isatty_r+0x1c>)
 8003db8:	2300      	movs	r3, #0
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	f7fc fe4f 	bl	8000a62 <_isatty>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_isatty_r+0x1a>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_isatty_r+0x1a>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	200004e8 	.word	0x200004e8

08003dd4 <_lseek_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	; (8003df4 <_lseek_r+0x20>)
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fc fe48 	bl	8000a78 <_lseek>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_lseek_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_lseek_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	200004e8 	.word	0x200004e8

08003df8 <__malloc_lock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__malloc_lock+0x8>)
 8003dfa:	f7ff bb1d 	b.w	8003438 <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200004dc 	.word	0x200004dc

08003e04 <__malloc_unlock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__malloc_unlock+0x8>)
 8003e06:	f7ff bb18 	b.w	800343a <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200004dc 	.word	0x200004dc

08003e10 <_read_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d07      	ldr	r5, [pc, #28]	; (8003e30 <_read_r+0x20>)
 8003e14:	4604      	mov	r4, r0
 8003e16:	4608      	mov	r0, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	602a      	str	r2, [r5, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7fc fdca 	bl	80009b8 <_read>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_read_r+0x1e>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_read_r+0x1e>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	200004e8 	.word	0x200004e8

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
