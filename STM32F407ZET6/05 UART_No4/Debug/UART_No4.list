
UART_No4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004160  08004160  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000898  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000908  20000908  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009da3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de8  00000000  00000000  00029e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035f9  00000000  00000000  0002cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4dd  00000000  00000000  000301b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c413f  00000000  00000000  0003c68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001007cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000272c  00000000  00000000  00100820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004088 	.word	0x08004088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004088 	.word	0x08004088

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <fifo_register>:
		    size: Size of buff
  * @retval none
*/
void fifo_register(fifo_t *pfifo, uint8_t *pfifo_buf, uint32_t size,
                   lock_fun lock, lock_fun unlock)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	603b      	str	r3, [r7, #0]
	pfifo->buf_size = size;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	605a      	str	r2, [r3, #4]
	pfifo->buf 	= pfifo_buf;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	601a      	str	r2, [r3, #0]
	pfifo->pwrite = pfifo->buf;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
	pfifo->pread  = pfifo->buf;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	611a      	str	r2, [r3, #16]
    pfifo->occupy_size = 0;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
    pfifo->lock = lock;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	615a      	str	r2, [r3, #20]
    pfifo->unlock = unlock;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	69ba      	ldr	r2, [r7, #24]
 80005ae:	619a      	str	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <fifo_get_occupy_size>:
  * @brief  Gets the used size of the fifo
  * @param  pfifo: fifo structure pointer
  * @retval Used size of fifo
*/
uint32_t fifo_get_occupy_size(fifo_t *pfifo)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if(pfifo==NULL)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <fifo_get_occupy_size+0x12>
		return 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e001      	b.n	80005d2 <fifo_get_occupy_size+0x16>

	return  pfifo->occupy_size;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <fifo_get_free_size>:
  * @brief  Gets the free size of the fifo
  * @param  pfifo: fifo structure pointer
  * @retval Free size of fifo
*/
uint32_t fifo_get_free_size(fifo_t *pfifo)
{
 80005de:	b590      	push	{r4, r7, lr}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	uint32_t size;

	if(pfifo==NULL)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <fifo_get_free_size+0x12>
		return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e008      	b.n	8000602 <fifo_get_free_size+0x24>

    size = pfifo->buf_size - fifo_get_occupy_size(pfifo);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685c      	ldr	r4, [r3, #4]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe1 	bl	80005bc <fifo_get_occupy_size>
 80005fa:	4603      	mov	r3, r0
 80005fc:	1ae3      	subs	r3, r4, r3
 80005fe:	60fb      	str	r3, [r7, #12]

	return size;
 8000600:	68fb      	ldr	r3, [r7, #12]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <fifo_write>:
		    pbuf: Write of data
		    size: Size of Write data
  * @retval Actual write size
*/
uint32_t fifo_write(fifo_t *pfifo, const uint8_t *pbuf, uint32_t size)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
	uint32_t w_size= 0,free_size = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]

	if((size==0) || (pfifo==NULL) || (pbuf==NULL))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d005      	beq.n	8000630 <fifo_write+0x26>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <fifo_write+0x26>
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <fifo_write+0x2a>
	{
		return 0;
 8000630:	2300      	movs	r3, #0
 8000632:	e041      	b.n	80006b8 <fifo_write+0xae>
		printf("fifo_write_err: 0 \r\n");
	}

    free_size = fifo_get_free_size(pfifo);
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff ffd2 	bl	80005de <fifo_get_free_size>
 800063a:	6138      	str	r0, [r7, #16]
    if(free_size == 0)
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <fifo_write+0x3c>
    {
        return 0;
 8000642:	2300      	movs	r3, #0
 8000644:	e038      	b.n	80006b8 <fifo_write+0xae>
        printf("fifo_write_err: 1 \r\n");
    }

    if(free_size < size)
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	d201      	bcs.n	8000652 <fifo_write+0x48>
    {
        size = free_size;
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	607b      	str	r3, [r7, #4]
    }
	w_size = size;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	617b      	str	r3, [r7, #20]
    if(pfifo->lock != NULL)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d01f      	beq.n	800069e <fifo_write+0x94>
    {
        pfifo->lock();
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4798      	blx	r3
    }
	while(w_size-- > 0)
 8000664:	e01b      	b.n	800069e <fifo_write+0x94>
	{
		*pfifo->pwrite++ = *pbuf++;
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	1c53      	adds	r3, r2, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	1c58      	adds	r0, r3, #1
 8000672:	68f9      	ldr	r1, [r7, #12]
 8000674:	60c8      	str	r0, [r1, #12]
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	701a      	strb	r2, [r3, #0]
		if (pfifo->pwrite >= (pfifo->buf + pfifo->buf_size))
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	440b      	add	r3, r1
 8000688:	429a      	cmp	r2, r3
 800068a:	d303      	bcc.n	8000694 <fifo_write+0x8a>
		{
			pfifo->pwrite = pfifo->buf;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	60da      	str	r2, [r3, #12]
		}
        pfifo->occupy_size++;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	609a      	str	r2, [r3, #8]
	while(w_size-- > 0)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	617a      	str	r2, [r7, #20]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1de      	bne.n	8000666 <fifo_write+0x5c>
	}
    if(pfifo->unlock != NULL)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <fifo_write+0xac>
    {
        pfifo->unlock();
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4798      	blx	r3
    }
	return size;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <fifo_read>:
		    pbuf:  read of data
		    size: Size of data
  * @retval Actual read size
*/
uint32_t fifo_read(fifo_t *pfifo, uint8_t *pbuf, uint32_t size)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	uint32_t r_size = 0,occupy_size = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]

	if ((size==0) || (pfifo==NULL) || (pbuf==NULL))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <fifo_read+0x26>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <fifo_read+0x26>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <fifo_read+0x2a>
	{
		return 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e041      	b.n	800076e <fifo_read+0xae>
		printf("fifo_read_err: 0 \r\n");
	}

    occupy_size = fifo_get_occupy_size(pfifo);
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff66 	bl	80005bc <fifo_get_occupy_size>
 80006f0:	6138      	str	r0, [r7, #16]
    if(occupy_size == 0)
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <fifo_read+0x3c>
    {
        return 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e038      	b.n	800076e <fifo_read+0xae>
        printf("fifo_read_err: 1 \r\n");
    }

    if(occupy_size < size)
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d201      	bcs.n	8000708 <fifo_read+0x48>
    {
        size = occupy_size;
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	607b      	str	r3, [r7, #4]
    }
    if (pfifo->lock != NULL)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <fifo_read+0x56>
    {
        pfifo->lock();
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4798      	blx	r3
    }
	r_size = size;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	617b      	str	r3, [r7, #20]
	while(r_size-- > 0)
 800071a:	e01b      	b.n	8000754 <fifo_read+0x94>
	{
		*pbuf++ = *pfifo->pread++;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	691a      	ldr	r2, [r3, #16]
 8000720:	1c51      	adds	r1, r2, #1
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6119      	str	r1, [r3, #16]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1c59      	adds	r1, r3, #1
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	701a      	strb	r2, [r3, #0]
		if (pfifo->pread >= (pfifo->buf + pfifo->buf_size))
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	691a      	ldr	r2, [r3, #16]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6819      	ldr	r1, [r3, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	440b      	add	r3, r1
 800073e:	429a      	cmp	r2, r3
 8000740:	d303      	bcc.n	800074a <fifo_read+0x8a>
		{
			pfifo->pread = pfifo->buf;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	611a      	str	r2, [r3, #16]
		}
        pfifo->occupy_size--;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	609a      	str	r2, [r3, #8]
	while(r_size-- > 0)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	617a      	str	r2, [r7, #20]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1de      	bne.n	800071c <fifo_read+0x5c>
	}
    if (pfifo->unlock != NULL)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <fifo_read+0xac>
    {
        pfifo->unlock();
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4798      	blx	r3
    }
	return size;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000780:	1d39      	adds	r1, r7, #4
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	2201      	movs	r2, #1
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <__io_putchar+0x20>)
 800078a:	f001 fc80 	bl	800208e <HAL_UART_Transmit>

	return ch;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200008b0 	.word	0x200008b0

0800079c <__irq_lock>:


uart_t debug;

static void __irq_lock(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
	__disable_irq();
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <__irq_unlock>:

static void __irq_unlock(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80007b2:	b662      	cpsie	i
}
 80007b4:	bf00      	nop
	__enable_irq();
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <bsp_uart_init>:


void bsp_uart_init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	/*Initialize hardware */

	/*Create one fifo */
	fifo_register(&debug.rx_fifo, debug.fifo_buff, FIFO_RX_LEN, __irq_lock, __irq_unlock);
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <bsp_uart_init+0x24>)
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <bsp_uart_init+0x28>)
 80007cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <bsp_uart_init+0x2c>)
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <bsp_uart_init+0x30>)
 80007d4:	f7ff fece 	bl	8000574 <fifo_register>

	/*Clear receive buffer*/
	bsp_uart_rx_clear(&debug);
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <bsp_uart_init+0x34>)
 80007da:	f000 f80d 	bl	80007f8 <bsp_uart_rx_clear>
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	080007af 	.word	0x080007af
 80007e8:	0800079d 	.word	0x0800079d
 80007ec:	200004ac 	.word	0x200004ac
 80007f0:	20000490 	.word	0x20000490
 80007f4:	2000008c 	.word	0x2000008c

080007f8 <bsp_uart_rx_clear>:

void bsp_uart_rx_clear(uart_t *uart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
	__disable_irq();
	memset(uart->rx_buff, 0x00, RX_LEN);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3304      	adds	r3, #4
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fc2e 	bl	8003070 <memset>
	uart->rx_finish = false;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	uart->rx_count = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8000820:	b662      	cpsie	i
}
 8000822:	bf00      	nop
	__enable_irq();
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <USER_UART_IRQHandler>:


void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	if(huart->Instance == USART3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <USER_UART_IRQHandler+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d134      	bne.n	80008a8 <USER_UART_IRQHandler+0x7c>
	{
		if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE))	//receive 1 byte
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <USER_UART_IRQHandler+0x88>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	2b20      	cmp	r3, #32
 800084a:	d111      	bne.n	8000870 <USER_UART_IRQHandler+0x44>
		{
			__HAL_UART_CLEAR_FLAG(&huart3,UART_FLAG_RXNE);	//Clears the UART RXNE pending flag.
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <USER_UART_IRQHandler+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f06f 0220 	mvn.w	r2, #32
 8000854:	601a      	str	r2, [r3, #0]
				{
					debug.rx_count = RX_LEN - 1;	// truncation
				}
			}
		*/
			byte = huart->Instance->DR;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
			fifo_write(&debug.rx_fifo, &byte , 1);	//receive 1 byte
 8000860:	f107 030f 	add.w	r3, r7, #15
 8000864:	2201      	movs	r2, #1
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <USER_UART_IRQHandler+0x8c>)
 800086a:	f7ff fece 	bl	800060a <fifo_write>
		*/
			debug.rx_finish = true;
			debug.rx_count = fifo_get_occupy_size(&debug.rx_fifo);
		}
	}
}
 800086e:	e01b      	b.n	80008a8 <USER_UART_IRQHandler+0x7c>
		else if(RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))	//receive 1 packet
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <USER_UART_IRQHandler+0x88>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b10      	cmp	r3, #16
 800087c:	d114      	bne.n	80008a8 <USER_UART_IRQHandler+0x7c>
			__HAL_UART_CLEAR_IDLEFLAG(&huart3);		//Clears the UART IDLE pending flag.
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <USER_UART_IRQHandler+0x88>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <USER_UART_IRQHandler+0x88>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
			debug.rx_finish = true;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <USER_UART_IRQHandler+0x90>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
			debug.rx_count = fifo_get_occupy_size(&debug.rx_fifo);
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <USER_UART_IRQHandler+0x8c>)
 800089c:	f7ff fe8e 	bl	80005bc <fifo_get_occupy_size>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <USER_UART_IRQHandler+0x90>)
 80008a6:	805a      	strh	r2, [r3, #2]
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004800 	.word	0x40004800
 80008b4:	200008b0 	.word	0x200008b0
 80008b8:	20000490 	.word	0x20000490
 80008bc:	2000008c 	.word	0x2000008c

080008c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b48      	ldr	r3, [pc, #288]	; (80009fc <MX_GPIO_Init+0x13c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a47      	ldr	r2, [pc, #284]	; (80009fc <MX_GPIO_Init+0x13c>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <MX_GPIO_Init+0x13c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <MX_GPIO_Init+0x13c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <MX_GPIO_Init+0x13c>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a39      	ldr	r2, [pc, #228]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a32      	ldr	r2, [pc, #200]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <MX_GPIO_Init+0x13c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_GPIO_Init+0x13c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <MX_GPIO_Init+0x13c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0x13c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <MX_GPIO_Init+0x140>)
 8000984:	f000 fe84 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <MX_GPIO_Init+0x144>)
 8000990:	f000 fe7e 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power5V_GPIO_Port, Power5V_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x148>)
 800099a:	f000 fe79 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_EN_Pin;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_EN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0x140>)
 80009b6:	f000 fccf 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Beep_Pin;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_GPIO_Init+0x144>)
 80009d4:	f000 fcc0 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power5V_Pin;
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power5V_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x148>)
 80009f0:	f000 fcb2 	bl	8001358 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021400 	.word	0x40021400
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fa68 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f82c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f7ff ff52 	bl	80008c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a1c:	f000 f9ac 	bl	8000d78 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  bsp_uart_init();
 8000a20:	f7ff fece 	bl	80007c0 <bsp_uart_init>

  printf("OK\r\n");
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <main+0x50>)
 8000a26:	f002 fbb1 	bl	800318c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(debug.rx_finish ==  true)
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <main+0x54>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d010      	beq.n	8000a54 <main+0x48>
	  {
		  debug.rx_finish = false;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <main+0x54>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]

		  fifo_read(&debug.rx_fifo, debug.rx_buff, debug.rx_count );
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <main+0x54>)
 8000a3a:	885b      	ldrh	r3, [r3, #2]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4909      	ldr	r1, [pc, #36]	; (8000a64 <main+0x58>)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <main+0x5c>)
 8000a42:	f7ff fe3d 	bl	80006c0 <fifo_read>

		  printf("%s",debug.rx_buff);
 8000a46:	4907      	ldr	r1, [pc, #28]	; (8000a64 <main+0x58>)
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <main+0x60>)
 8000a4a:	f002 fb19 	bl	8003080 <iprintf>

		  bsp_uart_rx_clear(&debug);
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <main+0x54>)
 8000a50:	f7ff fed2 	bl	80007f8 <bsp_uart_rx_clear>

	  }
	  HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f000 fab7 	bl	8000fc8 <HAL_Delay>
	  if(debug.rx_finish ==  true)
 8000a5a:	e7e6      	b.n	8000a2a <main+0x1e>
 8000a5c:	080040a0 	.word	0x080040a0
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	20000090 	.word	0x20000090
 8000a68:	20000490 	.word	0x20000490
 8000a6c:	080040a4 	.word	0x080040a4

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 faf6 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	; 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fde5 	bl	80016c4 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f820 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f846 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f809 	bl	8000b44 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f9cc 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <USART3_IRQHandler+0x14>)
 8000bfa:	f001 fadb 	bl	80021b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  USER_UART_IRQHandler(&huart3);
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART3_IRQHandler+0x14>)
 8000c00:	f7ff fe14 	bl	800082c <USER_UART_IRQHandler>

  /* USER CODE END USART3_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200008b0 	.word	0x200008b0

08000c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
  }

  return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd89 	bl	8000778 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
  }
  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_isatty>:

int _isatty(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f002 f980 	bl	800301c <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	200008ac 	.word	0x200008ac
 8000d50:	20000908 	.word	0x20000908

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART3_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000db0:	f001 f920 	bl	8001ff4 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f7ff fec3 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200008b0 	.word	0x200008b0
 8000dc8:	40004800 	.word	0x40004800

08000dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <HAL_UART_MspInit+0xb4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d144      	bne.n	8000e78 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e44:	f000 fa88 	bl	8001358 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2027      	movs	r0, #39	; 0x27
 8000e4e:	f000 f9ba 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e52:	2027      	movs	r0, #39	; 0x27
 8000e54:	f000 f9d3 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0210 	orr.w	r2, r2, #16
 8000e76:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	200008b0 	.word	0x200008b0

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ff4b 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 f8b3 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fda3 	bl	8000a0c <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed4:	08004168 	.word	0x08004168
  ldr r2, =_sbss
 8000ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000edc:	20000908 	.word	0x20000908

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f94f 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe1a 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f967 	bl	800121a <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f92f 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200008f4 	.word	0x200008f4

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200008f4 	.word	0x200008f4

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff feb6 	bl	8000fb0 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d008      	beq.n	8001264 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e052      	b.n	800130a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0216 	bic.w	r2, r2, #22
 8001272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001282:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <HAL_DMA_Abort+0x62>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0208 	bic.w	r2, r2, #8
 80012a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b4:	e013      	b.n	80012de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b6:	f7ff fe7b 	bl	8000fb0 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d90c      	bls.n	80012de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2220      	movs	r2, #32
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e015      	b.n	800130a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e4      	bne.n	80012b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	223f      	movs	r2, #63	; 0x3f
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d004      	beq.n	8001330 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e00c      	b.n	800134a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2205      	movs	r2, #5
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e16b      	b.n	800164c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 815a 	bne.w	8001646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80b4 	beq.w	8001646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <HAL_GPIO_Init+0x30c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a5f      	ldr	r2, [pc, #380]	; (8001664 <HAL_GPIO_Init+0x30c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_GPIO_Init+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a5b      	ldr	r2, [pc, #364]	; (8001668 <HAL_GPIO_Init+0x310>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_GPIO_Init+0x314>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x226>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x318>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d025      	beq.n	800157a <HAL_GPIO_Init+0x222>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a50      	ldr	r2, [pc, #320]	; (8001674 <HAL_GPIO_Init+0x31c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x21e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4f      	ldr	r2, [pc, #316]	; (8001678 <HAL_GPIO_Init+0x320>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x21a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4e      	ldr	r2, [pc, #312]	; (800167c <HAL_GPIO_Init+0x324>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x216>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4d      	ldr	r2, [pc, #308]	; (8001680 <HAL_GPIO_Init+0x328>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x212>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x32c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <HAL_GPIO_Init+0x330>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x20a>
 800155e:	2307      	movs	r3, #7
 8001560:	e00e      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001562:	2308      	movs	r3, #8
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001566:	2306      	movs	r3, #6
 8001568:	e00a      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800156a:	2305      	movs	r3, #5
 800156c:	e008      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800156e:	2304      	movs	r3, #4
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001572:	2303      	movs	r3, #3
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x228>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x228>
 800157e:	2300      	movs	r3, #0
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001590:	4935      	ldr	r1, [pc, #212]	; (8001668 <HAL_GPIO_Init+0x310>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_GPIO_Init+0x334>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a32      	ldr	r2, [pc, #200]	; (800168c <HAL_GPIO_Init+0x334>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_GPIO_Init+0x334>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_GPIO_Init+0x334>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_GPIO_Init+0x334>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_GPIO_Init+0x334>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_GPIO_Init+0x334>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_GPIO_Init+0x334>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	f67f ae90 	bls.w	8001374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40021400 	.word	0x40021400
 8001684:	40021800 	.word	0x40021800
 8001688:	40021c00 	.word	0x40021c00
 800168c:	40013c00 	.word	0x40013c00

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ac:	e003      	b.n	80016b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e267      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d112      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e242      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a75      	ldr	r2, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6c      	ldr	r2, [pc, #432]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b69      	ldr	r3, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a65      	ldr	r2, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc18 	bl	8000fb0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc14 	bl	8000fb0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e207      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc04 	bl	8000fb0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc00 	bl	8000fb0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1f3      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fbb9 	bl	8000fb0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fbb5 	bl	8000fb0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4925      	ldr	r1, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x244>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb98 	bl	8000fb0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fb94 	bl	8000fb0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e187      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb78 	bl	8000fb0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb74 	bl	8000fb0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e167      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x240>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
 80018e2:	e01b      	b.n	800191c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_OscConfig+0x248>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb61 	bl	8000fb0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	e00e      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb5d 	bl	8000fb0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d907      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e150      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001904:	40023800 	.word	0x40023800
 8001908:	42470000 	.word	0x42470000
 800190c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ea      	bne.n	80018f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8097 	beq.w	8001a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb1d 	bl	8000fb0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fb19 	bl	8000fb0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e10c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x474>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x2ea>
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x30c>
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x324>
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d015      	beq.n	8001a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fade 	bl	8000fb0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fada 	bl	8000fb0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0cb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ee      	beq.n	80019f8 <HAL_RCC_OscConfig+0x334>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fac8 	bl	8000fb0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fac4 	bl	8000fb0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b5      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ee      	bne.n	8001a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a1 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d05c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d141      	bne.n	8001afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fa98 	bl	8000fb0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fa94 	bl	8000fb0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa6d 	bl	8000fb0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fa69 	bl	8000fb0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e05c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x416>
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa56 	bl	8000fb0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fa52 	bl	8000fb0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e045      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x444>
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e038      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f984 	bl	8000fb0 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f980 	bl	8000fb0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f8e4 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	080040a8 	.word	0x080040a8
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b094      	sub	sp, #80	; 0x50
 8001d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d00d      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	f200 80e1 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x3a>
 8001db2:	e0db      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001db8:	e0db      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e0d8      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d063      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8001de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
 8001dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001df2:	4622      	mov	r2, r4
 8001df4:	462b      	mov	r3, r5
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	1a51      	subs	r1, r2, r1
 8001e0e:	6139      	str	r1, [r7, #16]
 8001e10:	4629      	mov	r1, r5
 8001e12:	eb63 0301 	sbc.w	r3, r3, r1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e24:	4659      	mov	r1, fp
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	4651      	mov	r1, sl
 8001e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2e:	4651      	mov	r1, sl
 8001e30:	018a      	lsls	r2, r1, #6
 8001e32:	4651      	mov	r1, sl
 8001e34:	ebb2 0801 	subs.w	r8, r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb18 0303 	adds.w	r3, r8, r3
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	462b      	mov	r3, r5
 8001e60:	eb49 0303 	adc.w	r3, r9, r3
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e72:	4629      	mov	r1, r5
 8001e74:	024b      	lsls	r3, r1, #9
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	024a      	lsls	r2, r1, #9
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e90:	f7fe f9ee 	bl	8000270 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e9c:	e058      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb8:	4642      	mov	r2, r8
 8001eba:	464b      	mov	r3, r9
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	0159      	lsls	r1, r3, #5
 8001ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eca:	0150      	lsls	r0, r2, #5
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	00eb      	lsls	r3, r5, #3
 8001f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f06:	00e2      	lsls	r2, r4, #3
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	18e3      	adds	r3, r4, r3
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	464b      	mov	r3, r9
 8001f14:	eb45 0303 	adc.w	r3, r5, r3
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f26:	4629      	mov	r1, r5
 8001f28:	028b      	lsls	r3, r1, #10
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f30:	4621      	mov	r1, r4
 8001f32:	028a      	lsls	r2, r1, #10
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	61fa      	str	r2, [r7, #28]
 8001f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f44:	f7fe f994 	bl	8000270 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3750      	adds	r7, #80	; 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	080040b8 	.word	0x080040b8

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0b5b      	lsrs	r3, r3, #13
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	080040b8 	.word	0x080040b8

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e03f      	b.n	8002086 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fed6 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fd7b 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b08a      	sub	sp, #40	; 0x28
 8002092:	af02      	add	r7, sp, #8
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d17c      	bne.n	80021a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_UART_Transmit+0x2c>
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e075      	b.n	80021aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_UART_Transmit+0x3e>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e06e      	b.n	80021aa <HAL_UART_Transmit+0x11c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2221      	movs	r2, #33	; 0x21
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e2:	f7fe ff65 	bl	8000fb0 <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d108      	bne.n	8002110 <HAL_UART_Transmit+0x82>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	e003      	b.n	8002118 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002120:	e02a      	b.n	8002178 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 faf9 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e036      	b.n	80021aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10b      	bne.n	800215a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	3302      	adds	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e007      	b.n	800216a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3301      	adds	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1cf      	bne.n	8002122 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fac9 	bl	8002724 <UART_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e006      	b.n	80021aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ba      	sub	sp, #232	; 0xe8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fbd3 	bl	80029be <UART_Receive_IT>
      return;
 8002218:	e256      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800221a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80de 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
 8002224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80d1 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
 800226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 81ed 	beq.w	80026be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb5e 	bl	80029be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_UART_IRQHandler+0x17a>
 8002326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04f      	beq.n	80023ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa66 	bl	8002800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d141      	bne.n	80023c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3314      	adds	r3, #20
 800236a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800236e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800237a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d9      	bne.n	8002342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_UART_IRQHandler+0x3dc>)
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ffb5 	bl	8001312 <HAL_DMA_Abort_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e00e      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f99a 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	e00a      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f996 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e006      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f992 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023da:	e170      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	bf00      	nop
    return;
 80023de:	e16e      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 814a 	bne.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8143 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 813c 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	f040 80b4 	bne.w	8002594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8140 	beq.w	80026c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 8139 	bcs.w	80026c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	f000 8088 	beq.w	8002576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800249e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1d9      	bne.n	8002466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	e853 3f00 	ldrex	r3, [r3]
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e1      	bne.n	80024b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e3      	bne.n	80024ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002546:	f023 0310 	bic.w	r3, r3, #16
 800254a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002558:	65ba      	str	r2, [r7, #88]	; 0x58
 800255a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800255e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002560:	e841 2300 	strex	r3, r2, [r1]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e3      	bne.n	8002534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fe5e 	bl	8001232 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257e:	b29b      	uxth	r3, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8c0 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800258c:	e099      	b.n	80026c2 <HAL_UART_IRQHandler+0x50e>
 800258e:	bf00      	nop
 8002590:	080028c7 	.word	0x080028c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 808b 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8086 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025de:	647a      	str	r2, [r7, #68]	; 0x44
 80025e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	623b      	str	r3, [r7, #32]
   return(result);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60fb      	str	r3, [r7, #12]
   return(result);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800265c:	61fa      	str	r2, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	617b      	str	r3, [r7, #20]
   return(result);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f848 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800267c:	e023      	b.n	80026c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f929 	bl	80028ee <UART_Transmit_IT>
    return;
 800269c:	e014      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00e      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
 80026aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f969 	bl	800298e <UART_EndTransmit_IT>
    return;
 80026bc:	e004      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    return;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c6:	bf00      	nop
  }
}
 80026c8:	37e8      	adds	r7, #232	; 0xe8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop

080026d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	; 0x40
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002734:	e050      	b.n	80027d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d04c      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800273e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x30>
 8002744:	f7fe fc34 	bl	8000fb0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002750:	429a      	cmp	r2, r3
 8002752:	d241      	bcs.n	80027d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002774:	637a      	str	r2, [r7, #52]	; 0x34
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800277a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e5      	bne.n	8002754 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3314      	adds	r3, #20
 800278e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	e853 3f00 	ldrex	r3, [r3]
 8002796:	613b      	str	r3, [r7, #16]
   return(result);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027a8:	623a      	str	r2, [r7, #32]
 80027aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	69f9      	ldr	r1, [r7, #28]
 80027ae:	6a3a      	ldr	r2, [r7, #32]
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e00f      	b.n	80027f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d09f      	beq.n	8002736 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3740      	adds	r7, #64	; 0x40
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002800:	b480      	push	{r7}
 8002802:	b095      	sub	sp, #84	; 0x54
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	e853 3f00 	ldrex	r3, [r3]
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002828:	643a      	str	r2, [r7, #64]	; 0x40
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800282e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002830:	e841 2300 	strex	r3, r2, [r1]
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e5      	bne.n	8002808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	61fb      	str	r3, [r7, #28]
   return(result);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800285c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e5      	bne.n	800283c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	2b01      	cmp	r3, #1
 8002876:	d119      	bne.n	80028ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	60bb      	str	r3, [r7, #8]
   return(result);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f023 0310 	bic.w	r3, r3, #16
 800288e:	647b      	str	r3, [r7, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002898:	61ba      	str	r2, [r7, #24]
 800289a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	613b      	str	r3, [r7, #16]
   return(result);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028ba:	bf00      	nop
 80028bc:	3754      	adds	r7, #84	; 0x54
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff ff09 	bl	80026f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b21      	cmp	r3, #33	; 0x21
 8002900:	d13e      	bne.n	8002980 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290a:	d114      	bne.n	8002936 <UART_Transmit_IT+0x48>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d110      	bne.n	8002936 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002928:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	621a      	str	r2, [r3, #32]
 8002934:	e008      	b.n	8002948 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6211      	str	r1, [r2, #32]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fe8e 	bl	80026d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08c      	sub	sp, #48	; 0x30
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b22      	cmp	r3, #34	; 0x22
 80029d0:	f040 80ab 	bne.w	8002b2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d117      	bne.n	8002a0e <UART_Receive_IT+0x50>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	1c9a      	adds	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a0c:	e026      	b.n	8002a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d007      	beq.n	8002a32 <UART_Receive_IT+0x74>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <UART_Receive_IT+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e008      	b.n	8002a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d15a      	bne.n	8002b26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0220 	bic.w	r2, r2, #32
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d135      	bne.n	8002b1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f023 0310 	bic.w	r3, r3, #16
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	623a      	str	r2, [r7, #32]
 8002ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	69f9      	ldr	r1, [r7, #28]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e5      	bne.n	8002ab6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d10a      	bne.n	8002b0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fdf9 	bl	800270c <HAL_UARTEx_RxEventCallback>
 8002b1a:	e002      	b.n	8002b22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fde1 	bl	80026e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e002      	b.n	8002b2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3730      	adds	r7, #48	; 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c0      	sub	sp, #256	; 0x100
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	ea40 0301 	orr.w	r3, r0, r1
 8002b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b8c:	f021 010c 	bic.w	r1, r1, #12
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	6999      	ldr	r1, [r3, #24]
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	ea40 0301 	orr.w	r3, r0, r1
 8002bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b8f      	ldr	r3, [pc, #572]	; (8002e00 <UART_SetConfig+0x2cc>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d005      	beq.n	8002bd4 <UART_SetConfig+0xa0>
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b8d      	ldr	r3, [pc, #564]	; (8002e04 <UART_SetConfig+0x2d0>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d104      	bne.n	8002bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff f9fa 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bdc:	e003      	b.n	8002be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff f9e1 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf0:	f040 810c 	bne.w	8002e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c16:	4621      	mov	r1, r4
 8002c18:	eb12 0801 	adds.w	r8, r2, r1
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb43 0901 	adc.w	r9, r3, r1
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c36:	4690      	mov	r8, r2
 8002c38:	4699      	mov	r9, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	eb18 0303 	adds.w	r3, r8, r3
 8002c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c44:	462b      	mov	r3, r5
 8002c46:	eb49 0303 	adc.w	r3, r9, r3
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c62:	460b      	mov	r3, r1
 8002c64:	18db      	adds	r3, r3, r3
 8002c66:	653b      	str	r3, [r7, #80]	; 0x50
 8002c68:	4613      	mov	r3, r2
 8002c6a:	eb42 0303 	adc.w	r3, r2, r3
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c78:	f7fd fafa 	bl	8000270 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cac:	4641      	mov	r1, r8
 8002cae:	eb12 0a01 	adds.w	sl, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ccc:	4692      	mov	sl, r2
 8002cce:	469b      	mov	fp, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	18db      	adds	r3, r3, r3
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfe:	4613      	mov	r3, r2
 8002d00:	eb42 0303 	adc.w	r3, r2, r3
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
 8002d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d0e:	f7fd faaf 	bl	8000270 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2264      	movs	r2, #100	; 0x64
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	1acb      	subs	r3, r1, r3
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002d30:	fba3 2302 	umull	r2, r3, r3, r2
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6339      	str	r1, [r7, #48]	; 0x30
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d94:	464b      	mov	r3, r9
 8002d96:	460a      	mov	r2, r1
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002db4:	460b      	mov	r3, r1
 8002db6:	18db      	adds	r3, r3, r3
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	4613      	mov	r3, r2
 8002dbc:	eb42 0303 	adc.w	r3, r2, r3
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dca:	f7fd fa51 	bl	8000270 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 0207 	and.w	r2, r3, #7
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4422      	add	r2, r4
 8002dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dfc:	e105      	b.n	800300a <UART_SetConfig+0x4d6>
 8002dfe:	bf00      	nop
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e1e:	4642      	mov	r2, r8
 8002e20:	464b      	mov	r3, r9
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	6239      	str	r1, [r7, #32]
 8002e26:	415b      	adcs	r3, r3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e2e:	4641      	mov	r1, r8
 8002e30:	1854      	adds	r4, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb43 0501 	adc.w	r5, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	00eb      	lsls	r3, r5, #3
 8002e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e46:	00e2      	lsls	r2, r4, #3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	18e3      	adds	r3, r4, r3
 8002e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e54:	464b      	mov	r3, r9
 8002e56:	eb45 0303 	adc.w	r3, r5, r3
 8002e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e84:	4621      	mov	r1, r4
 8002e86:	008a      	lsls	r2, r1, #2
 8002e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e8c:	f7fd f9f0 	bl	8000270 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <UART_SetConfig+0x4e4>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011c      	lsls	r4, r3, #4
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	61b9      	str	r1, [r7, #24]
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6139      	str	r1, [r7, #16]
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f18:	4649      	mov	r1, r9
 8002f1a:	008b      	lsls	r3, r1, #2
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f22:	4641      	mov	r1, r8
 8002f24:	008a      	lsls	r2, r1, #2
 8002f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f2a:	f7fd f9a1 	bl	8000270 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <UART_SetConfig+0x4e4>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a34      	ldr	r2, [pc, #208]	; (8003018 <UART_SetConfig+0x4e4>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f52:	441c      	add	r4, r3
 8002f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f58:	2200      	movs	r2, #0
 8002f5a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f5c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f62:	4642      	mov	r2, r8
 8002f64:	464b      	mov	r3, r9
 8002f66:	1891      	adds	r1, r2, r2
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	415b      	adcs	r3, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f72:	4641      	mov	r1, r8
 8002f74:	1851      	adds	r1, r2, r1
 8002f76:	6039      	str	r1, [r7, #0]
 8002f78:	4649      	mov	r1, r9
 8002f7a:	414b      	adcs	r3, r1
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	00cb      	lsls	r3, r1, #3
 8002f8e:	4651      	mov	r1, sl
 8002f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f94:	4651      	mov	r1, sl
 8002f96:	00ca      	lsls	r2, r1, #3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb8:	667a      	str	r2, [r7, #100]	; 0x64
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	008b      	lsls	r3, r1, #2
 8002fca:	4641      	mov	r1, r8
 8002fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	008a      	lsls	r2, r1, #2
 8002fd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fd8:	f7fd f94a 	bl	8000270 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <UART_SetConfig+0x4e4>)
 8002fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2164      	movs	r1, #100	; 0x64
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	3332      	adds	r3, #50	; 0x32
 8002ff4:	4a08      	ldr	r2, [pc, #32]	; (8003018 <UART_SetConfig+0x4e4>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4422      	add	r2, r4
 8003008:	609a      	str	r2, [r3, #8]
}
 800300a:	bf00      	nop
 800300c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003010:	46bd      	mov	sp, r7
 8003012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003016:	bf00      	nop
 8003018:	51eb851f 	.word	0x51eb851f

0800301c <__errno>:
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <__errno+0x8>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000000c 	.word	0x2000000c

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4d0d      	ldr	r5, [pc, #52]	; (8003060 <__libc_init_array+0x38>)
 800302c:	4c0d      	ldr	r4, [pc, #52]	; (8003064 <__libc_init_array+0x3c>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	2600      	movs	r6, #0
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	4d0b      	ldr	r5, [pc, #44]	; (8003068 <__libc_init_array+0x40>)
 800303a:	4c0c      	ldr	r4, [pc, #48]	; (800306c <__libc_init_array+0x44>)
 800303c:	f001 f824 	bl	8004088 <_init>
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	2600      	movs	r6, #0
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	08004160 	.word	0x08004160
 8003064:	08004160 	.word	0x08004160
 8003068:	08004160 	.word	0x08004160
 800306c:	08004164 	.word	0x08004164

08003070 <memset>:
 8003070:	4402      	add	r2, r0
 8003072:	4603      	mov	r3, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <iprintf>:
 8003080:	b40f      	push	{r0, r1, r2, r3}
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <iprintf+0x2c>)
 8003084:	b513      	push	{r0, r1, r4, lr}
 8003086:	681c      	ldr	r4, [r3, #0]
 8003088:	b124      	cbz	r4, 8003094 <iprintf+0x14>
 800308a:	69a3      	ldr	r3, [r4, #24]
 800308c:	b913      	cbnz	r3, 8003094 <iprintf+0x14>
 800308e:	4620      	mov	r0, r4
 8003090:	f000 fa5e 	bl	8003550 <__sinit>
 8003094:	ab05      	add	r3, sp, #20
 8003096:	9a04      	ldr	r2, [sp, #16]
 8003098:	68a1      	ldr	r1, [r4, #8]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	4620      	mov	r0, r4
 800309e:	f000 fc67 	bl	8003970 <_vfiprintf_r>
 80030a2:	b002      	add	sp, #8
 80030a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a8:	b004      	add	sp, #16
 80030aa:	4770      	bx	lr
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <_puts_r>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	460e      	mov	r6, r1
 80030b4:	4605      	mov	r5, r0
 80030b6:	b118      	cbz	r0, 80030c0 <_puts_r+0x10>
 80030b8:	6983      	ldr	r3, [r0, #24]
 80030ba:	b90b      	cbnz	r3, 80030c0 <_puts_r+0x10>
 80030bc:	f000 fa48 	bl	8003550 <__sinit>
 80030c0:	69ab      	ldr	r3, [r5, #24]
 80030c2:	68ac      	ldr	r4, [r5, #8]
 80030c4:	b913      	cbnz	r3, 80030cc <_puts_r+0x1c>
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 fa42 	bl	8003550 <__sinit>
 80030cc:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <_puts_r+0xd0>)
 80030ce:	429c      	cmp	r4, r3
 80030d0:	d120      	bne.n	8003114 <_puts_r+0x64>
 80030d2:	686c      	ldr	r4, [r5, #4]
 80030d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030d6:	07db      	lsls	r3, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_puts_r+0x36>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	0598      	lsls	r0, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_puts_r+0x36>
 80030e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e2:	f000 fad3 	bl	800368c <__retarget_lock_acquire_recursive>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	0719      	lsls	r1, r3, #28
 80030ea:	d51d      	bpl.n	8003128 <_puts_r+0x78>
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	b1db      	cbz	r3, 8003128 <_puts_r+0x78>
 80030f0:	3e01      	subs	r6, #1
 80030f2:	68a3      	ldr	r3, [r4, #8]
 80030f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60a3      	str	r3, [r4, #8]
 80030fc:	bb39      	cbnz	r1, 800314e <_puts_r+0x9e>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da38      	bge.n	8003174 <_puts_r+0xc4>
 8003102:	4622      	mov	r2, r4
 8003104:	210a      	movs	r1, #10
 8003106:	4628      	mov	r0, r5
 8003108:	f000 f848 	bl	800319c <__swbuf_r>
 800310c:	3001      	adds	r0, #1
 800310e:	d011      	beq.n	8003134 <_puts_r+0x84>
 8003110:	250a      	movs	r5, #10
 8003112:	e011      	b.n	8003138 <_puts_r+0x88>
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <_puts_r+0xd4>)
 8003116:	429c      	cmp	r4, r3
 8003118:	d101      	bne.n	800311e <_puts_r+0x6e>
 800311a:	68ac      	ldr	r4, [r5, #8]
 800311c:	e7da      	b.n	80030d4 <_puts_r+0x24>
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <_puts_r+0xd8>)
 8003120:	429c      	cmp	r4, r3
 8003122:	bf08      	it	eq
 8003124:	68ec      	ldreq	r4, [r5, #12]
 8003126:	e7d5      	b.n	80030d4 <_puts_r+0x24>
 8003128:	4621      	mov	r1, r4
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f888 	bl	8003240 <__swsetup_r>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0dd      	beq.n	80030f0 <_puts_r+0x40>
 8003134:	f04f 35ff 	mov.w	r5, #4294967295
 8003138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800313a:	07da      	lsls	r2, r3, #31
 800313c:	d405      	bmi.n	800314a <_puts_r+0x9a>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	059b      	lsls	r3, r3, #22
 8003142:	d402      	bmi.n	800314a <_puts_r+0x9a>
 8003144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003146:	f000 faa2 	bl	800368e <__retarget_lock_release_recursive>
 800314a:	4628      	mov	r0, r5
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	2b00      	cmp	r3, #0
 8003150:	da04      	bge.n	800315c <_puts_r+0xac>
 8003152:	69a2      	ldr	r2, [r4, #24]
 8003154:	429a      	cmp	r2, r3
 8003156:	dc06      	bgt.n	8003166 <_puts_r+0xb6>
 8003158:	290a      	cmp	r1, #10
 800315a:	d004      	beq.n	8003166 <_puts_r+0xb6>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	6022      	str	r2, [r4, #0]
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	e7c5      	b.n	80030f2 <_puts_r+0x42>
 8003166:	4622      	mov	r2, r4
 8003168:	4628      	mov	r0, r5
 800316a:	f000 f817 	bl	800319c <__swbuf_r>
 800316e:	3001      	adds	r0, #1
 8003170:	d1bf      	bne.n	80030f2 <_puts_r+0x42>
 8003172:	e7df      	b.n	8003134 <_puts_r+0x84>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	250a      	movs	r5, #10
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6022      	str	r2, [r4, #0]
 800317c:	701d      	strb	r5, [r3, #0]
 800317e:	e7db      	b.n	8003138 <_puts_r+0x88>
 8003180:	080040e4 	.word	0x080040e4
 8003184:	08004104 	.word	0x08004104
 8003188:	080040c4 	.word	0x080040c4

0800318c <puts>:
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <puts+0xc>)
 800318e:	4601      	mov	r1, r0
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	f7ff bf8d 	b.w	80030b0 <_puts_r>
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <__swbuf_r>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	460e      	mov	r6, r1
 80031a0:	4614      	mov	r4, r2
 80031a2:	4605      	mov	r5, r0
 80031a4:	b118      	cbz	r0, 80031ae <__swbuf_r+0x12>
 80031a6:	6983      	ldr	r3, [r0, #24]
 80031a8:	b90b      	cbnz	r3, 80031ae <__swbuf_r+0x12>
 80031aa:	f000 f9d1 	bl	8003550 <__sinit>
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <__swbuf_r+0x98>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	d12b      	bne.n	800320c <__swbuf_r+0x70>
 80031b4:	686c      	ldr	r4, [r5, #4]
 80031b6:	69a3      	ldr	r3, [r4, #24]
 80031b8:	60a3      	str	r3, [r4, #8]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	071a      	lsls	r2, r3, #28
 80031be:	d52f      	bpl.n	8003220 <__swbuf_r+0x84>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	b36b      	cbz	r3, 8003220 <__swbuf_r+0x84>
 80031c4:	6923      	ldr	r3, [r4, #16]
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	1ac0      	subs	r0, r0, r3
 80031ca:	6963      	ldr	r3, [r4, #20]
 80031cc:	b2f6      	uxtb	r6, r6
 80031ce:	4283      	cmp	r3, r0
 80031d0:	4637      	mov	r7, r6
 80031d2:	dc04      	bgt.n	80031de <__swbuf_r+0x42>
 80031d4:	4621      	mov	r1, r4
 80031d6:	4628      	mov	r0, r5
 80031d8:	f000 f926 	bl	8003428 <_fflush_r>
 80031dc:	bb30      	cbnz	r0, 800322c <__swbuf_r+0x90>
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60a3      	str	r3, [r4, #8]
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	6022      	str	r2, [r4, #0]
 80031ea:	701e      	strb	r6, [r3, #0]
 80031ec:	6963      	ldr	r3, [r4, #20]
 80031ee:	3001      	adds	r0, #1
 80031f0:	4283      	cmp	r3, r0
 80031f2:	d004      	beq.n	80031fe <__swbuf_r+0x62>
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	07db      	lsls	r3, r3, #31
 80031f8:	d506      	bpl.n	8003208 <__swbuf_r+0x6c>
 80031fa:	2e0a      	cmp	r6, #10
 80031fc:	d104      	bne.n	8003208 <__swbuf_r+0x6c>
 80031fe:	4621      	mov	r1, r4
 8003200:	4628      	mov	r0, r5
 8003202:	f000 f911 	bl	8003428 <_fflush_r>
 8003206:	b988      	cbnz	r0, 800322c <__swbuf_r+0x90>
 8003208:	4638      	mov	r0, r7
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <__swbuf_r+0x9c>)
 800320e:	429c      	cmp	r4, r3
 8003210:	d101      	bne.n	8003216 <__swbuf_r+0x7a>
 8003212:	68ac      	ldr	r4, [r5, #8]
 8003214:	e7cf      	b.n	80031b6 <__swbuf_r+0x1a>
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <__swbuf_r+0xa0>)
 8003218:	429c      	cmp	r4, r3
 800321a:	bf08      	it	eq
 800321c:	68ec      	ldreq	r4, [r5, #12]
 800321e:	e7ca      	b.n	80031b6 <__swbuf_r+0x1a>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f80c 	bl	8003240 <__swsetup_r>
 8003228:	2800      	cmp	r0, #0
 800322a:	d0cb      	beq.n	80031c4 <__swbuf_r+0x28>
 800322c:	f04f 37ff 	mov.w	r7, #4294967295
 8003230:	e7ea      	b.n	8003208 <__swbuf_r+0x6c>
 8003232:	bf00      	nop
 8003234:	080040e4 	.word	0x080040e4
 8003238:	08004104 	.word	0x08004104
 800323c:	080040c4 	.word	0x080040c4

08003240 <__swsetup_r>:
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <__swsetup_r+0xcc>)
 8003242:	b570      	push	{r4, r5, r6, lr}
 8003244:	681d      	ldr	r5, [r3, #0]
 8003246:	4606      	mov	r6, r0
 8003248:	460c      	mov	r4, r1
 800324a:	b125      	cbz	r5, 8003256 <__swsetup_r+0x16>
 800324c:	69ab      	ldr	r3, [r5, #24]
 800324e:	b913      	cbnz	r3, 8003256 <__swsetup_r+0x16>
 8003250:	4628      	mov	r0, r5
 8003252:	f000 f97d 	bl	8003550 <__sinit>
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <__swsetup_r+0xd0>)
 8003258:	429c      	cmp	r4, r3
 800325a:	d10f      	bne.n	800327c <__swsetup_r+0x3c>
 800325c:	686c      	ldr	r4, [r5, #4]
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003264:	0719      	lsls	r1, r3, #28
 8003266:	d42c      	bmi.n	80032c2 <__swsetup_r+0x82>
 8003268:	06dd      	lsls	r5, r3, #27
 800326a:	d411      	bmi.n	8003290 <__swsetup_r+0x50>
 800326c:	2309      	movs	r3, #9
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	f04f 30ff 	mov.w	r0, #4294967295
 800327a:	e03e      	b.n	80032fa <__swsetup_r+0xba>
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <__swsetup_r+0xd4>)
 800327e:	429c      	cmp	r4, r3
 8003280:	d101      	bne.n	8003286 <__swsetup_r+0x46>
 8003282:	68ac      	ldr	r4, [r5, #8]
 8003284:	e7eb      	b.n	800325e <__swsetup_r+0x1e>
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <__swsetup_r+0xd8>)
 8003288:	429c      	cmp	r4, r3
 800328a:	bf08      	it	eq
 800328c:	68ec      	ldreq	r4, [r5, #12]
 800328e:	e7e6      	b.n	800325e <__swsetup_r+0x1e>
 8003290:	0758      	lsls	r0, r3, #29
 8003292:	d512      	bpl.n	80032ba <__swsetup_r+0x7a>
 8003294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003296:	b141      	cbz	r1, 80032aa <__swsetup_r+0x6a>
 8003298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800329c:	4299      	cmp	r1, r3
 800329e:	d002      	beq.n	80032a6 <__swsetup_r+0x66>
 80032a0:	4630      	mov	r0, r6
 80032a2:	f000 fa5b 	bl	800375c <_free_r>
 80032a6:	2300      	movs	r3, #0
 80032a8:	6363      	str	r3, [r4, #52]	; 0x34
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	2300      	movs	r3, #0
 80032b4:	6063      	str	r3, [r4, #4]
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	6923      	ldr	r3, [r4, #16]
 80032c4:	b94b      	cbnz	r3, 80032da <__swsetup_r+0x9a>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d003      	beq.n	80032da <__swsetup_r+0x9a>
 80032d2:	4621      	mov	r1, r4
 80032d4:	4630      	mov	r0, r6
 80032d6:	f000 fa01 	bl	80036dc <__smakebuf_r>
 80032da:	89a0      	ldrh	r0, [r4, #12]
 80032dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032e0:	f010 0301 	ands.w	r3, r0, #1
 80032e4:	d00a      	beq.n	80032fc <__swsetup_r+0xbc>
 80032e6:	2300      	movs	r3, #0
 80032e8:	60a3      	str	r3, [r4, #8]
 80032ea:	6963      	ldr	r3, [r4, #20]
 80032ec:	425b      	negs	r3, r3
 80032ee:	61a3      	str	r3, [r4, #24]
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	b943      	cbnz	r3, 8003306 <__swsetup_r+0xc6>
 80032f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032f8:	d1ba      	bne.n	8003270 <__swsetup_r+0x30>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	0781      	lsls	r1, r0, #30
 80032fe:	bf58      	it	pl
 8003300:	6963      	ldrpl	r3, [r4, #20]
 8003302:	60a3      	str	r3, [r4, #8]
 8003304:	e7f4      	b.n	80032f0 <__swsetup_r+0xb0>
 8003306:	2000      	movs	r0, #0
 8003308:	e7f7      	b.n	80032fa <__swsetup_r+0xba>
 800330a:	bf00      	nop
 800330c:	2000000c 	.word	0x2000000c
 8003310:	080040e4 	.word	0x080040e4
 8003314:	08004104 	.word	0x08004104
 8003318:	080040c4 	.word	0x080040c4

0800331c <__sflush_r>:
 800331c:	898a      	ldrh	r2, [r1, #12]
 800331e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	0710      	lsls	r0, r2, #28
 8003326:	460c      	mov	r4, r1
 8003328:	d458      	bmi.n	80033dc <__sflush_r+0xc0>
 800332a:	684b      	ldr	r3, [r1, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	dc05      	bgt.n	800333c <__sflush_r+0x20>
 8003330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	dc02      	bgt.n	800333c <__sflush_r+0x20>
 8003336:	2000      	movs	r0, #0
 8003338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800333c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800333e:	2e00      	cmp	r6, #0
 8003340:	d0f9      	beq.n	8003336 <__sflush_r+0x1a>
 8003342:	2300      	movs	r3, #0
 8003344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003348:	682f      	ldr	r7, [r5, #0]
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	d032      	beq.n	80033b4 <__sflush_r+0x98>
 800334e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	075a      	lsls	r2, r3, #29
 8003354:	d505      	bpl.n	8003362 <__sflush_r+0x46>
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	1ac0      	subs	r0, r0, r3
 800335a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800335c:	b10b      	cbz	r3, 8003362 <__sflush_r+0x46>
 800335e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003360:	1ac0      	subs	r0, r0, r3
 8003362:	2300      	movs	r3, #0
 8003364:	4602      	mov	r2, r0
 8003366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003368:	6a21      	ldr	r1, [r4, #32]
 800336a:	4628      	mov	r0, r5
 800336c:	47b0      	blx	r6
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	d106      	bne.n	8003382 <__sflush_r+0x66>
 8003374:	6829      	ldr	r1, [r5, #0]
 8003376:	291d      	cmp	r1, #29
 8003378:	d82c      	bhi.n	80033d4 <__sflush_r+0xb8>
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <__sflush_r+0x108>)
 800337c:	40ca      	lsrs	r2, r1
 800337e:	07d6      	lsls	r6, r2, #31
 8003380:	d528      	bpl.n	80033d4 <__sflush_r+0xb8>
 8003382:	2200      	movs	r2, #0
 8003384:	6062      	str	r2, [r4, #4]
 8003386:	04d9      	lsls	r1, r3, #19
 8003388:	6922      	ldr	r2, [r4, #16]
 800338a:	6022      	str	r2, [r4, #0]
 800338c:	d504      	bpl.n	8003398 <__sflush_r+0x7c>
 800338e:	1c42      	adds	r2, r0, #1
 8003390:	d101      	bne.n	8003396 <__sflush_r+0x7a>
 8003392:	682b      	ldr	r3, [r5, #0]
 8003394:	b903      	cbnz	r3, 8003398 <__sflush_r+0x7c>
 8003396:	6560      	str	r0, [r4, #84]	; 0x54
 8003398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800339a:	602f      	str	r7, [r5, #0]
 800339c:	2900      	cmp	r1, #0
 800339e:	d0ca      	beq.n	8003336 <__sflush_r+0x1a>
 80033a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033a4:	4299      	cmp	r1, r3
 80033a6:	d002      	beq.n	80033ae <__sflush_r+0x92>
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 f9d7 	bl	800375c <_free_r>
 80033ae:	2000      	movs	r0, #0
 80033b0:	6360      	str	r0, [r4, #52]	; 0x34
 80033b2:	e7c1      	b.n	8003338 <__sflush_r+0x1c>
 80033b4:	6a21      	ldr	r1, [r4, #32]
 80033b6:	2301      	movs	r3, #1
 80033b8:	4628      	mov	r0, r5
 80033ba:	47b0      	blx	r6
 80033bc:	1c41      	adds	r1, r0, #1
 80033be:	d1c7      	bne.n	8003350 <__sflush_r+0x34>
 80033c0:	682b      	ldr	r3, [r5, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0c4      	beq.n	8003350 <__sflush_r+0x34>
 80033c6:	2b1d      	cmp	r3, #29
 80033c8:	d001      	beq.n	80033ce <__sflush_r+0xb2>
 80033ca:	2b16      	cmp	r3, #22
 80033cc:	d101      	bne.n	80033d2 <__sflush_r+0xb6>
 80033ce:	602f      	str	r7, [r5, #0]
 80033d0:	e7b1      	b.n	8003336 <__sflush_r+0x1a>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	e7ad      	b.n	8003338 <__sflush_r+0x1c>
 80033dc:	690f      	ldr	r7, [r1, #16]
 80033de:	2f00      	cmp	r7, #0
 80033e0:	d0a9      	beq.n	8003336 <__sflush_r+0x1a>
 80033e2:	0793      	lsls	r3, r2, #30
 80033e4:	680e      	ldr	r6, [r1, #0]
 80033e6:	bf08      	it	eq
 80033e8:	694b      	ldreq	r3, [r1, #20]
 80033ea:	600f      	str	r7, [r1, #0]
 80033ec:	bf18      	it	ne
 80033ee:	2300      	movne	r3, #0
 80033f0:	eba6 0807 	sub.w	r8, r6, r7
 80033f4:	608b      	str	r3, [r1, #8]
 80033f6:	f1b8 0f00 	cmp.w	r8, #0
 80033fa:	dd9c      	ble.n	8003336 <__sflush_r+0x1a>
 80033fc:	6a21      	ldr	r1, [r4, #32]
 80033fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003400:	4643      	mov	r3, r8
 8003402:	463a      	mov	r2, r7
 8003404:	4628      	mov	r0, r5
 8003406:	47b0      	blx	r6
 8003408:	2800      	cmp	r0, #0
 800340a:	dc06      	bgt.n	800341a <__sflush_r+0xfe>
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003412:	81a3      	strh	r3, [r4, #12]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	e78e      	b.n	8003338 <__sflush_r+0x1c>
 800341a:	4407      	add	r7, r0
 800341c:	eba8 0800 	sub.w	r8, r8, r0
 8003420:	e7e9      	b.n	80033f6 <__sflush_r+0xda>
 8003422:	bf00      	nop
 8003424:	20400001 	.word	0x20400001

08003428 <_fflush_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	4605      	mov	r5, r0
 800342e:	460c      	mov	r4, r1
 8003430:	b913      	cbnz	r3, 8003438 <_fflush_r+0x10>
 8003432:	2500      	movs	r5, #0
 8003434:	4628      	mov	r0, r5
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	b118      	cbz	r0, 8003442 <_fflush_r+0x1a>
 800343a:	6983      	ldr	r3, [r0, #24]
 800343c:	b90b      	cbnz	r3, 8003442 <_fflush_r+0x1a>
 800343e:	f000 f887 	bl	8003550 <__sinit>
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <_fflush_r+0x6c>)
 8003444:	429c      	cmp	r4, r3
 8003446:	d11b      	bne.n	8003480 <_fflush_r+0x58>
 8003448:	686c      	ldr	r4, [r5, #4]
 800344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ef      	beq.n	8003432 <_fflush_r+0xa>
 8003452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003454:	07d0      	lsls	r0, r2, #31
 8003456:	d404      	bmi.n	8003462 <_fflush_r+0x3a>
 8003458:	0599      	lsls	r1, r3, #22
 800345a:	d402      	bmi.n	8003462 <_fflush_r+0x3a>
 800345c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345e:	f000 f915 	bl	800368c <__retarget_lock_acquire_recursive>
 8003462:	4628      	mov	r0, r5
 8003464:	4621      	mov	r1, r4
 8003466:	f7ff ff59 	bl	800331c <__sflush_r>
 800346a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800346c:	07da      	lsls	r2, r3, #31
 800346e:	4605      	mov	r5, r0
 8003470:	d4e0      	bmi.n	8003434 <_fflush_r+0xc>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	059b      	lsls	r3, r3, #22
 8003476:	d4dd      	bmi.n	8003434 <_fflush_r+0xc>
 8003478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800347a:	f000 f908 	bl	800368e <__retarget_lock_release_recursive>
 800347e:	e7d9      	b.n	8003434 <_fflush_r+0xc>
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <_fflush_r+0x70>)
 8003482:	429c      	cmp	r4, r3
 8003484:	d101      	bne.n	800348a <_fflush_r+0x62>
 8003486:	68ac      	ldr	r4, [r5, #8]
 8003488:	e7df      	b.n	800344a <_fflush_r+0x22>
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <_fflush_r+0x74>)
 800348c:	429c      	cmp	r4, r3
 800348e:	bf08      	it	eq
 8003490:	68ec      	ldreq	r4, [r5, #12]
 8003492:	e7da      	b.n	800344a <_fflush_r+0x22>
 8003494:	080040e4 	.word	0x080040e4
 8003498:	08004104 	.word	0x08004104
 800349c:	080040c4 	.word	0x080040c4

080034a0 <std>:
 80034a0:	2300      	movs	r3, #0
 80034a2:	b510      	push	{r4, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	e9c0 3300 	strd	r3, r3, [r0]
 80034aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	8181      	strh	r1, [r0, #12]
 80034b2:	6643      	str	r3, [r0, #100]	; 0x64
 80034b4:	81c2      	strh	r2, [r0, #14]
 80034b6:	6183      	str	r3, [r0, #24]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2208      	movs	r2, #8
 80034bc:	305c      	adds	r0, #92	; 0x5c
 80034be:	f7ff fdd7 	bl	8003070 <memset>
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <std+0x38>)
 80034c4:	6263      	str	r3, [r4, #36]	; 0x24
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <std+0x3c>)
 80034c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <std+0x40>)
 80034cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <std+0x44>)
 80034d0:	6224      	str	r4, [r4, #32]
 80034d2:	6323      	str	r3, [r4, #48]	; 0x30
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	08003f19 	.word	0x08003f19
 80034dc:	08003f3b 	.word	0x08003f3b
 80034e0:	08003f73 	.word	0x08003f73
 80034e4:	08003f97 	.word	0x08003f97

080034e8 <_cleanup_r>:
 80034e8:	4901      	ldr	r1, [pc, #4]	; (80034f0 <_cleanup_r+0x8>)
 80034ea:	f000 b8af 	b.w	800364c <_fwalk_reent>
 80034ee:	bf00      	nop
 80034f0:	08003429 	.word	0x08003429

080034f4 <__sfmoreglue>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	2268      	movs	r2, #104	; 0x68
 80034f8:	1e4d      	subs	r5, r1, #1
 80034fa:	4355      	muls	r5, r2
 80034fc:	460e      	mov	r6, r1
 80034fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003502:	f000 f997 	bl	8003834 <_malloc_r>
 8003506:	4604      	mov	r4, r0
 8003508:	b140      	cbz	r0, 800351c <__sfmoreglue+0x28>
 800350a:	2100      	movs	r1, #0
 800350c:	e9c0 1600 	strd	r1, r6, [r0]
 8003510:	300c      	adds	r0, #12
 8003512:	60a0      	str	r0, [r4, #8]
 8003514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003518:	f7ff fdaa 	bl	8003070 <memset>
 800351c:	4620      	mov	r0, r4
 800351e:	bd70      	pop	{r4, r5, r6, pc}

08003520 <__sfp_lock_acquire>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__sfp_lock_acquire+0x8>)
 8003522:	f000 b8b3 	b.w	800368c <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	200008f9 	.word	0x200008f9

0800352c <__sfp_lock_release>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__sfp_lock_release+0x8>)
 800352e:	f000 b8ae 	b.w	800368e <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	200008f9 	.word	0x200008f9

08003538 <__sinit_lock_acquire>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__sinit_lock_acquire+0x8>)
 800353a:	f000 b8a7 	b.w	800368c <__retarget_lock_acquire_recursive>
 800353e:	bf00      	nop
 8003540:	200008fa 	.word	0x200008fa

08003544 <__sinit_lock_release>:
 8003544:	4801      	ldr	r0, [pc, #4]	; (800354c <__sinit_lock_release+0x8>)
 8003546:	f000 b8a2 	b.w	800368e <__retarget_lock_release_recursive>
 800354a:	bf00      	nop
 800354c:	200008fa 	.word	0x200008fa

08003550 <__sinit>:
 8003550:	b510      	push	{r4, lr}
 8003552:	4604      	mov	r4, r0
 8003554:	f7ff fff0 	bl	8003538 <__sinit_lock_acquire>
 8003558:	69a3      	ldr	r3, [r4, #24]
 800355a:	b11b      	cbz	r3, 8003564 <__sinit+0x14>
 800355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003560:	f7ff bff0 	b.w	8003544 <__sinit_lock_release>
 8003564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003568:	6523      	str	r3, [r4, #80]	; 0x50
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <__sinit+0x68>)
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <__sinit+0x6c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	62a2      	str	r2, [r4, #40]	; 0x28
 8003572:	42a3      	cmp	r3, r4
 8003574:	bf04      	itt	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	61a3      	streq	r3, [r4, #24]
 800357a:	4620      	mov	r0, r4
 800357c:	f000 f820 	bl	80035c0 <__sfp>
 8003580:	6060      	str	r0, [r4, #4]
 8003582:	4620      	mov	r0, r4
 8003584:	f000 f81c 	bl	80035c0 <__sfp>
 8003588:	60a0      	str	r0, [r4, #8]
 800358a:	4620      	mov	r0, r4
 800358c:	f000 f818 	bl	80035c0 <__sfp>
 8003590:	2200      	movs	r2, #0
 8003592:	60e0      	str	r0, [r4, #12]
 8003594:	2104      	movs	r1, #4
 8003596:	6860      	ldr	r0, [r4, #4]
 8003598:	f7ff ff82 	bl	80034a0 <std>
 800359c:	68a0      	ldr	r0, [r4, #8]
 800359e:	2201      	movs	r2, #1
 80035a0:	2109      	movs	r1, #9
 80035a2:	f7ff ff7d 	bl	80034a0 <std>
 80035a6:	68e0      	ldr	r0, [r4, #12]
 80035a8:	2202      	movs	r2, #2
 80035aa:	2112      	movs	r1, #18
 80035ac:	f7ff ff78 	bl	80034a0 <std>
 80035b0:	2301      	movs	r3, #1
 80035b2:	61a3      	str	r3, [r4, #24]
 80035b4:	e7d2      	b.n	800355c <__sinit+0xc>
 80035b6:	bf00      	nop
 80035b8:	080040c0 	.word	0x080040c0
 80035bc:	080034e9 	.word	0x080034e9

080035c0 <__sfp>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4607      	mov	r7, r0
 80035c4:	f7ff ffac 	bl	8003520 <__sfp_lock_acquire>
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <__sfp+0x84>)
 80035ca:	681e      	ldr	r6, [r3, #0]
 80035cc:	69b3      	ldr	r3, [r6, #24]
 80035ce:	b913      	cbnz	r3, 80035d6 <__sfp+0x16>
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7ff ffbd 	bl	8003550 <__sinit>
 80035d6:	3648      	adds	r6, #72	; 0x48
 80035d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035dc:	3b01      	subs	r3, #1
 80035de:	d503      	bpl.n	80035e8 <__sfp+0x28>
 80035e0:	6833      	ldr	r3, [r6, #0]
 80035e2:	b30b      	cbz	r3, 8003628 <__sfp+0x68>
 80035e4:	6836      	ldr	r6, [r6, #0]
 80035e6:	e7f7      	b.n	80035d8 <__sfp+0x18>
 80035e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035ec:	b9d5      	cbnz	r5, 8003624 <__sfp+0x64>
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <__sfp+0x88>)
 80035f0:	60e3      	str	r3, [r4, #12]
 80035f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035f6:	6665      	str	r5, [r4, #100]	; 0x64
 80035f8:	f000 f847 	bl	800368a <__retarget_lock_init_recursive>
 80035fc:	f7ff ff96 	bl	800352c <__sfp_lock_release>
 8003600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003608:	6025      	str	r5, [r4, #0]
 800360a:	61a5      	str	r5, [r4, #24]
 800360c:	2208      	movs	r2, #8
 800360e:	4629      	mov	r1, r5
 8003610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003614:	f7ff fd2c 	bl	8003070 <memset>
 8003618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800361c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003620:	4620      	mov	r0, r4
 8003622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003624:	3468      	adds	r4, #104	; 0x68
 8003626:	e7d9      	b.n	80035dc <__sfp+0x1c>
 8003628:	2104      	movs	r1, #4
 800362a:	4638      	mov	r0, r7
 800362c:	f7ff ff62 	bl	80034f4 <__sfmoreglue>
 8003630:	4604      	mov	r4, r0
 8003632:	6030      	str	r0, [r6, #0]
 8003634:	2800      	cmp	r0, #0
 8003636:	d1d5      	bne.n	80035e4 <__sfp+0x24>
 8003638:	f7ff ff78 	bl	800352c <__sfp_lock_release>
 800363c:	230c      	movs	r3, #12
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	e7ee      	b.n	8003620 <__sfp+0x60>
 8003642:	bf00      	nop
 8003644:	080040c0 	.word	0x080040c0
 8003648:	ffff0001 	.word	0xffff0001

0800364c <_fwalk_reent>:
 800364c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003650:	4606      	mov	r6, r0
 8003652:	4688      	mov	r8, r1
 8003654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003658:	2700      	movs	r7, #0
 800365a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800365e:	f1b9 0901 	subs.w	r9, r9, #1
 8003662:	d505      	bpl.n	8003670 <_fwalk_reent+0x24>
 8003664:	6824      	ldr	r4, [r4, #0]
 8003666:	2c00      	cmp	r4, #0
 8003668:	d1f7      	bne.n	800365a <_fwalk_reent+0xe>
 800366a:	4638      	mov	r0, r7
 800366c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003670:	89ab      	ldrh	r3, [r5, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d907      	bls.n	8003686 <_fwalk_reent+0x3a>
 8003676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800367a:	3301      	adds	r3, #1
 800367c:	d003      	beq.n	8003686 <_fwalk_reent+0x3a>
 800367e:	4629      	mov	r1, r5
 8003680:	4630      	mov	r0, r6
 8003682:	47c0      	blx	r8
 8003684:	4307      	orrs	r7, r0
 8003686:	3568      	adds	r5, #104	; 0x68
 8003688:	e7e9      	b.n	800365e <_fwalk_reent+0x12>

0800368a <__retarget_lock_init_recursive>:
 800368a:	4770      	bx	lr

0800368c <__retarget_lock_acquire_recursive>:
 800368c:	4770      	bx	lr

0800368e <__retarget_lock_release_recursive>:
 800368e:	4770      	bx	lr

08003690 <__swhatbuf_r>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	460e      	mov	r6, r1
 8003694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003698:	2900      	cmp	r1, #0
 800369a:	b096      	sub	sp, #88	; 0x58
 800369c:	4614      	mov	r4, r2
 800369e:	461d      	mov	r5, r3
 80036a0:	da08      	bge.n	80036b4 <__swhatbuf_r+0x24>
 80036a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	602a      	str	r2, [r5, #0]
 80036aa:	061a      	lsls	r2, r3, #24
 80036ac:	d410      	bmi.n	80036d0 <__swhatbuf_r+0x40>
 80036ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b2:	e00e      	b.n	80036d2 <__swhatbuf_r+0x42>
 80036b4:	466a      	mov	r2, sp
 80036b6:	f000 fc95 	bl	8003fe4 <_fstat_r>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	dbf1      	blt.n	80036a2 <__swhatbuf_r+0x12>
 80036be:	9a01      	ldr	r2, [sp, #4]
 80036c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036c8:	425a      	negs	r2, r3
 80036ca:	415a      	adcs	r2, r3
 80036cc:	602a      	str	r2, [r5, #0]
 80036ce:	e7ee      	b.n	80036ae <__swhatbuf_r+0x1e>
 80036d0:	2340      	movs	r3, #64	; 0x40
 80036d2:	2000      	movs	r0, #0
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	b016      	add	sp, #88	; 0x58
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080036dc <__smakebuf_r>:
 80036dc:	898b      	ldrh	r3, [r1, #12]
 80036de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e0:	079d      	lsls	r5, r3, #30
 80036e2:	4606      	mov	r6, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	d507      	bpl.n	80036f8 <__smakebuf_r+0x1c>
 80036e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	6123      	str	r3, [r4, #16]
 80036f0:	2301      	movs	r3, #1
 80036f2:	6163      	str	r3, [r4, #20]
 80036f4:	b002      	add	sp, #8
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	ab01      	add	r3, sp, #4
 80036fa:	466a      	mov	r2, sp
 80036fc:	f7ff ffc8 	bl	8003690 <__swhatbuf_r>
 8003700:	9900      	ldr	r1, [sp, #0]
 8003702:	4605      	mov	r5, r0
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f895 	bl	8003834 <_malloc_r>
 800370a:	b948      	cbnz	r0, 8003720 <__smakebuf_r+0x44>
 800370c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003710:	059a      	lsls	r2, r3, #22
 8003712:	d4ef      	bmi.n	80036f4 <__smakebuf_r+0x18>
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	e7e3      	b.n	80036e8 <__smakebuf_r+0xc>
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <__smakebuf_r+0x7c>)
 8003722:	62b3      	str	r3, [r6, #40]	; 0x28
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	6020      	str	r0, [r4, #0]
 8003728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	9b00      	ldr	r3, [sp, #0]
 8003730:	6163      	str	r3, [r4, #20]
 8003732:	9b01      	ldr	r3, [sp, #4]
 8003734:	6120      	str	r0, [r4, #16]
 8003736:	b15b      	cbz	r3, 8003750 <__smakebuf_r+0x74>
 8003738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800373c:	4630      	mov	r0, r6
 800373e:	f000 fc63 	bl	8004008 <_isatty_r>
 8003742:	b128      	cbz	r0, 8003750 <__smakebuf_r+0x74>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	89a0      	ldrh	r0, [r4, #12]
 8003752:	4305      	orrs	r5, r0
 8003754:	81a5      	strh	r5, [r4, #12]
 8003756:	e7cd      	b.n	80036f4 <__smakebuf_r+0x18>
 8003758:	080034e9 	.word	0x080034e9

0800375c <_free_r>:
 800375c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800375e:	2900      	cmp	r1, #0
 8003760:	d044      	beq.n	80037ec <_free_r+0x90>
 8003762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003766:	9001      	str	r0, [sp, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f1a1 0404 	sub.w	r4, r1, #4
 800376e:	bfb8      	it	lt
 8003770:	18e4      	addlt	r4, r4, r3
 8003772:	f000 fc6b 	bl	800404c <__malloc_lock>
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <_free_r+0x94>)
 8003778:	9801      	ldr	r0, [sp, #4]
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	b933      	cbnz	r3, 800378c <_free_r+0x30>
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	6014      	str	r4, [r2, #0]
 8003782:	b003      	add	sp, #12
 8003784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003788:	f000 bc66 	b.w	8004058 <__malloc_unlock>
 800378c:	42a3      	cmp	r3, r4
 800378e:	d908      	bls.n	80037a2 <_free_r+0x46>
 8003790:	6825      	ldr	r5, [r4, #0]
 8003792:	1961      	adds	r1, r4, r5
 8003794:	428b      	cmp	r3, r1
 8003796:	bf01      	itttt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	1949      	addeq	r1, r1, r5
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	e7ed      	b.n	800377e <_free_r+0x22>
 80037a2:	461a      	mov	r2, r3
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	b10b      	cbz	r3, 80037ac <_free_r+0x50>
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d9fa      	bls.n	80037a2 <_free_r+0x46>
 80037ac:	6811      	ldr	r1, [r2, #0]
 80037ae:	1855      	adds	r5, r2, r1
 80037b0:	42a5      	cmp	r5, r4
 80037b2:	d10b      	bne.n	80037cc <_free_r+0x70>
 80037b4:	6824      	ldr	r4, [r4, #0]
 80037b6:	4421      	add	r1, r4
 80037b8:	1854      	adds	r4, r2, r1
 80037ba:	42a3      	cmp	r3, r4
 80037bc:	6011      	str	r1, [r2, #0]
 80037be:	d1e0      	bne.n	8003782 <_free_r+0x26>
 80037c0:	681c      	ldr	r4, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	6053      	str	r3, [r2, #4]
 80037c6:	4421      	add	r1, r4
 80037c8:	6011      	str	r1, [r2, #0]
 80037ca:	e7da      	b.n	8003782 <_free_r+0x26>
 80037cc:	d902      	bls.n	80037d4 <_free_r+0x78>
 80037ce:	230c      	movs	r3, #12
 80037d0:	6003      	str	r3, [r0, #0]
 80037d2:	e7d6      	b.n	8003782 <_free_r+0x26>
 80037d4:	6825      	ldr	r5, [r4, #0]
 80037d6:	1961      	adds	r1, r4, r5
 80037d8:	428b      	cmp	r3, r1
 80037da:	bf04      	itt	eq
 80037dc:	6819      	ldreq	r1, [r3, #0]
 80037de:	685b      	ldreq	r3, [r3, #4]
 80037e0:	6063      	str	r3, [r4, #4]
 80037e2:	bf04      	itt	eq
 80037e4:	1949      	addeq	r1, r1, r5
 80037e6:	6021      	streq	r1, [r4, #0]
 80037e8:	6054      	str	r4, [r2, #4]
 80037ea:	e7ca      	b.n	8003782 <_free_r+0x26>
 80037ec:	b003      	add	sp, #12
 80037ee:	bd30      	pop	{r4, r5, pc}
 80037f0:	200008fc 	.word	0x200008fc

080037f4 <sbrk_aligned>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4e0e      	ldr	r6, [pc, #56]	; (8003830 <sbrk_aligned+0x3c>)
 80037f8:	460c      	mov	r4, r1
 80037fa:	6831      	ldr	r1, [r6, #0]
 80037fc:	4605      	mov	r5, r0
 80037fe:	b911      	cbnz	r1, 8003806 <sbrk_aligned+0x12>
 8003800:	f000 fb7a 	bl	8003ef8 <_sbrk_r>
 8003804:	6030      	str	r0, [r6, #0]
 8003806:	4621      	mov	r1, r4
 8003808:	4628      	mov	r0, r5
 800380a:	f000 fb75 	bl	8003ef8 <_sbrk_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d00a      	beq.n	8003828 <sbrk_aligned+0x34>
 8003812:	1cc4      	adds	r4, r0, #3
 8003814:	f024 0403 	bic.w	r4, r4, #3
 8003818:	42a0      	cmp	r0, r4
 800381a:	d007      	beq.n	800382c <sbrk_aligned+0x38>
 800381c:	1a21      	subs	r1, r4, r0
 800381e:	4628      	mov	r0, r5
 8003820:	f000 fb6a 	bl	8003ef8 <_sbrk_r>
 8003824:	3001      	adds	r0, #1
 8003826:	d101      	bne.n	800382c <sbrk_aligned+0x38>
 8003828:	f04f 34ff 	mov.w	r4, #4294967295
 800382c:	4620      	mov	r0, r4
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	20000900 	.word	0x20000900

08003834 <_malloc_r>:
 8003834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003838:	1ccd      	adds	r5, r1, #3
 800383a:	f025 0503 	bic.w	r5, r5, #3
 800383e:	3508      	adds	r5, #8
 8003840:	2d0c      	cmp	r5, #12
 8003842:	bf38      	it	cc
 8003844:	250c      	movcc	r5, #12
 8003846:	2d00      	cmp	r5, #0
 8003848:	4607      	mov	r7, r0
 800384a:	db01      	blt.n	8003850 <_malloc_r+0x1c>
 800384c:	42a9      	cmp	r1, r5
 800384e:	d905      	bls.n	800385c <_malloc_r+0x28>
 8003850:	230c      	movs	r3, #12
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	2600      	movs	r6, #0
 8003856:	4630      	mov	r0, r6
 8003858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800385c:	4e2e      	ldr	r6, [pc, #184]	; (8003918 <_malloc_r+0xe4>)
 800385e:	f000 fbf5 	bl	800404c <__malloc_lock>
 8003862:	6833      	ldr	r3, [r6, #0]
 8003864:	461c      	mov	r4, r3
 8003866:	bb34      	cbnz	r4, 80038b6 <_malloc_r+0x82>
 8003868:	4629      	mov	r1, r5
 800386a:	4638      	mov	r0, r7
 800386c:	f7ff ffc2 	bl	80037f4 <sbrk_aligned>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	4604      	mov	r4, r0
 8003874:	d14d      	bne.n	8003912 <_malloc_r+0xde>
 8003876:	6834      	ldr	r4, [r6, #0]
 8003878:	4626      	mov	r6, r4
 800387a:	2e00      	cmp	r6, #0
 800387c:	d140      	bne.n	8003900 <_malloc_r+0xcc>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	4631      	mov	r1, r6
 8003882:	4638      	mov	r0, r7
 8003884:	eb04 0803 	add.w	r8, r4, r3
 8003888:	f000 fb36 	bl	8003ef8 <_sbrk_r>
 800388c:	4580      	cmp	r8, r0
 800388e:	d13a      	bne.n	8003906 <_malloc_r+0xd2>
 8003890:	6821      	ldr	r1, [r4, #0]
 8003892:	3503      	adds	r5, #3
 8003894:	1a6d      	subs	r5, r5, r1
 8003896:	f025 0503 	bic.w	r5, r5, #3
 800389a:	3508      	adds	r5, #8
 800389c:	2d0c      	cmp	r5, #12
 800389e:	bf38      	it	cc
 80038a0:	250c      	movcc	r5, #12
 80038a2:	4629      	mov	r1, r5
 80038a4:	4638      	mov	r0, r7
 80038a6:	f7ff ffa5 	bl	80037f4 <sbrk_aligned>
 80038aa:	3001      	adds	r0, #1
 80038ac:	d02b      	beq.n	8003906 <_malloc_r+0xd2>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	442b      	add	r3, r5
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	e00e      	b.n	80038d4 <_malloc_r+0xa0>
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	1b52      	subs	r2, r2, r5
 80038ba:	d41e      	bmi.n	80038fa <_malloc_r+0xc6>
 80038bc:	2a0b      	cmp	r2, #11
 80038be:	d916      	bls.n	80038ee <_malloc_r+0xba>
 80038c0:	1961      	adds	r1, r4, r5
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	6025      	str	r5, [r4, #0]
 80038c6:	bf18      	it	ne
 80038c8:	6059      	strne	r1, [r3, #4]
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	bf08      	it	eq
 80038ce:	6031      	streq	r1, [r6, #0]
 80038d0:	5162      	str	r2, [r4, r5]
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	4638      	mov	r0, r7
 80038d6:	f104 060b 	add.w	r6, r4, #11
 80038da:	f000 fbbd 	bl	8004058 <__malloc_unlock>
 80038de:	f026 0607 	bic.w	r6, r6, #7
 80038e2:	1d23      	adds	r3, r4, #4
 80038e4:	1af2      	subs	r2, r6, r3
 80038e6:	d0b6      	beq.n	8003856 <_malloc_r+0x22>
 80038e8:	1b9b      	subs	r3, r3, r6
 80038ea:	50a3      	str	r3, [r4, r2]
 80038ec:	e7b3      	b.n	8003856 <_malloc_r+0x22>
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	bf0c      	ite	eq
 80038f4:	6032      	streq	r2, [r6, #0]
 80038f6:	605a      	strne	r2, [r3, #4]
 80038f8:	e7ec      	b.n	80038d4 <_malloc_r+0xa0>
 80038fa:	4623      	mov	r3, r4
 80038fc:	6864      	ldr	r4, [r4, #4]
 80038fe:	e7b2      	b.n	8003866 <_malloc_r+0x32>
 8003900:	4634      	mov	r4, r6
 8003902:	6876      	ldr	r6, [r6, #4]
 8003904:	e7b9      	b.n	800387a <_malloc_r+0x46>
 8003906:	230c      	movs	r3, #12
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4638      	mov	r0, r7
 800390c:	f000 fba4 	bl	8004058 <__malloc_unlock>
 8003910:	e7a1      	b.n	8003856 <_malloc_r+0x22>
 8003912:	6025      	str	r5, [r4, #0]
 8003914:	e7de      	b.n	80038d4 <_malloc_r+0xa0>
 8003916:	bf00      	nop
 8003918:	200008fc 	.word	0x200008fc

0800391c <__sfputc_r>:
 800391c:	6893      	ldr	r3, [r2, #8]
 800391e:	3b01      	subs	r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	b410      	push	{r4}
 8003924:	6093      	str	r3, [r2, #8]
 8003926:	da08      	bge.n	800393a <__sfputc_r+0x1e>
 8003928:	6994      	ldr	r4, [r2, #24]
 800392a:	42a3      	cmp	r3, r4
 800392c:	db01      	blt.n	8003932 <__sfputc_r+0x16>
 800392e:	290a      	cmp	r1, #10
 8003930:	d103      	bne.n	800393a <__sfputc_r+0x1e>
 8003932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003936:	f7ff bc31 	b.w	800319c <__swbuf_r>
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	1c58      	adds	r0, r3, #1
 800393e:	6010      	str	r0, [r2, #0]
 8003940:	7019      	strb	r1, [r3, #0]
 8003942:	4608      	mov	r0, r1
 8003944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003948:	4770      	bx	lr

0800394a <__sfputs_r>:
 800394a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394c:	4606      	mov	r6, r0
 800394e:	460f      	mov	r7, r1
 8003950:	4614      	mov	r4, r2
 8003952:	18d5      	adds	r5, r2, r3
 8003954:	42ac      	cmp	r4, r5
 8003956:	d101      	bne.n	800395c <__sfputs_r+0x12>
 8003958:	2000      	movs	r0, #0
 800395a:	e007      	b.n	800396c <__sfputs_r+0x22>
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	463a      	mov	r2, r7
 8003962:	4630      	mov	r0, r6
 8003964:	f7ff ffda 	bl	800391c <__sfputc_r>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d1f3      	bne.n	8003954 <__sfputs_r+0xa>
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003970 <_vfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	460d      	mov	r5, r1
 8003976:	b09d      	sub	sp, #116	; 0x74
 8003978:	4614      	mov	r4, r2
 800397a:	4698      	mov	r8, r3
 800397c:	4606      	mov	r6, r0
 800397e:	b118      	cbz	r0, 8003988 <_vfiprintf_r+0x18>
 8003980:	6983      	ldr	r3, [r0, #24]
 8003982:	b90b      	cbnz	r3, 8003988 <_vfiprintf_r+0x18>
 8003984:	f7ff fde4 	bl	8003550 <__sinit>
 8003988:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <_vfiprintf_r+0x240>)
 800398a:	429d      	cmp	r5, r3
 800398c:	d11b      	bne.n	80039c6 <_vfiprintf_r+0x56>
 800398e:	6875      	ldr	r5, [r6, #4]
 8003990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003992:	07d9      	lsls	r1, r3, #31
 8003994:	d405      	bmi.n	80039a2 <_vfiprintf_r+0x32>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	059a      	lsls	r2, r3, #22
 800399a:	d402      	bmi.n	80039a2 <_vfiprintf_r+0x32>
 800399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399e:	f7ff fe75 	bl	800368c <__retarget_lock_acquire_recursive>
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	d501      	bpl.n	80039ac <_vfiprintf_r+0x3c>
 80039a8:	692b      	ldr	r3, [r5, #16]
 80039aa:	b9eb      	cbnz	r3, 80039e8 <_vfiprintf_r+0x78>
 80039ac:	4629      	mov	r1, r5
 80039ae:	4630      	mov	r0, r6
 80039b0:	f7ff fc46 	bl	8003240 <__swsetup_r>
 80039b4:	b1c0      	cbz	r0, 80039e8 <_vfiprintf_r+0x78>
 80039b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039b8:	07dc      	lsls	r4, r3, #31
 80039ba:	d50e      	bpl.n	80039da <_vfiprintf_r+0x6a>
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	b01d      	add	sp, #116	; 0x74
 80039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c6:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <_vfiprintf_r+0x244>)
 80039c8:	429d      	cmp	r5, r3
 80039ca:	d101      	bne.n	80039d0 <_vfiprintf_r+0x60>
 80039cc:	68b5      	ldr	r5, [r6, #8]
 80039ce:	e7df      	b.n	8003990 <_vfiprintf_r+0x20>
 80039d0:	4b79      	ldr	r3, [pc, #484]	; (8003bb8 <_vfiprintf_r+0x248>)
 80039d2:	429d      	cmp	r5, r3
 80039d4:	bf08      	it	eq
 80039d6:	68f5      	ldreq	r5, [r6, #12]
 80039d8:	e7da      	b.n	8003990 <_vfiprintf_r+0x20>
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	0598      	lsls	r0, r3, #22
 80039de:	d4ed      	bmi.n	80039bc <_vfiprintf_r+0x4c>
 80039e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039e2:	f7ff fe54 	bl	800368e <__retarget_lock_release_recursive>
 80039e6:	e7e9      	b.n	80039bc <_vfiprintf_r+0x4c>
 80039e8:	2300      	movs	r3, #0
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
 80039ec:	2320      	movs	r3, #32
 80039ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f6:	2330      	movs	r3, #48	; 0x30
 80039f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003bbc <_vfiprintf_r+0x24c>
 80039fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a00:	f04f 0901 	mov.w	r9, #1
 8003a04:	4623      	mov	r3, r4
 8003a06:	469a      	mov	sl, r3
 8003a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a0c:	b10a      	cbz	r2, 8003a12 <_vfiprintf_r+0xa2>
 8003a0e:	2a25      	cmp	r2, #37	; 0x25
 8003a10:	d1f9      	bne.n	8003a06 <_vfiprintf_r+0x96>
 8003a12:	ebba 0b04 	subs.w	fp, sl, r4
 8003a16:	d00b      	beq.n	8003a30 <_vfiprintf_r+0xc0>
 8003a18:	465b      	mov	r3, fp
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f7ff ff93 	bl	800394a <__sfputs_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	f000 80aa 	beq.w	8003b7e <_vfiprintf_r+0x20e>
 8003a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a2c:	445a      	add	r2, fp
 8003a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a30:	f89a 3000 	ldrb.w	r3, [sl]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a2 	beq.w	8003b7e <_vfiprintf_r+0x20e>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a44:	f10a 0a01 	add.w	sl, sl, #1
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	9307      	str	r3, [sp, #28]
 8003a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a50:	931a      	str	r3, [sp, #104]	; 0x68
 8003a52:	4654      	mov	r4, sl
 8003a54:	2205      	movs	r2, #5
 8003a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5a:	4858      	ldr	r0, [pc, #352]	; (8003bbc <_vfiprintf_r+0x24c>)
 8003a5c:	f7fc fbb8 	bl	80001d0 <memchr>
 8003a60:	9a04      	ldr	r2, [sp, #16]
 8003a62:	b9d8      	cbnz	r0, 8003a9c <_vfiprintf_r+0x12c>
 8003a64:	06d1      	lsls	r1, r2, #27
 8003a66:	bf44      	itt	mi
 8003a68:	2320      	movmi	r3, #32
 8003a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6e:	0713      	lsls	r3, r2, #28
 8003a70:	bf44      	itt	mi
 8003a72:	232b      	movmi	r3, #43	; 0x2b
 8003a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a78:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7e:	d015      	beq.n	8003aac <_vfiprintf_r+0x13c>
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	4654      	mov	r4, sl
 8003a84:	2000      	movs	r0, #0
 8003a86:	f04f 0c0a 	mov.w	ip, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a90:	3b30      	subs	r3, #48	; 0x30
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	d94e      	bls.n	8003b34 <_vfiprintf_r+0x1c4>
 8003a96:	b1b0      	cbz	r0, 8003ac6 <_vfiprintf_r+0x156>
 8003a98:	9207      	str	r2, [sp, #28]
 8003a9a:	e014      	b.n	8003ac6 <_vfiprintf_r+0x156>
 8003a9c:	eba0 0308 	sub.w	r3, r0, r8
 8003aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	46a2      	mov	sl, r4
 8003aaa:	e7d2      	b.n	8003a52 <_vfiprintf_r+0xe2>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	1d19      	adds	r1, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	9103      	str	r1, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfbb      	ittet	lt
 8003ab8:	425b      	neglt	r3, r3
 8003aba:	f042 0202 	orrlt.w	r2, r2, #2
 8003abe:	9307      	strge	r3, [sp, #28]
 8003ac0:	9307      	strlt	r3, [sp, #28]
 8003ac2:	bfb8      	it	lt
 8003ac4:	9204      	strlt	r2, [sp, #16]
 8003ac6:	7823      	ldrb	r3, [r4, #0]
 8003ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aca:	d10c      	bne.n	8003ae6 <_vfiprintf_r+0x176>
 8003acc:	7863      	ldrb	r3, [r4, #1]
 8003ace:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad0:	d135      	bne.n	8003b3e <_vfiprintf_r+0x1ce>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9203      	str	r2, [sp, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfb8      	it	lt
 8003ade:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ae2:	3402      	adds	r4, #2
 8003ae4:	9305      	str	r3, [sp, #20]
 8003ae6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bcc <_vfiprintf_r+0x25c>
 8003aea:	7821      	ldrb	r1, [r4, #0]
 8003aec:	2203      	movs	r2, #3
 8003aee:	4650      	mov	r0, sl
 8003af0:	f7fc fb6e 	bl	80001d0 <memchr>
 8003af4:	b140      	cbz	r0, 8003b08 <_vfiprintf_r+0x198>
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	eba0 000a 	sub.w	r0, r0, sl
 8003afc:	fa03 f000 	lsl.w	r0, r3, r0
 8003b00:	9b04      	ldr	r3, [sp, #16]
 8003b02:	4303      	orrs	r3, r0
 8003b04:	3401      	adds	r4, #1
 8003b06:	9304      	str	r3, [sp, #16]
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	482c      	ldr	r0, [pc, #176]	; (8003bc0 <_vfiprintf_r+0x250>)
 8003b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b12:	2206      	movs	r2, #6
 8003b14:	f7fc fb5c 	bl	80001d0 <memchr>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d03f      	beq.n	8003b9c <_vfiprintf_r+0x22c>
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <_vfiprintf_r+0x254>)
 8003b1e:	bb1b      	cbnz	r3, 8003b68 <_vfiprintf_r+0x1f8>
 8003b20:	9b03      	ldr	r3, [sp, #12]
 8003b22:	3307      	adds	r3, #7
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	3308      	adds	r3, #8
 8003b2a:	9303      	str	r3, [sp, #12]
 8003b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b2e:	443b      	add	r3, r7
 8003b30:	9309      	str	r3, [sp, #36]	; 0x24
 8003b32:	e767      	b.n	8003a04 <_vfiprintf_r+0x94>
 8003b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b38:	460c      	mov	r4, r1
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	e7a5      	b.n	8003a8a <_vfiprintf_r+0x11a>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	3401      	adds	r4, #1
 8003b42:	9305      	str	r3, [sp, #20]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 0c0a 	mov.w	ip, #10
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b50:	3a30      	subs	r2, #48	; 0x30
 8003b52:	2a09      	cmp	r2, #9
 8003b54:	d903      	bls.n	8003b5e <_vfiprintf_r+0x1ee>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0c5      	beq.n	8003ae6 <_vfiprintf_r+0x176>
 8003b5a:	9105      	str	r1, [sp, #20]
 8003b5c:	e7c3      	b.n	8003ae6 <_vfiprintf_r+0x176>
 8003b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b62:	4604      	mov	r4, r0
 8003b64:	2301      	movs	r3, #1
 8003b66:	e7f0      	b.n	8003b4a <_vfiprintf_r+0x1da>
 8003b68:	ab03      	add	r3, sp, #12
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <_vfiprintf_r+0x258>)
 8003b70:	a904      	add	r1, sp, #16
 8003b72:	4630      	mov	r0, r6
 8003b74:	f3af 8000 	nop.w
 8003b78:	4607      	mov	r7, r0
 8003b7a:	1c78      	adds	r0, r7, #1
 8003b7c:	d1d6      	bne.n	8003b2c <_vfiprintf_r+0x1bc>
 8003b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b80:	07d9      	lsls	r1, r3, #31
 8003b82:	d405      	bmi.n	8003b90 <_vfiprintf_r+0x220>
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	059a      	lsls	r2, r3, #22
 8003b88:	d402      	bmi.n	8003b90 <_vfiprintf_r+0x220>
 8003b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b8c:	f7ff fd7f 	bl	800368e <__retarget_lock_release_recursive>
 8003b90:	89ab      	ldrh	r3, [r5, #12]
 8003b92:	065b      	lsls	r3, r3, #25
 8003b94:	f53f af12 	bmi.w	80039bc <_vfiprintf_r+0x4c>
 8003b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b9a:	e711      	b.n	80039c0 <_vfiprintf_r+0x50>
 8003b9c:	ab03      	add	r3, sp, #12
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	462a      	mov	r2, r5
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <_vfiprintf_r+0x258>)
 8003ba4:	a904      	add	r1, sp, #16
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 f880 	bl	8003cac <_printf_i>
 8003bac:	e7e4      	b.n	8003b78 <_vfiprintf_r+0x208>
 8003bae:	bf00      	nop
 8003bb0:	080040e4 	.word	0x080040e4
 8003bb4:	08004104 	.word	0x08004104
 8003bb8:	080040c4 	.word	0x080040c4
 8003bbc:	08004124 	.word	0x08004124
 8003bc0:	0800412e 	.word	0x0800412e
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	0800394b 	.word	0x0800394b
 8003bcc:	0800412a 	.word	0x0800412a

08003bd0 <_printf_common>:
 8003bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	688a      	ldr	r2, [r1, #8]
 8003bda:	690b      	ldr	r3, [r1, #16]
 8003bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bfb8      	it	lt
 8003be4:	4613      	movlt	r3, r2
 8003be6:	6033      	str	r3, [r6, #0]
 8003be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bec:	4607      	mov	r7, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	b10a      	cbz	r2, 8003bf6 <_printf_common+0x26>
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	0699      	lsls	r1, r3, #26
 8003bfa:	bf42      	ittt	mi
 8003bfc:	6833      	ldrmi	r3, [r6, #0]
 8003bfe:	3302      	addmi	r3, #2
 8003c00:	6033      	strmi	r3, [r6, #0]
 8003c02:	6825      	ldr	r5, [r4, #0]
 8003c04:	f015 0506 	ands.w	r5, r5, #6
 8003c08:	d106      	bne.n	8003c18 <_printf_common+0x48>
 8003c0a:	f104 0a19 	add.w	sl, r4, #25
 8003c0e:	68e3      	ldr	r3, [r4, #12]
 8003c10:	6832      	ldr	r2, [r6, #0]
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	42ab      	cmp	r3, r5
 8003c16:	dc26      	bgt.n	8003c66 <_printf_common+0x96>
 8003c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c1c:	1e13      	subs	r3, r2, #0
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	bf18      	it	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	0692      	lsls	r2, r2, #26
 8003c26:	d42b      	bmi.n	8003c80 <_printf_common+0xb0>
 8003c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	4638      	mov	r0, r7
 8003c30:	47c0      	blx	r8
 8003c32:	3001      	adds	r0, #1
 8003c34:	d01e      	beq.n	8003c74 <_printf_common+0xa4>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	68e5      	ldr	r5, [r4, #12]
 8003c3a:	6832      	ldr	r2, [r6, #0]
 8003c3c:	f003 0306 	and.w	r3, r3, #6
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	bf08      	it	eq
 8003c44:	1aad      	subeq	r5, r5, r2
 8003c46:	68a3      	ldr	r3, [r4, #8]
 8003c48:	6922      	ldr	r2, [r4, #16]
 8003c4a:	bf0c      	ite	eq
 8003c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c50:	2500      	movne	r5, #0
 8003c52:	4293      	cmp	r3, r2
 8003c54:	bfc4      	itt	gt
 8003c56:	1a9b      	subgt	r3, r3, r2
 8003c58:	18ed      	addgt	r5, r5, r3
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	341a      	adds	r4, #26
 8003c5e:	42b5      	cmp	r5, r6
 8003c60:	d11a      	bne.n	8003c98 <_printf_common+0xc8>
 8003c62:	2000      	movs	r0, #0
 8003c64:	e008      	b.n	8003c78 <_printf_common+0xa8>
 8003c66:	2301      	movs	r3, #1
 8003c68:	4652      	mov	r2, sl
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	47c0      	blx	r8
 8003c70:	3001      	adds	r0, #1
 8003c72:	d103      	bne.n	8003c7c <_printf_common+0xac>
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	e7c6      	b.n	8003c0e <_printf_common+0x3e>
 8003c80:	18e1      	adds	r1, r4, r3
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	2030      	movs	r0, #48	; 0x30
 8003c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c8a:	4422      	add	r2, r4
 8003c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c94:	3302      	adds	r3, #2
 8003c96:	e7c7      	b.n	8003c28 <_printf_common+0x58>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d0e6      	beq.n	8003c74 <_printf_common+0xa4>
 8003ca6:	3601      	adds	r6, #1
 8003ca8:	e7d9      	b.n	8003c5e <_printf_common+0x8e>
	...

08003cac <_printf_i>:
 8003cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	7e0f      	ldrb	r7, [r1, #24]
 8003cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cb4:	2f78      	cmp	r7, #120	; 0x78
 8003cb6:	4691      	mov	r9, r2
 8003cb8:	4680      	mov	r8, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	469a      	mov	sl, r3
 8003cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cc2:	d807      	bhi.n	8003cd4 <_printf_i+0x28>
 8003cc4:	2f62      	cmp	r7, #98	; 0x62
 8003cc6:	d80a      	bhi.n	8003cde <_printf_i+0x32>
 8003cc8:	2f00      	cmp	r7, #0
 8003cca:	f000 80d8 	beq.w	8003e7e <_printf_i+0x1d2>
 8003cce:	2f58      	cmp	r7, #88	; 0x58
 8003cd0:	f000 80a3 	beq.w	8003e1a <_printf_i+0x16e>
 8003cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cdc:	e03a      	b.n	8003d54 <_printf_i+0xa8>
 8003cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ce2:	2b15      	cmp	r3, #21
 8003ce4:	d8f6      	bhi.n	8003cd4 <_printf_i+0x28>
 8003ce6:	a101      	add	r1, pc, #4	; (adr r1, 8003cec <_printf_i+0x40>)
 8003ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cec:	08003d45 	.word	0x08003d45
 8003cf0:	08003d59 	.word	0x08003d59
 8003cf4:	08003cd5 	.word	0x08003cd5
 8003cf8:	08003cd5 	.word	0x08003cd5
 8003cfc:	08003cd5 	.word	0x08003cd5
 8003d00:	08003cd5 	.word	0x08003cd5
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003cd5 	.word	0x08003cd5
 8003d0c:	08003cd5 	.word	0x08003cd5
 8003d10:	08003cd5 	.word	0x08003cd5
 8003d14:	08003cd5 	.word	0x08003cd5
 8003d18:	08003e65 	.word	0x08003e65
 8003d1c:	08003d89 	.word	0x08003d89
 8003d20:	08003e47 	.word	0x08003e47
 8003d24:	08003cd5 	.word	0x08003cd5
 8003d28:	08003cd5 	.word	0x08003cd5
 8003d2c:	08003e87 	.word	0x08003e87
 8003d30:	08003cd5 	.word	0x08003cd5
 8003d34:	08003d89 	.word	0x08003d89
 8003d38:	08003cd5 	.word	0x08003cd5
 8003d3c:	08003cd5 	.word	0x08003cd5
 8003d40:	08003e4f 	.word	0x08003e4f
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	1d1a      	adds	r2, r3, #4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	602a      	str	r2, [r5, #0]
 8003d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0a3      	b.n	8003ea0 <_printf_i+0x1f4>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	6829      	ldr	r1, [r5, #0]
 8003d5c:	0606      	lsls	r6, r0, #24
 8003d5e:	f101 0304 	add.w	r3, r1, #4
 8003d62:	d50a      	bpl.n	8003d7a <_printf_i+0xce>
 8003d64:	680e      	ldr	r6, [r1, #0]
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	2e00      	cmp	r6, #0
 8003d6a:	da03      	bge.n	8003d74 <_printf_i+0xc8>
 8003d6c:	232d      	movs	r3, #45	; 0x2d
 8003d6e:	4276      	negs	r6, r6
 8003d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d74:	485e      	ldr	r0, [pc, #376]	; (8003ef0 <_printf_i+0x244>)
 8003d76:	230a      	movs	r3, #10
 8003d78:	e019      	b.n	8003dae <_printf_i+0x102>
 8003d7a:	680e      	ldr	r6, [r1, #0]
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d82:	bf18      	it	ne
 8003d84:	b236      	sxthne	r6, r6
 8003d86:	e7ef      	b.n	8003d68 <_printf_i+0xbc>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	1d19      	adds	r1, r3, #4
 8003d8e:	6029      	str	r1, [r5, #0]
 8003d90:	0601      	lsls	r1, r0, #24
 8003d92:	d501      	bpl.n	8003d98 <_printf_i+0xec>
 8003d94:	681e      	ldr	r6, [r3, #0]
 8003d96:	e002      	b.n	8003d9e <_printf_i+0xf2>
 8003d98:	0646      	lsls	r6, r0, #25
 8003d9a:	d5fb      	bpl.n	8003d94 <_printf_i+0xe8>
 8003d9c:	881e      	ldrh	r6, [r3, #0]
 8003d9e:	4854      	ldr	r0, [pc, #336]	; (8003ef0 <_printf_i+0x244>)
 8003da0:	2f6f      	cmp	r7, #111	; 0x6f
 8003da2:	bf0c      	ite	eq
 8003da4:	2308      	moveq	r3, #8
 8003da6:	230a      	movne	r3, #10
 8003da8:	2100      	movs	r1, #0
 8003daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dae:	6865      	ldr	r5, [r4, #4]
 8003db0:	60a5      	str	r5, [r4, #8]
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	bfa2      	ittt	ge
 8003db6:	6821      	ldrge	r1, [r4, #0]
 8003db8:	f021 0104 	bicge.w	r1, r1, #4
 8003dbc:	6021      	strge	r1, [r4, #0]
 8003dbe:	b90e      	cbnz	r6, 8003dc4 <_printf_i+0x118>
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	d04d      	beq.n	8003e60 <_printf_i+0x1b4>
 8003dc4:	4615      	mov	r5, r2
 8003dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dca:	fb03 6711 	mls	r7, r3, r1, r6
 8003dce:	5dc7      	ldrb	r7, [r0, r7]
 8003dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dd4:	4637      	mov	r7, r6
 8003dd6:	42bb      	cmp	r3, r7
 8003dd8:	460e      	mov	r6, r1
 8003dda:	d9f4      	bls.n	8003dc6 <_printf_i+0x11a>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d10b      	bne.n	8003df8 <_printf_i+0x14c>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	07de      	lsls	r6, r3, #31
 8003de4:	d508      	bpl.n	8003df8 <_printf_i+0x14c>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	6861      	ldr	r1, [r4, #4]
 8003dea:	4299      	cmp	r1, r3
 8003dec:	bfde      	ittt	le
 8003dee:	2330      	movle	r3, #48	; 0x30
 8003df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df8:	1b52      	subs	r2, r2, r5
 8003dfa:	6122      	str	r2, [r4, #16]
 8003dfc:	f8cd a000 	str.w	sl, [sp]
 8003e00:	464b      	mov	r3, r9
 8003e02:	aa03      	add	r2, sp, #12
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f7ff fee2 	bl	8003bd0 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d14c      	bne.n	8003eaa <_printf_i+0x1fe>
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	b004      	add	sp, #16
 8003e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1a:	4835      	ldr	r0, [pc, #212]	; (8003ef0 <_printf_i+0x244>)
 8003e1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e20:	6829      	ldr	r1, [r5, #0]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e28:	6029      	str	r1, [r5, #0]
 8003e2a:	061d      	lsls	r5, r3, #24
 8003e2c:	d514      	bpl.n	8003e58 <_printf_i+0x1ac>
 8003e2e:	07df      	lsls	r7, r3, #31
 8003e30:	bf44      	itt	mi
 8003e32:	f043 0320 	orrmi.w	r3, r3, #32
 8003e36:	6023      	strmi	r3, [r4, #0]
 8003e38:	b91e      	cbnz	r6, 8003e42 <_printf_i+0x196>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	f023 0320 	bic.w	r3, r3, #32
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	2310      	movs	r3, #16
 8003e44:	e7b0      	b.n	8003da8 <_printf_i+0xfc>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	f043 0320 	orr.w	r3, r3, #32
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	2378      	movs	r3, #120	; 0x78
 8003e50:	4828      	ldr	r0, [pc, #160]	; (8003ef4 <_printf_i+0x248>)
 8003e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e56:	e7e3      	b.n	8003e20 <_printf_i+0x174>
 8003e58:	0659      	lsls	r1, r3, #25
 8003e5a:	bf48      	it	mi
 8003e5c:	b2b6      	uxthmi	r6, r6
 8003e5e:	e7e6      	b.n	8003e2e <_printf_i+0x182>
 8003e60:	4615      	mov	r5, r2
 8003e62:	e7bb      	b.n	8003ddc <_printf_i+0x130>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6826      	ldr	r6, [r4, #0]
 8003e68:	6961      	ldr	r1, [r4, #20]
 8003e6a:	1d18      	adds	r0, r3, #4
 8003e6c:	6028      	str	r0, [r5, #0]
 8003e6e:	0635      	lsls	r5, r6, #24
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	d501      	bpl.n	8003e78 <_printf_i+0x1cc>
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	e002      	b.n	8003e7e <_printf_i+0x1d2>
 8003e78:	0670      	lsls	r0, r6, #25
 8003e7a:	d5fb      	bpl.n	8003e74 <_printf_i+0x1c8>
 8003e7c:	8019      	strh	r1, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	4615      	mov	r5, r2
 8003e84:	e7ba      	b.n	8003dfc <_printf_i+0x150>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	602a      	str	r2, [r5, #0]
 8003e8c:	681d      	ldr	r5, [r3, #0]
 8003e8e:	6862      	ldr	r2, [r4, #4]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4628      	mov	r0, r5
 8003e94:	f7fc f99c 	bl	80001d0 <memchr>
 8003e98:	b108      	cbz	r0, 8003e9e <_printf_i+0x1f2>
 8003e9a:	1b40      	subs	r0, r0, r5
 8003e9c:	6060      	str	r0, [r4, #4]
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	6123      	str	r3, [r4, #16]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea8:	e7a8      	b.n	8003dfc <_printf_i+0x150>
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	462a      	mov	r2, r5
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	47d0      	blx	sl
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d0ab      	beq.n	8003e10 <_printf_i+0x164>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	079b      	lsls	r3, r3, #30
 8003ebc:	d413      	bmi.n	8003ee6 <_printf_i+0x23a>
 8003ebe:	68e0      	ldr	r0, [r4, #12]
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	4298      	cmp	r0, r3
 8003ec4:	bfb8      	it	lt
 8003ec6:	4618      	movlt	r0, r3
 8003ec8:	e7a4      	b.n	8003e14 <_printf_i+0x168>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4649      	mov	r1, r9
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	47d0      	blx	sl
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d09b      	beq.n	8003e10 <_printf_i+0x164>
 8003ed8:	3501      	adds	r5, #1
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	9903      	ldr	r1, [sp, #12]
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	dcf2      	bgt.n	8003eca <_printf_i+0x21e>
 8003ee4:	e7eb      	b.n	8003ebe <_printf_i+0x212>
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	f104 0619 	add.w	r6, r4, #25
 8003eec:	e7f5      	b.n	8003eda <_printf_i+0x22e>
 8003eee:	bf00      	nop
 8003ef0:	08004135 	.word	0x08004135
 8003ef4:	08004146 	.word	0x08004146

08003ef8 <_sbrk_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_sbrk_r+0x1c>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	f7fc fef0 	bl	8000ce8 <_sbrk>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_sbrk_r+0x1a>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_sbrk_r+0x1a>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000904 	.word	0x20000904

08003f18 <__sread>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f20:	f000 f8a0 	bl	8004064 <_read_r>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	bfab      	itete	ge
 8003f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f2c:	181b      	addge	r3, r3, r0
 8003f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f32:	bfac      	ite	ge
 8003f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f36:	81a3      	strhlt	r3, [r4, #12]
 8003f38:	bd10      	pop	{r4, pc}

08003f3a <__swrite>:
 8003f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3e:	461f      	mov	r7, r3
 8003f40:	898b      	ldrh	r3, [r1, #12]
 8003f42:	05db      	lsls	r3, r3, #23
 8003f44:	4605      	mov	r5, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	4616      	mov	r6, r2
 8003f4a:	d505      	bpl.n	8003f58 <__swrite+0x1e>
 8003f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f50:	2302      	movs	r3, #2
 8003f52:	2200      	movs	r2, #0
 8003f54:	f000 f868 	bl	8004028 <_lseek_r>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	4632      	mov	r2, r6
 8003f66:	463b      	mov	r3, r7
 8003f68:	4628      	mov	r0, r5
 8003f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6e:	f000 b817 	b.w	8003fa0 <_write_r>

08003f72 <__sseek>:
 8003f72:	b510      	push	{r4, lr}
 8003f74:	460c      	mov	r4, r1
 8003f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7a:	f000 f855 	bl	8004028 <_lseek_r>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	bf15      	itete	ne
 8003f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f8e:	81a3      	strheq	r3, [r4, #12]
 8003f90:	bf18      	it	ne
 8003f92:	81a3      	strhne	r3, [r4, #12]
 8003f94:	bd10      	pop	{r4, pc}

08003f96 <__sclose>:
 8003f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9a:	f000 b813 	b.w	8003fc4 <_close_r>
	...

08003fa0 <_write_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4d07      	ldr	r5, [pc, #28]	; (8003fc0 <_write_r+0x20>)
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4608      	mov	r0, r1
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	602a      	str	r2, [r5, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f7fc fe49 	bl	8000c46 <_write>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_write_r+0x1e>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_write_r+0x1e>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	20000904 	.word	0x20000904

08003fc4 <_close_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d06      	ldr	r5, [pc, #24]	; (8003fe0 <_close_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fc fe55 	bl	8000c7e <_close>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_close_r+0x1a>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_close_r+0x1a>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000904 	.word	0x20000904

08003fe4 <_fstat_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_fstat_r+0x20>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	f7fc fe50 	bl	8000c96 <_fstat>
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d102      	bne.n	8004000 <_fstat_r+0x1c>
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	b103      	cbz	r3, 8004000 <_fstat_r+0x1c>
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	20000904 	.word	0x20000904

08004008 <_isatty_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d06      	ldr	r5, [pc, #24]	; (8004024 <_isatty_r+0x1c>)
 800400c:	2300      	movs	r3, #0
 800400e:	4604      	mov	r4, r0
 8004010:	4608      	mov	r0, r1
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	f7fc fe4f 	bl	8000cb6 <_isatty>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_isatty_r+0x1a>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_isatty_r+0x1a>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	20000904 	.word	0x20000904

08004028 <_lseek_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d07      	ldr	r5, [pc, #28]	; (8004048 <_lseek_r+0x20>)
 800402c:	4604      	mov	r4, r0
 800402e:	4608      	mov	r0, r1
 8004030:	4611      	mov	r1, r2
 8004032:	2200      	movs	r2, #0
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f7fc fe48 	bl	8000ccc <_lseek>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_lseek_r+0x1e>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_lseek_r+0x1e>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	20000904 	.word	0x20000904

0800404c <__malloc_lock>:
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <__malloc_lock+0x8>)
 800404e:	f7ff bb1d 	b.w	800368c <__retarget_lock_acquire_recursive>
 8004052:	bf00      	nop
 8004054:	200008f8 	.word	0x200008f8

08004058 <__malloc_unlock>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__malloc_unlock+0x8>)
 800405a:	f7ff bb18 	b.w	800368e <__retarget_lock_release_recursive>
 800405e:	bf00      	nop
 8004060:	200008f8 	.word	0x200008f8

08004064 <_read_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d07      	ldr	r5, [pc, #28]	; (8004084 <_read_r+0x20>)
 8004068:	4604      	mov	r4, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f7fc fdca 	bl	8000c0c <_read>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_read_r+0x1e>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_read_r+0x1e>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000904 	.word	0x20000904

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
