
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006270  08006270  00016270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b4  080066b4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080066b4  080066b4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066b4  080066b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080066bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001ec  080068a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000308  080068a8  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b87  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb3  00000000  00000000  00028d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a81c  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c241  00000000  00000000  00046884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093aa4  00000000  00000000  00052ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000e65bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	08006254 	.word	0x08006254

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	08006254 	.word	0x08006254

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0x90>)
 8000bc2:	f000 ffb7 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_GPIO_Init+0x90>)
 8000bde:	f000 fe15 	bl	800180c <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010800 	.word	0x40010800

08000bf4 <main>:
	uint8_t temp[4];
}data2_float_read;


int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fb32 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f85e 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f7ff ffae 	bl	8000b60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c04:	f000 f8a4 	bl	8000d50 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c08:	f000 fa86 	bl	8001118 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  W25QXX_Init();				    	//W25QXX初始化
 8000c0c:	f002 fc6c 	bl	80034e8 <W25QXX_Init>

  while(1)
  {
	  FLASH_ID = W25QXX_ReadID();
 8000c10:	f002 fcd2 	bl	80035b8 <W25QXX_ReadID>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <main+0xa0>)
 8000c1a:	801a      	strh	r2, [r3, #0]
	  if(W25Q16 == FLASH_ID)
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <main+0xa0>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	f64e 7214 	movw	r2, #61204	; 0xef14
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <main+0x44>
		  break;
	  printf("W25Q16 Check Failed!\r\n");
 8000c28:	481b      	ldr	r0, [pc, #108]	; (8000c98 <main+0xa4>)
 8000c2a:	f003 fa5f 	bl	80040ec <puts>
	  HAL_Delay(500);
 8000c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c32:	f000 fb77 	bl	8001324 <HAL_Delay>
	  FLASH_ID = W25QXX_ReadID();
 8000c36:	e7eb      	b.n	8000c10 <main+0x1c>
		  break;
 8000c38:	bf00      	nop
  }
  printf("W25Q16 Ready!\r\n");
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <main+0xa8>)
 8000c3c:	f003 fa56 	bl	80040ec <puts>
//  W25QXX_Write(send_buf,100,strlen((char *)send_buf));
//  W25QXX_Write(&data1,200,sizeof(data1));
//  W25QXX_Write(data2_float.temp,300,sizeof(data2_float));
//  HAL_Delay(1000);

  W25QXX_Read(read_buf,100,strlen((char *)send_buf));
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <main+0xac>)
 8000c42:	f7ff faf1 	bl	8000228 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <main+0xb0>)
 8000c50:	f002 fce8 	bl	8003624 <W25QXX_Read>
  W25QXX_Read(&data1_read,200,sizeof(data1));
 8000c54:	2201      	movs	r2, #1
 8000c56:	21c8      	movs	r1, #200	; 0xc8
 8000c58:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <main+0xb4>)
 8000c5a:	f002 fce3 	bl	8003624 <W25QXX_Read>
  W25QXX_Read(data2_float_read.temp,300,sizeof(data2_float_read));
 8000c5e:	2204      	movs	r2, #4
 8000c60:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <main+0xb8>)
 8000c66:	f002 fcdd 	bl	8003624 <W25QXX_Read>
  printf("%s\r\n",read_buf);
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <main+0xb0>)
 8000c6c:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <main+0xbc>)
 8000c6e:	f003 f9b7 	bl	8003fe0 <iprintf>
  printf("%d\r\n",data1_read);
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <main+0xb4>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <main+0xc0>)
 8000c7a:	f003 f9b1 	bl	8003fe0 <iprintf>
  printf("%f\r\n",data2_float_read.data);
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <main+0xb8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc3c 	bl	8000500 <__aeabi_f2d>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <main+0xc4>)
 8000c8e:	f003 f9a7 	bl	8003fe0 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <main+0x9e>
 8000c94:	20000208 	.word	0x20000208
 8000c98:	08006270 	.word	0x08006270
 8000c9c:	08006288 	.word	0x08006288
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000020c 	.word	0x2000020c
 8000ca8:	2000024c 	.word	0x2000024c
 8000cac:	20000250 	.word	0x20000250
 8000cb0:	08006298 	.word	0x08006298
 8000cb4:	080062a0 	.word	0x080062a0
 8000cb8:	080062a8 	.word	0x080062a8

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fd20 	bl	8003710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff2d 	bl	8001b64 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d10:	f000 f819 	bl	8000d46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 f99a 	bl	8002068 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d3a:	f000 f804 	bl	8000d46 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3740      	adds	r7, #64	; 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4a:	b672      	cpsid	i
}
 8000d4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <Error_Handler+0x8>

08000d50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <MX_SPI1_Init+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d84:	2208      	movs	r2, #8
 8000d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <MX_SPI1_Init+0x64>)
 8000da2:	f001 faf9 	bl	8002398 <HAL_SPI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dac:	f7ff ffcb 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000254 	.word	0x20000254
 8000db8:	40013000 	.word	0x40013000

08000dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_SPI_MspInit+0x98>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d137      	bne.n	8000e4c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_SPI_MspInit+0x9c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <HAL_SPI_MspInit+0xa0>)
 8000e20:	f000 fcf4 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e24:	2340      	movs	r3, #64	; 0x40
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_SPI_MspInit+0xa0>)
 8000e38:	f000 fce8 	bl	800180c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2103      	movs	r1, #3
 8000e40:	2023      	movs	r0, #35	; 0x23
 8000e42:	f000 fb6a 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e46:	2023      	movs	r0, #35	; 0x23
 8000e48:	f000 fb83 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800

08000e60 <SPI1_ReadWriteByte>:
/* USER CODE BEGIN 1 */
//SPI1 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata;
    HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 8000e6a:	f107 020f 	add.w	r2, r7, #15
 8000e6e:	1df9      	adds	r1, r7, #7
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SPI1_ReadWriteByte+0x28>)
 8000e7a:	f001 fb11 	bl	80024a0 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //返回收到的数据
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000254 	.word	0x20000254

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_MspInit+0x5c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_MspInit+0x60>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_MspInit+0x60>)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f9d9 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <SPI1_IRQHandler+0x10>)
 8000f46:	f001 fc4d 	bl	80027e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000254 	.word	0x20000254

08000f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART1_IRQHandler+0x10>)
 8000f5a:	f001 fecd 	bl	8002cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002b0 	.word	0x200002b0

08000f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <_kill>:

int _kill(int pid, int sig)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f80:	f002 fb9c 	bl	80036bc <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2216      	movs	r2, #22
 8000f88:	601a      	str	r2, [r3, #0]
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_exit>:

void _exit (int status)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffe7 	bl	8000f76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fa8:	e7fe      	b.n	8000fa8 <_exit+0x12>

08000faa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e00a      	b.n	8000fd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	b2ca      	uxtb	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf0      	blt.n	8000fbc <_read+0x12>
  }

  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e009      	b.n	800100a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f878 	bl	80010f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbf1      	blt.n	8000ff6 <_write+0x12>
  }
  return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_close>:

int _close(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001042:	605a      	str	r2, [r3, #4]
  return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <_isatty>:

int _isatty(int file)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f002 fb06 	bl	80036bc <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000c000 	.word	0x2000c000
 80010dc:	00000800 	.word	0x00000800
 80010e0:	200002ac 	.word	0x200002ac
 80010e4:	20000308 	.word	0x20000308

080010e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80010fc:	1d39      	adds	r1, r7, #4
 80010fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001102:	2201      	movs	r2, #1
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <__io_putchar+0x20>)
 8001106:	f001 fd64 	bl	8002bd2 <HAL_UART_Transmit>
  return ch;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200002b0 	.word	0x200002b0

08001118 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART1_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001150:	f001 fcf2 	bl	8002b38 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fdf4 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002b0 	.word	0x200002b0
 8001168:	40013800 	.word	0x40013800

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a20      	ldr	r2, [pc, #128]	; (8001208 <HAL_UART_MspInit+0x9c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d139      	bne.n	8001200 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_UART_MspInit+0xa0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_UART_MspInit+0xa0>)
 8001192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_UART_MspInit+0xa0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_UART_MspInit+0xa0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_UART_MspInit+0xa0>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_UART_MspInit+0xa0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <HAL_UART_MspInit+0xa4>)
 80011d2:	f000 fb1b 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_UART_MspInit+0xa4>)
 80011ec:	f000 fb0e 	bl	800180c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	2025      	movs	r0, #37	; 0x25
 80011f6:	f000 f990 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011fa:	2025      	movs	r0, #37	; 0x25
 80011fc:	f000 f9a9 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800123a:	f7ff ff55 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 fa43 	bl	80036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f7ff fcd7 	bl	8000bf4 <main>
  bx lr
 8001246:	4770      	bx	lr
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001250:	080066bc 	.word	0x080066bc
  ldr r2, =_sbss
 8001254:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001258:	20000308 	.word	0x20000308

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x28>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f947 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe06 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f95f 	bl	800156e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f927 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000010 	.word	0x20000010
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000014 	.word	0x20000014

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x1c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x20>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x20>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000018 	.word	0x20000018
 800130c:	200002f4 	.word	0x200002f4

08001310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_GetTick+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	200002f4 	.word	0x200002f4

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fff0 	bl	8001310 <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffe0 	bl	8001310 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000018 	.word	0x20000018

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <__NVIC_EnableIRQ+0x34>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff90 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff2d 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff42 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff90 	bl	800145c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5f 	bl	8001408 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff35 	bl	80013d0 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001598:	2b02      	cmp	r3, #2
 800159a:	d008      	beq.n	80015ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2204      	movs	r2, #4
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e020      	b.n	80015f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 020e 	bic.w	r2, r2, #14
 80015bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160e:	2b02      	cmp	r3, #2
 8001610:	d005      	beq.n	800161e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2204      	movs	r2, #4
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e0d6      	b.n	80017cc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_DMA_Abort_IT+0x1dc>)
 8001646:	429a      	cmp	r2, r3
 8001648:	d958      	bls.n	80016fc <HAL_DMA_Abort_IT+0x100>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <HAL_DMA_Abort_IT+0x1e0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04f      	beq.n	80016f4 <HAL_DMA_Abort_IT+0xf8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a61      	ldr	r2, [pc, #388]	; (80017e0 <HAL_DMA_Abort_IT+0x1e4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d048      	beq.n	80016f0 <HAL_DMA_Abort_IT+0xf4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d040      	beq.n	80016ea <HAL_DMA_Abort_IT+0xee>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5e      	ldr	r2, [pc, #376]	; (80017e8 <HAL_DMA_Abort_IT+0x1ec>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d038      	beq.n	80016e4 <HAL_DMA_Abort_IT+0xe8>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5d      	ldr	r2, [pc, #372]	; (80017ec <HAL_DMA_Abort_IT+0x1f0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d030      	beq.n	80016de <HAL_DMA_Abort_IT+0xe2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d028      	beq.n	80016d8 <HAL_DMA_Abort_IT+0xdc>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <HAL_DMA_Abort_IT+0x1dc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d020      	beq.n	80016d2 <HAL_DMA_Abort_IT+0xd6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a57      	ldr	r2, [pc, #348]	; (80017f4 <HAL_DMA_Abort_IT+0x1f8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_DMA_Abort_IT+0xd2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <HAL_DMA_Abort_IT+0x1fc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_Abort_IT+0xce>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a54      	ldr	r2, [pc, #336]	; (80017fc <HAL_DMA_Abort_IT+0x200>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00a      	beq.n	80016c4 <HAL_DMA_Abort_IT+0xc8>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a53      	ldr	r2, [pc, #332]	; (8001800 <HAL_DMA_Abort_IT+0x204>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d102      	bne.n	80016be <HAL_DMA_Abort_IT+0xc2>
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	e01b      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c2:	e018      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	e015      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016ca:	2310      	movs	r3, #16
 80016cc:	e013      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e011      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d6:	e00e      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016dc:	e00b      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e2:	e008      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	e005      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ee:	e002      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016f0:	2310      	movs	r3, #16
 80016f2:	e000      	b.n	80016f6 <HAL_DMA_Abort_IT+0xfa>
 80016f4:	2301      	movs	r3, #1
 80016f6:	4a43      	ldr	r2, [pc, #268]	; (8001804 <HAL_DMA_Abort_IT+0x208>)
 80016f8:	6053      	str	r3, [r2, #4]
 80016fa:	e057      	b.n	80017ac <HAL_DMA_Abort_IT+0x1b0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a36      	ldr	r2, [pc, #216]	; (80017dc <HAL_DMA_Abort_IT+0x1e0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d04f      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x1aa>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a35      	ldr	r2, [pc, #212]	; (80017e0 <HAL_DMA_Abort_IT+0x1e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d048      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x1a6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <HAL_DMA_Abort_IT+0x1e8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d040      	beq.n	800179c <HAL_DMA_Abort_IT+0x1a0>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <HAL_DMA_Abort_IT+0x1ec>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d038      	beq.n	8001796 <HAL_DMA_Abort_IT+0x19a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_DMA_Abort_IT+0x1f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d030      	beq.n	8001790 <HAL_DMA_Abort_IT+0x194>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <HAL_DMA_Abort_IT+0x1f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d028      	beq.n	800178a <HAL_DMA_Abort_IT+0x18e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_DMA_Abort_IT+0x1dc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d020      	beq.n	8001784 <HAL_DMA_Abort_IT+0x188>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <HAL_DMA_Abort_IT+0x1f8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d019      	beq.n	8001780 <HAL_DMA_Abort_IT+0x184>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_DMA_Abort_IT+0x1fc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d012      	beq.n	800177c <HAL_DMA_Abort_IT+0x180>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a28      	ldr	r2, [pc, #160]	; (80017fc <HAL_DMA_Abort_IT+0x200>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00a      	beq.n	8001776 <HAL_DMA_Abort_IT+0x17a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_DMA_Abort_IT+0x204>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d102      	bne.n	8001770 <HAL_DMA_Abort_IT+0x174>
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	e01b      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	e018      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	e015      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 800177c:	2310      	movs	r3, #16
 800177e:	e013      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001780:	2301      	movs	r3, #1
 8001782:	e011      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001788:	e00e      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 800178a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178e:	e00b      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	e008      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	e005      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	e002      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 80017a2:	2310      	movs	r3, #16
 80017a4:	e000      	b.n	80017a8 <HAL_DMA_Abort_IT+0x1ac>
 80017a6:	2301      	movs	r3, #1
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_DMA_Abort_IT+0x20c>)
 80017aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
    } 
  }
  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020080 	.word	0x40020080
 80017dc:	40020008 	.word	0x40020008
 80017e0:	4002001c 	.word	0x4002001c
 80017e4:	40020030 	.word	0x40020030
 80017e8:	40020044 	.word	0x40020044
 80017ec:	40020058 	.word	0x40020058
 80017f0:	4002006c 	.word	0x4002006c
 80017f4:	40020408 	.word	0x40020408
 80017f8:	4002041c 	.word	0x4002041c
 80017fc:	40020430 	.word	0x40020430
 8001800:	40020444 	.word	0x40020444
 8001804:	40020400 	.word	0x40020400
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e179      	b.n	8001b14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001820:	2201      	movs	r2, #1
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8168 	bne.w	8001b0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x290>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d05e      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001848:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x290>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d875      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x294>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d058      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x294>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d86f      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800185a:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x298>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d052      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001860:	4a90      	ldr	r2, [pc, #576]	; (8001aa4 <HAL_GPIO_Init+0x298>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d869      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001866:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_GPIO_Init+0x29c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d04c      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_GPIO_Init+0x29c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d863      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001872:	4a8e      	ldr	r2, [pc, #568]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d046      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001878:	4a8c      	ldr	r2, [pc, #560]	; (8001aac <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d85d      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d82a      	bhi.n	80018d8 <HAL_GPIO_Init+0xcc>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d859      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <HAL_GPIO_Init+0x80>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	08001907 	.word	0x08001907
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018f3 	.word	0x080018f3
 8001898:	08001935 	.word	0x08001935
 800189c:	0800193b 	.word	0x0800193b
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	0800193b 	.word	0x0800193b
 80018a8:	0800193b 	.word	0x0800193b
 80018ac:	0800193b 	.word	0x0800193b
 80018b0:	0800193b 	.word	0x0800193b
 80018b4:	0800193b 	.word	0x0800193b
 80018b8:	0800193b 	.word	0x0800193b
 80018bc:	0800193b 	.word	0x0800193b
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	0800193b 	.word	0x0800193b
 80018c8:	0800193b 	.word	0x0800193b
 80018cc:	0800193b 	.word	0x0800193b
 80018d0:	080018e9 	.word	0x080018e9
 80018d4:	080018fd 	.word	0x080018fd
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_GPIO_Init+0x2a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018de:	e02c      	b.n	800193a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e029      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e024      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	3308      	adds	r3, #8
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e01f      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	330c      	adds	r3, #12
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e01a      	b.n	800193c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190e:	2304      	movs	r3, #4
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e013      	b.n	800193c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	611a      	str	r2, [r3, #16]
          break;
 8001926:	e009      	b.n	800193c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	615a      	str	r2, [r3, #20]
          break;
 8001932:	e003      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x130>
          break;
 800193a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d801      	bhi.n	8001946 <HAL_GPIO_Init+0x13a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <HAL_GPIO_Init+0x13e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d802      	bhi.n	8001958 <HAL_GPIO_Init+0x14c>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x152>
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3b08      	subs	r3, #8
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	210f      	movs	r1, #15
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80c1 	beq.w	8001b0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a4:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3c      	ldr	r2, [pc, #240]	; (8001abc <HAL_GPIO_Init+0x2b0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d01f      	beq.n	8001a10 <HAL_GPIO_Init+0x204>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_GPIO_Init+0x2b4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d019      	beq.n	8001a0c <HAL_GPIO_Init+0x200>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <HAL_GPIO_Init+0x2b8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_Init+0x1fc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <HAL_GPIO_Init+0x2bc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_Init+0x1f8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a38      	ldr	r2, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x2c0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x1f4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2c4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_Init+0x1f0>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e00a      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x206>
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_GPIO_Init+0x2ac>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4924      	ldr	r1, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4920      	ldr	r1, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d025      	beq.n	8001ad8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4910      	ldr	r1, [pc, #64]	; (8001ad4 <HAL_GPIO_Init+0x2c8>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
 8001a98:	e025      	b.n	8001ae6 <HAL_GPIO_Init+0x2da>
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40011400 	.word	0x40011400
 8001acc:	40011800 	.word	0x40011800
 8001ad0:	40011c00 	.word	0x40011c00
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4909      	ldr	r1, [pc, #36]	; (8001b30 <HAL_GPIO_Init+0x324>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	3301      	adds	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ae7e 	bne.w	8001820 <HAL_GPIO_Init+0x14>
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	372c      	adds	r7, #44	; 0x2c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b50:	e003      	b.n	8001b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb66 	bl	8001310 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb62 	bl	8001310 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb52 	bl	8001310 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb4e 	bl	8001310 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb07 	bl	8001310 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb03 	bl	8001310 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fae6 	bl	8001310 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff fae2 	bl	8001310 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fac6 	bl	8001310 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fac2 	bl	8001310 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fad8 	bl	800235c <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff faac 	bl	8001310 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff faa8 	bl	8001310 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fa69 	bl	8001310 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff fa65 	bl	8001310 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa19 	bl	8001310 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fa15 	bl	8001310 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fa03 	bl	8001310 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f9ff 	bl	8001310 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff f9d3 	bl	8001310 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff f9cf 	bl	8001310 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f9a3 	bl	8001310 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f99f 	bl	8001310 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f98c 	bl	8001310 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f988 	bl	8001310 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7ff f8da 	bl	8001310 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f8d6 	bl	8001310 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f838 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	080062c0 	.word	0x080062c0
 8002234:	20000010 	.word	0x20000010
 8002238:	20000014 	.word	0x20000014

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b490      	push	{r4, r7}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002244:	1d3c      	adds	r4, r7, #4
 8002246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800224c:	f240 2301 	movw	r3, #513	; 0x201
 8002250:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x40>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x46>
 800227a:	e02b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	e02b      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3328      	adds	r3, #40	; 0x28
 800228c:	443b      	add	r3, r7
 800228e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002292:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0c5b      	lsrs	r3, r3, #17
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	3328      	adds	r3, #40	; 0x28
 80022aa:	443b      	add	r3, r7
 80022ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e004      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	623b      	str	r3, [r7, #32]
      break;
 80022d2:	e002      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022da:	6a3b      	ldr	r3, [r7, #32]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc90      	pop	{r4, r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	080062b0 	.word	0x080062b0
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000010 	.word	0x20000010

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002310:	f7ff fff2 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	080062d0 	.word	0x080062d0

08002334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002338:	f7ff ffde 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	0adb      	lsrs	r3, r3, #11
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	080062d0 	.word	0x080062d0

0800235c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <RCC_Delay+0x34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <RCC_Delay+0x38>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a5b      	lsrs	r3, r3, #9
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002378:	bf00      	nop
  }
  while (Delay --);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	60fa      	str	r2, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f9      	bne.n	8002378 <RCC_Delay+0x1c>
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000010 	.word	0x20000010
 8002394:	10624dd3 	.word	0x10624dd3

08002398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e076      	b.n	8002498 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ba:	d009      	beq.n	80023d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
 80023c2:	e005      	b.n	80023d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fce6 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002406:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	0c1a      	lsrs	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f002 0204 	and.w	r2, r2, #4
 8002476:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x26>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e18a      	b.n	80027dc <HAL_SPI_TransmitReceive+0x33c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ce:	f7fe ff1f 	bl	8001310 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d00f      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x70>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f6:	d107      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x68>
 8002500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002504:	2b04      	cmp	r3, #4
 8002506:	d003      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800250e:	e15b      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x82>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x82>
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002528:	e14e      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b04      	cmp	r3, #4
 8002534:	d003      	beq.n	800253e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d007      	beq.n	8002592 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259a:	d178      	bne.n	800268e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_TransmitReceive+0x10a>
 80025a4:	8b7b      	ldrh	r3, [r7, #26]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d166      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	1c9a      	adds	r2, r3, #2
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ce:	e053      	b.n	8002678 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d11b      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x176>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x176>
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d113      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d119      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x1b8>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d014      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	b292      	uxth	r2, r2
 800263a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002654:	2301      	movs	r3, #1
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002658:	f7fe fe5a 	bl	8001310 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002664:	429a      	cmp	r2, r3
 8002666:	d807      	bhi.n	8002678 <HAL_SPI_TransmitReceive+0x1d8>
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002676:	e0a7      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1a6      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x130>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1a1      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x130>
 800268c:	e07c      	b.n	8002788 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_TransmitReceive+0x1fc>
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d16b      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c2:	e057      	b.n	8002774 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d11c      	bne.n	800270c <HAL_SPI_TransmitReceive+0x26c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <HAL_SPI_TransmitReceive+0x26c>
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d114      	bne.n	800270c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d119      	bne.n	800274e <HAL_SPI_TransmitReceive+0x2ae>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800274a:	2301      	movs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800274e:	f7fe fddf 	bl	8001310 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275a:	429a      	cmp	r2, r3
 800275c:	d803      	bhi.n	8002766 <HAL_SPI_TransmitReceive+0x2c6>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d102      	bne.n	800276c <HAL_SPI_TransmitReceive+0x2cc>
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002772:	e029      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1a2      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x224>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d19d      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f9b5 	bl	8002afc <SPI_EndRxTxTransaction>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027a4:	e010      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	e000      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3730      	adds	r7, #48	; 0x30
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    return;
 8002826:	e0be      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_SPI_IRQHandler+0x66>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	09db      	lsrs	r3, r3, #7
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    return;
 8002848:	e0ad      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_SPI_IRQHandler+0x80>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a1 	beq.w	80029a6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 809a 	beq.w	80029a6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d023      	beq.n	80028c6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b03      	cmp	r3, #3
 8002888:	d011      	beq.n	80028ae <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	e00b      	b.n	80028c6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
        return;
 80028c4:	e06f      	b.n	80029a6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d04f      	beq.n	80029a4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002912:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d104      	bne.n	8002930 <HAL_SPI_IRQHandler+0x14c>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d034      	beq.n	800299a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0203 	bic.w	r2, r2, #3
 800293e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d011      	beq.n	800296c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_SPI_IRQHandler+0x1c8>)
 800294e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fe51 	bl	80015fc <HAL_DMA_Abort_IT>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_SPI_IRQHandler+0x1c8>)
 800297a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fe3b 	bl	80015fc <HAL_DMA_Abort_IT>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002998:	e003      	b.n	80029a2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f808 	bl	80029b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029a0:	e000      	b.n	80029a4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80029a2:	bf00      	nop
    return;
 80029a4:	bf00      	nop
  }
}
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	080029c3 	.word	0x080029c3

080029b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ffe7 	bl	80029b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029fc:	f7fe fc88 	bl	8001310 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a0c:	f7fe fc80 	bl	8001310 <HAL_GetTick>
 8002a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a12:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	015b      	lsls	r3, r3, #5
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a22:	e054      	b.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d050      	beq.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a2c:	f7fe fc70 	bl	8001310 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d902      	bls.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d13d      	bne.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5a:	d111      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a64:	d004      	beq.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	d107      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a88:	d10f      	bne.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e017      	b.n	8002aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d19b      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010

08002afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff6a 	bl	80029ec <SPI_WaitFlagStateUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e000      	b.n	8002b30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e03f      	b.n	8002bca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fb04 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fc25 	bl	80033cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08a      	sub	sp, #40	; 0x28
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d17c      	bne.n	8002cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_UART_Transmit+0x2c>
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e075      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Transmit+0x3e>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e06e      	b.n	8002cee <HAL_UART_Transmit+0x11c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2221      	movs	r2, #33	; 0x21
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe fb73 	bl	8001310 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c64:	e02a      	b.n	8002cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fa11 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e036      	b.n	8002cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1cf      	bne.n	8002c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f9e1 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e006      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_UART_IRQHandler+0x52>
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa99 	bl	800327a <UART_Receive_IT>
      return;
 8002d48:	e17b      	b.n	8003042 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b1 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x1bc>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_UART_IRQHandler+0x70>
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80a6 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_UART_IRQHandler+0x90>
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_UART_IRQHandler+0xb0>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xd0>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f043 0204 	orr.w	r2, r3, #4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00f      	beq.n	8002df2 <HAL_UART_IRQHandler+0xfa>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_UART_IRQHandler+0xee>
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0208 	orr.w	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 811e 	beq.w	8003038 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_UART_IRQHandler+0x11e>
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa32 	bl	800327a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_UART_IRQHandler+0x146>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d031      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f974 	bl	800312c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d023      	beq.n	8002e9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4a76      	ldr	r2, [pc, #472]	; (8003048 <HAL_UART_IRQHandler+0x350>)
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fbc0 	bl	80015fc <HAL_DMA_Abort_IT>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	e00e      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f8ec 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e00a      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8e8 	bl	8003070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	e006      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8e4 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002eae:	e0c3      	b.n	8003038 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	bf00      	nop
    return;
 8002eb2:	e0c1      	b.n	8003038 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 80a1 	bne.w	8003000 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 809b 	beq.w	8003000 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8095 	beq.w	8003000 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d04e      	beq.n	8002f98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f04:	8a3b      	ldrh	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8098 	beq.w	800303c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f10:	8a3a      	ldrh	r2, [r7, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	f080 8092 	bcs.w	800303c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8a3a      	ldrh	r2, [r7, #16]
 8002f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d02b      	beq.n	8002f80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0210 	bic.w	r2, r2, #16
 8002f74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fb03 	bl	8001586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f876 	bl	8003082 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f96:	e051      	b.n	800303c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d047      	beq.n	8003040 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002fb0:	8a7b      	ldrh	r3, [r7, #18]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d044      	beq.n	8003040 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	8a7b      	ldrh	r3, [r7, #18]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f842 	bl	8003082 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ffe:	e01f      	b.n	8003040 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_UART_IRQHandler+0x324>
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8c9 	bl	80031ac <UART_Transmit_IT>
    return;
 800301a:	e012      	b.n	8003042 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_UART_IRQHandler+0x34a>
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f90a 	bl	800324a <UART_EndTransmit_IT>
    return;
 8003036:	e004      	b.n	8003042 <HAL_UART_IRQHandler+0x34a>
    return;
 8003038:	bf00      	nop
 800303a:	e002      	b.n	8003042 <HAL_UART_IRQHandler+0x34a>
      return;
 800303c:	bf00      	nop
 800303e:	e000      	b.n	8003042 <HAL_UART_IRQHandler+0x34a>
      return;
 8003040:	bf00      	nop
  }
}
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08003185 	.word	0x08003185

0800304c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a8:	e02c      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d028      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b8:	f7fe f92a 	bl	8001310 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d21d      	bcs.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e00f      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	429a      	cmp	r2, r3
 8003120:	d0c3      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003142:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0210 	bic.w	r2, r2, #16
 800316a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff66 	bl	8003070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b21      	cmp	r3, #33	; 0x21
 80031be:	d13e      	bne.n	800323e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d114      	bne.n	80031f4 <UART_Transmit_IT+0x48>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d110      	bne.n	80031f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	621a      	str	r2, [r3, #32]
 80031f2:	e008      	b.n	8003206 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	1c59      	adds	r1, r3, #1
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6211      	str	r1, [r2, #32]
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4619      	mov	r1, r3
 8003214:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003238:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff feee 	bl	800304c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b22      	cmp	r3, #34	; 0x22
 800328c:	f040 8099 	bne.w	80033c2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d117      	bne.n	80032ca <UART_Receive_IT+0x50>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d113      	bne.n	80032ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
 80032c8:	e026      	b.n	8003318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d007      	beq.n	80032ee <UART_Receive_IT+0x74>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <UART_Receive_IT+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e008      	b.n	800330e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003308:	b2da      	uxtb	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003328:	2b00      	cmp	r3, #0
 800332a:	d148      	bne.n	80033be <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0220 	bic.w	r2, r2, #32
 800333a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d123      	bne.n	80033b4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0210 	bic.w	r2, r2, #16
 8003380:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d10a      	bne.n	80033a6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fe68 	bl	8003082 <HAL_UARTEx_RxEventCallback>
 80033b2:	e002      	b.n	80033ba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fe52 	bl	800305e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e002      	b.n	80033c4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003406:	f023 030c 	bic.w	r3, r3, #12
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	430b      	orrs	r3, r1
 8003412:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <UART_SetConfig+0x114>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d103      	bne.n	800343c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe ff7e 	bl	8002334 <HAL_RCC_GetPCLK2Freq>
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	e002      	b.n	8003442 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7fe ff66 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003440:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	0119      	lsls	r1, r3, #4
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009a      	lsls	r2, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fbb2 f2f3 	udiv	r2, r2, r3
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <UART_SetConfig+0x118>)
 800347a:	fba3 0302 	umull	r0, r3, r3, r2
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2064      	movs	r0, #100	; 0x64
 8003482:	fb00 f303 	mul.w	r3, r0, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	3332      	adds	r3, #50	; 0x32
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <UART_SetConfig+0x118>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003498:	4419      	add	r1, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <UART_SetConfig+0x118>)
 80034b2:	fba3 0302 	umull	r0, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2064      	movs	r0, #100	; 0x64
 80034ba:	fb00 f303 	mul.w	r3, r0, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	3332      	adds	r3, #50	; 0x32
 80034c4:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <UART_SetConfig+0x118>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	440a      	add	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40013800 	.word	0x40013800
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <W25QXX_Init>:
#include <stdio.h>

uint16_t W25QXX_TYPE=W25Q64;	//默认是W25Q64

void W25QXX_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
	uint8_t temp;
	W25QXX_TYPE=W25QXX_ReadID();	        //读取FLASH ID.
 80034ee:	f000 f863 	bl	80035b8 <W25QXX_ReadID>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <W25QXX_Init+0x54>)
 80034f8:	801a      	strh	r2, [r3, #0]
    if(W25QXX_TYPE==W25Q256)                //SPI FLASH为W25Q256
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <W25QXX_Init+0x54>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f64e 7218 	movw	r2, #61208	; 0xef18
 8003502:	4293      	cmp	r3, r2
 8003504:	d116      	bne.n	8003534 <W25QXX_Init+0x4c>
    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 8003506:	2003      	movs	r0, #3
 8003508:	f000 f81c 	bl	8003544 <W25QXX_ReadSR>
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <W25QXX_Init+0x4c>
		{
        	W25QXX_CS_ENABLE();    //使能器件
 800351a:	2200      	movs	r2, #0
 800351c:	2104      	movs	r1, #4
 800351e:	4808      	ldr	r0, [pc, #32]	; (8003540 <W25QXX_Init+0x58>)
 8003520:	f7fe fb08 	bl	8001b34 <HAL_GPIO_WritePin>
			SPI1_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 8003524:	20b7      	movs	r0, #183	; 0xb7
 8003526:	f7fd fc9b 	bl	8000e60 <SPI1_ReadWriteByte>
			W25QXX_CS_DISABLE();    		        //取消片选
 800352a:	2201      	movs	r2, #1
 800352c:	2104      	movs	r1, #4
 800352e:	4804      	ldr	r0, [pc, #16]	; (8003540 <W25QXX_Init+0x58>)
 8003530:	f7fe fb00 	bl	8001b34 <HAL_GPIO_WritePin>
		}
    }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000001a 	.word	0x2000001a
 8003540:	40010800 	.word	0x40010800

08003544 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 800354e:	2300      	movs	r3, #0
 8003550:	73bb      	strb	r3, [r7, #14]
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d00c      	beq.n	8003576 <W25QXX_ReadSR+0x32>
 800355c:	2b03      	cmp	r3, #3
 800355e:	dc0d      	bgt.n	800357c <W25QXX_ReadSR+0x38>
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <W25QXX_ReadSR+0x26>
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <W25QXX_ReadSR+0x2c>
 8003568:	e008      	b.n	800357c <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 800356a:	2305      	movs	r3, #5
 800356c:	73fb      	strb	r3, [r7, #15]
            break;
 800356e:	e008      	b.n	8003582 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 8003570:	2335      	movs	r3, #53	; 0x35
 8003572:	73fb      	strb	r3, [r7, #15]
            break;
 8003574:	e005      	b.n	8003582 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 8003576:	2315      	movs	r3, #21
 8003578:	73fb      	strb	r3, [r7, #15]
            break;
 800357a:	e002      	b.n	8003582 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 800357c:	2305      	movs	r3, #5
 800357e:	73fb      	strb	r3, [r7, #15]
            break;
 8003580:	bf00      	nop
    }
    W25QXX_CS_ENABLE();    //使能器件
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	480b      	ldr	r0, [pc, #44]	; (80035b4 <W25QXX_ReadSR+0x70>)
 8003588:	f7fe fad4 	bl	8001b34 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(command);            //发送读取状态寄存器命令
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fc66 	bl	8000e60 <SPI1_ReadWriteByte>
	byte=SPI1_ReadWriteByte(0Xff);          //读取一个字节
 8003594:	20ff      	movs	r0, #255	; 0xff
 8003596:	f7fd fc63 	bl	8000e60 <SPI1_ReadWriteByte>
 800359a:	4603      	mov	r3, r0
 800359c:	73bb      	strb	r3, [r7, #14]
	W25QXX_CS_DISABLE();      //取消片选
 800359e:	2201      	movs	r2, #1
 80035a0:	2104      	movs	r1, #4
 80035a2:	4804      	ldr	r0, [pc, #16]	; (80035b4 <W25QXX_ReadSR+0x70>)
 80035a4:	f7fe fac6 	bl	8001b34 <HAL_GPIO_WritePin>
	return byte;
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40010800 	.word	0x40010800

080035b8 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
	uint16_t Temp = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS_ENABLE();    //使能器件
 80035c2:	2200      	movs	r2, #0
 80035c4:	2104      	movs	r1, #4
 80035c6:	4816      	ldr	r0, [pc, #88]	; (8003620 <W25QXX_ReadID+0x68>)
 80035c8:	f7fe fab4 	bl	8001b34 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x90);//发送读取ID命令
 80035cc:	2090      	movs	r0, #144	; 0x90
 80035ce:	f7fd fc47 	bl	8000e60 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fd fc44 	bl	8000e60 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd fc41 	bl	8000e60 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7fd fc3e 	bl	8000e60 <SPI1_ReadWriteByte>
	Temp|=SPI1_ReadWriteByte(0xFF)<<8;
 80035e4:	20ff      	movs	r0, #255	; 0xff
 80035e6:	f7fd fc3b 	bl	8000e60 <SPI1_ReadWriteByte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	80fb      	strh	r3, [r7, #6]
	Temp|=SPI1_ReadWriteByte(0xFF);
 80035fa:	20ff      	movs	r0, #255	; 0xff
 80035fc:	f7fd fc30 	bl	8000e60 <SPI1_ReadWriteByte>
 8003600:	4603      	mov	r3, r0
 8003602:	b29a      	uxth	r2, r3
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4313      	orrs	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS_DISABLE();      //取消片选
 800360a:	2201      	movs	r2, #1
 800360c:	2104      	movs	r1, #4
 800360e:	4804      	ldr	r0, [pc, #16]	; (8003620 <W25QXX_ReadID+0x68>)
 8003610:	f7fe fa90 	bl	8001b34 <HAL_GPIO_WritePin>
	return Temp;
 8003614:	88fb      	ldrh	r3, [r7, #6]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40010800 	.word	0x40010800

08003624 <W25QXX_Read>:
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void W25QXX_Read(uint8_t* pBuffer,uint32_t ReadAddr,uint16_t NumByteToRead)   //读取flash
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	W25QXX_CS_ENABLE();    //使能器件
 8003632:	2200      	movs	r2, #0
 8003634:	2104      	movs	r1, #4
 8003636:	481f      	ldr	r0, [pc, #124]	; (80036b4 <W25QXX_Read+0x90>)
 8003638:	f7fe fa7c 	bl	8001b34 <HAL_GPIO_WritePin>
    SPI1_ReadWriteByte(W25X_ReadData);      //发送读取命令
 800363c:	2003      	movs	r0, #3
 800363e:	f7fd fc0f 	bl	8000e60 <SPI1_ReadWriteByte>
    if(W25QXX_TYPE==W25Q256)                //如果是W25Q256的话地址为4字节的，要发送最高8位
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <W25QXX_Read+0x94>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	f64e 7218 	movw	r2, #61208	; 0xef18
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <W25QXX_Read+0x36>
    {
        SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>24));
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fc03 	bl	8000e60 <SPI1_ReadWriteByte>
    }
    SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>16));   //发送24bit地址
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fbfd 	bl	8000e60 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>8));
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	b2db      	uxtb	r3, r3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fbf7 	bl	8000e60 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)ReadAddr);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fbf2 	bl	8000e60 <SPI1_ReadWriteByte>
    for(i=0;i<NumByteToRead;i++)
 800367c:	2300      	movs	r3, #0
 800367e:	82fb      	strh	r3, [r7, #22]
 8003680:	e00a      	b.n	8003698 <W25QXX_Read+0x74>
	{
        pBuffer[i]=SPI1_ReadWriteByte(0XFF);    //循环读数
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	18d4      	adds	r4, r2, r3
 8003688:	20ff      	movs	r0, #255	; 0xff
 800368a:	f7fd fbe9 	bl	8000e60 <SPI1_ReadWriteByte>
 800368e:	4603      	mov	r3, r0
 8003690:	7023      	strb	r3, [r4, #0]
    for(i=0;i<NumByteToRead;i++)
 8003692:	8afb      	ldrh	r3, [r7, #22]
 8003694:	3301      	adds	r3, #1
 8003696:	82fb      	strh	r3, [r7, #22]
 8003698:	8afa      	ldrh	r2, [r7, #22]
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	429a      	cmp	r2, r3
 800369e:	d3f0      	bcc.n	8003682 <W25QXX_Read+0x5e>
    }
    W25QXX_CS_DISABLE();      //取消片选
 80036a0:	2201      	movs	r2, #1
 80036a2:	2104      	movs	r1, #4
 80036a4:	4803      	ldr	r0, [pc, #12]	; (80036b4 <W25QXX_Read+0x90>)
 80036a6:	f7fe fa45 	bl	8001b34 <HAL_GPIO_WritePin>
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40010800 	.word	0x40010800
 80036b8:	2000001a 	.word	0x2000001a

080036bc <__errno>:
 80036bc:	4b01      	ldr	r3, [pc, #4]	; (80036c4 <__errno+0x8>)
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000001c 	.word	0x2000001c

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	2600      	movs	r6, #0
 80036cc:	4d0c      	ldr	r5, [pc, #48]	; (8003700 <__libc_init_array+0x38>)
 80036ce:	4c0d      	ldr	r4, [pc, #52]	; (8003704 <__libc_init_array+0x3c>)
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	42a6      	cmp	r6, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	f002 fdbc 	bl	8006254 <_init>
 80036dc:	2600      	movs	r6, #0
 80036de:	4d0a      	ldr	r5, [pc, #40]	; (8003708 <__libc_init_array+0x40>)
 80036e0:	4c0a      	ldr	r4, [pc, #40]	; (800370c <__libc_init_array+0x44>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	42a6      	cmp	r6, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f0:	4798      	blx	r3
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fa:	4798      	blx	r3
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	080066b4 	.word	0x080066b4
 8003704:	080066b4 	.word	0x080066b4
 8003708:	080066b4 	.word	0x080066b4
 800370c:	080066b8 	.word	0x080066b8

08003710 <memset>:
 8003710:	4603      	mov	r3, r0
 8003712:	4402      	add	r2, r0
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <memset+0xa>
 8003718:	4770      	bx	lr
 800371a:	f803 1b01 	strb.w	r1, [r3], #1
 800371e:	e7f9      	b.n	8003714 <memset+0x4>

08003720 <__cvt>:
 8003720:	2b00      	cmp	r3, #0
 8003722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003726:	461f      	mov	r7, r3
 8003728:	bfbb      	ittet	lt
 800372a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800372e:	461f      	movlt	r7, r3
 8003730:	2300      	movge	r3, #0
 8003732:	232d      	movlt	r3, #45	; 0x2d
 8003734:	b088      	sub	sp, #32
 8003736:	4614      	mov	r4, r2
 8003738:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800373a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800373c:	7013      	strb	r3, [r2, #0]
 800373e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003740:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003744:	f023 0820 	bic.w	r8, r3, #32
 8003748:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800374c:	d005      	beq.n	800375a <__cvt+0x3a>
 800374e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003752:	d100      	bne.n	8003756 <__cvt+0x36>
 8003754:	3501      	adds	r5, #1
 8003756:	2302      	movs	r3, #2
 8003758:	e000      	b.n	800375c <__cvt+0x3c>
 800375a:	2303      	movs	r3, #3
 800375c:	aa07      	add	r2, sp, #28
 800375e:	9204      	str	r2, [sp, #16]
 8003760:	aa06      	add	r2, sp, #24
 8003762:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003766:	e9cd 3500 	strd	r3, r5, [sp]
 800376a:	4622      	mov	r2, r4
 800376c:	463b      	mov	r3, r7
 800376e:	f000 fe13 	bl	8004398 <_dtoa_r>
 8003772:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003776:	4606      	mov	r6, r0
 8003778:	d102      	bne.n	8003780 <__cvt+0x60>
 800377a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800377c:	07db      	lsls	r3, r3, #31
 800377e:	d522      	bpl.n	80037c6 <__cvt+0xa6>
 8003780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003784:	eb06 0905 	add.w	r9, r6, r5
 8003788:	d110      	bne.n	80037ac <__cvt+0x8c>
 800378a:	7833      	ldrb	r3, [r6, #0]
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d10a      	bne.n	80037a6 <__cvt+0x86>
 8003790:	2200      	movs	r2, #0
 8003792:	2300      	movs	r3, #0
 8003794:	4620      	mov	r0, r4
 8003796:	4639      	mov	r1, r7
 8003798:	f7fd f972 	bl	8000a80 <__aeabi_dcmpeq>
 800379c:	b918      	cbnz	r0, 80037a6 <__cvt+0x86>
 800379e:	f1c5 0501 	rsb	r5, r5, #1
 80037a2:	f8ca 5000 	str.w	r5, [sl]
 80037a6:	f8da 3000 	ldr.w	r3, [sl]
 80037aa:	4499      	add	r9, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	2300      	movs	r3, #0
 80037b0:	4620      	mov	r0, r4
 80037b2:	4639      	mov	r1, r7
 80037b4:	f7fd f964 	bl	8000a80 <__aeabi_dcmpeq>
 80037b8:	b108      	cbz	r0, 80037be <__cvt+0x9e>
 80037ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80037be:	2230      	movs	r2, #48	; 0x30
 80037c0:	9b07      	ldr	r3, [sp, #28]
 80037c2:	454b      	cmp	r3, r9
 80037c4:	d307      	bcc.n	80037d6 <__cvt+0xb6>
 80037c6:	4630      	mov	r0, r6
 80037c8:	9b07      	ldr	r3, [sp, #28]
 80037ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80037cc:	1b9b      	subs	r3, r3, r6
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	b008      	add	sp, #32
 80037d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	9107      	str	r1, [sp, #28]
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e7f0      	b.n	80037c0 <__cvt+0xa0>

080037de <__exponent>:
 80037de:	4603      	mov	r3, r0
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	2900      	cmp	r1, #0
 80037e4:	f803 2b02 	strb.w	r2, [r3], #2
 80037e8:	bfb6      	itet	lt
 80037ea:	222d      	movlt	r2, #45	; 0x2d
 80037ec:	222b      	movge	r2, #43	; 0x2b
 80037ee:	4249      	neglt	r1, r1
 80037f0:	2909      	cmp	r1, #9
 80037f2:	7042      	strb	r2, [r0, #1]
 80037f4:	dd2b      	ble.n	800384e <__exponent+0x70>
 80037f6:	f10d 0407 	add.w	r4, sp, #7
 80037fa:	46a4      	mov	ip, r4
 80037fc:	270a      	movs	r7, #10
 80037fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8003802:	460a      	mov	r2, r1
 8003804:	46a6      	mov	lr, r4
 8003806:	fb07 1516 	mls	r5, r7, r6, r1
 800380a:	2a63      	cmp	r2, #99	; 0x63
 800380c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003810:	4631      	mov	r1, r6
 8003812:	f104 34ff 	add.w	r4, r4, #4294967295
 8003816:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800381a:	dcf0      	bgt.n	80037fe <__exponent+0x20>
 800381c:	3130      	adds	r1, #48	; 0x30
 800381e:	f1ae 0502 	sub.w	r5, lr, #2
 8003822:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003826:	4629      	mov	r1, r5
 8003828:	1c44      	adds	r4, r0, #1
 800382a:	4561      	cmp	r1, ip
 800382c:	d30a      	bcc.n	8003844 <__exponent+0x66>
 800382e:	f10d 0209 	add.w	r2, sp, #9
 8003832:	eba2 020e 	sub.w	r2, r2, lr
 8003836:	4565      	cmp	r5, ip
 8003838:	bf88      	it	hi
 800383a:	2200      	movhi	r2, #0
 800383c:	4413      	add	r3, r2
 800383e:	1a18      	subs	r0, r3, r0
 8003840:	b003      	add	sp, #12
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003848:	f804 2f01 	strb.w	r2, [r4, #1]!
 800384c:	e7ed      	b.n	800382a <__exponent+0x4c>
 800384e:	2330      	movs	r3, #48	; 0x30
 8003850:	3130      	adds	r1, #48	; 0x30
 8003852:	7083      	strb	r3, [r0, #2]
 8003854:	70c1      	strb	r1, [r0, #3]
 8003856:	1d03      	adds	r3, r0, #4
 8003858:	e7f1      	b.n	800383e <__exponent+0x60>
	...

0800385c <_printf_float>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	b091      	sub	sp, #68	; 0x44
 8003862:	460c      	mov	r4, r1
 8003864:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003868:	4616      	mov	r6, r2
 800386a:	461f      	mov	r7, r3
 800386c:	4605      	mov	r5, r0
 800386e:	f001 fd35 	bl	80052dc <_localeconv_r>
 8003872:	6803      	ldr	r3, [r0, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	f7fc fcd6 	bl	8000228 <strlen>
 800387c:	2300      	movs	r3, #0
 800387e:	930e      	str	r3, [sp, #56]	; 0x38
 8003880:	f8d8 3000 	ldr.w	r3, [r8]
 8003884:	900a      	str	r0, [sp, #40]	; 0x28
 8003886:	3307      	adds	r3, #7
 8003888:	f023 0307 	bic.w	r3, r3, #7
 800388c:	f103 0208 	add.w	r2, r3, #8
 8003890:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003894:	f8d4 b000 	ldr.w	fp, [r4]
 8003898:	f8c8 2000 	str.w	r2, [r8]
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80038a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80038ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ae:	f04f 32ff 	mov.w	r2, #4294967295
 80038b2:	4640      	mov	r0, r8
 80038b4:	4b9c      	ldr	r3, [pc, #624]	; (8003b28 <_printf_float+0x2cc>)
 80038b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038b8:	f7fd f914 	bl	8000ae4 <__aeabi_dcmpun>
 80038bc:	bb70      	cbnz	r0, 800391c <_printf_float+0xc0>
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
 80038c2:	4640      	mov	r0, r8
 80038c4:	4b98      	ldr	r3, [pc, #608]	; (8003b28 <_printf_float+0x2cc>)
 80038c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038c8:	f7fd f8ee 	bl	8000aa8 <__aeabi_dcmple>
 80038cc:	bb30      	cbnz	r0, 800391c <_printf_float+0xc0>
 80038ce:	2200      	movs	r2, #0
 80038d0:	2300      	movs	r3, #0
 80038d2:	4640      	mov	r0, r8
 80038d4:	4651      	mov	r1, sl
 80038d6:	f7fd f8dd 	bl	8000a94 <__aeabi_dcmplt>
 80038da:	b110      	cbz	r0, 80038e2 <_printf_float+0x86>
 80038dc:	232d      	movs	r3, #45	; 0x2d
 80038de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e2:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <_printf_float+0x2d0>)
 80038e4:	4892      	ldr	r0, [pc, #584]	; (8003b30 <_printf_float+0x2d4>)
 80038e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80038ea:	bf94      	ite	ls
 80038ec:	4698      	movls	r8, r3
 80038ee:	4680      	movhi	r8, r0
 80038f0:	2303      	movs	r3, #3
 80038f2:	f04f 0a00 	mov.w	sl, #0
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	f02b 0304 	bic.w	r3, fp, #4
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	4633      	mov	r3, r6
 8003900:	4621      	mov	r1, r4
 8003902:	4628      	mov	r0, r5
 8003904:	9700      	str	r7, [sp, #0]
 8003906:	aa0f      	add	r2, sp, #60	; 0x3c
 8003908:	f000 f9d4 	bl	8003cb4 <_printf_common>
 800390c:	3001      	adds	r0, #1
 800390e:	f040 8090 	bne.w	8003a32 <_printf_float+0x1d6>
 8003912:	f04f 30ff 	mov.w	r0, #4294967295
 8003916:	b011      	add	sp, #68	; 0x44
 8003918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391c:	4642      	mov	r2, r8
 800391e:	4653      	mov	r3, sl
 8003920:	4640      	mov	r0, r8
 8003922:	4651      	mov	r1, sl
 8003924:	f7fd f8de 	bl	8000ae4 <__aeabi_dcmpun>
 8003928:	b148      	cbz	r0, 800393e <_printf_float+0xe2>
 800392a:	f1ba 0f00 	cmp.w	sl, #0
 800392e:	bfb8      	it	lt
 8003930:	232d      	movlt	r3, #45	; 0x2d
 8003932:	4880      	ldr	r0, [pc, #512]	; (8003b34 <_printf_float+0x2d8>)
 8003934:	bfb8      	it	lt
 8003936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800393a:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <_printf_float+0x2dc>)
 800393c:	e7d3      	b.n	80038e6 <_printf_float+0x8a>
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	d142      	bne.n	80039ce <_printf_float+0x172>
 8003948:	2306      	movs	r3, #6
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	9206      	str	r2, [sp, #24]
 8003950:	aa0e      	add	r2, sp, #56	; 0x38
 8003952:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003956:	aa0d      	add	r2, sp, #52	; 0x34
 8003958:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800395c:	9203      	str	r2, [sp, #12]
 800395e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003962:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	4642      	mov	r2, r8
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	4628      	mov	r0, r5
 8003970:	4653      	mov	r3, sl
 8003972:	910b      	str	r1, [sp, #44]	; 0x2c
 8003974:	f7ff fed4 	bl	8003720 <__cvt>
 8003978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800397a:	4680      	mov	r8, r0
 800397c:	2947      	cmp	r1, #71	; 0x47
 800397e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003980:	d108      	bne.n	8003994 <_printf_float+0x138>
 8003982:	1cc8      	adds	r0, r1, #3
 8003984:	db02      	blt.n	800398c <_printf_float+0x130>
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	4299      	cmp	r1, r3
 800398a:	dd40      	ble.n	8003a0e <_printf_float+0x1b2>
 800398c:	f1a9 0902 	sub.w	r9, r9, #2
 8003990:	fa5f f989 	uxtb.w	r9, r9
 8003994:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003998:	d81f      	bhi.n	80039da <_printf_float+0x17e>
 800399a:	464a      	mov	r2, r9
 800399c:	3901      	subs	r1, #1
 800399e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039a2:	910d      	str	r1, [sp, #52]	; 0x34
 80039a4:	f7ff ff1b 	bl	80037de <__exponent>
 80039a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039aa:	4682      	mov	sl, r0
 80039ac:	1813      	adds	r3, r2, r0
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	dc02      	bgt.n	80039ba <_printf_float+0x15e>
 80039b4:	6822      	ldr	r2, [r4, #0]
 80039b6:	07d2      	lsls	r2, r2, #31
 80039b8:	d501      	bpl.n	80039be <_printf_float+0x162>
 80039ba:	3301      	adds	r3, #1
 80039bc:	6123      	str	r3, [r4, #16]
 80039be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d09b      	beq.n	80038fe <_printf_float+0xa2>
 80039c6:	232d      	movs	r3, #45	; 0x2d
 80039c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039cc:	e797      	b.n	80038fe <_printf_float+0xa2>
 80039ce:	2947      	cmp	r1, #71	; 0x47
 80039d0:	d1bc      	bne.n	800394c <_printf_float+0xf0>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ba      	bne.n	800394c <_printf_float+0xf0>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e7b7      	b.n	800394a <_printf_float+0xee>
 80039da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80039de:	d118      	bne.n	8003a12 <_printf_float+0x1b6>
 80039e0:	2900      	cmp	r1, #0
 80039e2:	6863      	ldr	r3, [r4, #4]
 80039e4:	dd0b      	ble.n	80039fe <_printf_float+0x1a2>
 80039e6:	6121      	str	r1, [r4, #16]
 80039e8:	b913      	cbnz	r3, 80039f0 <_printf_float+0x194>
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	07d0      	lsls	r0, r2, #31
 80039ee:	d502      	bpl.n	80039f6 <_printf_float+0x19a>
 80039f0:	3301      	adds	r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	6123      	str	r3, [r4, #16]
 80039f6:	f04f 0a00 	mov.w	sl, #0
 80039fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80039fc:	e7df      	b.n	80039be <_printf_float+0x162>
 80039fe:	b913      	cbnz	r3, 8003a06 <_printf_float+0x1aa>
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	07d2      	lsls	r2, r2, #31
 8003a04:	d501      	bpl.n	8003a0a <_printf_float+0x1ae>
 8003a06:	3302      	adds	r3, #2
 8003a08:	e7f4      	b.n	80039f4 <_printf_float+0x198>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e7f2      	b.n	80039f4 <_printf_float+0x198>
 8003a0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a14:	4299      	cmp	r1, r3
 8003a16:	db05      	blt.n	8003a24 <_printf_float+0x1c8>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	6121      	str	r1, [r4, #16]
 8003a1c:	07d8      	lsls	r0, r3, #31
 8003a1e:	d5ea      	bpl.n	80039f6 <_printf_float+0x19a>
 8003a20:	1c4b      	adds	r3, r1, #1
 8003a22:	e7e7      	b.n	80039f4 <_printf_float+0x198>
 8003a24:	2900      	cmp	r1, #0
 8003a26:	bfcc      	ite	gt
 8003a28:	2201      	movgt	r2, #1
 8003a2a:	f1c1 0202 	rsble	r2, r1, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	e7e0      	b.n	80039f4 <_printf_float+0x198>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	055a      	lsls	r2, r3, #21
 8003a36:	d407      	bmi.n	8003a48 <_printf_float+0x1ec>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4628      	mov	r0, r5
 8003a40:	47b8      	blx	r7
 8003a42:	3001      	adds	r0, #1
 8003a44:	d12b      	bne.n	8003a9e <_printf_float+0x242>
 8003a46:	e764      	b.n	8003912 <_printf_float+0xb6>
 8003a48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a4c:	f240 80dd 	bls.w	8003c0a <_printf_float+0x3ae>
 8003a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a54:	2200      	movs	r2, #0
 8003a56:	2300      	movs	r3, #0
 8003a58:	f7fd f812 	bl	8000a80 <__aeabi_dcmpeq>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d033      	beq.n	8003ac8 <_printf_float+0x26c>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	4a35      	ldr	r2, [pc, #212]	; (8003b3c <_printf_float+0x2e0>)
 8003a68:	47b8      	blx	r7
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	f43f af51 	beq.w	8003912 <_printf_float+0xb6>
 8003a70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a74:	429a      	cmp	r2, r3
 8003a76:	db02      	blt.n	8003a7e <_printf_float+0x222>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	07d8      	lsls	r0, r3, #31
 8003a7c:	d50f      	bpl.n	8003a9e <_printf_float+0x242>
 8003a7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a82:	4631      	mov	r1, r6
 8003a84:	4628      	mov	r0, r5
 8003a86:	47b8      	blx	r7
 8003a88:	3001      	adds	r0, #1
 8003a8a:	f43f af42 	beq.w	8003912 <_printf_float+0xb6>
 8003a8e:	f04f 0800 	mov.w	r8, #0
 8003a92:	f104 091a 	add.w	r9, r4, #26
 8003a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4543      	cmp	r3, r8
 8003a9c:	dc09      	bgt.n	8003ab2 <_printf_float+0x256>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	079b      	lsls	r3, r3, #30
 8003aa2:	f100 8102 	bmi.w	8003caa <_printf_float+0x44e>
 8003aa6:	68e0      	ldr	r0, [r4, #12]
 8003aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003aaa:	4298      	cmp	r0, r3
 8003aac:	bfb8      	it	lt
 8003aae:	4618      	movlt	r0, r3
 8003ab0:	e731      	b.n	8003916 <_printf_float+0xba>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	464a      	mov	r2, r9
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b8      	blx	r7
 8003abc:	3001      	adds	r0, #1
 8003abe:	f43f af28 	beq.w	8003912 <_printf_float+0xb6>
 8003ac2:	f108 0801 	add.w	r8, r8, #1
 8003ac6:	e7e6      	b.n	8003a96 <_printf_float+0x23a>
 8003ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dc38      	bgt.n	8003b40 <_printf_float+0x2e4>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <_printf_float+0x2e0>)
 8003ad6:	47b8      	blx	r7
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f43f af1a 	beq.w	8003912 <_printf_float+0xb6>
 8003ade:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d102      	bne.n	8003aec <_printf_float+0x290>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	07d9      	lsls	r1, r3, #31
 8003aea:	d5d8      	bpl.n	8003a9e <_printf_float+0x242>
 8003aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003af0:	4631      	mov	r1, r6
 8003af2:	4628      	mov	r0, r5
 8003af4:	47b8      	blx	r7
 8003af6:	3001      	adds	r0, #1
 8003af8:	f43f af0b 	beq.w	8003912 <_printf_float+0xb6>
 8003afc:	f04f 0900 	mov.w	r9, #0
 8003b00:	f104 0a1a 	add.w	sl, r4, #26
 8003b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b06:	425b      	negs	r3, r3
 8003b08:	454b      	cmp	r3, r9
 8003b0a:	dc01      	bgt.n	8003b10 <_printf_float+0x2b4>
 8003b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b0e:	e794      	b.n	8003a3a <_printf_float+0x1de>
 8003b10:	2301      	movs	r3, #1
 8003b12:	4652      	mov	r2, sl
 8003b14:	4631      	mov	r1, r6
 8003b16:	4628      	mov	r0, r5
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	f43f aef9 	beq.w	8003912 <_printf_float+0xb6>
 8003b20:	f109 0901 	add.w	r9, r9, #1
 8003b24:	e7ee      	b.n	8003b04 <_printf_float+0x2a8>
 8003b26:	bf00      	nop
 8003b28:	7fefffff 	.word	0x7fefffff
 8003b2c:	080062dc 	.word	0x080062dc
 8003b30:	080062e0 	.word	0x080062e0
 8003b34:	080062e8 	.word	0x080062e8
 8003b38:	080062e4 	.word	0x080062e4
 8003b3c:	080062ec 	.word	0x080062ec
 8003b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bfa8      	it	ge
 8003b48:	461a      	movge	r2, r3
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	4691      	mov	r9, r2
 8003b4e:	dc37      	bgt.n	8003bc0 <_printf_float+0x364>
 8003b50:	f04f 0b00 	mov.w	fp, #0
 8003b54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b58:	f104 021a 	add.w	r2, r4, #26
 8003b5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b60:	ebaa 0309 	sub.w	r3, sl, r9
 8003b64:	455b      	cmp	r3, fp
 8003b66:	dc33      	bgt.n	8003bd0 <_printf_float+0x374>
 8003b68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	db3b      	blt.n	8003be8 <_printf_float+0x38c>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07da      	lsls	r2, r3, #31
 8003b74:	d438      	bmi.n	8003be8 <_printf_float+0x38c>
 8003b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b7a:	eba3 020a 	sub.w	r2, r3, sl
 8003b7e:	eba3 0901 	sub.w	r9, r3, r1
 8003b82:	4591      	cmp	r9, r2
 8003b84:	bfa8      	it	ge
 8003b86:	4691      	movge	r9, r2
 8003b88:	f1b9 0f00 	cmp.w	r9, #0
 8003b8c:	dc34      	bgt.n	8003bf8 <_printf_float+0x39c>
 8003b8e:	f04f 0800 	mov.w	r8, #0
 8003b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b96:	f104 0a1a 	add.w	sl, r4, #26
 8003b9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	eba3 0309 	sub.w	r3, r3, r9
 8003ba4:	4543      	cmp	r3, r8
 8003ba6:	f77f af7a 	ble.w	8003a9e <_printf_float+0x242>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4652      	mov	r2, sl
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f aeac 	beq.w	8003912 <_printf_float+0xb6>
 8003bba:	f108 0801 	add.w	r8, r8, #1
 8003bbe:	e7ec      	b.n	8003b9a <_printf_float+0x33e>
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47b8      	blx	r7
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d1c0      	bne.n	8003b50 <_printf_float+0x2f4>
 8003bce:	e6a0      	b.n	8003912 <_printf_float+0xb6>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003bd8:	47b8      	blx	r7
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f43f ae99 	beq.w	8003912 <_printf_float+0xb6>
 8003be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003be2:	f10b 0b01 	add.w	fp, fp, #1
 8003be6:	e7b9      	b.n	8003b5c <_printf_float+0x300>
 8003be8:	4631      	mov	r1, r6
 8003bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d1bf      	bne.n	8003b76 <_printf_float+0x31a>
 8003bf6:	e68c      	b.n	8003912 <_printf_float+0xb6>
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	eb08 020a 	add.w	r2, r8, sl
 8003c02:	47b8      	blx	r7
 8003c04:	3001      	adds	r0, #1
 8003c06:	d1c2      	bne.n	8003b8e <_printf_float+0x332>
 8003c08:	e683      	b.n	8003912 <_printf_float+0xb6>
 8003c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c0c:	2a01      	cmp	r2, #1
 8003c0e:	dc01      	bgt.n	8003c14 <_printf_float+0x3b8>
 8003c10:	07db      	lsls	r3, r3, #31
 8003c12:	d537      	bpl.n	8003c84 <_printf_float+0x428>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4642      	mov	r2, r8
 8003c18:	4631      	mov	r1, r6
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47b8      	blx	r7
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f43f ae77 	beq.w	8003912 <_printf_float+0xb6>
 8003c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f43f ae6f 	beq.w	8003912 <_printf_float+0xb6>
 8003c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f7fc ff20 	bl	8000a80 <__aeabi_dcmpeq>
 8003c40:	b9d8      	cbnz	r0, 8003c7a <_printf_float+0x41e>
 8003c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c44:	f108 0201 	add.w	r2, r8, #1
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b8      	blx	r7
 8003c50:	3001      	adds	r0, #1
 8003c52:	d10e      	bne.n	8003c72 <_printf_float+0x416>
 8003c54:	e65d      	b.n	8003912 <_printf_float+0xb6>
 8003c56:	2301      	movs	r3, #1
 8003c58:	464a      	mov	r2, r9
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	47b8      	blx	r7
 8003c60:	3001      	adds	r0, #1
 8003c62:	f43f ae56 	beq.w	8003912 <_printf_float+0xb6>
 8003c66:	f108 0801 	add.w	r8, r8, #1
 8003c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	4543      	cmp	r3, r8
 8003c70:	dcf1      	bgt.n	8003c56 <_printf_float+0x3fa>
 8003c72:	4653      	mov	r3, sl
 8003c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c78:	e6e0      	b.n	8003a3c <_printf_float+0x1e0>
 8003c7a:	f04f 0800 	mov.w	r8, #0
 8003c7e:	f104 091a 	add.w	r9, r4, #26
 8003c82:	e7f2      	b.n	8003c6a <_printf_float+0x40e>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4642      	mov	r2, r8
 8003c88:	e7df      	b.n	8003c4a <_printf_float+0x3ee>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	464a      	mov	r2, r9
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	f43f ae3c 	beq.w	8003912 <_printf_float+0xb6>
 8003c9a:	f108 0801 	add.w	r8, r8, #1
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ca2:	1a5b      	subs	r3, r3, r1
 8003ca4:	4543      	cmp	r3, r8
 8003ca6:	dcf0      	bgt.n	8003c8a <_printf_float+0x42e>
 8003ca8:	e6fd      	b.n	8003aa6 <_printf_float+0x24a>
 8003caa:	f04f 0800 	mov.w	r8, #0
 8003cae:	f104 0919 	add.w	r9, r4, #25
 8003cb2:	e7f4      	b.n	8003c9e <_printf_float+0x442>

08003cb4 <_printf_common>:
 8003cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb8:	4616      	mov	r6, r2
 8003cba:	4699      	mov	r9, r3
 8003cbc:	688a      	ldr	r2, [r1, #8]
 8003cbe:	690b      	ldr	r3, [r1, #16]
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bfb8      	it	lt
 8003cc6:	4613      	movlt	r3, r2
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd4:	b10a      	cbz	r2, 8003cda <_printf_common+0x26>
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	6033      	str	r3, [r6, #0]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	0699      	lsls	r1, r3, #26
 8003cde:	bf42      	ittt	mi
 8003ce0:	6833      	ldrmi	r3, [r6, #0]
 8003ce2:	3302      	addmi	r3, #2
 8003ce4:	6033      	strmi	r3, [r6, #0]
 8003ce6:	6825      	ldr	r5, [r4, #0]
 8003ce8:	f015 0506 	ands.w	r5, r5, #6
 8003cec:	d106      	bne.n	8003cfc <_printf_common+0x48>
 8003cee:	f104 0a19 	add.w	sl, r4, #25
 8003cf2:	68e3      	ldr	r3, [r4, #12]
 8003cf4:	6832      	ldr	r2, [r6, #0]
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	dc28      	bgt.n	8003d4e <_printf_common+0x9a>
 8003cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d00:	1e13      	subs	r3, r2, #0
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	bf18      	it	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	0692      	lsls	r2, r2, #26
 8003d0a:	d42d      	bmi.n	8003d68 <_printf_common+0xb4>
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d14:	47c0      	blx	r8
 8003d16:	3001      	adds	r0, #1
 8003d18:	d020      	beq.n	8003d5c <_printf_common+0xa8>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	68e5      	ldr	r5, [r4, #12]
 8003d1e:	f003 0306 	and.w	r3, r3, #6
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	bf18      	it	ne
 8003d26:	2500      	movne	r5, #0
 8003d28:	6832      	ldr	r2, [r6, #0]
 8003d2a:	f04f 0600 	mov.w	r6, #0
 8003d2e:	68a3      	ldr	r3, [r4, #8]
 8003d30:	bf08      	it	eq
 8003d32:	1aad      	subeq	r5, r5, r2
 8003d34:	6922      	ldr	r2, [r4, #16]
 8003d36:	bf08      	it	eq
 8003d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bfc4      	itt	gt
 8003d40:	1a9b      	subgt	r3, r3, r2
 8003d42:	18ed      	addgt	r5, r5, r3
 8003d44:	341a      	adds	r4, #26
 8003d46:	42b5      	cmp	r5, r6
 8003d48:	d11a      	bne.n	8003d80 <_printf_common+0xcc>
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e008      	b.n	8003d60 <_printf_common+0xac>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4652      	mov	r2, sl
 8003d52:	4649      	mov	r1, r9
 8003d54:	4638      	mov	r0, r7
 8003d56:	47c0      	blx	r8
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d103      	bne.n	8003d64 <_printf_common+0xb0>
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d64:	3501      	adds	r5, #1
 8003d66:	e7c4      	b.n	8003cf2 <_printf_common+0x3e>
 8003d68:	2030      	movs	r0, #48	; 0x30
 8003d6a:	18e1      	adds	r1, r4, r3
 8003d6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d76:	4422      	add	r2, r4
 8003d78:	3302      	adds	r3, #2
 8003d7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d7e:	e7c5      	b.n	8003d0c <_printf_common+0x58>
 8003d80:	2301      	movs	r3, #1
 8003d82:	4622      	mov	r2, r4
 8003d84:	4649      	mov	r1, r9
 8003d86:	4638      	mov	r0, r7
 8003d88:	47c0      	blx	r8
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d0e6      	beq.n	8003d5c <_printf_common+0xa8>
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7d9      	b.n	8003d46 <_printf_common+0x92>
	...

08003d94 <_printf_i>:
 8003d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	7e0f      	ldrb	r7, [r1, #24]
 8003d9a:	4691      	mov	r9, r2
 8003d9c:	2f78      	cmp	r7, #120	; 0x78
 8003d9e:	4680      	mov	r8, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	469a      	mov	sl, r3
 8003da4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003daa:	d807      	bhi.n	8003dbc <_printf_i+0x28>
 8003dac:	2f62      	cmp	r7, #98	; 0x62
 8003dae:	d80a      	bhi.n	8003dc6 <_printf_i+0x32>
 8003db0:	2f00      	cmp	r7, #0
 8003db2:	f000 80d9 	beq.w	8003f68 <_printf_i+0x1d4>
 8003db6:	2f58      	cmp	r7, #88	; 0x58
 8003db8:	f000 80a4 	beq.w	8003f04 <_printf_i+0x170>
 8003dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dc4:	e03a      	b.n	8003e3c <_printf_i+0xa8>
 8003dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dca:	2b15      	cmp	r3, #21
 8003dcc:	d8f6      	bhi.n	8003dbc <_printf_i+0x28>
 8003dce:	a101      	add	r1, pc, #4	; (adr r1, 8003dd4 <_printf_i+0x40>)
 8003dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e41 	.word	0x08003e41
 8003ddc:	08003dbd 	.word	0x08003dbd
 8003de0:	08003dbd 	.word	0x08003dbd
 8003de4:	08003dbd 	.word	0x08003dbd
 8003de8:	08003dbd 	.word	0x08003dbd
 8003dec:	08003e41 	.word	0x08003e41
 8003df0:	08003dbd 	.word	0x08003dbd
 8003df4:	08003dbd 	.word	0x08003dbd
 8003df8:	08003dbd 	.word	0x08003dbd
 8003dfc:	08003dbd 	.word	0x08003dbd
 8003e00:	08003f4f 	.word	0x08003f4f
 8003e04:	08003e71 	.word	0x08003e71
 8003e08:	08003f31 	.word	0x08003f31
 8003e0c:	08003dbd 	.word	0x08003dbd
 8003e10:	08003dbd 	.word	0x08003dbd
 8003e14:	08003f71 	.word	0x08003f71
 8003e18:	08003dbd 	.word	0x08003dbd
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003dbd 	.word	0x08003dbd
 8003e24:	08003dbd 	.word	0x08003dbd
 8003e28:	08003f39 	.word	0x08003f39
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	1d1a      	adds	r2, r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	602a      	str	r2, [r5, #0]
 8003e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0a4      	b.n	8003f8a <_printf_i+0x1f6>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	6829      	ldr	r1, [r5, #0]
 8003e44:	0606      	lsls	r6, r0, #24
 8003e46:	f101 0304 	add.w	r3, r1, #4
 8003e4a:	d50a      	bpl.n	8003e62 <_printf_i+0xce>
 8003e4c:	680e      	ldr	r6, [r1, #0]
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	2e00      	cmp	r6, #0
 8003e52:	da03      	bge.n	8003e5c <_printf_i+0xc8>
 8003e54:	232d      	movs	r3, #45	; 0x2d
 8003e56:	4276      	negs	r6, r6
 8003e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	485e      	ldr	r0, [pc, #376]	; (8003fd8 <_printf_i+0x244>)
 8003e60:	e019      	b.n	8003e96 <_printf_i+0x102>
 8003e62:	680e      	ldr	r6, [r1, #0]
 8003e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e68:	602b      	str	r3, [r5, #0]
 8003e6a:	bf18      	it	ne
 8003e6c:	b236      	sxthne	r6, r6
 8003e6e:	e7ef      	b.n	8003e50 <_printf_i+0xbc>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	1d19      	adds	r1, r3, #4
 8003e76:	6029      	str	r1, [r5, #0]
 8003e78:	0601      	lsls	r1, r0, #24
 8003e7a:	d501      	bpl.n	8003e80 <_printf_i+0xec>
 8003e7c:	681e      	ldr	r6, [r3, #0]
 8003e7e:	e002      	b.n	8003e86 <_printf_i+0xf2>
 8003e80:	0646      	lsls	r6, r0, #25
 8003e82:	d5fb      	bpl.n	8003e7c <_printf_i+0xe8>
 8003e84:	881e      	ldrh	r6, [r3, #0]
 8003e86:	2f6f      	cmp	r7, #111	; 0x6f
 8003e88:	bf0c      	ite	eq
 8003e8a:	2308      	moveq	r3, #8
 8003e8c:	230a      	movne	r3, #10
 8003e8e:	4852      	ldr	r0, [pc, #328]	; (8003fd8 <_printf_i+0x244>)
 8003e90:	2100      	movs	r1, #0
 8003e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e96:	6865      	ldr	r5, [r4, #4]
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	bfa8      	it	ge
 8003e9c:	6821      	ldrge	r1, [r4, #0]
 8003e9e:	60a5      	str	r5, [r4, #8]
 8003ea0:	bfa4      	itt	ge
 8003ea2:	f021 0104 	bicge.w	r1, r1, #4
 8003ea6:	6021      	strge	r1, [r4, #0]
 8003ea8:	b90e      	cbnz	r6, 8003eae <_printf_i+0x11a>
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	d04d      	beq.n	8003f4a <_printf_i+0x1b6>
 8003eae:	4615      	mov	r5, r2
 8003eb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eb4:	fb03 6711 	mls	r7, r3, r1, r6
 8003eb8:	5dc7      	ldrb	r7, [r0, r7]
 8003eba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ebe:	4637      	mov	r7, r6
 8003ec0:	42bb      	cmp	r3, r7
 8003ec2:	460e      	mov	r6, r1
 8003ec4:	d9f4      	bls.n	8003eb0 <_printf_i+0x11c>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d10b      	bne.n	8003ee2 <_printf_i+0x14e>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	07de      	lsls	r6, r3, #31
 8003ece:	d508      	bpl.n	8003ee2 <_printf_i+0x14e>
 8003ed0:	6923      	ldr	r3, [r4, #16]
 8003ed2:	6861      	ldr	r1, [r4, #4]
 8003ed4:	4299      	cmp	r1, r3
 8003ed6:	bfde      	ittt	le
 8003ed8:	2330      	movle	r3, #48	; 0x30
 8003eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ede:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ee2:	1b52      	subs	r2, r2, r5
 8003ee4:	6122      	str	r2, [r4, #16]
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4640      	mov	r0, r8
 8003eec:	f8cd a000 	str.w	sl, [sp]
 8003ef0:	aa03      	add	r2, sp, #12
 8003ef2:	f7ff fedf 	bl	8003cb4 <_printf_common>
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d14c      	bne.n	8003f94 <_printf_i+0x200>
 8003efa:	f04f 30ff 	mov.w	r0, #4294967295
 8003efe:	b004      	add	sp, #16
 8003f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f04:	4834      	ldr	r0, [pc, #208]	; (8003fd8 <_printf_i+0x244>)
 8003f06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f0a:	6829      	ldr	r1, [r5, #0]
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f12:	6029      	str	r1, [r5, #0]
 8003f14:	061d      	lsls	r5, r3, #24
 8003f16:	d514      	bpl.n	8003f42 <_printf_i+0x1ae>
 8003f18:	07df      	lsls	r7, r3, #31
 8003f1a:	bf44      	itt	mi
 8003f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f20:	6023      	strmi	r3, [r4, #0]
 8003f22:	b91e      	cbnz	r6, 8003f2c <_printf_i+0x198>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	e7af      	b.n	8003e90 <_printf_i+0xfc>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f043 0320 	orr.w	r3, r3, #32
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	2378      	movs	r3, #120	; 0x78
 8003f3a:	4828      	ldr	r0, [pc, #160]	; (8003fdc <_printf_i+0x248>)
 8003f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f40:	e7e3      	b.n	8003f0a <_printf_i+0x176>
 8003f42:	0659      	lsls	r1, r3, #25
 8003f44:	bf48      	it	mi
 8003f46:	b2b6      	uxthmi	r6, r6
 8003f48:	e7e6      	b.n	8003f18 <_printf_i+0x184>
 8003f4a:	4615      	mov	r5, r2
 8003f4c:	e7bb      	b.n	8003ec6 <_printf_i+0x132>
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	6826      	ldr	r6, [r4, #0]
 8003f52:	1d18      	adds	r0, r3, #4
 8003f54:	6961      	ldr	r1, [r4, #20]
 8003f56:	6028      	str	r0, [r5, #0]
 8003f58:	0635      	lsls	r5, r6, #24
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	d501      	bpl.n	8003f62 <_printf_i+0x1ce>
 8003f5e:	6019      	str	r1, [r3, #0]
 8003f60:	e002      	b.n	8003f68 <_printf_i+0x1d4>
 8003f62:	0670      	lsls	r0, r6, #25
 8003f64:	d5fb      	bpl.n	8003f5e <_printf_i+0x1ca>
 8003f66:	8019      	strh	r1, [r3, #0]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4615      	mov	r5, r2
 8003f6c:	6123      	str	r3, [r4, #16]
 8003f6e:	e7ba      	b.n	8003ee6 <_printf_i+0x152>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	2100      	movs	r1, #0
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	602a      	str	r2, [r5, #0]
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	6862      	ldr	r2, [r4, #4]
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f001 fa21 	bl	80053c4 <memchr>
 8003f82:	b108      	cbz	r0, 8003f88 <_printf_i+0x1f4>
 8003f84:	1b40      	subs	r0, r0, r5
 8003f86:	6060      	str	r0, [r4, #4]
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f92:	e7a8      	b.n	8003ee6 <_printf_i+0x152>
 8003f94:	462a      	mov	r2, r5
 8003f96:	4649      	mov	r1, r9
 8003f98:	4640      	mov	r0, r8
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	47d0      	blx	sl
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d0ab      	beq.n	8003efa <_printf_i+0x166>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	079b      	lsls	r3, r3, #30
 8003fa6:	d413      	bmi.n	8003fd0 <_printf_i+0x23c>
 8003fa8:	68e0      	ldr	r0, [r4, #12]
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	4298      	cmp	r0, r3
 8003fae:	bfb8      	it	lt
 8003fb0:	4618      	movlt	r0, r3
 8003fb2:	e7a4      	b.n	8003efe <_printf_i+0x16a>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4640      	mov	r0, r8
 8003fbc:	47d0      	blx	sl
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d09b      	beq.n	8003efa <_printf_i+0x166>
 8003fc2:	3501      	adds	r5, #1
 8003fc4:	68e3      	ldr	r3, [r4, #12]
 8003fc6:	9903      	ldr	r1, [sp, #12]
 8003fc8:	1a5b      	subs	r3, r3, r1
 8003fca:	42ab      	cmp	r3, r5
 8003fcc:	dcf2      	bgt.n	8003fb4 <_printf_i+0x220>
 8003fce:	e7eb      	b.n	8003fa8 <_printf_i+0x214>
 8003fd0:	2500      	movs	r5, #0
 8003fd2:	f104 0619 	add.w	r6, r4, #25
 8003fd6:	e7f5      	b.n	8003fc4 <_printf_i+0x230>
 8003fd8:	080062ee 	.word	0x080062ee
 8003fdc:	080062ff 	.word	0x080062ff

08003fe0 <iprintf>:
 8003fe0:	b40f      	push	{r0, r1, r2, r3}
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <iprintf+0x2c>)
 8003fe4:	b513      	push	{r0, r1, r4, lr}
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	b124      	cbz	r4, 8003ff4 <iprintf+0x14>
 8003fea:	69a3      	ldr	r3, [r4, #24]
 8003fec:	b913      	cbnz	r3, 8003ff4 <iprintf+0x14>
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f001 f8d6 	bl	80051a0 <__sinit>
 8003ff4:	ab05      	add	r3, sp, #20
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	9a04      	ldr	r2, [sp, #16]
 8003ffa:	68a1      	ldr	r1, [r4, #8]
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f001 fe97 	bl	8005d30 <_vfiprintf_r>
 8004002:	b002      	add	sp, #8
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	2000001c 	.word	0x2000001c

08004010 <_puts_r>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	460e      	mov	r6, r1
 8004014:	4605      	mov	r5, r0
 8004016:	b118      	cbz	r0, 8004020 <_puts_r+0x10>
 8004018:	6983      	ldr	r3, [r0, #24]
 800401a:	b90b      	cbnz	r3, 8004020 <_puts_r+0x10>
 800401c:	f001 f8c0 	bl	80051a0 <__sinit>
 8004020:	69ab      	ldr	r3, [r5, #24]
 8004022:	68ac      	ldr	r4, [r5, #8]
 8004024:	b913      	cbnz	r3, 800402c <_puts_r+0x1c>
 8004026:	4628      	mov	r0, r5
 8004028:	f001 f8ba 	bl	80051a0 <__sinit>
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <_puts_r+0xd0>)
 800402e:	429c      	cmp	r4, r3
 8004030:	d120      	bne.n	8004074 <_puts_r+0x64>
 8004032:	686c      	ldr	r4, [r5, #4]
 8004034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d405      	bmi.n	8004046 <_puts_r+0x36>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	0598      	lsls	r0, r3, #22
 800403e:	d402      	bmi.n	8004046 <_puts_r+0x36>
 8004040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004042:	f001 f950 	bl	80052e6 <__retarget_lock_acquire_recursive>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	0719      	lsls	r1, r3, #28
 800404a:	d51d      	bpl.n	8004088 <_puts_r+0x78>
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	b1db      	cbz	r3, 8004088 <_puts_r+0x78>
 8004050:	3e01      	subs	r6, #1
 8004052:	68a3      	ldr	r3, [r4, #8]
 8004054:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004058:	3b01      	subs	r3, #1
 800405a:	60a3      	str	r3, [r4, #8]
 800405c:	bb39      	cbnz	r1, 80040ae <_puts_r+0x9e>
 800405e:	2b00      	cmp	r3, #0
 8004060:	da38      	bge.n	80040d4 <_puts_r+0xc4>
 8004062:	4622      	mov	r2, r4
 8004064:	210a      	movs	r1, #10
 8004066:	4628      	mov	r0, r5
 8004068:	f000 f848 	bl	80040fc <__swbuf_r>
 800406c:	3001      	adds	r0, #1
 800406e:	d011      	beq.n	8004094 <_puts_r+0x84>
 8004070:	250a      	movs	r5, #10
 8004072:	e011      	b.n	8004098 <_puts_r+0x88>
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <_puts_r+0xd4>)
 8004076:	429c      	cmp	r4, r3
 8004078:	d101      	bne.n	800407e <_puts_r+0x6e>
 800407a:	68ac      	ldr	r4, [r5, #8]
 800407c:	e7da      	b.n	8004034 <_puts_r+0x24>
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <_puts_r+0xd8>)
 8004080:	429c      	cmp	r4, r3
 8004082:	bf08      	it	eq
 8004084:	68ec      	ldreq	r4, [r5, #12]
 8004086:	e7d5      	b.n	8004034 <_puts_r+0x24>
 8004088:	4621      	mov	r1, r4
 800408a:	4628      	mov	r0, r5
 800408c:	f000 f888 	bl	80041a0 <__swsetup_r>
 8004090:	2800      	cmp	r0, #0
 8004092:	d0dd      	beq.n	8004050 <_puts_r+0x40>
 8004094:	f04f 35ff 	mov.w	r5, #4294967295
 8004098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800409a:	07da      	lsls	r2, r3, #31
 800409c:	d405      	bmi.n	80040aa <_puts_r+0x9a>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	059b      	lsls	r3, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_puts_r+0x9a>
 80040a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a6:	f001 f91f 	bl	80052e8 <__retarget_lock_release_recursive>
 80040aa:	4628      	mov	r0, r5
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da04      	bge.n	80040bc <_puts_r+0xac>
 80040b2:	69a2      	ldr	r2, [r4, #24]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dc06      	bgt.n	80040c6 <_puts_r+0xb6>
 80040b8:	290a      	cmp	r1, #10
 80040ba:	d004      	beq.n	80040c6 <_puts_r+0xb6>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	6022      	str	r2, [r4, #0]
 80040c2:	7019      	strb	r1, [r3, #0]
 80040c4:	e7c5      	b.n	8004052 <_puts_r+0x42>
 80040c6:	4622      	mov	r2, r4
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f817 	bl	80040fc <__swbuf_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d1bf      	bne.n	8004052 <_puts_r+0x42>
 80040d2:	e7df      	b.n	8004094 <_puts_r+0x84>
 80040d4:	250a      	movs	r5, #10
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	6022      	str	r2, [r4, #0]
 80040dc:	701d      	strb	r5, [r3, #0]
 80040de:	e7db      	b.n	8004098 <_puts_r+0x88>
 80040e0:	080063c0 	.word	0x080063c0
 80040e4:	080063e0 	.word	0x080063e0
 80040e8:	080063a0 	.word	0x080063a0

080040ec <puts>:
 80040ec:	4b02      	ldr	r3, [pc, #8]	; (80040f8 <puts+0xc>)
 80040ee:	4601      	mov	r1, r0
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	f7ff bf8d 	b.w	8004010 <_puts_r>
 80040f6:	bf00      	nop
 80040f8:	2000001c 	.word	0x2000001c

080040fc <__swbuf_r>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	460e      	mov	r6, r1
 8004100:	4614      	mov	r4, r2
 8004102:	4605      	mov	r5, r0
 8004104:	b118      	cbz	r0, 800410e <__swbuf_r+0x12>
 8004106:	6983      	ldr	r3, [r0, #24]
 8004108:	b90b      	cbnz	r3, 800410e <__swbuf_r+0x12>
 800410a:	f001 f849 	bl	80051a0 <__sinit>
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <__swbuf_r+0x98>)
 8004110:	429c      	cmp	r4, r3
 8004112:	d12b      	bne.n	800416c <__swbuf_r+0x70>
 8004114:	686c      	ldr	r4, [r5, #4]
 8004116:	69a3      	ldr	r3, [r4, #24]
 8004118:	60a3      	str	r3, [r4, #8]
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	071a      	lsls	r2, r3, #28
 800411e:	d52f      	bpl.n	8004180 <__swbuf_r+0x84>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	b36b      	cbz	r3, 8004180 <__swbuf_r+0x84>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	b2f6      	uxtb	r6, r6
 800412a:	1ac0      	subs	r0, r0, r3
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	4637      	mov	r7, r6
 8004130:	4283      	cmp	r3, r0
 8004132:	dc04      	bgt.n	800413e <__swbuf_r+0x42>
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	f000 ff9e 	bl	8005078 <_fflush_r>
 800413c:	bb30      	cbnz	r0, 800418c <__swbuf_r+0x90>
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	3001      	adds	r0, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	6022      	str	r2, [r4, #0]
 800414c:	701e      	strb	r6, [r3, #0]
 800414e:	6963      	ldr	r3, [r4, #20]
 8004150:	4283      	cmp	r3, r0
 8004152:	d004      	beq.n	800415e <__swbuf_r+0x62>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	07db      	lsls	r3, r3, #31
 8004158:	d506      	bpl.n	8004168 <__swbuf_r+0x6c>
 800415a:	2e0a      	cmp	r6, #10
 800415c:	d104      	bne.n	8004168 <__swbuf_r+0x6c>
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f000 ff89 	bl	8005078 <_fflush_r>
 8004166:	b988      	cbnz	r0, 800418c <__swbuf_r+0x90>
 8004168:	4638      	mov	r0, r7
 800416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <__swbuf_r+0x9c>)
 800416e:	429c      	cmp	r4, r3
 8004170:	d101      	bne.n	8004176 <__swbuf_r+0x7a>
 8004172:	68ac      	ldr	r4, [r5, #8]
 8004174:	e7cf      	b.n	8004116 <__swbuf_r+0x1a>
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <__swbuf_r+0xa0>)
 8004178:	429c      	cmp	r4, r3
 800417a:	bf08      	it	eq
 800417c:	68ec      	ldreq	r4, [r5, #12]
 800417e:	e7ca      	b.n	8004116 <__swbuf_r+0x1a>
 8004180:	4621      	mov	r1, r4
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f80c 	bl	80041a0 <__swsetup_r>
 8004188:	2800      	cmp	r0, #0
 800418a:	d0cb      	beq.n	8004124 <__swbuf_r+0x28>
 800418c:	f04f 37ff 	mov.w	r7, #4294967295
 8004190:	e7ea      	b.n	8004168 <__swbuf_r+0x6c>
 8004192:	bf00      	nop
 8004194:	080063c0 	.word	0x080063c0
 8004198:	080063e0 	.word	0x080063e0
 800419c:	080063a0 	.word	0x080063a0

080041a0 <__swsetup_r>:
 80041a0:	4b32      	ldr	r3, [pc, #200]	; (800426c <__swsetup_r+0xcc>)
 80041a2:	b570      	push	{r4, r5, r6, lr}
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	4606      	mov	r6, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	b125      	cbz	r5, 80041b6 <__swsetup_r+0x16>
 80041ac:	69ab      	ldr	r3, [r5, #24]
 80041ae:	b913      	cbnz	r3, 80041b6 <__swsetup_r+0x16>
 80041b0:	4628      	mov	r0, r5
 80041b2:	f000 fff5 	bl	80051a0 <__sinit>
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <__swsetup_r+0xd0>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	d10f      	bne.n	80041dc <__swsetup_r+0x3c>
 80041bc:	686c      	ldr	r4, [r5, #4]
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041c4:	0719      	lsls	r1, r3, #28
 80041c6:	d42c      	bmi.n	8004222 <__swsetup_r+0x82>
 80041c8:	06dd      	lsls	r5, r3, #27
 80041ca:	d411      	bmi.n	80041f0 <__swsetup_r+0x50>
 80041cc:	2309      	movs	r3, #9
 80041ce:	6033      	str	r3, [r6, #0]
 80041d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	e03e      	b.n	800425a <__swsetup_r+0xba>
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <__swsetup_r+0xd4>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	d101      	bne.n	80041e6 <__swsetup_r+0x46>
 80041e2:	68ac      	ldr	r4, [r5, #8]
 80041e4:	e7eb      	b.n	80041be <__swsetup_r+0x1e>
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <__swsetup_r+0xd8>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	bf08      	it	eq
 80041ec:	68ec      	ldreq	r4, [r5, #12]
 80041ee:	e7e6      	b.n	80041be <__swsetup_r+0x1e>
 80041f0:	0758      	lsls	r0, r3, #29
 80041f2:	d512      	bpl.n	800421a <__swsetup_r+0x7a>
 80041f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f6:	b141      	cbz	r1, 800420a <__swsetup_r+0x6a>
 80041f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041fc:	4299      	cmp	r1, r3
 80041fe:	d002      	beq.n	8004206 <__swsetup_r+0x66>
 8004200:	4630      	mov	r0, r6
 8004202:	f001 fc91 	bl	8005b28 <_free_r>
 8004206:	2300      	movs	r3, #0
 8004208:	6363      	str	r3, [r4, #52]	; 0x34
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	2300      	movs	r3, #0
 8004214:	6063      	str	r3, [r4, #4]
 8004216:	6923      	ldr	r3, [r4, #16]
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	b94b      	cbnz	r3, 800423a <__swsetup_r+0x9a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d003      	beq.n	800423a <__swsetup_r+0x9a>
 8004232:	4621      	mov	r1, r4
 8004234:	4630      	mov	r0, r6
 8004236:	f001 f87d 	bl	8005334 <__smakebuf_r>
 800423a:	89a0      	ldrh	r0, [r4, #12]
 800423c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004240:	f010 0301 	ands.w	r3, r0, #1
 8004244:	d00a      	beq.n	800425c <__swsetup_r+0xbc>
 8004246:	2300      	movs	r3, #0
 8004248:	60a3      	str	r3, [r4, #8]
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	425b      	negs	r3, r3
 800424e:	61a3      	str	r3, [r4, #24]
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	b943      	cbnz	r3, 8004266 <__swsetup_r+0xc6>
 8004254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004258:	d1ba      	bne.n	80041d0 <__swsetup_r+0x30>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	0781      	lsls	r1, r0, #30
 800425e:	bf58      	it	pl
 8004260:	6963      	ldrpl	r3, [r4, #20]
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	e7f4      	b.n	8004250 <__swsetup_r+0xb0>
 8004266:	2000      	movs	r0, #0
 8004268:	e7f7      	b.n	800425a <__swsetup_r+0xba>
 800426a:	bf00      	nop
 800426c:	2000001c 	.word	0x2000001c
 8004270:	080063c0 	.word	0x080063c0
 8004274:	080063e0 	.word	0x080063e0
 8004278:	080063a0 	.word	0x080063a0

0800427c <quorem>:
 800427c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	6903      	ldr	r3, [r0, #16]
 8004282:	690c      	ldr	r4, [r1, #16]
 8004284:	4607      	mov	r7, r0
 8004286:	42a3      	cmp	r3, r4
 8004288:	f2c0 8082 	blt.w	8004390 <quorem+0x114>
 800428c:	3c01      	subs	r4, #1
 800428e:	f100 0514 	add.w	r5, r0, #20
 8004292:	f101 0814 	add.w	r8, r1, #20
 8004296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a4:	3301      	adds	r3, #1
 80042a6:	429a      	cmp	r2, r3
 80042a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80042ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042b4:	d331      	bcc.n	800431a <quorem+0x9e>
 80042b6:	f04f 0e00 	mov.w	lr, #0
 80042ba:	4640      	mov	r0, r8
 80042bc:	46ac      	mov	ip, r5
 80042be:	46f2      	mov	sl, lr
 80042c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80042c4:	b293      	uxth	r3, r2
 80042c6:	fb06 e303 	mla	r3, r6, r3, lr
 80042ca:	0c12      	lsrs	r2, r2, #16
 80042cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	fb06 e202 	mla	r2, r6, r2, lr
 80042d6:	ebaa 0303 	sub.w	r3, sl, r3
 80042da:	f8dc a000 	ldr.w	sl, [ip]
 80042de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042e2:	fa1f fa8a 	uxth.w	sl, sl
 80042e6:	4453      	add	r3, sl
 80042e8:	f8dc a000 	ldr.w	sl, [ip]
 80042ec:	b292      	uxth	r2, r2
 80042ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fc:	4581      	cmp	r9, r0
 80042fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004302:	f84c 3b04 	str.w	r3, [ip], #4
 8004306:	d2db      	bcs.n	80042c0 <quorem+0x44>
 8004308:	f855 300b 	ldr.w	r3, [r5, fp]
 800430c:	b92b      	cbnz	r3, 800431a <quorem+0x9e>
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	3b04      	subs	r3, #4
 8004312:	429d      	cmp	r5, r3
 8004314:	461a      	mov	r2, r3
 8004316:	d32f      	bcc.n	8004378 <quorem+0xfc>
 8004318:	613c      	str	r4, [r7, #16]
 800431a:	4638      	mov	r0, r7
 800431c:	f001 faec 	bl	80058f8 <__mcmp>
 8004320:	2800      	cmp	r0, #0
 8004322:	db25      	blt.n	8004370 <quorem+0xf4>
 8004324:	4628      	mov	r0, r5
 8004326:	f04f 0c00 	mov.w	ip, #0
 800432a:	3601      	adds	r6, #1
 800432c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004330:	f8d0 e000 	ldr.w	lr, [r0]
 8004334:	b28b      	uxth	r3, r1
 8004336:	ebac 0303 	sub.w	r3, ip, r3
 800433a:	fa1f f28e 	uxth.w	r2, lr
 800433e:	4413      	add	r3, r2
 8004340:	0c0a      	lsrs	r2, r1, #16
 8004342:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004346:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800434a:	b29b      	uxth	r3, r3
 800434c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004350:	45c1      	cmp	r9, r8
 8004352:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004356:	f840 3b04 	str.w	r3, [r0], #4
 800435a:	d2e7      	bcs.n	800432c <quorem+0xb0>
 800435c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004364:	b922      	cbnz	r2, 8004370 <quorem+0xf4>
 8004366:	3b04      	subs	r3, #4
 8004368:	429d      	cmp	r5, r3
 800436a:	461a      	mov	r2, r3
 800436c:	d30a      	bcc.n	8004384 <quorem+0x108>
 800436e:	613c      	str	r4, [r7, #16]
 8004370:	4630      	mov	r0, r6
 8004372:	b003      	add	sp, #12
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	3b04      	subs	r3, #4
 800437c:	2a00      	cmp	r2, #0
 800437e:	d1cb      	bne.n	8004318 <quorem+0x9c>
 8004380:	3c01      	subs	r4, #1
 8004382:	e7c6      	b.n	8004312 <quorem+0x96>
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	3b04      	subs	r3, #4
 8004388:	2a00      	cmp	r2, #0
 800438a:	d1f0      	bne.n	800436e <quorem+0xf2>
 800438c:	3c01      	subs	r4, #1
 800438e:	e7eb      	b.n	8004368 <quorem+0xec>
 8004390:	2000      	movs	r0, #0
 8004392:	e7ee      	b.n	8004372 <quorem+0xf6>
 8004394:	0000      	movs	r0, r0
	...

08004398 <_dtoa_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	4616      	mov	r6, r2
 800439e:	461f      	mov	r7, r3
 80043a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80043a2:	b099      	sub	sp, #100	; 0x64
 80043a4:	4605      	mov	r5, r0
 80043a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80043ae:	b974      	cbnz	r4, 80043ce <_dtoa_r+0x36>
 80043b0:	2010      	movs	r0, #16
 80043b2:	f000 ffff 	bl	80053b4 <malloc>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6268      	str	r0, [r5, #36]	; 0x24
 80043ba:	b920      	cbnz	r0, 80043c6 <_dtoa_r+0x2e>
 80043bc:	21ea      	movs	r1, #234	; 0xea
 80043be:	4ba8      	ldr	r3, [pc, #672]	; (8004660 <_dtoa_r+0x2c8>)
 80043c0:	48a8      	ldr	r0, [pc, #672]	; (8004664 <_dtoa_r+0x2cc>)
 80043c2:	f001 fe4b 	bl	800605c <__assert_func>
 80043c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043ca:	6004      	str	r4, [r0, #0]
 80043cc:	60c4      	str	r4, [r0, #12]
 80043ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	b151      	cbz	r1, 80043ea <_dtoa_r+0x52>
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	2301      	movs	r3, #1
 80043d8:	4093      	lsls	r3, r2
 80043da:	604a      	str	r2, [r1, #4]
 80043dc:	608b      	str	r3, [r1, #8]
 80043de:	4628      	mov	r0, r5
 80043e0:	f001 f84c 	bl	800547c <_Bfree>
 80043e4:	2200      	movs	r2, #0
 80043e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	1e3b      	subs	r3, r7, #0
 80043ec:	bfaf      	iteee	ge
 80043ee:	2300      	movge	r3, #0
 80043f0:	2201      	movlt	r2, #1
 80043f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043f6:	9305      	strlt	r3, [sp, #20]
 80043f8:	bfa8      	it	ge
 80043fa:	f8c8 3000 	strge.w	r3, [r8]
 80043fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004402:	4b99      	ldr	r3, [pc, #612]	; (8004668 <_dtoa_r+0x2d0>)
 8004404:	bfb8      	it	lt
 8004406:	f8c8 2000 	strlt.w	r2, [r8]
 800440a:	ea33 0309 	bics.w	r3, r3, r9
 800440e:	d119      	bne.n	8004444 <_dtoa_r+0xac>
 8004410:	f242 730f 	movw	r3, #9999	; 0x270f
 8004414:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800441c:	4333      	orrs	r3, r6
 800441e:	f000 857f 	beq.w	8004f20 <_dtoa_r+0xb88>
 8004422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004424:	b953      	cbnz	r3, 800443c <_dtoa_r+0xa4>
 8004426:	4b91      	ldr	r3, [pc, #580]	; (800466c <_dtoa_r+0x2d4>)
 8004428:	e022      	b.n	8004470 <_dtoa_r+0xd8>
 800442a:	4b91      	ldr	r3, [pc, #580]	; (8004670 <_dtoa_r+0x2d8>)
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	3308      	adds	r3, #8
 8004430:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	9803      	ldr	r0, [sp, #12]
 8004436:	b019      	add	sp, #100	; 0x64
 8004438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443c:	4b8b      	ldr	r3, [pc, #556]	; (800466c <_dtoa_r+0x2d4>)
 800443e:	9303      	str	r3, [sp, #12]
 8004440:	3303      	adds	r3, #3
 8004442:	e7f5      	b.n	8004430 <_dtoa_r+0x98>
 8004444:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004448:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800444c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	2300      	movs	r3, #0
 8004454:	f7fc fb14 	bl	8000a80 <__aeabi_dcmpeq>
 8004458:	4680      	mov	r8, r0
 800445a:	b158      	cbz	r0, 8004474 <_dtoa_r+0xdc>
 800445c:	2301      	movs	r3, #1
 800445e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8558 	beq.w	8004f1a <_dtoa_r+0xb82>
 800446a:	4882      	ldr	r0, [pc, #520]	; (8004674 <_dtoa_r+0x2dc>)
 800446c:	6018      	str	r0, [r3, #0]
 800446e:	1e43      	subs	r3, r0, #1
 8004470:	9303      	str	r3, [sp, #12]
 8004472:	e7df      	b.n	8004434 <_dtoa_r+0x9c>
 8004474:	ab16      	add	r3, sp, #88	; 0x58
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	ab17      	add	r3, sp, #92	; 0x5c
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4628      	mov	r0, r5
 800447e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004482:	f001 fae1 	bl	8005a48 <__d2b>
 8004486:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800448a:	4683      	mov	fp, r0
 800448c:	2c00      	cmp	r4, #0
 800448e:	d07f      	beq.n	8004590 <_dtoa_r+0x1f8>
 8004490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004496:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800449a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80044a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80044a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80044aa:	2200      	movs	r2, #0
 80044ac:	4b72      	ldr	r3, [pc, #456]	; (8004678 <_dtoa_r+0x2e0>)
 80044ae:	f7fb fec7 	bl	8000240 <__aeabi_dsub>
 80044b2:	a365      	add	r3, pc, #404	; (adr r3, 8004648 <_dtoa_r+0x2b0>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fc f87a 	bl	80005b0 <__aeabi_dmul>
 80044bc:	a364      	add	r3, pc, #400	; (adr r3, 8004650 <_dtoa_r+0x2b8>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fb febf 	bl	8000244 <__adddf3>
 80044c6:	4606      	mov	r6, r0
 80044c8:	4620      	mov	r0, r4
 80044ca:	460f      	mov	r7, r1
 80044cc:	f7fc f806 	bl	80004dc <__aeabi_i2d>
 80044d0:	a361      	add	r3, pc, #388	; (adr r3, 8004658 <_dtoa_r+0x2c0>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f86b 	bl	80005b0 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4630      	mov	r0, r6
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7fb feaf 	bl	8000244 <__adddf3>
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	f7fc fb11 	bl	8000b10 <__aeabi_d2iz>
 80044ee:	2200      	movs	r2, #0
 80044f0:	4682      	mov	sl, r0
 80044f2:	2300      	movs	r3, #0
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fc facc 	bl	8000a94 <__aeabi_dcmplt>
 80044fc:	b148      	cbz	r0, 8004512 <_dtoa_r+0x17a>
 80044fe:	4650      	mov	r0, sl
 8004500:	f7fb ffec 	bl	80004dc <__aeabi_i2d>
 8004504:	4632      	mov	r2, r6
 8004506:	463b      	mov	r3, r7
 8004508:	f7fc faba 	bl	8000a80 <__aeabi_dcmpeq>
 800450c:	b908      	cbnz	r0, 8004512 <_dtoa_r+0x17a>
 800450e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004512:	f1ba 0f16 	cmp.w	sl, #22
 8004516:	d858      	bhi.n	80045ca <_dtoa_r+0x232>
 8004518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800451c:	4b57      	ldr	r3, [pc, #348]	; (800467c <_dtoa_r+0x2e4>)
 800451e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f7fc fab5 	bl	8000a94 <__aeabi_dcmplt>
 800452a:	2800      	cmp	r0, #0
 800452c:	d04f      	beq.n	80045ce <_dtoa_r+0x236>
 800452e:	2300      	movs	r3, #0
 8004530:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004534:	930f      	str	r3, [sp, #60]	; 0x3c
 8004536:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004538:	1b1c      	subs	r4, r3, r4
 800453a:	1e63      	subs	r3, r4, #1
 800453c:	9309      	str	r3, [sp, #36]	; 0x24
 800453e:	bf49      	itett	mi
 8004540:	f1c4 0301 	rsbmi	r3, r4, #1
 8004544:	2300      	movpl	r3, #0
 8004546:	9306      	strmi	r3, [sp, #24]
 8004548:	2300      	movmi	r3, #0
 800454a:	bf54      	ite	pl
 800454c:	9306      	strpl	r3, [sp, #24]
 800454e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004550:	f1ba 0f00 	cmp.w	sl, #0
 8004554:	db3d      	blt.n	80045d2 <_dtoa_r+0x23a>
 8004556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004558:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800455c:	4453      	add	r3, sl
 800455e:	9309      	str	r3, [sp, #36]	; 0x24
 8004560:	2300      	movs	r3, #0
 8004562:	930a      	str	r3, [sp, #40]	; 0x28
 8004564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004566:	2b09      	cmp	r3, #9
 8004568:	f200 808c 	bhi.w	8004684 <_dtoa_r+0x2ec>
 800456c:	2b05      	cmp	r3, #5
 800456e:	bfc4      	itt	gt
 8004570:	3b04      	subgt	r3, #4
 8004572:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004576:	bfc8      	it	gt
 8004578:	2400      	movgt	r4, #0
 800457a:	f1a3 0302 	sub.w	r3, r3, #2
 800457e:	bfd8      	it	le
 8004580:	2401      	movle	r4, #1
 8004582:	2b03      	cmp	r3, #3
 8004584:	f200 808a 	bhi.w	800469c <_dtoa_r+0x304>
 8004588:	e8df f003 	tbb	[pc, r3]
 800458c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004590:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004594:	441c      	add	r4, r3
 8004596:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800459a:	2b20      	cmp	r3, #32
 800459c:	bfc3      	ittte	gt
 800459e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80045a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80045aa:	f1c3 0320 	rsble	r3, r3, #32
 80045ae:	bfc6      	itte	gt
 80045b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045b4:	4318      	orrgt	r0, r3
 80045b6:	fa06 f003 	lslle.w	r0, r6, r3
 80045ba:	f7fb ff7f 	bl	80004bc <__aeabi_ui2d>
 80045be:	2301      	movs	r3, #1
 80045c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80045c4:	3c01      	subs	r4, #1
 80045c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80045c8:	e76f      	b.n	80044aa <_dtoa_r+0x112>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e7b2      	b.n	8004534 <_dtoa_r+0x19c>
 80045ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80045d0:	e7b1      	b.n	8004536 <_dtoa_r+0x19e>
 80045d2:	9b06      	ldr	r3, [sp, #24]
 80045d4:	eba3 030a 	sub.w	r3, r3, sl
 80045d8:	9306      	str	r3, [sp, #24]
 80045da:	f1ca 0300 	rsb	r3, sl, #0
 80045de:	930a      	str	r3, [sp, #40]	; 0x28
 80045e0:	2300      	movs	r3, #0
 80045e2:	930e      	str	r3, [sp, #56]	; 0x38
 80045e4:	e7be      	b.n	8004564 <_dtoa_r+0x1cc>
 80045e6:	2300      	movs	r3, #0
 80045e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc58      	bgt.n	80046a2 <_dtoa_r+0x30a>
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	464b      	mov	r3, r9
 80045f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80045fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80045fe:	2200      	movs	r2, #0
 8004600:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004602:	6042      	str	r2, [r0, #4]
 8004604:	2204      	movs	r2, #4
 8004606:	f102 0614 	add.w	r6, r2, #20
 800460a:	429e      	cmp	r6, r3
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	d94e      	bls.n	80046ae <_dtoa_r+0x316>
 8004610:	4628      	mov	r0, r5
 8004612:	f000 fef3 	bl	80053fc <_Balloc>
 8004616:	9003      	str	r0, [sp, #12]
 8004618:	2800      	cmp	r0, #0
 800461a:	d14c      	bne.n	80046b6 <_dtoa_r+0x31e>
 800461c:	4602      	mov	r2, r0
 800461e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <_dtoa_r+0x2e8>)
 8004624:	e6cc      	b.n	80043c0 <_dtoa_r+0x28>
 8004626:	2301      	movs	r3, #1
 8004628:	e7de      	b.n	80045e8 <_dtoa_r+0x250>
 800462a:	2300      	movs	r3, #0
 800462c:	930b      	str	r3, [sp, #44]	; 0x2c
 800462e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004630:	eb0a 0903 	add.w	r9, sl, r3
 8004634:	f109 0301 	add.w	r3, r9, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	9308      	str	r3, [sp, #32]
 800463c:	bfb8      	it	lt
 800463e:	2301      	movlt	r3, #1
 8004640:	e7dd      	b.n	80045fe <_dtoa_r+0x266>
 8004642:	2301      	movs	r3, #1
 8004644:	e7f2      	b.n	800462c <_dtoa_r+0x294>
 8004646:	bf00      	nop
 8004648:	636f4361 	.word	0x636f4361
 800464c:	3fd287a7 	.word	0x3fd287a7
 8004650:	8b60c8b3 	.word	0x8b60c8b3
 8004654:	3fc68a28 	.word	0x3fc68a28
 8004658:	509f79fb 	.word	0x509f79fb
 800465c:	3fd34413 	.word	0x3fd34413
 8004660:	0800631d 	.word	0x0800631d
 8004664:	08006334 	.word	0x08006334
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	08006319 	.word	0x08006319
 8004670:	08006310 	.word	0x08006310
 8004674:	080062ed 	.word	0x080062ed
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	08006488 	.word	0x08006488
 8004680:	0800638f 	.word	0x0800638f
 8004684:	2401      	movs	r4, #1
 8004686:	2300      	movs	r3, #0
 8004688:	940b      	str	r4, [sp, #44]	; 0x2c
 800468a:	9322      	str	r3, [sp, #136]	; 0x88
 800468c:	f04f 39ff 	mov.w	r9, #4294967295
 8004690:	2200      	movs	r2, #0
 8004692:	2312      	movs	r3, #18
 8004694:	f8cd 9020 	str.w	r9, [sp, #32]
 8004698:	9223      	str	r2, [sp, #140]	; 0x8c
 800469a:	e7b0      	b.n	80045fe <_dtoa_r+0x266>
 800469c:	2301      	movs	r3, #1
 800469e:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a0:	e7f4      	b.n	800468c <_dtoa_r+0x2f4>
 80046a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80046a6:	464b      	mov	r3, r9
 80046a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80046ac:	e7a7      	b.n	80045fe <_dtoa_r+0x266>
 80046ae:	3101      	adds	r1, #1
 80046b0:	6041      	str	r1, [r0, #4]
 80046b2:	0052      	lsls	r2, r2, #1
 80046b4:	e7a7      	b.n	8004606 <_dtoa_r+0x26e>
 80046b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046b8:	9a03      	ldr	r2, [sp, #12]
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	9b08      	ldr	r3, [sp, #32]
 80046be:	2b0e      	cmp	r3, #14
 80046c0:	f200 80a8 	bhi.w	8004814 <_dtoa_r+0x47c>
 80046c4:	2c00      	cmp	r4, #0
 80046c6:	f000 80a5 	beq.w	8004814 <_dtoa_r+0x47c>
 80046ca:	f1ba 0f00 	cmp.w	sl, #0
 80046ce:	dd34      	ble.n	800473a <_dtoa_r+0x3a2>
 80046d0:	4a9a      	ldr	r2, [pc, #616]	; (800493c <_dtoa_r+0x5a4>)
 80046d2:	f00a 030f 	and.w	r3, sl, #15
 80046d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80046de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80046ea:	d016      	beq.n	800471a <_dtoa_r+0x382>
 80046ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046f0:	4b93      	ldr	r3, [pc, #588]	; (8004940 <_dtoa_r+0x5a8>)
 80046f2:	2703      	movs	r7, #3
 80046f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046f8:	f7fc f884 	bl	8000804 <__aeabi_ddiv>
 80046fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004700:	f004 040f 	and.w	r4, r4, #15
 8004704:	4e8e      	ldr	r6, [pc, #568]	; (8004940 <_dtoa_r+0x5a8>)
 8004706:	b954      	cbnz	r4, 800471e <_dtoa_r+0x386>
 8004708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800470c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004710:	f7fc f878 	bl	8000804 <__aeabi_ddiv>
 8004714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004718:	e029      	b.n	800476e <_dtoa_r+0x3d6>
 800471a:	2702      	movs	r7, #2
 800471c:	e7f2      	b.n	8004704 <_dtoa_r+0x36c>
 800471e:	07e1      	lsls	r1, r4, #31
 8004720:	d508      	bpl.n	8004734 <_dtoa_r+0x39c>
 8004722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004726:	e9d6 2300 	ldrd	r2, r3, [r6]
 800472a:	f7fb ff41 	bl	80005b0 <__aeabi_dmul>
 800472e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004732:	3701      	adds	r7, #1
 8004734:	1064      	asrs	r4, r4, #1
 8004736:	3608      	adds	r6, #8
 8004738:	e7e5      	b.n	8004706 <_dtoa_r+0x36e>
 800473a:	f000 80a5 	beq.w	8004888 <_dtoa_r+0x4f0>
 800473e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004742:	f1ca 0400 	rsb	r4, sl, #0
 8004746:	4b7d      	ldr	r3, [pc, #500]	; (800493c <_dtoa_r+0x5a4>)
 8004748:	f004 020f 	and.w	r2, r4, #15
 800474c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f7fb ff2c 	bl	80005b0 <__aeabi_dmul>
 8004758:	2702      	movs	r7, #2
 800475a:	2300      	movs	r3, #0
 800475c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004760:	4e77      	ldr	r6, [pc, #476]	; (8004940 <_dtoa_r+0x5a8>)
 8004762:	1124      	asrs	r4, r4, #4
 8004764:	2c00      	cmp	r4, #0
 8004766:	f040 8084 	bne.w	8004872 <_dtoa_r+0x4da>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1d2      	bne.n	8004714 <_dtoa_r+0x37c>
 800476e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 808b 	beq.w	800488c <_dtoa_r+0x4f4>
 8004776:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800477a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800477e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004782:	2200      	movs	r2, #0
 8004784:	4b6f      	ldr	r3, [pc, #444]	; (8004944 <_dtoa_r+0x5ac>)
 8004786:	f7fc f985 	bl	8000a94 <__aeabi_dcmplt>
 800478a:	2800      	cmp	r0, #0
 800478c:	d07e      	beq.n	800488c <_dtoa_r+0x4f4>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d07b      	beq.n	800488c <_dtoa_r+0x4f4>
 8004794:	f1b9 0f00 	cmp.w	r9, #0
 8004798:	dd38      	ble.n	800480c <_dtoa_r+0x474>
 800479a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800479e:	2200      	movs	r2, #0
 80047a0:	4b69      	ldr	r3, [pc, #420]	; (8004948 <_dtoa_r+0x5b0>)
 80047a2:	f7fb ff05 	bl	80005b0 <__aeabi_dmul>
 80047a6:	464c      	mov	r4, r9
 80047a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 80047b0:	3701      	adds	r7, #1
 80047b2:	4638      	mov	r0, r7
 80047b4:	f7fb fe92 	bl	80004dc <__aeabi_i2d>
 80047b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047bc:	f7fb fef8 	bl	80005b0 <__aeabi_dmul>
 80047c0:	2200      	movs	r2, #0
 80047c2:	4b62      	ldr	r3, [pc, #392]	; (800494c <_dtoa_r+0x5b4>)
 80047c4:	f7fb fd3e 	bl	8000244 <__adddf3>
 80047c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80047cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047d0:	9611      	str	r6, [sp, #68]	; 0x44
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	d15d      	bne.n	8004892 <_dtoa_r+0x4fa>
 80047d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047da:	2200      	movs	r2, #0
 80047dc:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <_dtoa_r+0x5b8>)
 80047de:	f7fb fd2f 	bl	8000240 <__aeabi_dsub>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ea:	4633      	mov	r3, r6
 80047ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047ee:	f7fc f96f 	bl	8000ad0 <__aeabi_dcmpgt>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	f040 829c 	bne.w	8004d30 <_dtoa_r+0x998>
 80047f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004802:	f7fc f947 	bl	8000a94 <__aeabi_dcmplt>
 8004806:	2800      	cmp	r0, #0
 8004808:	f040 8290 	bne.w	8004d2c <_dtoa_r+0x994>
 800480c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004810:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004816:	2b00      	cmp	r3, #0
 8004818:	f2c0 8152 	blt.w	8004ac0 <_dtoa_r+0x728>
 800481c:	f1ba 0f0e 	cmp.w	sl, #14
 8004820:	f300 814e 	bgt.w	8004ac0 <_dtoa_r+0x728>
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <_dtoa_r+0x5a4>)
 8004826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800482a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800482e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004834:	2b00      	cmp	r3, #0
 8004836:	f280 80db 	bge.w	80049f0 <_dtoa_r+0x658>
 800483a:	9b08      	ldr	r3, [sp, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f300 80d7 	bgt.w	80049f0 <_dtoa_r+0x658>
 8004842:	f040 8272 	bne.w	8004d2a <_dtoa_r+0x992>
 8004846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800484a:	2200      	movs	r2, #0
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <_dtoa_r+0x5b8>)
 800484e:	f7fb feaf 	bl	80005b0 <__aeabi_dmul>
 8004852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004856:	f7fc f931 	bl	8000abc <__aeabi_dcmpge>
 800485a:	9c08      	ldr	r4, [sp, #32]
 800485c:	4626      	mov	r6, r4
 800485e:	2800      	cmp	r0, #0
 8004860:	f040 8248 	bne.w	8004cf4 <_dtoa_r+0x95c>
 8004864:	2331      	movs	r3, #49	; 0x31
 8004866:	9f03      	ldr	r7, [sp, #12]
 8004868:	f10a 0a01 	add.w	sl, sl, #1
 800486c:	f807 3b01 	strb.w	r3, [r7], #1
 8004870:	e244      	b.n	8004cfc <_dtoa_r+0x964>
 8004872:	07e2      	lsls	r2, r4, #31
 8004874:	d505      	bpl.n	8004882 <_dtoa_r+0x4ea>
 8004876:	e9d6 2300 	ldrd	r2, r3, [r6]
 800487a:	f7fb fe99 	bl	80005b0 <__aeabi_dmul>
 800487e:	2301      	movs	r3, #1
 8004880:	3701      	adds	r7, #1
 8004882:	1064      	asrs	r4, r4, #1
 8004884:	3608      	adds	r6, #8
 8004886:	e76d      	b.n	8004764 <_dtoa_r+0x3cc>
 8004888:	2702      	movs	r7, #2
 800488a:	e770      	b.n	800476e <_dtoa_r+0x3d6>
 800488c:	46d0      	mov	r8, sl
 800488e:	9c08      	ldr	r4, [sp, #32]
 8004890:	e78f      	b.n	80047b2 <_dtoa_r+0x41a>
 8004892:	9903      	ldr	r1, [sp, #12]
 8004894:	4b29      	ldr	r3, [pc, #164]	; (800493c <_dtoa_r+0x5a4>)
 8004896:	4421      	add	r1, r4
 8004898:	9112      	str	r1, [sp, #72]	; 0x48
 800489a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800489c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80048a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d055      	beq.n	8004958 <_dtoa_r+0x5c0>
 80048ac:	2000      	movs	r0, #0
 80048ae:	4929      	ldr	r1, [pc, #164]	; (8004954 <_dtoa_r+0x5bc>)
 80048b0:	f7fb ffa8 	bl	8000804 <__aeabi_ddiv>
 80048b4:	463b      	mov	r3, r7
 80048b6:	4632      	mov	r2, r6
 80048b8:	f7fb fcc2 	bl	8000240 <__aeabi_dsub>
 80048bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048c0:	9f03      	ldr	r7, [sp, #12]
 80048c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048c6:	f7fc f923 	bl	8000b10 <__aeabi_d2iz>
 80048ca:	4604      	mov	r4, r0
 80048cc:	f7fb fe06 	bl	80004dc <__aeabi_i2d>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048d8:	f7fb fcb2 	bl	8000240 <__aeabi_dsub>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	3430      	adds	r4, #48	; 0x30
 80048e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048ea:	f807 4b01 	strb.w	r4, [r7], #1
 80048ee:	f7fc f8d1 	bl	8000a94 <__aeabi_dcmplt>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d174      	bne.n	80049e0 <_dtoa_r+0x648>
 80048f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fa:	2000      	movs	r0, #0
 80048fc:	4911      	ldr	r1, [pc, #68]	; (8004944 <_dtoa_r+0x5ac>)
 80048fe:	f7fb fc9f 	bl	8000240 <__aeabi_dsub>
 8004902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004906:	f7fc f8c5 	bl	8000a94 <__aeabi_dcmplt>
 800490a:	2800      	cmp	r0, #0
 800490c:	f040 80b7 	bne.w	8004a7e <_dtoa_r+0x6e6>
 8004910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004912:	429f      	cmp	r7, r3
 8004914:	f43f af7a 	beq.w	800480c <_dtoa_r+0x474>
 8004918:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800491c:	2200      	movs	r2, #0
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <_dtoa_r+0x5b0>)
 8004920:	f7fb fe46 	bl	80005b0 <__aeabi_dmul>
 8004924:	2200      	movs	r2, #0
 8004926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800492a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <_dtoa_r+0x5b0>)
 8004930:	f7fb fe3e 	bl	80005b0 <__aeabi_dmul>
 8004934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004938:	e7c3      	b.n	80048c2 <_dtoa_r+0x52a>
 800493a:	bf00      	nop
 800493c:	08006488 	.word	0x08006488
 8004940:	08006460 	.word	0x08006460
 8004944:	3ff00000 	.word	0x3ff00000
 8004948:	40240000 	.word	0x40240000
 800494c:	401c0000 	.word	0x401c0000
 8004950:	40140000 	.word	0x40140000
 8004954:	3fe00000 	.word	0x3fe00000
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb fe28 	bl	80005b0 <__aeabi_dmul>
 8004960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004962:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004966:	9c03      	ldr	r4, [sp, #12]
 8004968:	9314      	str	r3, [sp, #80]	; 0x50
 800496a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800496e:	f7fc f8cf 	bl	8000b10 <__aeabi_d2iz>
 8004972:	9015      	str	r0, [sp, #84]	; 0x54
 8004974:	f7fb fdb2 	bl	80004dc <__aeabi_i2d>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004980:	f7fb fc5e 	bl	8000240 <__aeabi_dsub>
 8004984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004986:	4606      	mov	r6, r0
 8004988:	3330      	adds	r3, #48	; 0x30
 800498a:	f804 3b01 	strb.w	r3, [r4], #1
 800498e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004990:	460f      	mov	r7, r1
 8004992:	429c      	cmp	r4, r3
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	d124      	bne.n	80049e4 <_dtoa_r+0x64c>
 800499a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800499e:	4bb0      	ldr	r3, [pc, #704]	; (8004c60 <_dtoa_r+0x8c8>)
 80049a0:	f7fb fc50 	bl	8000244 <__adddf3>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4630      	mov	r0, r6
 80049aa:	4639      	mov	r1, r7
 80049ac:	f7fc f890 	bl	8000ad0 <__aeabi_dcmpgt>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d163      	bne.n	8004a7c <_dtoa_r+0x6e4>
 80049b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049b8:	2000      	movs	r0, #0
 80049ba:	49a9      	ldr	r1, [pc, #676]	; (8004c60 <_dtoa_r+0x8c8>)
 80049bc:	f7fb fc40 	bl	8000240 <__aeabi_dsub>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fc f864 	bl	8000a94 <__aeabi_dcmplt>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f43f af1d 	beq.w	800480c <_dtoa_r+0x474>
 80049d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80049d4:	1e7b      	subs	r3, r7, #1
 80049d6:	9314      	str	r3, [sp, #80]	; 0x50
 80049d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d0f8      	beq.n	80049d2 <_dtoa_r+0x63a>
 80049e0:	46c2      	mov	sl, r8
 80049e2:	e03b      	b.n	8004a5c <_dtoa_r+0x6c4>
 80049e4:	4b9f      	ldr	r3, [pc, #636]	; (8004c64 <_dtoa_r+0x8cc>)
 80049e6:	f7fb fde3 	bl	80005b0 <__aeabi_dmul>
 80049ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049ee:	e7bc      	b.n	800496a <_dtoa_r+0x5d2>
 80049f0:	9f03      	ldr	r7, [sp, #12]
 80049f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80049f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049fa:	4640      	mov	r0, r8
 80049fc:	4649      	mov	r1, r9
 80049fe:	f7fb ff01 	bl	8000804 <__aeabi_ddiv>
 8004a02:	f7fc f885 	bl	8000b10 <__aeabi_d2iz>
 8004a06:	4604      	mov	r4, r0
 8004a08:	f7fb fd68 	bl	80004dc <__aeabi_i2d>
 8004a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a10:	f7fb fdce 	bl	80005b0 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4640      	mov	r0, r8
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	f7fb fc10 	bl	8000240 <__aeabi_dsub>
 8004a20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004a24:	f807 6b01 	strb.w	r6, [r7], #1
 8004a28:	9e03      	ldr	r6, [sp, #12]
 8004a2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004a2e:	1bbe      	subs	r6, r7, r6
 8004a30:	45b4      	cmp	ip, r6
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	d136      	bne.n	8004aa6 <_dtoa_r+0x70e>
 8004a38:	f7fb fc04 	bl	8000244 <__adddf3>
 8004a3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a40:	4680      	mov	r8, r0
 8004a42:	4689      	mov	r9, r1
 8004a44:	f7fc f844 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a48:	bb58      	cbnz	r0, 8004aa2 <_dtoa_r+0x70a>
 8004a4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a4e:	4640      	mov	r0, r8
 8004a50:	4649      	mov	r1, r9
 8004a52:	f7fc f815 	bl	8000a80 <__aeabi_dcmpeq>
 8004a56:	b108      	cbz	r0, 8004a5c <_dtoa_r+0x6c4>
 8004a58:	07e1      	lsls	r1, r4, #31
 8004a5a:	d422      	bmi.n	8004aa2 <_dtoa_r+0x70a>
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	4659      	mov	r1, fp
 8004a60:	f000 fd0c 	bl	800547c <_Bfree>
 8004a64:	2300      	movs	r3, #0
 8004a66:	703b      	strb	r3, [r7, #0]
 8004a68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004a6a:	f10a 0001 	add.w	r0, sl, #1
 8004a6e:	6018      	str	r0, [r3, #0]
 8004a70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f43f acde 	beq.w	8004434 <_dtoa_r+0x9c>
 8004a78:	601f      	str	r7, [r3, #0]
 8004a7a:	e4db      	b.n	8004434 <_dtoa_r+0x9c>
 8004a7c:	4627      	mov	r7, r4
 8004a7e:	463b      	mov	r3, r7
 8004a80:	461f      	mov	r7, r3
 8004a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a86:	2a39      	cmp	r2, #57	; 0x39
 8004a88:	d107      	bne.n	8004a9a <_dtoa_r+0x702>
 8004a8a:	9a03      	ldr	r2, [sp, #12]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1f7      	bne.n	8004a80 <_dtoa_r+0x6e8>
 8004a90:	2230      	movs	r2, #48	; 0x30
 8004a92:	9903      	ldr	r1, [sp, #12]
 8004a94:	f108 0801 	add.w	r8, r8, #1
 8004a98:	700a      	strb	r2, [r1, #0]
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	3201      	adds	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e79e      	b.n	80049e0 <_dtoa_r+0x648>
 8004aa2:	46d0      	mov	r8, sl
 8004aa4:	e7eb      	b.n	8004a7e <_dtoa_r+0x6e6>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <_dtoa_r+0x8cc>)
 8004aaa:	f7fb fd81 	bl	80005b0 <__aeabi_dmul>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	4689      	mov	r9, r1
 8004ab6:	f7fb ffe3 	bl	8000a80 <__aeabi_dcmpeq>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d09b      	beq.n	80049f6 <_dtoa_r+0x65e>
 8004abe:	e7cd      	b.n	8004a5c <_dtoa_r+0x6c4>
 8004ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	f000 80d0 	beq.w	8004c68 <_dtoa_r+0x8d0>
 8004ac8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004aca:	2a01      	cmp	r2, #1
 8004acc:	f300 80ae 	bgt.w	8004c2c <_dtoa_r+0x894>
 8004ad0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	f000 80a6 	beq.w	8004c24 <_dtoa_r+0x88c>
 8004ad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ade:	9f06      	ldr	r7, [sp, #24]
 8004ae0:	9a06      	ldr	r2, [sp, #24]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	441a      	add	r2, r3
 8004ae6:	9206      	str	r2, [sp, #24]
 8004ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aea:	4628      	mov	r0, r5
 8004aec:	441a      	add	r2, r3
 8004aee:	9209      	str	r2, [sp, #36]	; 0x24
 8004af0:	f000 fd7a 	bl	80055e8 <__i2b>
 8004af4:	4606      	mov	r6, r0
 8004af6:	2f00      	cmp	r7, #0
 8004af8:	dd0c      	ble.n	8004b14 <_dtoa_r+0x77c>
 8004afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dd09      	ble.n	8004b14 <_dtoa_r+0x77c>
 8004b00:	42bb      	cmp	r3, r7
 8004b02:	bfa8      	it	ge
 8004b04:	463b      	movge	r3, r7
 8004b06:	9a06      	ldr	r2, [sp, #24]
 8004b08:	1aff      	subs	r7, r7, r3
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	9206      	str	r2, [sp, #24]
 8004b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	9309      	str	r3, [sp, #36]	; 0x24
 8004b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b16:	b1f3      	cbz	r3, 8004b56 <_dtoa_r+0x7be>
 8004b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80a8 	beq.w	8004c70 <_dtoa_r+0x8d8>
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	dd10      	ble.n	8004b46 <_dtoa_r+0x7ae>
 8004b24:	4631      	mov	r1, r6
 8004b26:	4622      	mov	r2, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 fe1b 	bl	8005764 <__pow5mult>
 8004b2e:	465a      	mov	r2, fp
 8004b30:	4601      	mov	r1, r0
 8004b32:	4606      	mov	r6, r0
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 fd6d 	bl	8005614 <__multiply>
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fc9c 	bl	800547c <_Bfree>
 8004b44:	46c3      	mov	fp, r8
 8004b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b48:	1b1a      	subs	r2, r3, r4
 8004b4a:	d004      	beq.n	8004b56 <_dtoa_r+0x7be>
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 fe08 	bl	8005764 <__pow5mult>
 8004b54:	4683      	mov	fp, r0
 8004b56:	2101      	movs	r1, #1
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 fd45 	bl	80055e8 <__i2b>
 8004b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b60:	4604      	mov	r4, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f340 8086 	ble.w	8004c74 <_dtoa_r+0x8dc>
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fdf9 	bl	8005764 <__pow5mult>
 8004b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b74:	4604      	mov	r4, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	dd7f      	ble.n	8004c7a <_dtoa_r+0x8e2>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b84:	6918      	ldr	r0, [r3, #16]
 8004b86:	f000 fce1 	bl	800554c <__hi0bits>
 8004b8a:	f1c0 0020 	rsb	r0, r0, #32
 8004b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b90:	4418      	add	r0, r3
 8004b92:	f010 001f 	ands.w	r0, r0, #31
 8004b96:	f000 8092 	beq.w	8004cbe <_dtoa_r+0x926>
 8004b9a:	f1c0 0320 	rsb	r3, r0, #32
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	f340 808a 	ble.w	8004cb8 <_dtoa_r+0x920>
 8004ba4:	f1c0 001c 	rsb	r0, r0, #28
 8004ba8:	9b06      	ldr	r3, [sp, #24]
 8004baa:	4407      	add	r7, r0
 8004bac:	4403      	add	r3, r0
 8004bae:	9306      	str	r3, [sp, #24]
 8004bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb2:	4403      	add	r3, r0
 8004bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb6:	9b06      	ldr	r3, [sp, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dd05      	ble.n	8004bc8 <_dtoa_r+0x830>
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fe29 	bl	8005818 <__lshift>
 8004bc6:	4683      	mov	fp, r0
 8004bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dd05      	ble.n	8004bda <_dtoa_r+0x842>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 fe20 	bl	8005818 <__lshift>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d070      	beq.n	8004cc2 <_dtoa_r+0x92a>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4658      	mov	r0, fp
 8004be4:	f000 fe88 	bl	80058f8 <__mcmp>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	da6a      	bge.n	8004cc2 <_dtoa_r+0x92a>
 8004bec:	2300      	movs	r3, #0
 8004bee:	4659      	mov	r1, fp
 8004bf0:	220a      	movs	r2, #10
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 fc64 	bl	80054c0 <__multadd>
 8004bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bfa:	4683      	mov	fp, r0
 8004bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8194 	beq.w	8004f2e <_dtoa_r+0xb96>
 8004c06:	4631      	mov	r1, r6
 8004c08:	2300      	movs	r3, #0
 8004c0a:	220a      	movs	r2, #10
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 fc57 	bl	80054c0 <__multadd>
 8004c12:	f1b9 0f00 	cmp.w	r9, #0
 8004c16:	4606      	mov	r6, r0
 8004c18:	f300 8093 	bgt.w	8004d42 <_dtoa_r+0x9aa>
 8004c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	dc57      	bgt.n	8004cd2 <_dtoa_r+0x93a>
 8004c22:	e08e      	b.n	8004d42 <_dtoa_r+0x9aa>
 8004c24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c2a:	e757      	b.n	8004adc <_dtoa_r+0x744>
 8004c2c:	9b08      	ldr	r3, [sp, #32]
 8004c2e:	1e5c      	subs	r4, r3, #1
 8004c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	bfb7      	itett	lt
 8004c36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c38:	1b1c      	subge	r4, r3, r4
 8004c3a:	1ae2      	sublt	r2, r4, r3
 8004c3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004c3e:	bfbe      	ittt	lt
 8004c40:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004c42:	189b      	addlt	r3, r3, r2
 8004c44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004c46:	9b08      	ldr	r3, [sp, #32]
 8004c48:	bfb8      	it	lt
 8004c4a:	2400      	movlt	r4, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bfbb      	ittet	lt
 8004c50:	9b06      	ldrlt	r3, [sp, #24]
 8004c52:	9a08      	ldrlt	r2, [sp, #32]
 8004c54:	9f06      	ldrge	r7, [sp, #24]
 8004c56:	1a9f      	sublt	r7, r3, r2
 8004c58:	bfac      	ite	ge
 8004c5a:	9b08      	ldrge	r3, [sp, #32]
 8004c5c:	2300      	movlt	r3, #0
 8004c5e:	e73f      	b.n	8004ae0 <_dtoa_r+0x748>
 8004c60:	3fe00000 	.word	0x3fe00000
 8004c64:	40240000 	.word	0x40240000
 8004c68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c6a:	9f06      	ldr	r7, [sp, #24]
 8004c6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004c6e:	e742      	b.n	8004af6 <_dtoa_r+0x75e>
 8004c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c72:	e76b      	b.n	8004b4c <_dtoa_r+0x7b4>
 8004c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	dc19      	bgt.n	8004cae <_dtoa_r+0x916>
 8004c7a:	9b04      	ldr	r3, [sp, #16]
 8004c7c:	b9bb      	cbnz	r3, 8004cae <_dtoa_r+0x916>
 8004c7e:	9b05      	ldr	r3, [sp, #20]
 8004c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c84:	b99b      	cbnz	r3, 8004cae <_dtoa_r+0x916>
 8004c86:	9b05      	ldr	r3, [sp, #20]
 8004c88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	0d1b      	lsrs	r3, r3, #20
 8004c8e:	051b      	lsls	r3, r3, #20
 8004c90:	b183      	cbz	r3, 8004cb4 <_dtoa_r+0x91c>
 8004c92:	f04f 0801 	mov.w	r8, #1
 8004c96:	9b06      	ldr	r3, [sp, #24]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f47f af6a 	bne.w	8004b7e <_dtoa_r+0x7e6>
 8004caa:	2001      	movs	r0, #1
 8004cac:	e76f      	b.n	8004b8e <_dtoa_r+0x7f6>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	e7f6      	b.n	8004ca2 <_dtoa_r+0x90a>
 8004cb4:	4698      	mov	r8, r3
 8004cb6:	e7f4      	b.n	8004ca2 <_dtoa_r+0x90a>
 8004cb8:	f43f af7d 	beq.w	8004bb6 <_dtoa_r+0x81e>
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	301c      	adds	r0, #28
 8004cc0:	e772      	b.n	8004ba8 <_dtoa_r+0x810>
 8004cc2:	9b08      	ldr	r3, [sp, #32]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dc36      	bgt.n	8004d36 <_dtoa_r+0x99e>
 8004cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	dd33      	ble.n	8004d36 <_dtoa_r+0x99e>
 8004cce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cd2:	f1b9 0f00 	cmp.w	r9, #0
 8004cd6:	d10d      	bne.n	8004cf4 <_dtoa_r+0x95c>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	464b      	mov	r3, r9
 8004cdc:	2205      	movs	r2, #5
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 fbee 	bl	80054c0 <__multadd>
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f000 fe05 	bl	80058f8 <__mcmp>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f73f adb8 	bgt.w	8004864 <_dtoa_r+0x4cc>
 8004cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cf6:	9f03      	ldr	r7, [sp, #12]
 8004cf8:	ea6f 0a03 	mvn.w	sl, r3
 8004cfc:	f04f 0800 	mov.w	r8, #0
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fbba 	bl	800547c <_Bfree>
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	f43f aea7 	beq.w	8004a5c <_dtoa_r+0x6c4>
 8004d0e:	f1b8 0f00 	cmp.w	r8, #0
 8004d12:	d005      	beq.n	8004d20 <_dtoa_r+0x988>
 8004d14:	45b0      	cmp	r8, r6
 8004d16:	d003      	beq.n	8004d20 <_dtoa_r+0x988>
 8004d18:	4641      	mov	r1, r8
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fbae 	bl	800547c <_Bfree>
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fbaa 	bl	800547c <_Bfree>
 8004d28:	e698      	b.n	8004a5c <_dtoa_r+0x6c4>
 8004d2a:	2400      	movs	r4, #0
 8004d2c:	4626      	mov	r6, r4
 8004d2e:	e7e1      	b.n	8004cf4 <_dtoa_r+0x95c>
 8004d30:	46c2      	mov	sl, r8
 8004d32:	4626      	mov	r6, r4
 8004d34:	e596      	b.n	8004864 <_dtoa_r+0x4cc>
 8004d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80fd 	beq.w	8004f3c <_dtoa_r+0xba4>
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	dd05      	ble.n	8004d52 <_dtoa_r+0x9ba>
 8004d46:	4631      	mov	r1, r6
 8004d48:	463a      	mov	r2, r7
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 fd64 	bl	8005818 <__lshift>
 8004d50:	4606      	mov	r6, r0
 8004d52:	f1b8 0f00 	cmp.w	r8, #0
 8004d56:	d05c      	beq.n	8004e12 <_dtoa_r+0xa7a>
 8004d58:	4628      	mov	r0, r5
 8004d5a:	6871      	ldr	r1, [r6, #4]
 8004d5c:	f000 fb4e 	bl	80053fc <_Balloc>
 8004d60:	4607      	mov	r7, r0
 8004d62:	b928      	cbnz	r0, 8004d70 <_dtoa_r+0x9d8>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	; (8004f68 <_dtoa_r+0xbd0>)
 8004d6c:	f7ff bb28 	b.w	80043c0 <_dtoa_r+0x28>
 8004d70:	6932      	ldr	r2, [r6, #16]
 8004d72:	f106 010c 	add.w	r1, r6, #12
 8004d76:	3202      	adds	r2, #2
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	300c      	adds	r0, #12
 8004d7c:	f000 fb30 	bl	80053e0 <memcpy>
 8004d80:	2201      	movs	r2, #1
 8004d82:	4639      	mov	r1, r7
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 fd47 	bl	8005818 <__lshift>
 8004d8a:	46b0      	mov	r8, r6
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	9308      	str	r3, [sp, #32]
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	444b      	add	r3, r9
 8004d98:	930a      	str	r3, [sp, #40]	; 0x28
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	9309      	str	r3, [sp, #36]	; 0x24
 8004da2:	9b08      	ldr	r3, [sp, #32]
 8004da4:	4621      	mov	r1, r4
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4658      	mov	r0, fp
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	f7ff fa66 	bl	800427c <quorem>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4641      	mov	r1, r8
 8004db4:	3330      	adds	r3, #48	; 0x30
 8004db6:	9006      	str	r0, [sp, #24]
 8004db8:	4658      	mov	r0, fp
 8004dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dbc:	f000 fd9c 	bl	80058f8 <__mcmp>
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4681      	mov	r9, r0
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fdb2 	bl	8005930 <__mdiff>
 8004dcc:	68c2      	ldr	r2, [r0, #12]
 8004dce:	4607      	mov	r7, r0
 8004dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dd2:	bb02      	cbnz	r2, 8004e16 <_dtoa_r+0xa7e>
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4658      	mov	r0, fp
 8004dd8:	f000 fd8e 	bl	80058f8 <__mcmp>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de0:	4639      	mov	r1, r7
 8004de2:	4628      	mov	r0, r5
 8004de4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004de8:	f000 fb48 	bl	800547c <_Bfree>
 8004dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004df0:	9f08      	ldr	r7, [sp, #32]
 8004df2:	ea43 0102 	orr.w	r1, r3, r2
 8004df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfc:	d10d      	bne.n	8004e1a <_dtoa_r+0xa82>
 8004dfe:	2b39      	cmp	r3, #57	; 0x39
 8004e00:	d029      	beq.n	8004e56 <_dtoa_r+0xabe>
 8004e02:	f1b9 0f00 	cmp.w	r9, #0
 8004e06:	dd01      	ble.n	8004e0c <_dtoa_r+0xa74>
 8004e08:	9b06      	ldr	r3, [sp, #24]
 8004e0a:	3331      	adds	r3, #49	; 0x31
 8004e0c:	9a04      	ldr	r2, [sp, #16]
 8004e0e:	7013      	strb	r3, [r2, #0]
 8004e10:	e776      	b.n	8004d00 <_dtoa_r+0x968>
 8004e12:	4630      	mov	r0, r6
 8004e14:	e7b9      	b.n	8004d8a <_dtoa_r+0x9f2>
 8004e16:	2201      	movs	r2, #1
 8004e18:	e7e2      	b.n	8004de0 <_dtoa_r+0xa48>
 8004e1a:	f1b9 0f00 	cmp.w	r9, #0
 8004e1e:	db06      	blt.n	8004e2e <_dtoa_r+0xa96>
 8004e20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e22:	ea41 0909 	orr.w	r9, r1, r9
 8004e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e28:	ea59 0101 	orrs.w	r1, r9, r1
 8004e2c:	d120      	bne.n	8004e70 <_dtoa_r+0xad8>
 8004e2e:	2a00      	cmp	r2, #0
 8004e30:	ddec      	ble.n	8004e0c <_dtoa_r+0xa74>
 8004e32:	4659      	mov	r1, fp
 8004e34:	2201      	movs	r2, #1
 8004e36:	4628      	mov	r0, r5
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	f000 fced 	bl	8005818 <__lshift>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4683      	mov	fp, r0
 8004e42:	f000 fd59 	bl	80058f8 <__mcmp>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	9b08      	ldr	r3, [sp, #32]
 8004e4a:	dc02      	bgt.n	8004e52 <_dtoa_r+0xaba>
 8004e4c:	d1de      	bne.n	8004e0c <_dtoa_r+0xa74>
 8004e4e:	07da      	lsls	r2, r3, #31
 8004e50:	d5dc      	bpl.n	8004e0c <_dtoa_r+0xa74>
 8004e52:	2b39      	cmp	r3, #57	; 0x39
 8004e54:	d1d8      	bne.n	8004e08 <_dtoa_r+0xa70>
 8004e56:	2339      	movs	r3, #57	; 0x39
 8004e58:	9a04      	ldr	r2, [sp, #16]
 8004e5a:	7013      	strb	r3, [r2, #0]
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	461f      	mov	r7, r3
 8004e60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	2a39      	cmp	r2, #57	; 0x39
 8004e68:	d050      	beq.n	8004f0c <_dtoa_r+0xb74>
 8004e6a:	3201      	adds	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e747      	b.n	8004d00 <_dtoa_r+0x968>
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	dd03      	ble.n	8004e7c <_dtoa_r+0xae4>
 8004e74:	2b39      	cmp	r3, #57	; 0x39
 8004e76:	d0ee      	beq.n	8004e56 <_dtoa_r+0xabe>
 8004e78:	3301      	adds	r3, #1
 8004e7a:	e7c7      	b.n	8004e0c <_dtoa_r+0xa74>
 8004e7c:	9a08      	ldr	r2, [sp, #32]
 8004e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e84:	428a      	cmp	r2, r1
 8004e86:	d02a      	beq.n	8004ede <_dtoa_r+0xb46>
 8004e88:	4659      	mov	r1, fp
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	220a      	movs	r2, #10
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fb16 	bl	80054c0 <__multadd>
 8004e94:	45b0      	cmp	r8, r6
 8004e96:	4683      	mov	fp, r0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	f04f 020a 	mov.w	r2, #10
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	d107      	bne.n	8004eb6 <_dtoa_r+0xb1e>
 8004ea6:	f000 fb0b 	bl	80054c0 <__multadd>
 8004eaa:	4680      	mov	r8, r0
 8004eac:	4606      	mov	r6, r0
 8004eae:	9b08      	ldr	r3, [sp, #32]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	9308      	str	r3, [sp, #32]
 8004eb4:	e775      	b.n	8004da2 <_dtoa_r+0xa0a>
 8004eb6:	f000 fb03 	bl	80054c0 <__multadd>
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	220a      	movs	r2, #10
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fafc 	bl	80054c0 <__multadd>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	e7f0      	b.n	8004eae <_dtoa_r+0xb16>
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	bfcc      	ite	gt
 8004ed2:	464f      	movgt	r7, r9
 8004ed4:	2701      	movle	r7, #1
 8004ed6:	f04f 0800 	mov.w	r8, #0
 8004eda:	9a03      	ldr	r2, [sp, #12]
 8004edc:	4417      	add	r7, r2
 8004ede:	4659      	mov	r1, fp
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	9308      	str	r3, [sp, #32]
 8004ee6:	f000 fc97 	bl	8005818 <__lshift>
 8004eea:	4621      	mov	r1, r4
 8004eec:	4683      	mov	fp, r0
 8004eee:	f000 fd03 	bl	80058f8 <__mcmp>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	dcb2      	bgt.n	8004e5c <_dtoa_r+0xac4>
 8004ef6:	d102      	bne.n	8004efe <_dtoa_r+0xb66>
 8004ef8:	9b08      	ldr	r3, [sp, #32]
 8004efa:	07db      	lsls	r3, r3, #31
 8004efc:	d4ae      	bmi.n	8004e5c <_dtoa_r+0xac4>
 8004efe:	463b      	mov	r3, r7
 8004f00:	461f      	mov	r7, r3
 8004f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f06:	2a30      	cmp	r2, #48	; 0x30
 8004f08:	d0fa      	beq.n	8004f00 <_dtoa_r+0xb68>
 8004f0a:	e6f9      	b.n	8004d00 <_dtoa_r+0x968>
 8004f0c:	9a03      	ldr	r2, [sp, #12]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d1a5      	bne.n	8004e5e <_dtoa_r+0xac6>
 8004f12:	2331      	movs	r3, #49	; 0x31
 8004f14:	f10a 0a01 	add.w	sl, sl, #1
 8004f18:	e779      	b.n	8004e0e <_dtoa_r+0xa76>
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <_dtoa_r+0xbd4>)
 8004f1c:	f7ff baa8 	b.w	8004470 <_dtoa_r+0xd8>
 8004f20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f47f aa81 	bne.w	800442a <_dtoa_r+0x92>
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <_dtoa_r+0xbd8>)
 8004f2a:	f7ff baa1 	b.w	8004470 <_dtoa_r+0xd8>
 8004f2e:	f1b9 0f00 	cmp.w	r9, #0
 8004f32:	dc03      	bgt.n	8004f3c <_dtoa_r+0xba4>
 8004f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	f73f aecb 	bgt.w	8004cd2 <_dtoa_r+0x93a>
 8004f3c:	9f03      	ldr	r7, [sp, #12]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4658      	mov	r0, fp
 8004f42:	f7ff f99b 	bl	800427c <quorem>
 8004f46:	9a03      	ldr	r2, [sp, #12]
 8004f48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f4c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f50:	1aba      	subs	r2, r7, r2
 8004f52:	4591      	cmp	r9, r2
 8004f54:	ddba      	ble.n	8004ecc <_dtoa_r+0xb34>
 8004f56:	4659      	mov	r1, fp
 8004f58:	2300      	movs	r3, #0
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 faaf 	bl	80054c0 <__multadd>
 8004f62:	4683      	mov	fp, r0
 8004f64:	e7eb      	b.n	8004f3e <_dtoa_r+0xba6>
 8004f66:	bf00      	nop
 8004f68:	0800638f 	.word	0x0800638f
 8004f6c:	080062ec 	.word	0x080062ec
 8004f70:	08006310 	.word	0x08006310

08004f74 <__sflush_r>:
 8004f74:	898a      	ldrh	r2, [r1, #12]
 8004f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f78:	4605      	mov	r5, r0
 8004f7a:	0710      	lsls	r0, r2, #28
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	d457      	bmi.n	8005030 <__sflush_r+0xbc>
 8004f80:	684b      	ldr	r3, [r1, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc04      	bgt.n	8004f90 <__sflush_r+0x1c>
 8004f86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dc01      	bgt.n	8004f90 <__sflush_r+0x1c>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d0fa      	beq.n	8004f8c <__sflush_r+0x18>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f9c:	682f      	ldr	r7, [r5, #0]
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	d032      	beq.n	8005008 <__sflush_r+0x94>
 8004fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	075a      	lsls	r2, r3, #29
 8004fa8:	d505      	bpl.n	8004fb6 <__sflush_r+0x42>
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	1ac0      	subs	r0, r0, r3
 8004fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fb0:	b10b      	cbz	r3, 8004fb6 <__sflush_r+0x42>
 8004fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb4:	1ac0      	subs	r0, r0, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	6a21      	ldr	r1, [r4, #32]
 8004fc0:	47b0      	blx	r6
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	d106      	bne.n	8004fd6 <__sflush_r+0x62>
 8004fc8:	6829      	ldr	r1, [r5, #0]
 8004fca:	291d      	cmp	r1, #29
 8004fcc:	d82c      	bhi.n	8005028 <__sflush_r+0xb4>
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <__sflush_r+0x100>)
 8004fd0:	40ca      	lsrs	r2, r1
 8004fd2:	07d6      	lsls	r6, r2, #31
 8004fd4:	d528      	bpl.n	8005028 <__sflush_r+0xb4>
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	6062      	str	r2, [r4, #4]
 8004fda:	6922      	ldr	r2, [r4, #16]
 8004fdc:	04d9      	lsls	r1, r3, #19
 8004fde:	6022      	str	r2, [r4, #0]
 8004fe0:	d504      	bpl.n	8004fec <__sflush_r+0x78>
 8004fe2:	1c42      	adds	r2, r0, #1
 8004fe4:	d101      	bne.n	8004fea <__sflush_r+0x76>
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	b903      	cbnz	r3, 8004fec <__sflush_r+0x78>
 8004fea:	6560      	str	r0, [r4, #84]	; 0x54
 8004fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fee:	602f      	str	r7, [r5, #0]
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d0cb      	beq.n	8004f8c <__sflush_r+0x18>
 8004ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d002      	beq.n	8005002 <__sflush_r+0x8e>
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 fd93 	bl	8005b28 <_free_r>
 8005002:	2000      	movs	r0, #0
 8005004:	6360      	str	r0, [r4, #52]	; 0x34
 8005006:	e7c2      	b.n	8004f8e <__sflush_r+0x1a>
 8005008:	6a21      	ldr	r1, [r4, #32]
 800500a:	2301      	movs	r3, #1
 800500c:	4628      	mov	r0, r5
 800500e:	47b0      	blx	r6
 8005010:	1c41      	adds	r1, r0, #1
 8005012:	d1c7      	bne.n	8004fa4 <__sflush_r+0x30>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0c4      	beq.n	8004fa4 <__sflush_r+0x30>
 800501a:	2b1d      	cmp	r3, #29
 800501c:	d001      	beq.n	8005022 <__sflush_r+0xae>
 800501e:	2b16      	cmp	r3, #22
 8005020:	d101      	bne.n	8005026 <__sflush_r+0xb2>
 8005022:	602f      	str	r7, [r5, #0]
 8005024:	e7b2      	b.n	8004f8c <__sflush_r+0x18>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	e7ae      	b.n	8004f8e <__sflush_r+0x1a>
 8005030:	690f      	ldr	r7, [r1, #16]
 8005032:	2f00      	cmp	r7, #0
 8005034:	d0aa      	beq.n	8004f8c <__sflush_r+0x18>
 8005036:	0793      	lsls	r3, r2, #30
 8005038:	bf18      	it	ne
 800503a:	2300      	movne	r3, #0
 800503c:	680e      	ldr	r6, [r1, #0]
 800503e:	bf08      	it	eq
 8005040:	694b      	ldreq	r3, [r1, #20]
 8005042:	1bf6      	subs	r6, r6, r7
 8005044:	600f      	str	r7, [r1, #0]
 8005046:	608b      	str	r3, [r1, #8]
 8005048:	2e00      	cmp	r6, #0
 800504a:	dd9f      	ble.n	8004f8c <__sflush_r+0x18>
 800504c:	4633      	mov	r3, r6
 800504e:	463a      	mov	r2, r7
 8005050:	4628      	mov	r0, r5
 8005052:	6a21      	ldr	r1, [r4, #32]
 8005054:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005058:	47e0      	blx	ip
 800505a:	2800      	cmp	r0, #0
 800505c:	dc06      	bgt.n	800506c <__sflush_r+0xf8>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	e790      	b.n	8004f8e <__sflush_r+0x1a>
 800506c:	4407      	add	r7, r0
 800506e:	1a36      	subs	r6, r6, r0
 8005070:	e7ea      	b.n	8005048 <__sflush_r+0xd4>
 8005072:	bf00      	nop
 8005074:	20400001 	.word	0x20400001

08005078 <_fflush_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	4605      	mov	r5, r0
 800507e:	460c      	mov	r4, r1
 8005080:	b913      	cbnz	r3, 8005088 <_fflush_r+0x10>
 8005082:	2500      	movs	r5, #0
 8005084:	4628      	mov	r0, r5
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	b118      	cbz	r0, 8005092 <_fflush_r+0x1a>
 800508a:	6983      	ldr	r3, [r0, #24]
 800508c:	b90b      	cbnz	r3, 8005092 <_fflush_r+0x1a>
 800508e:	f000 f887 	bl	80051a0 <__sinit>
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <_fflush_r+0x6c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d11b      	bne.n	80050d0 <_fflush_r+0x58>
 8005098:	686c      	ldr	r4, [r5, #4]
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <_fflush_r+0xa>
 80050a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050a8:	0599      	lsls	r1, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ae:	f000 f91a 	bl	80052e6 <__retarget_lock_acquire_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff ff5d 	bl	8004f74 <__sflush_r>
 80050ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050bc:	4605      	mov	r5, r0
 80050be:	07da      	lsls	r2, r3, #31
 80050c0:	d4e0      	bmi.n	8005084 <_fflush_r+0xc>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	059b      	lsls	r3, r3, #22
 80050c6:	d4dd      	bmi.n	8005084 <_fflush_r+0xc>
 80050c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ca:	f000 f90d 	bl	80052e8 <__retarget_lock_release_recursive>
 80050ce:	e7d9      	b.n	8005084 <_fflush_r+0xc>
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <_fflush_r+0x70>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d101      	bne.n	80050da <_fflush_r+0x62>
 80050d6:	68ac      	ldr	r4, [r5, #8]
 80050d8:	e7df      	b.n	800509a <_fflush_r+0x22>
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <_fflush_r+0x74>)
 80050dc:	429c      	cmp	r4, r3
 80050de:	bf08      	it	eq
 80050e0:	68ec      	ldreq	r4, [r5, #12]
 80050e2:	e7da      	b.n	800509a <_fflush_r+0x22>
 80050e4:	080063c0 	.word	0x080063c0
 80050e8:	080063e0 	.word	0x080063e0
 80050ec:	080063a0 	.word	0x080063a0

080050f0 <std>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b510      	push	{r4, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	e9c0 3300 	strd	r3, r3, [r0]
 80050fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fe:	6083      	str	r3, [r0, #8]
 8005100:	8181      	strh	r1, [r0, #12]
 8005102:	6643      	str	r3, [r0, #100]	; 0x64
 8005104:	81c2      	strh	r2, [r0, #14]
 8005106:	6183      	str	r3, [r0, #24]
 8005108:	4619      	mov	r1, r3
 800510a:	2208      	movs	r2, #8
 800510c:	305c      	adds	r0, #92	; 0x5c
 800510e:	f7fe faff 	bl	8003710 <memset>
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x38>)
 8005114:	6224      	str	r4, [r4, #32]
 8005116:	6263      	str	r3, [r4, #36]	; 0x24
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <std+0x3c>)
 800511a:	62a3      	str	r3, [r4, #40]	; 0x28
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <std+0x40>)
 800511e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <std+0x44>)
 8005122:	6323      	str	r3, [r4, #48]	; 0x30
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop
 8005128:	08005fb1 	.word	0x08005fb1
 800512c:	08005fd3 	.word	0x08005fd3
 8005130:	0800600b 	.word	0x0800600b
 8005134:	0800602f 	.word	0x0800602f

08005138 <_cleanup_r>:
 8005138:	4901      	ldr	r1, [pc, #4]	; (8005140 <_cleanup_r+0x8>)
 800513a:	f000 b8af 	b.w	800529c <_fwalk_reent>
 800513e:	bf00      	nop
 8005140:	08005079 	.word	0x08005079

08005144 <__sfmoreglue>:
 8005144:	2268      	movs	r2, #104	; 0x68
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	1e4d      	subs	r5, r1, #1
 800514a:	4355      	muls	r5, r2
 800514c:	460e      	mov	r6, r1
 800514e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005152:	f000 fd51 	bl	8005bf8 <_malloc_r>
 8005156:	4604      	mov	r4, r0
 8005158:	b140      	cbz	r0, 800516c <__sfmoreglue+0x28>
 800515a:	2100      	movs	r1, #0
 800515c:	e9c0 1600 	strd	r1, r6, [r0]
 8005160:	300c      	adds	r0, #12
 8005162:	60a0      	str	r0, [r4, #8]
 8005164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005168:	f7fe fad2 	bl	8003710 <memset>
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}

08005170 <__sfp_lock_acquire>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_acquire+0x8>)
 8005172:	f000 b8b8 	b.w	80052e6 <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	200002f9 	.word	0x200002f9

0800517c <__sfp_lock_release>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sfp_lock_release+0x8>)
 800517e:	f000 b8b3 	b.w	80052e8 <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	200002f9 	.word	0x200002f9

08005188 <__sinit_lock_acquire>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sinit_lock_acquire+0x8>)
 800518a:	f000 b8ac 	b.w	80052e6 <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	200002fa 	.word	0x200002fa

08005194 <__sinit_lock_release>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sinit_lock_release+0x8>)
 8005196:	f000 b8a7 	b.w	80052e8 <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	200002fa 	.word	0x200002fa

080051a0 <__sinit>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4604      	mov	r4, r0
 80051a4:	f7ff fff0 	bl	8005188 <__sinit_lock_acquire>
 80051a8:	69a3      	ldr	r3, [r4, #24]
 80051aa:	b11b      	cbz	r3, 80051b4 <__sinit+0x14>
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f7ff bff0 	b.w	8005194 <__sinit_lock_release>
 80051b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051b8:	6523      	str	r3, [r4, #80]	; 0x50
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <__sinit+0x68>)
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <__sinit+0x6c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	bf08      	it	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	4620      	mov	r0, r4
 80051ca:	bf08      	it	eq
 80051cc:	61a3      	streq	r3, [r4, #24]
 80051ce:	f000 f81f 	bl	8005210 <__sfp>
 80051d2:	6060      	str	r0, [r4, #4]
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f81b 	bl	8005210 <__sfp>
 80051da:	60a0      	str	r0, [r4, #8]
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f817 	bl	8005210 <__sfp>
 80051e2:	2200      	movs	r2, #0
 80051e4:	2104      	movs	r1, #4
 80051e6:	60e0      	str	r0, [r4, #12]
 80051e8:	6860      	ldr	r0, [r4, #4]
 80051ea:	f7ff ff81 	bl	80050f0 <std>
 80051ee:	2201      	movs	r2, #1
 80051f0:	2109      	movs	r1, #9
 80051f2:	68a0      	ldr	r0, [r4, #8]
 80051f4:	f7ff ff7c 	bl	80050f0 <std>
 80051f8:	2202      	movs	r2, #2
 80051fa:	2112      	movs	r1, #18
 80051fc:	68e0      	ldr	r0, [r4, #12]
 80051fe:	f7ff ff77 	bl	80050f0 <std>
 8005202:	2301      	movs	r3, #1
 8005204:	61a3      	str	r3, [r4, #24]
 8005206:	e7d1      	b.n	80051ac <__sinit+0xc>
 8005208:	080062d8 	.word	0x080062d8
 800520c:	08005139 	.word	0x08005139

08005210 <__sfp>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	4607      	mov	r7, r0
 8005214:	f7ff ffac 	bl	8005170 <__sfp_lock_acquire>
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <__sfp+0x84>)
 800521a:	681e      	ldr	r6, [r3, #0]
 800521c:	69b3      	ldr	r3, [r6, #24]
 800521e:	b913      	cbnz	r3, 8005226 <__sfp+0x16>
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ffbd 	bl	80051a0 <__sinit>
 8005226:	3648      	adds	r6, #72	; 0x48
 8005228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	d503      	bpl.n	8005238 <__sfp+0x28>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	b30b      	cbz	r3, 8005278 <__sfp+0x68>
 8005234:	6836      	ldr	r6, [r6, #0]
 8005236:	e7f7      	b.n	8005228 <__sfp+0x18>
 8005238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800523c:	b9d5      	cbnz	r5, 8005274 <__sfp+0x64>
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <__sfp+0x88>)
 8005240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005244:	60e3      	str	r3, [r4, #12]
 8005246:	6665      	str	r5, [r4, #100]	; 0x64
 8005248:	f000 f84c 	bl	80052e4 <__retarget_lock_init_recursive>
 800524c:	f7ff ff96 	bl	800517c <__sfp_lock_release>
 8005250:	2208      	movs	r2, #8
 8005252:	4629      	mov	r1, r5
 8005254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800525c:	6025      	str	r5, [r4, #0]
 800525e:	61a5      	str	r5, [r4, #24]
 8005260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005264:	f7fe fa54 	bl	8003710 <memset>
 8005268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800526c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005270:	4620      	mov	r0, r4
 8005272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005274:	3468      	adds	r4, #104	; 0x68
 8005276:	e7d9      	b.n	800522c <__sfp+0x1c>
 8005278:	2104      	movs	r1, #4
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ff62 	bl	8005144 <__sfmoreglue>
 8005280:	4604      	mov	r4, r0
 8005282:	6030      	str	r0, [r6, #0]
 8005284:	2800      	cmp	r0, #0
 8005286:	d1d5      	bne.n	8005234 <__sfp+0x24>
 8005288:	f7ff ff78 	bl	800517c <__sfp_lock_release>
 800528c:	230c      	movs	r3, #12
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	e7ee      	b.n	8005270 <__sfp+0x60>
 8005292:	bf00      	nop
 8005294:	080062d8 	.word	0x080062d8
 8005298:	ffff0001 	.word	0xffff0001

0800529c <_fwalk_reent>:
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052a0:	4606      	mov	r6, r0
 80052a2:	4688      	mov	r8, r1
 80052a4:	2700      	movs	r7, #0
 80052a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ae:	f1b9 0901 	subs.w	r9, r9, #1
 80052b2:	d505      	bpl.n	80052c0 <_fwalk_reent+0x24>
 80052b4:	6824      	ldr	r4, [r4, #0]
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d1f7      	bne.n	80052aa <_fwalk_reent+0xe>
 80052ba:	4638      	mov	r0, r7
 80052bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d907      	bls.n	80052d6 <_fwalk_reent+0x3a>
 80052c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ca:	3301      	adds	r3, #1
 80052cc:	d003      	beq.n	80052d6 <_fwalk_reent+0x3a>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4630      	mov	r0, r6
 80052d2:	47c0      	blx	r8
 80052d4:	4307      	orrs	r7, r0
 80052d6:	3568      	adds	r5, #104	; 0x68
 80052d8:	e7e9      	b.n	80052ae <_fwalk_reent+0x12>
	...

080052dc <_localeconv_r>:
 80052dc:	4800      	ldr	r0, [pc, #0]	; (80052e0 <_localeconv_r+0x4>)
 80052de:	4770      	bx	lr
 80052e0:	20000170 	.word	0x20000170

080052e4 <__retarget_lock_init_recursive>:
 80052e4:	4770      	bx	lr

080052e6 <__retarget_lock_acquire_recursive>:
 80052e6:	4770      	bx	lr

080052e8 <__retarget_lock_release_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__swhatbuf_r>:
 80052ea:	b570      	push	{r4, r5, r6, lr}
 80052ec:	460e      	mov	r6, r1
 80052ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f2:	4614      	mov	r4, r2
 80052f4:	2900      	cmp	r1, #0
 80052f6:	461d      	mov	r5, r3
 80052f8:	b096      	sub	sp, #88	; 0x58
 80052fa:	da08      	bge.n	800530e <__swhatbuf_r+0x24>
 80052fc:	2200      	movs	r2, #0
 80052fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	d410      	bmi.n	800532a <__swhatbuf_r+0x40>
 8005308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530c:	e00e      	b.n	800532c <__swhatbuf_r+0x42>
 800530e:	466a      	mov	r2, sp
 8005310:	f000 fee4 	bl	80060dc <_fstat_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	dbf1      	blt.n	80052fc <__swhatbuf_r+0x12>
 8005318:	9a01      	ldr	r2, [sp, #4]
 800531a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800531e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005322:	425a      	negs	r2, r3
 8005324:	415a      	adcs	r2, r3
 8005326:	602a      	str	r2, [r5, #0]
 8005328:	e7ee      	b.n	8005308 <__swhatbuf_r+0x1e>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	2000      	movs	r0, #0
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	b016      	add	sp, #88	; 0x58
 8005332:	bd70      	pop	{r4, r5, r6, pc}

08005334 <__smakebuf_r>:
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005338:	079d      	lsls	r5, r3, #30
 800533a:	4606      	mov	r6, r0
 800533c:	460c      	mov	r4, r1
 800533e:	d507      	bpl.n	8005350 <__smakebuf_r+0x1c>
 8005340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	2301      	movs	r3, #1
 800534a:	6163      	str	r3, [r4, #20]
 800534c:	b002      	add	sp, #8
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	466a      	mov	r2, sp
 8005352:	ab01      	add	r3, sp, #4
 8005354:	f7ff ffc9 	bl	80052ea <__swhatbuf_r>
 8005358:	9900      	ldr	r1, [sp, #0]
 800535a:	4605      	mov	r5, r0
 800535c:	4630      	mov	r0, r6
 800535e:	f000 fc4b 	bl	8005bf8 <_malloc_r>
 8005362:	b948      	cbnz	r0, 8005378 <__smakebuf_r+0x44>
 8005364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005368:	059a      	lsls	r2, r3, #22
 800536a:	d4ef      	bmi.n	800534c <__smakebuf_r+0x18>
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	e7e3      	b.n	8005340 <__smakebuf_r+0xc>
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <__smakebuf_r+0x7c>)
 800537a:	62b3      	str	r3, [r6, #40]	; 0x28
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	6120      	str	r0, [r4, #16]
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	b15b      	cbz	r3, 80053a8 <__smakebuf_r+0x74>
 8005390:	4630      	mov	r0, r6
 8005392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005396:	f000 feb3 	bl	8006100 <_isatty_r>
 800539a:	b128      	cbz	r0, 80053a8 <__smakebuf_r+0x74>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	89a0      	ldrh	r0, [r4, #12]
 80053aa:	4305      	orrs	r5, r0
 80053ac:	81a5      	strh	r5, [r4, #12]
 80053ae:	e7cd      	b.n	800534c <__smakebuf_r+0x18>
 80053b0:	08005139 	.word	0x08005139

080053b4 <malloc>:
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <malloc+0xc>)
 80053b6:	4601      	mov	r1, r0
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f000 bc1d 	b.w	8005bf8 <_malloc_r>
 80053be:	bf00      	nop
 80053c0:	2000001c 	.word	0x2000001c

080053c4 <memchr>:
 80053c4:	4603      	mov	r3, r0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	b2c9      	uxtb	r1, r1
 80053ca:	4402      	add	r2, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	d101      	bne.n	80053d6 <memchr+0x12>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e003      	b.n	80053de <memchr+0x1a>
 80053d6:	7804      	ldrb	r4, [r0, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	428c      	cmp	r4, r1
 80053dc:	d1f6      	bne.n	80053cc <memchr+0x8>
 80053de:	bd10      	pop	{r4, pc}

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <_Balloc>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005400:	4604      	mov	r4, r0
 8005402:	460d      	mov	r5, r1
 8005404:	b976      	cbnz	r6, 8005424 <_Balloc+0x28>
 8005406:	2010      	movs	r0, #16
 8005408:	f7ff ffd4 	bl	80053b4 <malloc>
 800540c:	4602      	mov	r2, r0
 800540e:	6260      	str	r0, [r4, #36]	; 0x24
 8005410:	b920      	cbnz	r0, 800541c <_Balloc+0x20>
 8005412:	2166      	movs	r1, #102	; 0x66
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <_Balloc+0x78>)
 8005416:	4818      	ldr	r0, [pc, #96]	; (8005478 <_Balloc+0x7c>)
 8005418:	f000 fe20 	bl	800605c <__assert_func>
 800541c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005420:	6006      	str	r6, [r0, #0]
 8005422:	60c6      	str	r6, [r0, #12]
 8005424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005426:	68f3      	ldr	r3, [r6, #12]
 8005428:	b183      	cbz	r3, 800544c <_Balloc+0x50>
 800542a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005432:	b9b8      	cbnz	r0, 8005464 <_Balloc+0x68>
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f605 	lsl.w	r6, r1, r5
 800543a:	1d72      	adds	r2, r6, #5
 800543c:	4620      	mov	r0, r4
 800543e:	0092      	lsls	r2, r2, #2
 8005440:	f000 fb5e 	bl	8005b00 <_calloc_r>
 8005444:	b160      	cbz	r0, 8005460 <_Balloc+0x64>
 8005446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800544a:	e00e      	b.n	800546a <_Balloc+0x6e>
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	2104      	movs	r1, #4
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fb55 	bl	8005b00 <_calloc_r>
 8005456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005458:	60f0      	str	r0, [r6, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e4      	bne.n	800542a <_Balloc+0x2e>
 8005460:	2000      	movs	r0, #0
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	6802      	ldr	r2, [r0, #0]
 8005466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800546a:	2300      	movs	r3, #0
 800546c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005470:	e7f7      	b.n	8005462 <_Balloc+0x66>
 8005472:	bf00      	nop
 8005474:	0800631d 	.word	0x0800631d
 8005478:	08006400 	.word	0x08006400

0800547c <_Bfree>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	b976      	cbnz	r6, 80054a4 <_Bfree+0x28>
 8005486:	2010      	movs	r0, #16
 8005488:	f7ff ff94 	bl	80053b4 <malloc>
 800548c:	4602      	mov	r2, r0
 800548e:	6268      	str	r0, [r5, #36]	; 0x24
 8005490:	b920      	cbnz	r0, 800549c <_Bfree+0x20>
 8005492:	218a      	movs	r1, #138	; 0x8a
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <_Bfree+0x3c>)
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <_Bfree+0x40>)
 8005498:	f000 fde0 	bl	800605c <__assert_func>
 800549c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a0:	6006      	str	r6, [r0, #0]
 80054a2:	60c6      	str	r6, [r0, #12]
 80054a4:	b13c      	cbz	r4, 80054b6 <_Bfree+0x3a>
 80054a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054a8:	6862      	ldr	r2, [r4, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b0:	6021      	str	r1, [r4, #0]
 80054b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	0800631d 	.word	0x0800631d
 80054bc:	08006400 	.word	0x08006400

080054c0 <__multadd>:
 80054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	461e      	mov	r6, r3
 80054ca:	2000      	movs	r0, #0
 80054cc:	690d      	ldr	r5, [r1, #16]
 80054ce:	f101 0c14 	add.w	ip, r1, #20
 80054d2:	f8dc 3000 	ldr.w	r3, [ip]
 80054d6:	3001      	adds	r0, #1
 80054d8:	b299      	uxth	r1, r3
 80054da:	fb02 6101 	mla	r1, r2, r1, r6
 80054de:	0c1e      	lsrs	r6, r3, #16
 80054e0:	0c0b      	lsrs	r3, r1, #16
 80054e2:	fb02 3306 	mla	r3, r2, r6, r3
 80054e6:	b289      	uxth	r1, r1
 80054e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054ec:	4285      	cmp	r5, r0
 80054ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054f2:	f84c 1b04 	str.w	r1, [ip], #4
 80054f6:	dcec      	bgt.n	80054d2 <__multadd+0x12>
 80054f8:	b30e      	cbz	r6, 800553e <__multadd+0x7e>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	dc19      	bgt.n	8005534 <__multadd+0x74>
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	4638      	mov	r0, r7
 8005504:	3101      	adds	r1, #1
 8005506:	f7ff ff79 	bl	80053fc <_Balloc>
 800550a:	4680      	mov	r8, r0
 800550c:	b928      	cbnz	r0, 800551a <__multadd+0x5a>
 800550e:	4602      	mov	r2, r0
 8005510:	21b5      	movs	r1, #181	; 0xb5
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <__multadd+0x84>)
 8005514:	480c      	ldr	r0, [pc, #48]	; (8005548 <__multadd+0x88>)
 8005516:	f000 fda1 	bl	800605c <__assert_func>
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	f104 010c 	add.w	r1, r4, #12
 8005520:	3202      	adds	r2, #2
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	300c      	adds	r0, #12
 8005526:	f7ff ff5b 	bl	80053e0 <memcpy>
 800552a:	4621      	mov	r1, r4
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ffa5 	bl	800547c <_Bfree>
 8005532:	4644      	mov	r4, r8
 8005534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005538:	3501      	adds	r5, #1
 800553a:	615e      	str	r6, [r3, #20]
 800553c:	6125      	str	r5, [r4, #16]
 800553e:	4620      	mov	r0, r4
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005544:	0800638f 	.word	0x0800638f
 8005548:	08006400 	.word	0x08006400

0800554c <__hi0bits>:
 800554c:	0c02      	lsrs	r2, r0, #16
 800554e:	0412      	lsls	r2, r2, #16
 8005550:	4603      	mov	r3, r0
 8005552:	b9ca      	cbnz	r2, 8005588 <__hi0bits+0x3c>
 8005554:	0403      	lsls	r3, r0, #16
 8005556:	2010      	movs	r0, #16
 8005558:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800555c:	bf04      	itt	eq
 800555e:	021b      	lsleq	r3, r3, #8
 8005560:	3008      	addeq	r0, #8
 8005562:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005566:	bf04      	itt	eq
 8005568:	011b      	lsleq	r3, r3, #4
 800556a:	3004      	addeq	r0, #4
 800556c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005570:	bf04      	itt	eq
 8005572:	009b      	lsleq	r3, r3, #2
 8005574:	3002      	addeq	r0, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	db05      	blt.n	8005586 <__hi0bits+0x3a>
 800557a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800557e:	f100 0001 	add.w	r0, r0, #1
 8005582:	bf08      	it	eq
 8005584:	2020      	moveq	r0, #32
 8005586:	4770      	bx	lr
 8005588:	2000      	movs	r0, #0
 800558a:	e7e5      	b.n	8005558 <__hi0bits+0xc>

0800558c <__lo0bits>:
 800558c:	6803      	ldr	r3, [r0, #0]
 800558e:	4602      	mov	r2, r0
 8005590:	f013 0007 	ands.w	r0, r3, #7
 8005594:	d00b      	beq.n	80055ae <__lo0bits+0x22>
 8005596:	07d9      	lsls	r1, r3, #31
 8005598:	d421      	bmi.n	80055de <__lo0bits+0x52>
 800559a:	0798      	lsls	r0, r3, #30
 800559c:	bf49      	itett	mi
 800559e:	085b      	lsrmi	r3, r3, #1
 80055a0:	089b      	lsrpl	r3, r3, #2
 80055a2:	2001      	movmi	r0, #1
 80055a4:	6013      	strmi	r3, [r2, #0]
 80055a6:	bf5c      	itt	pl
 80055a8:	2002      	movpl	r0, #2
 80055aa:	6013      	strpl	r3, [r2, #0]
 80055ac:	4770      	bx	lr
 80055ae:	b299      	uxth	r1, r3
 80055b0:	b909      	cbnz	r1, 80055b6 <__lo0bits+0x2a>
 80055b2:	2010      	movs	r0, #16
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2d9      	uxtb	r1, r3
 80055b8:	b909      	cbnz	r1, 80055be <__lo0bits+0x32>
 80055ba:	3008      	adds	r0, #8
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	0719      	lsls	r1, r3, #28
 80055c0:	bf04      	itt	eq
 80055c2:	091b      	lsreq	r3, r3, #4
 80055c4:	3004      	addeq	r0, #4
 80055c6:	0799      	lsls	r1, r3, #30
 80055c8:	bf04      	itt	eq
 80055ca:	089b      	lsreq	r3, r3, #2
 80055cc:	3002      	addeq	r0, #2
 80055ce:	07d9      	lsls	r1, r3, #31
 80055d0:	d403      	bmi.n	80055da <__lo0bits+0x4e>
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	f100 0001 	add.w	r0, r0, #1
 80055d8:	d003      	beq.n	80055e2 <__lo0bits+0x56>
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4770      	bx	lr
 80055de:	2000      	movs	r0, #0
 80055e0:	4770      	bx	lr
 80055e2:	2020      	movs	r0, #32
 80055e4:	4770      	bx	lr
	...

080055e8 <__i2b>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	460c      	mov	r4, r1
 80055ec:	2101      	movs	r1, #1
 80055ee:	f7ff ff05 	bl	80053fc <_Balloc>
 80055f2:	4602      	mov	r2, r0
 80055f4:	b928      	cbnz	r0, 8005602 <__i2b+0x1a>
 80055f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <__i2b+0x24>)
 80055fc:	4804      	ldr	r0, [pc, #16]	; (8005610 <__i2b+0x28>)
 80055fe:	f000 fd2d 	bl	800605c <__assert_func>
 8005602:	2301      	movs	r3, #1
 8005604:	6144      	str	r4, [r0, #20]
 8005606:	6103      	str	r3, [r0, #16]
 8005608:	bd10      	pop	{r4, pc}
 800560a:	bf00      	nop
 800560c:	0800638f 	.word	0x0800638f
 8005610:	08006400 	.word	0x08006400

08005614 <__multiply>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	4691      	mov	r9, r2
 800561a:	690a      	ldr	r2, [r1, #16]
 800561c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005620:	460c      	mov	r4, r1
 8005622:	429a      	cmp	r2, r3
 8005624:	bfbe      	ittt	lt
 8005626:	460b      	movlt	r3, r1
 8005628:	464c      	movlt	r4, r9
 800562a:	4699      	movlt	r9, r3
 800562c:	6927      	ldr	r7, [r4, #16]
 800562e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	6861      	ldr	r1, [r4, #4]
 8005636:	eb07 060a 	add.w	r6, r7, sl
 800563a:	42b3      	cmp	r3, r6
 800563c:	b085      	sub	sp, #20
 800563e:	bfb8      	it	lt
 8005640:	3101      	addlt	r1, #1
 8005642:	f7ff fedb 	bl	80053fc <_Balloc>
 8005646:	b930      	cbnz	r0, 8005656 <__multiply+0x42>
 8005648:	4602      	mov	r2, r0
 800564a:	f240 115d 	movw	r1, #349	; 0x15d
 800564e:	4b43      	ldr	r3, [pc, #268]	; (800575c <__multiply+0x148>)
 8005650:	4843      	ldr	r0, [pc, #268]	; (8005760 <__multiply+0x14c>)
 8005652:	f000 fd03 	bl	800605c <__assert_func>
 8005656:	f100 0514 	add.w	r5, r0, #20
 800565a:	462b      	mov	r3, r5
 800565c:	2200      	movs	r2, #0
 800565e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005662:	4543      	cmp	r3, r8
 8005664:	d321      	bcc.n	80056aa <__multiply+0x96>
 8005666:	f104 0314 	add.w	r3, r4, #20
 800566a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800566e:	f109 0314 	add.w	r3, r9, #20
 8005672:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005676:	9202      	str	r2, [sp, #8]
 8005678:	1b3a      	subs	r2, r7, r4
 800567a:	3a15      	subs	r2, #21
 800567c:	f022 0203 	bic.w	r2, r2, #3
 8005680:	3204      	adds	r2, #4
 8005682:	f104 0115 	add.w	r1, r4, #21
 8005686:	428f      	cmp	r7, r1
 8005688:	bf38      	it	cc
 800568a:	2204      	movcc	r2, #4
 800568c:	9201      	str	r2, [sp, #4]
 800568e:	9a02      	ldr	r2, [sp, #8]
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d80c      	bhi.n	80056b0 <__multiply+0x9c>
 8005696:	2e00      	cmp	r6, #0
 8005698:	dd03      	ble.n	80056a2 <__multiply+0x8e>
 800569a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d059      	beq.n	8005756 <__multiply+0x142>
 80056a2:	6106      	str	r6, [r0, #16]
 80056a4:	b005      	add	sp, #20
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	f843 2b04 	str.w	r2, [r3], #4
 80056ae:	e7d8      	b.n	8005662 <__multiply+0x4e>
 80056b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80056b4:	f1ba 0f00 	cmp.w	sl, #0
 80056b8:	d023      	beq.n	8005702 <__multiply+0xee>
 80056ba:	46a9      	mov	r9, r5
 80056bc:	f04f 0c00 	mov.w	ip, #0
 80056c0:	f104 0e14 	add.w	lr, r4, #20
 80056c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056c8:	f8d9 1000 	ldr.w	r1, [r9]
 80056cc:	fa1f fb82 	uxth.w	fp, r2
 80056d0:	b289      	uxth	r1, r1
 80056d2:	fb0a 110b 	mla	r1, sl, fp, r1
 80056d6:	4461      	add	r1, ip
 80056d8:	f8d9 c000 	ldr.w	ip, [r9]
 80056dc:	0c12      	lsrs	r2, r2, #16
 80056de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80056e2:	fb0a c202 	mla	r2, sl, r2, ip
 80056e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80056ea:	b289      	uxth	r1, r1
 80056ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056f0:	4577      	cmp	r7, lr
 80056f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80056f6:	f849 1b04 	str.w	r1, [r9], #4
 80056fa:	d8e3      	bhi.n	80056c4 <__multiply+0xb0>
 80056fc:	9a01      	ldr	r2, [sp, #4]
 80056fe:	f845 c002 	str.w	ip, [r5, r2]
 8005702:	9a03      	ldr	r2, [sp, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	d020      	beq.n	8005752 <__multiply+0x13e>
 8005710:	46ae      	mov	lr, r5
 8005712:	f04f 0a00 	mov.w	sl, #0
 8005716:	6829      	ldr	r1, [r5, #0]
 8005718:	f104 0c14 	add.w	ip, r4, #20
 800571c:	f8bc b000 	ldrh.w	fp, [ip]
 8005720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005724:	b289      	uxth	r1, r1
 8005726:	fb09 220b 	mla	r2, r9, fp, r2
 800572a:	4492      	add	sl, r2
 800572c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005730:	f84e 1b04 	str.w	r1, [lr], #4
 8005734:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005738:	f8be 1000 	ldrh.w	r1, [lr]
 800573c:	0c12      	lsrs	r2, r2, #16
 800573e:	fb09 1102 	mla	r1, r9, r2, r1
 8005742:	4567      	cmp	r7, ip
 8005744:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005748:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800574c:	d8e6      	bhi.n	800571c <__multiply+0x108>
 800574e:	9a01      	ldr	r2, [sp, #4]
 8005750:	50a9      	str	r1, [r5, r2]
 8005752:	3504      	adds	r5, #4
 8005754:	e79b      	b.n	800568e <__multiply+0x7a>
 8005756:	3e01      	subs	r6, #1
 8005758:	e79d      	b.n	8005696 <__multiply+0x82>
 800575a:	bf00      	nop
 800575c:	0800638f 	.word	0x0800638f
 8005760:	08006400 	.word	0x08006400

08005764 <__pow5mult>:
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	4615      	mov	r5, r2
 800576a:	f012 0203 	ands.w	r2, r2, #3
 800576e:	4606      	mov	r6, r0
 8005770:	460f      	mov	r7, r1
 8005772:	d007      	beq.n	8005784 <__pow5mult+0x20>
 8005774:	4c25      	ldr	r4, [pc, #148]	; (800580c <__pow5mult+0xa8>)
 8005776:	3a01      	subs	r2, #1
 8005778:	2300      	movs	r3, #0
 800577a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800577e:	f7ff fe9f 	bl	80054c0 <__multadd>
 8005782:	4607      	mov	r7, r0
 8005784:	10ad      	asrs	r5, r5, #2
 8005786:	d03d      	beq.n	8005804 <__pow5mult+0xa0>
 8005788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800578a:	b97c      	cbnz	r4, 80057ac <__pow5mult+0x48>
 800578c:	2010      	movs	r0, #16
 800578e:	f7ff fe11 	bl	80053b4 <malloc>
 8005792:	4602      	mov	r2, r0
 8005794:	6270      	str	r0, [r6, #36]	; 0x24
 8005796:	b928      	cbnz	r0, 80057a4 <__pow5mult+0x40>
 8005798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800579c:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <__pow5mult+0xac>)
 800579e:	481d      	ldr	r0, [pc, #116]	; (8005814 <__pow5mult+0xb0>)
 80057a0:	f000 fc5c 	bl	800605c <__assert_func>
 80057a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057a8:	6004      	str	r4, [r0, #0]
 80057aa:	60c4      	str	r4, [r0, #12]
 80057ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057b4:	b94c      	cbnz	r4, 80057ca <__pow5mult+0x66>
 80057b6:	f240 2171 	movw	r1, #625	; 0x271
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ff14 	bl	80055e8 <__i2b>
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057c8:	6003      	str	r3, [r0, #0]
 80057ca:	f04f 0900 	mov.w	r9, #0
 80057ce:	07eb      	lsls	r3, r5, #31
 80057d0:	d50a      	bpl.n	80057e8 <__pow5mult+0x84>
 80057d2:	4639      	mov	r1, r7
 80057d4:	4622      	mov	r2, r4
 80057d6:	4630      	mov	r0, r6
 80057d8:	f7ff ff1c 	bl	8005614 <__multiply>
 80057dc:	4680      	mov	r8, r0
 80057de:	4639      	mov	r1, r7
 80057e0:	4630      	mov	r0, r6
 80057e2:	f7ff fe4b 	bl	800547c <_Bfree>
 80057e6:	4647      	mov	r7, r8
 80057e8:	106d      	asrs	r5, r5, #1
 80057ea:	d00b      	beq.n	8005804 <__pow5mult+0xa0>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	b938      	cbnz	r0, 8005800 <__pow5mult+0x9c>
 80057f0:	4622      	mov	r2, r4
 80057f2:	4621      	mov	r1, r4
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff ff0d 	bl	8005614 <__multiply>
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	f8c0 9000 	str.w	r9, [r0]
 8005800:	4604      	mov	r4, r0
 8005802:	e7e4      	b.n	80057ce <__pow5mult+0x6a>
 8005804:	4638      	mov	r0, r7
 8005806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580a:	bf00      	nop
 800580c:	08006550 	.word	0x08006550
 8005810:	0800631d 	.word	0x0800631d
 8005814:	08006400 	.word	0x08006400

08005818 <__lshift>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	460c      	mov	r4, r1
 800581e:	4607      	mov	r7, r0
 8005820:	4691      	mov	r9, r2
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	6849      	ldr	r1, [r1, #4]
 8005826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005830:	f108 0601 	add.w	r6, r8, #1
 8005834:	42b3      	cmp	r3, r6
 8005836:	db0b      	blt.n	8005850 <__lshift+0x38>
 8005838:	4638      	mov	r0, r7
 800583a:	f7ff fddf 	bl	80053fc <_Balloc>
 800583e:	4605      	mov	r5, r0
 8005840:	b948      	cbnz	r0, 8005856 <__lshift+0x3e>
 8005842:	4602      	mov	r2, r0
 8005844:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005848:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <__lshift+0xd8>)
 800584a:	482a      	ldr	r0, [pc, #168]	; (80058f4 <__lshift+0xdc>)
 800584c:	f000 fc06 	bl	800605c <__assert_func>
 8005850:	3101      	adds	r1, #1
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	e7ee      	b.n	8005834 <__lshift+0x1c>
 8005856:	2300      	movs	r3, #0
 8005858:	f100 0114 	add.w	r1, r0, #20
 800585c:	f100 0210 	add.w	r2, r0, #16
 8005860:	4618      	mov	r0, r3
 8005862:	4553      	cmp	r3, sl
 8005864:	db37      	blt.n	80058d6 <__lshift+0xbe>
 8005866:	6920      	ldr	r0, [r4, #16]
 8005868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800586c:	f104 0314 	add.w	r3, r4, #20
 8005870:	f019 091f 	ands.w	r9, r9, #31
 8005874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800587c:	d02f      	beq.n	80058de <__lshift+0xc6>
 800587e:	468a      	mov	sl, r1
 8005880:	f04f 0c00 	mov.w	ip, #0
 8005884:	f1c9 0e20 	rsb	lr, r9, #32
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	fa02 f209 	lsl.w	r2, r2, r9
 800588e:	ea42 020c 	orr.w	r2, r2, ip
 8005892:	f84a 2b04 	str.w	r2, [sl], #4
 8005896:	f853 2b04 	ldr.w	r2, [r3], #4
 800589a:	4298      	cmp	r0, r3
 800589c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80058a0:	d8f2      	bhi.n	8005888 <__lshift+0x70>
 80058a2:	1b03      	subs	r3, r0, r4
 80058a4:	3b15      	subs	r3, #21
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	3304      	adds	r3, #4
 80058ac:	f104 0215 	add.w	r2, r4, #21
 80058b0:	4290      	cmp	r0, r2
 80058b2:	bf38      	it	cc
 80058b4:	2304      	movcc	r3, #4
 80058b6:	f841 c003 	str.w	ip, [r1, r3]
 80058ba:	f1bc 0f00 	cmp.w	ip, #0
 80058be:	d001      	beq.n	80058c4 <__lshift+0xac>
 80058c0:	f108 0602 	add.w	r6, r8, #2
 80058c4:	3e01      	subs	r6, #1
 80058c6:	4638      	mov	r0, r7
 80058c8:	4621      	mov	r1, r4
 80058ca:	612e      	str	r6, [r5, #16]
 80058cc:	f7ff fdd6 	bl	800547c <_Bfree>
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80058da:	3301      	adds	r3, #1
 80058dc:	e7c1      	b.n	8005862 <__lshift+0x4a>
 80058de:	3904      	subs	r1, #4
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	4298      	cmp	r0, r3
 80058e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80058ea:	d8f9      	bhi.n	80058e0 <__lshift+0xc8>
 80058ec:	e7ea      	b.n	80058c4 <__lshift+0xac>
 80058ee:	bf00      	nop
 80058f0:	0800638f 	.word	0x0800638f
 80058f4:	08006400 	.word	0x08006400

080058f8 <__mcmp>:
 80058f8:	4603      	mov	r3, r0
 80058fa:	690a      	ldr	r2, [r1, #16]
 80058fc:	6900      	ldr	r0, [r0, #16]
 80058fe:	b530      	push	{r4, r5, lr}
 8005900:	1a80      	subs	r0, r0, r2
 8005902:	d10d      	bne.n	8005920 <__mcmp+0x28>
 8005904:	3314      	adds	r3, #20
 8005906:	3114      	adds	r1, #20
 8005908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800590c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005918:	4295      	cmp	r5, r2
 800591a:	d002      	beq.n	8005922 <__mcmp+0x2a>
 800591c:	d304      	bcc.n	8005928 <__mcmp+0x30>
 800591e:	2001      	movs	r0, #1
 8005920:	bd30      	pop	{r4, r5, pc}
 8005922:	42a3      	cmp	r3, r4
 8005924:	d3f4      	bcc.n	8005910 <__mcmp+0x18>
 8005926:	e7fb      	b.n	8005920 <__mcmp+0x28>
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	e7f8      	b.n	8005920 <__mcmp+0x28>
	...

08005930 <__mdiff>:
 8005930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	460d      	mov	r5, r1
 8005936:	4607      	mov	r7, r0
 8005938:	4611      	mov	r1, r2
 800593a:	4628      	mov	r0, r5
 800593c:	4614      	mov	r4, r2
 800593e:	f7ff ffdb 	bl	80058f8 <__mcmp>
 8005942:	1e06      	subs	r6, r0, #0
 8005944:	d111      	bne.n	800596a <__mdiff+0x3a>
 8005946:	4631      	mov	r1, r6
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff fd57 	bl	80053fc <_Balloc>
 800594e:	4602      	mov	r2, r0
 8005950:	b928      	cbnz	r0, 800595e <__mdiff+0x2e>
 8005952:	f240 2132 	movw	r1, #562	; 0x232
 8005956:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <__mdiff+0x110>)
 8005958:	483a      	ldr	r0, [pc, #232]	; (8005a44 <__mdiff+0x114>)
 800595a:	f000 fb7f 	bl	800605c <__assert_func>
 800595e:	2301      	movs	r3, #1
 8005960:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005964:	4610      	mov	r0, r2
 8005966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	bfa4      	itt	ge
 800596c:	4623      	movge	r3, r4
 800596e:	462c      	movge	r4, r5
 8005970:	4638      	mov	r0, r7
 8005972:	6861      	ldr	r1, [r4, #4]
 8005974:	bfa6      	itte	ge
 8005976:	461d      	movge	r5, r3
 8005978:	2600      	movge	r6, #0
 800597a:	2601      	movlt	r6, #1
 800597c:	f7ff fd3e 	bl	80053fc <_Balloc>
 8005980:	4602      	mov	r2, r0
 8005982:	b918      	cbnz	r0, 800598c <__mdiff+0x5c>
 8005984:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005988:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <__mdiff+0x110>)
 800598a:	e7e5      	b.n	8005958 <__mdiff+0x28>
 800598c:	f102 0814 	add.w	r8, r2, #20
 8005990:	46c2      	mov	sl, r8
 8005992:	f04f 0c00 	mov.w	ip, #0
 8005996:	6927      	ldr	r7, [r4, #16]
 8005998:	60c6      	str	r6, [r0, #12]
 800599a:	692e      	ldr	r6, [r5, #16]
 800599c:	f104 0014 	add.w	r0, r4, #20
 80059a0:	f105 0914 	add.w	r9, r5, #20
 80059a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80059a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059ac:	3410      	adds	r4, #16
 80059ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80059b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80059b6:	fa1f f18b 	uxth.w	r1, fp
 80059ba:	448c      	add	ip, r1
 80059bc:	b299      	uxth	r1, r3
 80059be:	0c1b      	lsrs	r3, r3, #16
 80059c0:	ebac 0101 	sub.w	r1, ip, r1
 80059c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80059cc:	b289      	uxth	r1, r1
 80059ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80059d2:	454e      	cmp	r6, r9
 80059d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80059d8:	f84a 3b04 	str.w	r3, [sl], #4
 80059dc:	d8e7      	bhi.n	80059ae <__mdiff+0x7e>
 80059de:	1b73      	subs	r3, r6, r5
 80059e0:	3b15      	subs	r3, #21
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	3515      	adds	r5, #21
 80059e8:	3304      	adds	r3, #4
 80059ea:	42ae      	cmp	r6, r5
 80059ec:	bf38      	it	cc
 80059ee:	2304      	movcc	r3, #4
 80059f0:	4418      	add	r0, r3
 80059f2:	4443      	add	r3, r8
 80059f4:	461e      	mov	r6, r3
 80059f6:	4605      	mov	r5, r0
 80059f8:	4575      	cmp	r5, lr
 80059fa:	d30e      	bcc.n	8005a1a <__mdiff+0xea>
 80059fc:	f10e 0103 	add.w	r1, lr, #3
 8005a00:	1a09      	subs	r1, r1, r0
 8005a02:	f021 0103 	bic.w	r1, r1, #3
 8005a06:	3803      	subs	r0, #3
 8005a08:	4586      	cmp	lr, r0
 8005a0a:	bf38      	it	cc
 8005a0c:	2100      	movcc	r1, #0
 8005a0e:	4419      	add	r1, r3
 8005a10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005a14:	b18b      	cbz	r3, 8005a3a <__mdiff+0x10a>
 8005a16:	6117      	str	r7, [r2, #16]
 8005a18:	e7a4      	b.n	8005964 <__mdiff+0x34>
 8005a1a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005a1e:	fa1f f188 	uxth.w	r1, r8
 8005a22:	4461      	add	r1, ip
 8005a24:	140c      	asrs	r4, r1, #16
 8005a26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a2a:	b289      	uxth	r1, r1
 8005a2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a30:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005a34:	f846 1b04 	str.w	r1, [r6], #4
 8005a38:	e7de      	b.n	80059f8 <__mdiff+0xc8>
 8005a3a:	3f01      	subs	r7, #1
 8005a3c:	e7e8      	b.n	8005a10 <__mdiff+0xe0>
 8005a3e:	bf00      	nop
 8005a40:	0800638f 	.word	0x0800638f
 8005a44:	08006400 	.word	0x08006400

08005a48 <__d2b>:
 8005a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005a52:	4690      	mov	r8, r2
 8005a54:	461d      	mov	r5, r3
 8005a56:	f7ff fcd1 	bl	80053fc <_Balloc>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	b930      	cbnz	r0, 8005a6c <__d2b+0x24>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f240 310a 	movw	r1, #778	; 0x30a
 8005a64:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <__d2b+0xb0>)
 8005a66:	4825      	ldr	r0, [pc, #148]	; (8005afc <__d2b+0xb4>)
 8005a68:	f000 faf8 	bl	800605c <__assert_func>
 8005a6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005a70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005a74:	bb2d      	cbnz	r5, 8005ac2 <__d2b+0x7a>
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	f1b8 0300 	subs.w	r3, r8, #0
 8005a7c:	d026      	beq.n	8005acc <__d2b+0x84>
 8005a7e:	4668      	mov	r0, sp
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f7ff fd83 	bl	800558c <__lo0bits>
 8005a86:	9900      	ldr	r1, [sp, #0]
 8005a88:	b1f0      	cbz	r0, 8005ac8 <__d2b+0x80>
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	f1c0 0320 	rsb	r3, r0, #32
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	430b      	orrs	r3, r1
 8005a96:	40c2      	lsrs	r2, r0
 8005a98:	6163      	str	r3, [r4, #20]
 8005a9a:	9201      	str	r2, [sp, #4]
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf14      	ite	ne
 8005aa2:	2102      	movne	r1, #2
 8005aa4:	2101      	moveq	r1, #1
 8005aa6:	61a3      	str	r3, [r4, #24]
 8005aa8:	6121      	str	r1, [r4, #16]
 8005aaa:	b1c5      	cbz	r5, 8005ade <__d2b+0x96>
 8005aac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ab0:	4405      	add	r5, r0
 8005ab2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ab6:	603d      	str	r5, [r7, #0]
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4620      	mov	r0, r4
 8005abc:	b002      	add	sp, #8
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac6:	e7d6      	b.n	8005a76 <__d2b+0x2e>
 8005ac8:	6161      	str	r1, [r4, #20]
 8005aca:	e7e7      	b.n	8005a9c <__d2b+0x54>
 8005acc:	a801      	add	r0, sp, #4
 8005ace:	f7ff fd5d 	bl	800558c <__lo0bits>
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	9b01      	ldr	r3, [sp, #4]
 8005ad6:	6121      	str	r1, [r4, #16]
 8005ad8:	6163      	str	r3, [r4, #20]
 8005ada:	3020      	adds	r0, #32
 8005adc:	e7e5      	b.n	8005aaa <__d2b+0x62>
 8005ade:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005ae2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ae6:	6038      	str	r0, [r7, #0]
 8005ae8:	6918      	ldr	r0, [r3, #16]
 8005aea:	f7ff fd2f 	bl	800554c <__hi0bits>
 8005aee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005af2:	6031      	str	r1, [r6, #0]
 8005af4:	e7e1      	b.n	8005aba <__d2b+0x72>
 8005af6:	bf00      	nop
 8005af8:	0800638f 	.word	0x0800638f
 8005afc:	08006400 	.word	0x08006400

08005b00 <_calloc_r>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	fba1 5402 	umull	r5, r4, r1, r2
 8005b06:	b934      	cbnz	r4, 8005b16 <_calloc_r+0x16>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f000 f875 	bl	8005bf8 <_malloc_r>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	b928      	cbnz	r0, 8005b1e <_calloc_r+0x1e>
 8005b12:	4630      	mov	r0, r6
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	220c      	movs	r2, #12
 8005b18:	2600      	movs	r6, #0
 8005b1a:	6002      	str	r2, [r0, #0]
 8005b1c:	e7f9      	b.n	8005b12 <_calloc_r+0x12>
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4621      	mov	r1, r4
 8005b22:	f7fd fdf5 	bl	8003710 <memset>
 8005b26:	e7f4      	b.n	8005b12 <_calloc_r+0x12>

08005b28 <_free_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d040      	beq.n	8005bb2 <_free_r+0x8a>
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f0c      	subs	r4, r1, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfb8      	it	lt
 8005b3a:	18e4      	addlt	r4, r4, r3
 8005b3c:	f000 fb14 	bl	8006168 <__malloc_lock>
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <_free_r+0x8c>)
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	b933      	cbnz	r3, 8005b54 <_free_r+0x2c>
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	6014      	str	r4, [r2, #0]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b50:	f000 bb10 	b.w	8006174 <__malloc_unlock>
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d908      	bls.n	8005b6a <_free_r+0x42>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	1821      	adds	r1, r4, r0
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf01      	itttt	eq
 8005b60:	6819      	ldreq	r1, [r3, #0]
 8005b62:	685b      	ldreq	r3, [r3, #4]
 8005b64:	1809      	addeq	r1, r1, r0
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	e7ed      	b.n	8005b46 <_free_r+0x1e>
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	b10b      	cbz	r3, 8005b74 <_free_r+0x4c>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d9fa      	bls.n	8005b6a <_free_r+0x42>
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	1850      	adds	r0, r2, r1
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d10b      	bne.n	8005b94 <_free_r+0x6c>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	4401      	add	r1, r0
 8005b80:	1850      	adds	r0, r2, r1
 8005b82:	4283      	cmp	r3, r0
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	d1e0      	bne.n	8005b4a <_free_r+0x22>
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	6011      	str	r1, [r2, #0]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	e7da      	b.n	8005b4a <_free_r+0x22>
 8005b94:	d902      	bls.n	8005b9c <_free_r+0x74>
 8005b96:	230c      	movs	r3, #12
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	e7d6      	b.n	8005b4a <_free_r+0x22>
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	1821      	adds	r1, r4, r0
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf01      	itttt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	1809      	addeq	r1, r1, r0
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	6054      	str	r4, [r2, #4]
 8005bb0:	e7cb      	b.n	8005b4a <_free_r+0x22>
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200002fc 	.word	0x200002fc

08005bb8 <sbrk_aligned>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0e      	ldr	r6, [pc, #56]	; (8005bf4 <sbrk_aligned+0x3c>)
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	b911      	cbnz	r1, 8005bca <sbrk_aligned+0x12>
 8005bc4:	f000 f9e4 	bl	8005f90 <_sbrk_r>
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f9df 	bl	8005f90 <_sbrk_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <sbrk_aligned+0x34>
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d007      	beq.n	8005bf0 <sbrk_aligned+0x38>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f9d4 	bl	8005f90 <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d101      	bne.n	8005bf0 <sbrk_aligned+0x38>
 8005bec:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	20000300 	.word	0x20000300

08005bf8 <_malloc_r>:
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d905      	bls.n	8005c20 <_malloc_r+0x28>
 8005c14:	230c      	movs	r3, #12
 8005c16:	2600      	movs	r6, #0
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	4e2e      	ldr	r6, [pc, #184]	; (8005cdc <_malloc_r+0xe4>)
 8005c22:	f000 faa1 	bl	8006168 <__malloc_lock>
 8005c26:	6833      	ldr	r3, [r6, #0]
 8005c28:	461c      	mov	r4, r3
 8005c2a:	bb34      	cbnz	r4, 8005c7a <_malloc_r+0x82>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ffc2 	bl	8005bb8 <sbrk_aligned>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	4604      	mov	r4, r0
 8005c38:	d14d      	bne.n	8005cd6 <_malloc_r+0xde>
 8005c3a:	6834      	ldr	r4, [r6, #0]
 8005c3c:	4626      	mov	r6, r4
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d140      	bne.n	8005cc4 <_malloc_r+0xcc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4631      	mov	r1, r6
 8005c46:	4638      	mov	r0, r7
 8005c48:	eb04 0803 	add.w	r8, r4, r3
 8005c4c:	f000 f9a0 	bl	8005f90 <_sbrk_r>
 8005c50:	4580      	cmp	r8, r0
 8005c52:	d13a      	bne.n	8005cca <_malloc_r+0xd2>
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	3503      	adds	r5, #3
 8005c58:	1a6d      	subs	r5, r5, r1
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	4638      	mov	r0, r7
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7ff ffa5 	bl	8005bb8 <sbrk_aligned>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d02b      	beq.n	8005cca <_malloc_r+0xd2>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	442b      	add	r3, r5
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e00e      	b.n	8005c98 <_malloc_r+0xa0>
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	1b52      	subs	r2, r2, r5
 8005c7e:	d41e      	bmi.n	8005cbe <_malloc_r+0xc6>
 8005c80:	2a0b      	cmp	r2, #11
 8005c82:	d916      	bls.n	8005cb2 <_malloc_r+0xba>
 8005c84:	1961      	adds	r1, r4, r5
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6025      	str	r5, [r4, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	6059      	strne	r1, [r3, #4]
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	bf08      	it	eq
 8005c92:	6031      	streq	r1, [r6, #0]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f104 060b 	add.w	r6, r4, #11
 8005c9e:	f000 fa69 	bl	8006174 <__malloc_unlock>
 8005ca2:	f026 0607 	bic.w	r6, r6, #7
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	1af2      	subs	r2, r6, r3
 8005caa:	d0b6      	beq.n	8005c1a <_malloc_r+0x22>
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	50a3      	str	r3, [r4, r2]
 8005cb0:	e7b3      	b.n	8005c1a <_malloc_r+0x22>
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	bf0c      	ite	eq
 8005cb8:	6032      	streq	r2, [r6, #0]
 8005cba:	605a      	strne	r2, [r3, #4]
 8005cbc:	e7ec      	b.n	8005c98 <_malloc_r+0xa0>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	6864      	ldr	r4, [r4, #4]
 8005cc2:	e7b2      	b.n	8005c2a <_malloc_r+0x32>
 8005cc4:	4634      	mov	r4, r6
 8005cc6:	6876      	ldr	r6, [r6, #4]
 8005cc8:	e7b9      	b.n	8005c3e <_malloc_r+0x46>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	4638      	mov	r0, r7
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	f000 fa50 	bl	8006174 <__malloc_unlock>
 8005cd4:	e7a1      	b.n	8005c1a <_malloc_r+0x22>
 8005cd6:	6025      	str	r5, [r4, #0]
 8005cd8:	e7de      	b.n	8005c98 <_malloc_r+0xa0>
 8005cda:	bf00      	nop
 8005cdc:	200002fc 	.word	0x200002fc

08005ce0 <__sfputc_r>:
 8005ce0:	6893      	ldr	r3, [r2, #8]
 8005ce2:	b410      	push	{r4}
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	6093      	str	r3, [r2, #8]
 8005cea:	da07      	bge.n	8005cfc <__sfputc_r+0x1c>
 8005cec:	6994      	ldr	r4, [r2, #24]
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	db01      	blt.n	8005cf6 <__sfputc_r+0x16>
 8005cf2:	290a      	cmp	r1, #10
 8005cf4:	d102      	bne.n	8005cfc <__sfputc_r+0x1c>
 8005cf6:	bc10      	pop	{r4}
 8005cf8:	f7fe ba00 	b.w	80040fc <__swbuf_r>
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	1c58      	adds	r0, r3, #1
 8005d00:	6010      	str	r0, [r2, #0]
 8005d02:	7019      	strb	r1, [r3, #0]
 8005d04:	4608      	mov	r0, r1
 8005d06:	bc10      	pop	{r4}
 8005d08:	4770      	bx	lr

08005d0a <__sfputs_r>:
 8005d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	4614      	mov	r4, r2
 8005d12:	18d5      	adds	r5, r2, r3
 8005d14:	42ac      	cmp	r4, r5
 8005d16:	d101      	bne.n	8005d1c <__sfputs_r+0x12>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	e007      	b.n	8005d2c <__sfputs_r+0x22>
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d24:	f7ff ffdc 	bl	8005ce0 <__sfputc_r>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d1f3      	bne.n	8005d14 <__sfputs_r+0xa>
 8005d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d30 <_vfiprintf_r>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	460d      	mov	r5, r1
 8005d36:	4614      	mov	r4, r2
 8005d38:	4698      	mov	r8, r3
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	b09d      	sub	sp, #116	; 0x74
 8005d3e:	b118      	cbz	r0, 8005d48 <_vfiprintf_r+0x18>
 8005d40:	6983      	ldr	r3, [r0, #24]
 8005d42:	b90b      	cbnz	r3, 8005d48 <_vfiprintf_r+0x18>
 8005d44:	f7ff fa2c 	bl	80051a0 <__sinit>
 8005d48:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <_vfiprintf_r+0x240>)
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	d11b      	bne.n	8005d86 <_vfiprintf_r+0x56>
 8005d4e:	6875      	ldr	r5, [r6, #4]
 8005d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	d405      	bmi.n	8005d62 <_vfiprintf_r+0x32>
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	059a      	lsls	r2, r3, #22
 8005d5a:	d402      	bmi.n	8005d62 <_vfiprintf_r+0x32>
 8005d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d5e:	f7ff fac2 	bl	80052e6 <__retarget_lock_acquire_recursive>
 8005d62:	89ab      	ldrh	r3, [r5, #12]
 8005d64:	071b      	lsls	r3, r3, #28
 8005d66:	d501      	bpl.n	8005d6c <_vfiprintf_r+0x3c>
 8005d68:	692b      	ldr	r3, [r5, #16]
 8005d6a:	b9eb      	cbnz	r3, 8005da8 <_vfiprintf_r+0x78>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f7fe fa16 	bl	80041a0 <__swsetup_r>
 8005d74:	b1c0      	cbz	r0, 8005da8 <_vfiprintf_r+0x78>
 8005d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d78:	07dc      	lsls	r4, r3, #31
 8005d7a:	d50e      	bpl.n	8005d9a <_vfiprintf_r+0x6a>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	b01d      	add	sp, #116	; 0x74
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	4b7b      	ldr	r3, [pc, #492]	; (8005f74 <_vfiprintf_r+0x244>)
 8005d88:	429d      	cmp	r5, r3
 8005d8a:	d101      	bne.n	8005d90 <_vfiprintf_r+0x60>
 8005d8c:	68b5      	ldr	r5, [r6, #8]
 8005d8e:	e7df      	b.n	8005d50 <_vfiprintf_r+0x20>
 8005d90:	4b79      	ldr	r3, [pc, #484]	; (8005f78 <_vfiprintf_r+0x248>)
 8005d92:	429d      	cmp	r5, r3
 8005d94:	bf08      	it	eq
 8005d96:	68f5      	ldreq	r5, [r6, #12]
 8005d98:	e7da      	b.n	8005d50 <_vfiprintf_r+0x20>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	0598      	lsls	r0, r3, #22
 8005d9e:	d4ed      	bmi.n	8005d7c <_vfiprintf_r+0x4c>
 8005da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da2:	f7ff faa1 	bl	80052e8 <__retarget_lock_release_recursive>
 8005da6:	e7e9      	b.n	8005d7c <_vfiprintf_r+0x4c>
 8005da8:	2300      	movs	r3, #0
 8005daa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dac:	2320      	movs	r3, #32
 8005dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	f04f 0901 	mov.w	r9, #1
 8005db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005f7c <_vfiprintf_r+0x24c>
 8005dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	469a      	mov	sl, r3
 8005dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dcc:	b10a      	cbz	r2, 8005dd2 <_vfiprintf_r+0xa2>
 8005dce:	2a25      	cmp	r2, #37	; 0x25
 8005dd0:	d1f9      	bne.n	8005dc6 <_vfiprintf_r+0x96>
 8005dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005dd6:	d00b      	beq.n	8005df0 <_vfiprintf_r+0xc0>
 8005dd8:	465b      	mov	r3, fp
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4630      	mov	r0, r6
 8005de0:	f7ff ff93 	bl	8005d0a <__sfputs_r>
 8005de4:	3001      	adds	r0, #1
 8005de6:	f000 80aa 	beq.w	8005f3e <_vfiprintf_r+0x20e>
 8005dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dec:	445a      	add	r2, fp
 8005dee:	9209      	str	r2, [sp, #36]	; 0x24
 8005df0:	f89a 3000 	ldrb.w	r3, [sl]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80a2 	beq.w	8005f3e <_vfiprintf_r+0x20e>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e04:	f10a 0a01 	add.w	sl, sl, #1
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	9307      	str	r3, [sp, #28]
 8005e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e10:	931a      	str	r3, [sp, #104]	; 0x68
 8005e12:	4654      	mov	r4, sl
 8005e14:	2205      	movs	r2, #5
 8005e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1a:	4858      	ldr	r0, [pc, #352]	; (8005f7c <_vfiprintf_r+0x24c>)
 8005e1c:	f7ff fad2 	bl	80053c4 <memchr>
 8005e20:	9a04      	ldr	r2, [sp, #16]
 8005e22:	b9d8      	cbnz	r0, 8005e5c <_vfiprintf_r+0x12c>
 8005e24:	06d1      	lsls	r1, r2, #27
 8005e26:	bf44      	itt	mi
 8005e28:	2320      	movmi	r3, #32
 8005e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e2e:	0713      	lsls	r3, r2, #28
 8005e30:	bf44      	itt	mi
 8005e32:	232b      	movmi	r3, #43	; 0x2b
 8005e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e38:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3e:	d015      	beq.n	8005e6c <_vfiprintf_r+0x13c>
 8005e40:	4654      	mov	r4, sl
 8005e42:	2000      	movs	r0, #0
 8005e44:	f04f 0c0a 	mov.w	ip, #10
 8005e48:	9a07      	ldr	r2, [sp, #28]
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e50:	3b30      	subs	r3, #48	; 0x30
 8005e52:	2b09      	cmp	r3, #9
 8005e54:	d94e      	bls.n	8005ef4 <_vfiprintf_r+0x1c4>
 8005e56:	b1b0      	cbz	r0, 8005e86 <_vfiprintf_r+0x156>
 8005e58:	9207      	str	r2, [sp, #28]
 8005e5a:	e014      	b.n	8005e86 <_vfiprintf_r+0x156>
 8005e5c:	eba0 0308 	sub.w	r3, r0, r8
 8005e60:	fa09 f303 	lsl.w	r3, r9, r3
 8005e64:	4313      	orrs	r3, r2
 8005e66:	46a2      	mov	sl, r4
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	e7d2      	b.n	8005e12 <_vfiprintf_r+0xe2>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	1d19      	adds	r1, r3, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	9103      	str	r1, [sp, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bfbb      	ittet	lt
 8005e78:	425b      	neglt	r3, r3
 8005e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e7e:	9307      	strge	r3, [sp, #28]
 8005e80:	9307      	strlt	r3, [sp, #28]
 8005e82:	bfb8      	it	lt
 8005e84:	9204      	strlt	r2, [sp, #16]
 8005e86:	7823      	ldrb	r3, [r4, #0]
 8005e88:	2b2e      	cmp	r3, #46	; 0x2e
 8005e8a:	d10c      	bne.n	8005ea6 <_vfiprintf_r+0x176>
 8005e8c:	7863      	ldrb	r3, [r4, #1]
 8005e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e90:	d135      	bne.n	8005efe <_vfiprintf_r+0x1ce>
 8005e92:	9b03      	ldr	r3, [sp, #12]
 8005e94:	3402      	adds	r4, #2
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	9203      	str	r2, [sp, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb8      	it	lt
 8005ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ea4:	9305      	str	r3, [sp, #20]
 8005ea6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005f80 <_vfiprintf_r+0x250>
 8005eaa:	2203      	movs	r2, #3
 8005eac:	4650      	mov	r0, sl
 8005eae:	7821      	ldrb	r1, [r4, #0]
 8005eb0:	f7ff fa88 	bl	80053c4 <memchr>
 8005eb4:	b140      	cbz	r0, 8005ec8 <_vfiprintf_r+0x198>
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	eba0 000a 	sub.w	r0, r0, sl
 8005ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8005ec0:	9b04      	ldr	r3, [sp, #16]
 8005ec2:	3401      	adds	r4, #1
 8005ec4:	4303      	orrs	r3, r0
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ecc:	2206      	movs	r2, #6
 8005ece:	482d      	ldr	r0, [pc, #180]	; (8005f84 <_vfiprintf_r+0x254>)
 8005ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed4:	f7ff fa76 	bl	80053c4 <memchr>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d03f      	beq.n	8005f5c <_vfiprintf_r+0x22c>
 8005edc:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <_vfiprintf_r+0x258>)
 8005ede:	bb1b      	cbnz	r3, 8005f28 <_vfiprintf_r+0x1f8>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	3307      	adds	r3, #7
 8005ee4:	f023 0307 	bic.w	r3, r3, #7
 8005ee8:	3308      	adds	r3, #8
 8005eea:	9303      	str	r3, [sp, #12]
 8005eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eee:	443b      	add	r3, r7
 8005ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef2:	e767      	b.n	8005dc4 <_vfiprintf_r+0x94>
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efc:	e7a5      	b.n	8005e4a <_vfiprintf_r+0x11a>
 8005efe:	2300      	movs	r3, #0
 8005f00:	f04f 0c0a 	mov.w	ip, #10
 8005f04:	4619      	mov	r1, r3
 8005f06:	3401      	adds	r4, #1
 8005f08:	9305      	str	r3, [sp, #20]
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f10:	3a30      	subs	r2, #48	; 0x30
 8005f12:	2a09      	cmp	r2, #9
 8005f14:	d903      	bls.n	8005f1e <_vfiprintf_r+0x1ee>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0c5      	beq.n	8005ea6 <_vfiprintf_r+0x176>
 8005f1a:	9105      	str	r1, [sp, #20]
 8005f1c:	e7c3      	b.n	8005ea6 <_vfiprintf_r+0x176>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	2301      	movs	r3, #1
 8005f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f26:	e7f0      	b.n	8005f0a <_vfiprintf_r+0x1da>
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <_vfiprintf_r+0x25c>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	f7fd fc92 	bl	800385c <_printf_float>
 8005f38:	4607      	mov	r7, r0
 8005f3a:	1c78      	adds	r0, r7, #1
 8005f3c:	d1d6      	bne.n	8005eec <_vfiprintf_r+0x1bc>
 8005f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f40:	07d9      	lsls	r1, r3, #31
 8005f42:	d405      	bmi.n	8005f50 <_vfiprintf_r+0x220>
 8005f44:	89ab      	ldrh	r3, [r5, #12]
 8005f46:	059a      	lsls	r2, r3, #22
 8005f48:	d402      	bmi.n	8005f50 <_vfiprintf_r+0x220>
 8005f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4c:	f7ff f9cc 	bl	80052e8 <__retarget_lock_release_recursive>
 8005f50:	89ab      	ldrh	r3, [r5, #12]
 8005f52:	065b      	lsls	r3, r3, #25
 8005f54:	f53f af12 	bmi.w	8005d7c <_vfiprintf_r+0x4c>
 8005f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5a:	e711      	b.n	8005d80 <_vfiprintf_r+0x50>
 8005f5c:	ab03      	add	r3, sp, #12
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	462a      	mov	r2, r5
 8005f62:	4630      	mov	r0, r6
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <_vfiprintf_r+0x25c>)
 8005f66:	a904      	add	r1, sp, #16
 8005f68:	f7fd ff14 	bl	8003d94 <_printf_i>
 8005f6c:	e7e4      	b.n	8005f38 <_vfiprintf_r+0x208>
 8005f6e:	bf00      	nop
 8005f70:	080063c0 	.word	0x080063c0
 8005f74:	080063e0 	.word	0x080063e0
 8005f78:	080063a0 	.word	0x080063a0
 8005f7c:	0800655c 	.word	0x0800655c
 8005f80:	08006562 	.word	0x08006562
 8005f84:	08006566 	.word	0x08006566
 8005f88:	0800385d 	.word	0x0800385d
 8005f8c:	08005d0b 	.word	0x08005d0b

08005f90 <_sbrk_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	2300      	movs	r3, #0
 8005f94:	4d05      	ldr	r5, [pc, #20]	; (8005fac <_sbrk_r+0x1c>)
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb f86e 	bl	800107c <_sbrk>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_sbrk_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_sbrk_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000304 	.word	0x20000304

08005fb0 <__sread>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	f000 f8e2 	bl	8006180 <_read_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	bfab      	itete	ge
 8005fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fc4:	181b      	addge	r3, r3, r0
 8005fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fca:	bfac      	ite	ge
 8005fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fce:	81a3      	strhlt	r3, [r4, #12]
 8005fd0:	bd10      	pop	{r4, pc}

08005fd2 <__swrite>:
 8005fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	898b      	ldrh	r3, [r1, #12]
 8005fda:	4605      	mov	r5, r0
 8005fdc:	05db      	lsls	r3, r3, #23
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	d505      	bpl.n	8005ff0 <__swrite+0x1e>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fec:	f000 f898 	bl	8006120 <_lseek_r>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	f000 b817 	b.w	8006038 <_write_r>

0800600a <__sseek>:
 800600a:	b510      	push	{r4, lr}
 800600c:	460c      	mov	r4, r1
 800600e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006012:	f000 f885 	bl	8006120 <_lseek_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	bf15      	itete	ne
 800601c:	6560      	strne	r0, [r4, #84]	; 0x54
 800601e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strheq	r3, [r4, #12]
 8006028:	bf18      	it	ne
 800602a:	81a3      	strhne	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__sclose>:
 800602e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006032:	f000 b831 	b.w	8006098 <_close_r>
	...

08006038 <_write_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	2200      	movs	r2, #0
 8006042:	4d05      	ldr	r5, [pc, #20]	; (8006058 <_write_r+0x20>)
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7fa ffcc 	bl	8000fe4 <_write>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_write_r+0x1e>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_write_r+0x1e>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20000304 	.word	0x20000304

0800605c <__assert_func>:
 800605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800605e:	4614      	mov	r4, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <__assert_func+0x2c>)
 8006064:	4605      	mov	r5, r0
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68d8      	ldr	r0, [r3, #12]
 800606a:	b14c      	cbz	r4, 8006080 <__assert_func+0x24>
 800606c:	4b07      	ldr	r3, [pc, #28]	; (800608c <__assert_func+0x30>)
 800606e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006072:	9100      	str	r1, [sp, #0]
 8006074:	462b      	mov	r3, r5
 8006076:	4906      	ldr	r1, [pc, #24]	; (8006090 <__assert_func+0x34>)
 8006078:	f000 f81e 	bl	80060b8 <fiprintf>
 800607c:	f000 f89f 	bl	80061be <abort>
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <__assert_func+0x38>)
 8006082:	461c      	mov	r4, r3
 8006084:	e7f3      	b.n	800606e <__assert_func+0x12>
 8006086:	bf00      	nop
 8006088:	2000001c 	.word	0x2000001c
 800608c:	0800656d 	.word	0x0800656d
 8006090:	0800657a 	.word	0x0800657a
 8006094:	080065a8 	.word	0x080065a8

08006098 <_close_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	2300      	movs	r3, #0
 800609c:	4d05      	ldr	r5, [pc, #20]	; (80060b4 <_close_r+0x1c>)
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fa ffba 	bl	800101c <_close>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_close_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_close_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000304 	.word	0x20000304

080060b8 <fiprintf>:
 80060b8:	b40e      	push	{r1, r2, r3}
 80060ba:	b503      	push	{r0, r1, lr}
 80060bc:	4601      	mov	r1, r0
 80060be:	ab03      	add	r3, sp, #12
 80060c0:	4805      	ldr	r0, [pc, #20]	; (80060d8 <fiprintf+0x20>)
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	6800      	ldr	r0, [r0, #0]
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	f7ff fe31 	bl	8005d30 <_vfiprintf_r>
 80060ce:	b002      	add	sp, #8
 80060d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	2000001c 	.word	0x2000001c

080060dc <_fstat_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	2300      	movs	r3, #0
 80060e0:	4d06      	ldr	r5, [pc, #24]	; (80060fc <_fstat_r+0x20>)
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	f7fa ffa2 	bl	8001032 <_fstat>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	d102      	bne.n	80060f8 <_fstat_r+0x1c>
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	b103      	cbz	r3, 80060f8 <_fstat_r+0x1c>
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	bd38      	pop	{r3, r4, r5, pc}
 80060fa:	bf00      	nop
 80060fc:	20000304 	.word	0x20000304

08006100 <_isatty_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	2300      	movs	r3, #0
 8006104:	4d05      	ldr	r5, [pc, #20]	; (800611c <_isatty_r+0x1c>)
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fa ffa0 	bl	8001050 <_isatty>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_isatty_r+0x1a>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_isatty_r+0x1a>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000304 	.word	0x20000304

08006120 <_lseek_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4604      	mov	r4, r0
 8006124:	4608      	mov	r0, r1
 8006126:	4611      	mov	r1, r2
 8006128:	2200      	movs	r2, #0
 800612a:	4d05      	ldr	r5, [pc, #20]	; (8006140 <_lseek_r+0x20>)
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fa ff98 	bl	8001064 <_lseek>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_lseek_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_lseek_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	20000304 	.word	0x20000304

08006144 <__ascii_mbtowc>:
 8006144:	b082      	sub	sp, #8
 8006146:	b901      	cbnz	r1, 800614a <__ascii_mbtowc+0x6>
 8006148:	a901      	add	r1, sp, #4
 800614a:	b142      	cbz	r2, 800615e <__ascii_mbtowc+0x1a>
 800614c:	b14b      	cbz	r3, 8006162 <__ascii_mbtowc+0x1e>
 800614e:	7813      	ldrb	r3, [r2, #0]
 8006150:	600b      	str	r3, [r1, #0]
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	1e10      	subs	r0, r2, #0
 8006156:	bf18      	it	ne
 8006158:	2001      	movne	r0, #1
 800615a:	b002      	add	sp, #8
 800615c:	4770      	bx	lr
 800615e:	4610      	mov	r0, r2
 8006160:	e7fb      	b.n	800615a <__ascii_mbtowc+0x16>
 8006162:	f06f 0001 	mvn.w	r0, #1
 8006166:	e7f8      	b.n	800615a <__ascii_mbtowc+0x16>

08006168 <__malloc_lock>:
 8006168:	4801      	ldr	r0, [pc, #4]	; (8006170 <__malloc_lock+0x8>)
 800616a:	f7ff b8bc 	b.w	80052e6 <__retarget_lock_acquire_recursive>
 800616e:	bf00      	nop
 8006170:	200002f8 	.word	0x200002f8

08006174 <__malloc_unlock>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__malloc_unlock+0x8>)
 8006176:	f7ff b8b7 	b.w	80052e8 <__retarget_lock_release_recursive>
 800617a:	bf00      	nop
 800617c:	200002f8 	.word	0x200002f8

08006180 <_read_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	2200      	movs	r2, #0
 800618a:	4d05      	ldr	r5, [pc, #20]	; (80061a0 <_read_r+0x20>)
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fa ff0b 	bl	8000faa <_read>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_read_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_read_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	20000304 	.word	0x20000304

080061a4 <__ascii_wctomb>:
 80061a4:	4603      	mov	r3, r0
 80061a6:	4608      	mov	r0, r1
 80061a8:	b141      	cbz	r1, 80061bc <__ascii_wctomb+0x18>
 80061aa:	2aff      	cmp	r2, #255	; 0xff
 80061ac:	d904      	bls.n	80061b8 <__ascii_wctomb+0x14>
 80061ae:	228a      	movs	r2, #138	; 0x8a
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	4770      	bx	lr
 80061b8:	2001      	movs	r0, #1
 80061ba:	700a      	strb	r2, [r1, #0]
 80061bc:	4770      	bx	lr

080061be <abort>:
 80061be:	2006      	movs	r0, #6
 80061c0:	b508      	push	{r3, lr}
 80061c2:	f000 f82b 	bl	800621c <raise>
 80061c6:	2001      	movs	r0, #1
 80061c8:	f7fa fee5 	bl	8000f96 <_exit>

080061cc <_raise_r>:
 80061cc:	291f      	cmp	r1, #31
 80061ce:	b538      	push	{r3, r4, r5, lr}
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	d904      	bls.n	80061e0 <_raise_r+0x14>
 80061d6:	2316      	movs	r3, #22
 80061d8:	6003      	str	r3, [r0, #0]
 80061da:	f04f 30ff 	mov.w	r0, #4294967295
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061e2:	b112      	cbz	r2, 80061ea <_raise_r+0x1e>
 80061e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061e8:	b94b      	cbnz	r3, 80061fe <_raise_r+0x32>
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f830 	bl	8006250 <_getpid_r>
 80061f0:	462a      	mov	r2, r5
 80061f2:	4601      	mov	r1, r0
 80061f4:	4620      	mov	r0, r4
 80061f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fa:	f000 b817 	b.w	800622c <_kill_r>
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d00a      	beq.n	8006218 <_raise_r+0x4c>
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	d103      	bne.n	800620e <_raise_r+0x42>
 8006206:	2316      	movs	r3, #22
 8006208:	6003      	str	r3, [r0, #0]
 800620a:	2001      	movs	r0, #1
 800620c:	e7e7      	b.n	80061de <_raise_r+0x12>
 800620e:	2400      	movs	r4, #0
 8006210:	4628      	mov	r0, r5
 8006212:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006216:	4798      	blx	r3
 8006218:	2000      	movs	r0, #0
 800621a:	e7e0      	b.n	80061de <_raise_r+0x12>

0800621c <raise>:
 800621c:	4b02      	ldr	r3, [pc, #8]	; (8006228 <raise+0xc>)
 800621e:	4601      	mov	r1, r0
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f7ff bfd3 	b.w	80061cc <_raise_r>
 8006226:	bf00      	nop
 8006228:	2000001c 	.word	0x2000001c

0800622c <_kill_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	2300      	movs	r3, #0
 8006230:	4d06      	ldr	r5, [pc, #24]	; (800624c <_kill_r+0x20>)
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	f7fa fe9c 	bl	8000f76 <_kill>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d102      	bne.n	8006248 <_kill_r+0x1c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	b103      	cbz	r3, 8006248 <_kill_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	bf00      	nop
 800624c:	20000304 	.word	0x20000304

08006250 <_getpid_r>:
 8006250:	f7fa be8a 	b.w	8000f68 <_getpid>

08006254 <_init>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr

08006260 <_fini>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr
