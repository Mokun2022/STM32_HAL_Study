
FatFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b24c  0800ad78  0800ad78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035fc4  08035fc4  00050228  2**0
                  CONTENTS
  4 .ARM          00000008  08035fc4  08035fc4  00045fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035fcc  08035fcc  00050228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035fcc  08035fcc  00045fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035fd0  08035fd0  00045fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08035fd4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050228  2**0
                  CONTENTS
 10 .bss          000041ac  20000228  20000228  00050228  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  200043d4  200043d4  00050228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9c5  00000000  00000000  00050258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a55  00000000  00000000  0005fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00062678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  000633f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a2e  00000000  00000000  00064020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001430e  00000000  00000000  00087a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c79a0  00000000  00000000  0009bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001636fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000462c  00000000  00000000  0016374c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad5c 	.word	0x0800ad5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800ad5c 	.word	0x0800ad5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_GPIO_Init+0xb4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2110      	movs	r1, #16
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0xb8>)
 8000f38:	f000 feda 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_GPIO_Init+0xb8>)
 8000f54:	f000 fd30 	bl	80019b8 <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 faea 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f810 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f7ff ff9a 	bl	8000eac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f78:	f000 f87c 	bl	8001074 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000f7c:	f000 fa3e 	bl	80013fc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000f80:	f002 fe72 	bl	8003c68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("UART3_INIT_OK\r\n");
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <main+0x28>)
 8000f86:	f007 fe37 	bl	8008bf8 <puts>

  fatfs_demo();
 8000f8a:	f002 fe89 	bl	8003ca0 <fatfs_demo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x26>
 8000f90:	0800ad78 	.word	0x0800ad78

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 f930 	bl	8008208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <SystemClock_Config+0xcc>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <SystemClock_Config+0xd0>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001004:	2304      	movs	r3, #4
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001008:	23a8      	movs	r3, #168	; 0xa8
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fe83 	bl	8001d24 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001024:	f000 f820 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2105      	movs	r1, #5
 8001046:	4618      	mov	r0, r3
 8001048:	f001 f8e4 	bl	8002214 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001052:	f000 f809 	bl	8001068 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_SPI1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c6:	f001 fac5 	bl	8002654 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f7ff ffca 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000244 	.word	0x20000244
 80010dc:	40013000 	.word	0x40013000

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_SPI_MspInit+0x84>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12b      	bne.n	800115a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_SPI_MspInit+0x88>)
 800110c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_SPI_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001156:	f000 fc2f 	bl	80019b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f9ec 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <USART3_IRQHandler+0x10>)
 800121a:	f001 fdf1 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200002a0 	.word	0x200002a0

08001228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_kill>:

int _kill(int pid, int sig)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001242:	f006 ffb7 	bl	80081b4 <__errno>
 8001246:	4603      	mov	r3, r0
 8001248:	2216      	movs	r2, #22
 800124a:	601a      	str	r2, [r3, #0]
  return -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_exit>:

void _exit (int status)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffe7 	bl	8001238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800126a:	e7fe      	b.n	800126a <_exit+0x12>

0800126c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00a      	b.n	8001294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127e:	f3af 8000 	nop.w
 8001282:	4601      	mov	r1, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf0      	blt.n	800127e <_read+0x12>
  }

  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e009      	b.n	80012cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f889 	bl	80013d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf1      	blt.n	80012b8 <_write+0x12>
  }
  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	605a      	str	r2, [r3, #4]
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f006 ff1c 	bl	80081b4 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000800 	.word	0x00000800
 80013ac:	2000029c 	.word	0x2000029c
 80013b0:	200043d8 	.word	0x200043d8

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80013e0:	1d39      	adds	r1, r7, #4
 80013e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e6:	2201      	movs	r2, #1
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <__io_putchar+0x20>)
 80013ea:	f001 fc76 	bl	8002cda <HAL_UART_Transmit>
  return ch;
 80013ee:	687b      	ldr	r3, [r7, #4]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002a0 	.word	0x200002a0

080013fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART3_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001434:	f001 fc04 	bl	8002c40 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f7ff fe13 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002a0 	.word	0x200002a0
 800144c:	40004800 	.word	0x40004800

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UART_MspInit+0x94>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d134      	bne.n	80014dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_UART_MspInit+0x98>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_UART_MspInit+0x98>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_UART_MspInit+0x98>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x98>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_UART_MspInit+0x98>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_UART_MspInit+0x98>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014bc:	2307      	movs	r3, #7
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_UART_MspInit+0x9c>)
 80014c8:	f000 fa76 	bl	80019b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2027      	movs	r0, #39	; 0x27
 80014d2:	f000 f9a8 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014d6:	2027      	movs	r0, #39	; 0x27
 80014d8:	f000 f9c1 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004800 	.word	0x40004800
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ff4b 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f006 fe4f 	bl	80081c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd21 	bl	8000f68 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001534:	08035fd4 	.word	0x08035fd4
  ldr r2, =_sbss
 8001538:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800153c:	200043d4 	.word	0x200043d4

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f94f 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fdfa 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f967 	bl	800187a <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f92f 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	200002e4 	.word	0x200002e4

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	200002e4 	.word	0x200002e4

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff feb6 	bl	8001610 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d008      	beq.n	80018c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e052      	b.n	800196a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0216 	bic.w	r2, r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_DMA_Abort+0x62>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0208 	bic.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e013      	b.n	800193e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fe7b 	bl	8001610 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d90c      	bls.n	800193e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e015      	b.n	800196a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e4      	bne.n	8001916 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	223f      	movs	r2, #63	; 0x3f
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e00c      	b.n	80019aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2205      	movs	r2, #5
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e16b      	b.n	8001cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 815a 	bne.w	8001ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80b4 	beq.w	8001ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a5f      	ldr	r2, [pc, #380]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_GPIO_Init+0x310>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x314>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02b      	beq.n	8001bde <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_GPIO_Init+0x318>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_GPIO_Init+0x31c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_GPIO_Init+0x320>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x216>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4d      	ldr	r2, [pc, #308]	; (8001ce0 <HAL_GPIO_Init+0x328>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x212>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_GPIO_Init+0x32c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x20e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_GPIO_Init+0x330>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x20a>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00e      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x228>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	; (8001cc8 <HAL_GPIO_Init+0x310>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_GPIO_Init+0x334>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f ae90 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40021c00 	.word	0x40021c00
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e267      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d00c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d112      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e242      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x74>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6c      	ldr	r2, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fc18 	bl	8001610 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fc14 	bl	8001610 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e207      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc04 	bl	8001610 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc00 	bl	8001610 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1f3      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1c7      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4937      	ldr	r1, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_OscConfig+0x244>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fbb9 	bl	8001610 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fbb5 	bl	8001610 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1a8      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4925      	ldr	r1, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x244>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fb98 	bl	8001610 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fb94 	bl	8001610 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e187      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d036      	beq.n	8001f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x248>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fb78 	bl	8001610 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fb74 	bl	8001610 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e167      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x240>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x200>
 8001f42:	e01b      	b.n	8001f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_OscConfig+0x248>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb61 	bl	8001610 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	e00e      	b.n	8001f70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff fb5d 	bl	8001610 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d907      	bls.n	8001f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e150      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	42470000 	.word	0x42470000
 8001f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ea      	bne.n	8001f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8097 	beq.w	80020b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b7a      	ldr	r3, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b77      	ldr	r3, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc6:	4b74      	ldr	r3, [pc, #464]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a73      	ldr	r2, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fb1d 	bl	8001610 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7ff fb19 	bl	8001610 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e10c      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x474>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x2ea>
 8002000:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x324>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x30c>
 8002016:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a5b      	ldr	r2, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x324>
 8002030:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
 800203c:	4b55      	ldr	r3, [pc, #340]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff fade 	bl	8001610 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7ff fada 	bl	8001610 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0cb      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ee      	beq.n	8002058 <HAL_RCC_OscConfig+0x334>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fac8 	bl	8001610 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7ff fac4 	bl	8001610 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0b5      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ee      	bne.n	8002084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a38      	ldr	r2, [pc, #224]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a1 	beq.w	8002204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d05c      	beq.n	8002188 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d141      	bne.n	800215a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x478>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fa98 	bl	8001610 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff fa94 	bl	8001610 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e087      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x478>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fa6d 	bl	8001610 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fa69 	bl	8001610 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e05c      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x416>
 8002158:	e054      	b.n	8002204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x478>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fa56 	bl	8001610 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fa52 	bl	8001610 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e045      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x470>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x444>
 8002186:	e03d      	b.n	8002204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e038      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000
 800219c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4ec>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d028      	beq.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11a      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d8:	4293      	cmp	r3, r2
 80021da:	d111      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d90c      	bls.n	8002250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d044      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e067      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4934      	ldr	r1, [pc, #208]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7ff f984 	bl	8001610 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff f980 	bl	8001610 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e04f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d20c      	bcs.n	800235c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f8e4 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	0800afe8 	.word	0x0800afe8
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b094      	sub	sp, #80	; 0x50
 80023e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
 80023ec:	2300      	movs	r3, #0
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f8:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d00d      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x40>
 8002404:	2b08      	cmp	r3, #8
 8002406:	f200 80e1 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x34>
 800240e:	2b04      	cmp	r3, #4
 8002410:	d003      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x3a>
 8002412:	e0db      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002418:	e0db      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241e:	e0d8      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002436:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	2200      	movs	r2, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
 800244e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002464:	0150      	lsls	r0, r2, #5
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4621      	mov	r1, r4
 800246c:	1a51      	subs	r1, r2, r1
 800246e:	6139      	str	r1, [r7, #16]
 8002470:	4629      	mov	r1, r5
 8002472:	eb63 0301 	sbc.w	r3, r3, r1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002484:	4659      	mov	r1, fp
 8002486:	018b      	lsls	r3, r1, #6
 8002488:	4651      	mov	r1, sl
 800248a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248e:	4651      	mov	r1, sl
 8002490:	018a      	lsls	r2, r1, #6
 8002492:	4651      	mov	r1, sl
 8002494:	ebb2 0801 	subs.w	r8, r2, r1
 8002498:	4659      	mov	r1, fp
 800249a:	eb63 0901 	sbc.w	r9, r3, r1
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b2:	4690      	mov	r8, r2
 80024b4:	4699      	mov	r9, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	eb18 0303 	adds.w	r3, r8, r3
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	462b      	mov	r3, r5
 80024c0:	eb49 0303 	adc.w	r3, r9, r3
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d2:	4629      	mov	r1, r5
 80024d4:	024b      	lsls	r3, r1, #9
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024dc:	4621      	mov	r1, r4
 80024de:	024a      	lsls	r2, r1, #9
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	2200      	movs	r2, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f0:	f7fe fb5a 	bl	8000ba8 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024fc:	e058      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	2200      	movs	r2, #0
 8002506:	4618      	mov	r0, r3
 8002508:	4611      	mov	r1, r2
 800250a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	0159      	lsls	r1, r3, #5
 8002526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252a:	0150      	lsls	r0, r2, #5
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4641      	mov	r1, r8
 8002532:	ebb2 0a01 	subs.w	sl, r2, r1
 8002536:	4649      	mov	r1, r9
 8002538:	eb63 0b01 	sbc.w	fp, r3, r1
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800254c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002550:	ebb2 040a 	subs.w	r4, r2, sl
 8002554:	eb63 050b 	sbc.w	r5, r3, fp
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	00eb      	lsls	r3, r5, #3
 8002562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002566:	00e2      	lsls	r2, r4, #3
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	4643      	mov	r3, r8
 800256e:	18e3      	adds	r3, r4, r3
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	464b      	mov	r3, r9
 8002574:	eb45 0303 	adc.w	r3, r5, r3
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002586:	4629      	mov	r1, r5
 8002588:	028b      	lsls	r3, r1, #10
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002590:	4621      	mov	r1, r4
 8002592:	028a      	lsls	r2, r1, #10
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	2200      	movs	r2, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	61fa      	str	r2, [r7, #28]
 80025a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a4:	f7fe fb00 	bl	8000ba8 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3750      	adds	r7, #80	; 0x50
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	0800aff8 	.word	0x0800aff8

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	0800aff8 	.word	0x0800aff8

08002654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07b      	b.n	800275e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002676:	d009      	beq.n	800268c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
 800267e:	e005      	b.n	800268c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fd1a 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0104 	and.w	r1, r3, #4
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f003 0210 	and.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b08c      	sub	sp, #48	; 0x30
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002774:	2301      	movs	r3, #1
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_SPI_TransmitReceive+0x26>
 8002788:	2302      	movs	r3, #2
 800278a:	e18a      	b.n	8002aa2 <HAL_SPI_TransmitReceive+0x33c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002794:	f7fe ff3c 	bl	8001610 <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00f      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x70>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027bc:	d107      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x68>
 80027c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d003      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d4:	e15b      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x82>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x82>
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ee:	e14e      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2205      	movs	r2, #5
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d007      	beq.n	8002858 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002860:	d178      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x10a>
 800286a:	8b7b      	ldrh	r3, [r7, #26]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d166      	bne.n	800293e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	1c9a      	adds	r2, r3, #2
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002894:	e053      	b.n	800293e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d11b      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x176>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x176>
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d113      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d119      	bne.n	800291e <HAL_SPI_TransmitReceive+0x1b8>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d014      	beq.n	800291e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	b292      	uxth	r2, r2
 8002900:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	1c9a      	adds	r2, r3, #2
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800291a:	2301      	movs	r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800291e:	f7fe fe77 	bl	8001610 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800292a:	429a      	cmp	r2, r3
 800292c:	d807      	bhi.n	800293e <HAL_SPI_TransmitReceive+0x1d8>
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d003      	beq.n	800293e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800293c:	e0a7      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1a6      	bne.n	8002896 <HAL_SPI_TransmitReceive+0x130>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1a1      	bne.n	8002896 <HAL_SPI_TransmitReceive+0x130>
 8002952:	e07c      	b.n	8002a4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x1fc>
 800295c:	8b7b      	ldrh	r3, [r7, #26]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d16b      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002988:	e057      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d11c      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x26c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d017      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x26c>
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d114      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d119      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x2ae>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d014      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a14:	f7fe fdfc 	bl	8001610 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d803      	bhi.n	8002a2c <HAL_SPI_TransmitReceive+0x2c6>
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d102      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x2cc>
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a38:	e029      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1a2      	bne.n	800298a <HAL_SPI_TransmitReceive+0x224>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d19d      	bne.n	800298a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8b2 	bl	8002bbc <SPI_EndRxTxTransaction>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a6a:	e010      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	e000      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe fda8 	bl	8001610 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe fda0 	bl	8001610 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe fd90 	bl	8001610 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000000 	.word	0x20000000

08002bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <SPI_EndRxTxTransaction+0x7c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <SPI_EndRxTxTransaction+0x80>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0d5b      	lsrs	r3, r3, #21
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be6:	d112      	bne.n	8002c0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff5a 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d0f2      	beq.n	8002c0e <SPI_EndRxTxTransaction+0x52>
 8002c28:	e000      	b.n	8002c2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c2a:	bf00      	nop
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	165e9f81 	.word	0x165e9f81

08002c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e03f      	b.n	8002cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fbf2 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fd7b 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d17c      	bne.n	8002df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_Transmit+0x2c>
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e075      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x3e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe fc6f 	bl	8001610 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d108      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e003      	b.n	8002d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d6c:	e02a      	b.n	8002dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 faf9 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e036      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3302      	adds	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e007      	b.n	8002db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cf      	bne.n	8002d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fac9 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	; 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fbd3 	bl	800360a <UART_Receive_IT>
      return;
 8002e64:	e256      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80de 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80d1 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81ed 	beq.w	800330a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb5e 	bl	800360a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_UART_IRQHandler+0x17a>
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa66 	bl	800344c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_UART_IRQHandler+0x3dc>)
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fcbf 	bl	8001972 <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00e      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f99a 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00a      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f996 	bl	8003344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e006      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f992 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003026:	e170      	b.n	800330a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	bf00      	nop
    return;
 800302a:	e16e      	b.n	800330a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 814a 	bne.w	80032ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8143 	beq.w	80032ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 813c 	beq.w	80032ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	f040 80b4 	bne.w	80031e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8140 	beq.w	800330e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 8139 	bcs.w	800330e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	f000 8088 	beq.w	80031c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1d9      	bne.n	80030b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800310e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800312a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e1      	bne.n	80030fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800315e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800316c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e3      	bne.n	8003180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fb68 	bl	8001892 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c0 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d8:	e099      	b.n	800330e <HAL_UART_IRQHandler+0x50e>
 80031da:	bf00      	nop
 80031dc:	08003513 	.word	0x08003513
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 808b 	beq.w	8003312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8086 	beq.w	8003312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800321c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800322a:	647a      	str	r2, [r7, #68]	; 0x44
 800322c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e3      	bne.n	8003206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	623b      	str	r3, [r7, #32]
   return(result);
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003262:	633a      	str	r2, [r7, #48]	; 0x30
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e3      	bne.n	800323e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	60fb      	str	r3, [r7, #12]
   return(result);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0310 	bic.w	r3, r3, #16
 800329a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032a8:	61fa      	str	r2, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	617b      	str	r3, [r7, #20]
   return(result);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e3      	bne.n	8003284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f848 	bl	8003358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032c8:	e023      	b.n	8003312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_UART_IRQHandler+0x4ea>
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f929 	bl	800353a <UART_Transmit_IT>
    return;
 80032e8:	e014      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <HAL_UART_IRQHandler+0x514>
 80032f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f969 	bl	80035da <UART_EndTransmit_IT>
    return;
 8003308:	e004      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
    return;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
      return;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
      return;
 8003312:	bf00      	nop
  }
}
 8003314:	37e8      	adds	r7, #232	; 0xe8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop

0800331c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b090      	sub	sp, #64	; 0x40
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003380:	e050      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d04c      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003390:	f7fe f93e 	bl	8001610 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339c:	429a      	cmp	r2, r3
 800339e:	d241      	bcs.n	8003424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c0:	637a      	str	r2, [r7, #52]	; 0x34
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	613b      	str	r3, [r7, #16]
   return(result);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f4:	623a      	str	r2, [r7, #32]
 80033f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	69f9      	ldr	r1, [r7, #28]
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	61bb      	str	r3, [r7, #24]
   return(result);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e5      	bne.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e00f      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d09f      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3740      	adds	r7, #64	; 0x40
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b095      	sub	sp, #84	; 0x54
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003474:	643a      	str	r2, [r7, #64]	; 0x40
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800347a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e5      	bne.n	8003454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	61fb      	str	r3, [r7, #28]
   return(result);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d119      	bne.n	80034f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e4:	61ba      	str	r2, [r7, #24]
 80034e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6979      	ldr	r1, [r7, #20]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	613b      	str	r3, [r7, #16]
   return(result);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003506:	bf00      	nop
 8003508:	3754      	adds	r7, #84	; 0x54
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff09 	bl	8003344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b21      	cmp	r3, #33	; 0x21
 800354c:	d13e      	bne.n	80035cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003556:	d114      	bne.n	8003582 <UART_Transmit_IT+0x48>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d110      	bne.n	8003582 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003574:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]
 8003580:	e008      	b.n	8003594 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6211      	str	r1, [r2, #32]
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4619      	mov	r1, r3
 80035a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fe8e 	bl	800331c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b08c      	sub	sp, #48	; 0x30
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b22      	cmp	r3, #34	; 0x22
 800361c:	f040 80ab 	bne.w	8003776 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003628:	d117      	bne.n	800365a <UART_Receive_IT+0x50>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	b29a      	uxth	r2, r3
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
 8003658:	e026      	b.n	80036a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d007      	beq.n	800367e <UART_Receive_IT+0x74>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <UART_Receive_IT+0x82>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e008      	b.n	800369e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003698:	b2da      	uxtb	r2, r3
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4619      	mov	r1, r3
 80036b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d15a      	bne.n	8003772 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0220 	bic.w	r2, r2, #32
 80036ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d135      	bne.n	8003768 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f023 0310 	bic.w	r3, r3, #16
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	623a      	str	r2, [r7, #32]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	69f9      	ldr	r1, [r7, #28]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b10      	cmp	r3, #16
 8003742:	d10a      	bne.n	800375a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fdf9 	bl	8003358 <HAL_UARTEx_RxEventCallback>
 8003766:	e002      	b.n	800376e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fde1 	bl	8003330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e002      	b.n	8003778 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3730      	adds	r7, #48	; 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b0c0      	sub	sp, #256	; 0x100
 8003786:	af00      	add	r7, sp, #0
 8003788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	ea40 0301 	orr.w	r3, r0, r1
 80037a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d8:	f021 010c 	bic.w	r1, r1, #12
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e6:	430b      	orrs	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	6999      	ldr	r1, [r3, #24]
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	ea40 0301 	orr.w	r3, r0, r1
 8003806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <UART_SetConfig+0x2cc>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d005      	beq.n	8003820 <UART_SetConfig+0xa0>
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8d      	ldr	r3, [pc, #564]	; (8003a50 <UART_SetConfig+0x2d0>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d104      	bne.n	800382a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe ff04 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8003824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003828:	e003      	b.n	8003832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe feeb 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 800382e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383c:	f040 810c 	bne.w	8003a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800384a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	1891      	adds	r1, r2, r2
 8003858:	65b9      	str	r1, [r7, #88]	; 0x58
 800385a:	415b      	adcs	r3, r3
 800385c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003862:	4621      	mov	r1, r4
 8003864:	eb12 0801 	adds.w	r8, r2, r1
 8003868:	4629      	mov	r1, r5
 800386a:	eb43 0901 	adc.w	r9, r3, r1
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800387a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003882:	4690      	mov	r8, r2
 8003884:	4699      	mov	r9, r3
 8003886:	4623      	mov	r3, r4
 8003888:	eb18 0303 	adds.w	r3, r8, r3
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003890:	462b      	mov	r3, r5
 8003892:	eb49 0303 	adc.w	r3, r9, r3
 8003896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ae:	460b      	mov	r3, r1
 80038b0:	18db      	adds	r3, r3, r3
 80038b2:	653b      	str	r3, [r7, #80]	; 0x50
 80038b4:	4613      	mov	r3, r2
 80038b6:	eb42 0303 	adc.w	r3, r2, r3
 80038ba:	657b      	str	r3, [r7, #84]	; 0x54
 80038bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038c4:	f7fd f970 	bl	8000ba8 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <UART_SetConfig+0x2d4>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	011c      	lsls	r4, r3, #4
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80038f0:	415b      	adcs	r3, r3
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f8:	4641      	mov	r1, r8
 80038fa:	eb12 0a01 	adds.w	sl, r2, r1
 80038fe:	4649      	mov	r1, r9
 8003900:	eb43 0b01 	adc.w	fp, r3, r1
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003918:	4692      	mov	sl, r2
 800391a:	469b      	mov	fp, r3
 800391c:	4643      	mov	r3, r8
 800391e:	eb1a 0303 	adds.w	r3, sl, r3
 8003922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003926:	464b      	mov	r3, r9
 8003928:	eb4b 0303 	adc.w	r3, fp, r3
 800392c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800393c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003944:	460b      	mov	r3, r1
 8003946:	18db      	adds	r3, r3, r3
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	4613      	mov	r3, r2
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
 8003952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800395a:	f7fd f925 	bl	8000ba8 <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4611      	mov	r1, r2
 8003964:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003966:	fba3 2301 	umull	r2, r3, r3, r1
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2264      	movs	r2, #100	; 0x64
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	1acb      	subs	r3, r1, r3
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <UART_SetConfig+0x2d4>)
 800397c:	fba3 2302 	umull	r2, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003988:	441c      	add	r4, r3
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a4:	415b      	adcs	r3, r3
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6339      	str	r1, [r7, #48]	; 0x30
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a00:	460b      	mov	r3, r1
 8003a02:	18db      	adds	r3, r3, r3
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a06:	4613      	mov	r3, r2
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a16:	f7fd f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	; 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <UART_SetConfig+0x2d4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 0207 	and.w	r2, r3, #7
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4422      	add	r2, r4
 8003a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a48:	e105      	b.n	8003c56 <UART_SetConfig+0x4d6>
 8003a4a:	bf00      	nop
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	6239      	str	r1, [r7, #32]
 8003a72:	415b      	adcs	r3, r3
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
 8003a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	1854      	adds	r4, r2, r1
 8003a7e:	4649      	mov	r1, r9
 8003a80:	eb43 0501 	adc.w	r5, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	eb45 0303 	adc.w	r3, r5, r3
 8003aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad8:	f7fd f866 	bl	8000ba8 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b60      	ldr	r3, [pc, #384]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011c      	lsls	r4, r3, #4
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	61b9      	str	r1, [r7, #24]
 8003b04:	415b      	adcs	r3, r3
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6139      	str	r1, [r7, #16]
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b64:	4649      	mov	r1, r9
 8003b66:	008b      	lsls	r3, r1, #2
 8003b68:	4641      	mov	r1, r8
 8003b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6e:	4641      	mov	r1, r8
 8003b70:	008a      	lsls	r2, r1, #2
 8003b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b76:	f7fd f817 	bl	8000ba8 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9e:	441c      	add	r4, r3
 8003ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba8:	677a      	str	r2, [r7, #116]	; 0x74
 8003baa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bae:	4642      	mov	r2, r8
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	1851      	adds	r1, r2, r1
 8003bc2:	6039      	str	r1, [r7, #0]
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	414b      	adcs	r3, r1
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd6:	4659      	mov	r1, fp
 8003bd8:	00cb      	lsls	r3, r1, #3
 8003bda:	4651      	mov	r1, sl
 8003bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be0:	4651      	mov	r1, sl
 8003be2:	00ca      	lsls	r2, r1, #3
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	4603      	mov	r3, r0
 8003bea:	4642      	mov	r2, r8
 8003bec:	189b      	adds	r3, r3, r2
 8003bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	460a      	mov	r2, r1
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	663b      	str	r3, [r7, #96]	; 0x60
 8003c04:	667a      	str	r2, [r7, #100]	; 0x64
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c12:	4649      	mov	r1, r9
 8003c14:	008b      	lsls	r3, r1, #2
 8003c16:	4641      	mov	r1, r8
 8003c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	008a      	lsls	r2, r1, #2
 8003c20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c24:	f7fc ffc0 	bl	8000ba8 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2164      	movs	r1, #100	; 0x64
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	; 0x32
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <UART_SetConfig+0x4e4>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4422      	add	r2, r4
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	51eb851f 	.word	0x51eb851f

08003c68 <MX_FATFS_Init>:
BYTE	work_t[_MAX_SS];

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003c6c:	4904      	ldr	r1, [pc, #16]	; (8003c80 <MX_FATFS_Init+0x18>)
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <MX_FATFS_Init+0x1c>)
 8003c70:	f003 ff38 	bl	8007ae4 <FATFS_LinkDriver>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <MX_FATFS_Init+0x20>)
 8003c7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200002ec 	.word	0x200002ec
 8003c84:	20000040 	.word	0x20000040
 8003c88:	200002e8 	.word	0x200002e8

08003c8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return	  ((DWORD)(2023 - 1980) << 25)	/* Year = 2023 */
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <get_fattime+0x10>)
			| ((DWORD)1 << 16)				/* Day_m = 1*/
			| ((DWORD)0 << 11)				/* Hour = 0 */
			| ((DWORD)0 << 5)				/* Min = 0 */
			| ((DWORD)0 >> 1);				/* Sec = 0 */
  /* USER CODE END get_fattime */
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	56210000 	.word	0x56210000

08003ca0 <fatfs_demo>:

/* USER CODE BEGIN Application */

void fatfs_demo(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af02      	add	r7, sp, #8
	//W25QXX_Erase_Chip();
	retUSER = f_mount(&USERFatFS,USERPath,1);
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	496e      	ldr	r1, [pc, #440]	; (8003e64 <fatfs_demo+0x1c4>)
 8003caa:	486f      	ldr	r0, [pc, #444]	; (8003e68 <fatfs_demo+0x1c8>)
 8003cac:	f002 fbd4 	bl	8006458 <f_mount>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <fatfs_demo+0x1cc>)
 8003cb6:	701a      	strb	r2, [r3, #0]
	printf("retUSER = %d\r\n",retUSER);
 8003cb8:	4b6c      	ldr	r3, [pc, #432]	; (8003e6c <fatfs_demo+0x1cc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	486c      	ldr	r0, [pc, #432]	; (8003e70 <fatfs_demo+0x1d0>)
 8003cc0:	f004 ff14 	bl	8008aec <iprintf>

	if(FR_NO_FILESYSTEM == retUSER)
 8003cc4:	4b69      	ldr	r3, [pc, #420]	; (8003e6c <fatfs_demo+0x1cc>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b0d      	cmp	r3, #13
 8003cca:	d135      	bne.n	8003d38 <fatfs_demo+0x98>
	{
		retUSER = f_mkfs(USERPath,FM_ANY,4096,work_t,sizeof(work_t));
 8003ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <fatfs_demo+0x1d4>)
 8003cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cd8:	2107      	movs	r1, #7
 8003cda:	4862      	ldr	r0, [pc, #392]	; (8003e64 <fatfs_demo+0x1c4>)
 8003cdc:	f003 fa66 	bl	80071ac <f_mkfs>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <fatfs_demo+0x1cc>)
 8003ce6:	701a      	strb	r2, [r3, #0]
		printf("f_mkfs = %d\r\n",retUSER);
 8003ce8:	4b60      	ldr	r3, [pc, #384]	; (8003e6c <fatfs_demo+0x1cc>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4862      	ldr	r0, [pc, #392]	; (8003e78 <fatfs_demo+0x1d8>)
 8003cf0:	f004 fefc 	bl	8008aec <iprintf>
		HAL_Delay(500);
 8003cf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cf8:	f7fd fc96 	bl	8001628 <HAL_Delay>
		retUSER = f_mount(NULL,USERPath,1);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4959      	ldr	r1, [pc, #356]	; (8003e64 <fatfs_demo+0x1c4>)
 8003d00:	2000      	movs	r0, #0
 8003d02:	f002 fba9 	bl	8006458 <f_mount>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d0c:	701a      	strb	r2, [r3, #0]
		printf("f_mount = %d\r\n",retUSER);
 8003d0e:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	4859      	ldr	r0, [pc, #356]	; (8003e7c <fatfs_demo+0x1dc>)
 8003d16:	f004 fee9 	bl	8008aec <iprintf>
		retUSER = f_mount(&USERFatFS,USERPath,1);
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4951      	ldr	r1, [pc, #324]	; (8003e64 <fatfs_demo+0x1c4>)
 8003d1e:	4852      	ldr	r0, [pc, #328]	; (8003e68 <fatfs_demo+0x1c8>)
 8003d20:	f002 fb9a 	bl	8006458 <f_mount>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d2a:	701a      	strb	r2, [r3, #0]
		printf("f_mount = %d\r\n",retUSER);
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4852      	ldr	r0, [pc, #328]	; (8003e7c <fatfs_demo+0x1dc>)
 8003d34:	f004 feda 	bl	8008aec <iprintf>
	}

	printf("\r\n****************** data_write_test ******************\r\n");
 8003d38:	4851      	ldr	r0, [pc, #324]	; (8003e80 <fatfs_demo+0x1e0>)
 8003d3a:	f004 ff5d 	bl	8008bf8 <puts>
	retUSER = f_open(&USERFile, "readme.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003d3e:	2212      	movs	r2, #18
 8003d40:	4950      	ldr	r1, [pc, #320]	; (8003e84 <fatfs_demo+0x1e4>)
 8003d42:	4851      	ldr	r0, [pc, #324]	; (8003e88 <fatfs_demo+0x1e8>)
 8003d44:	f002 fbce 	bl	80064e4 <f_open>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d4e:	701a      	strb	r2, [r3, #0]
    if(retUSER == FR_OK)
 8003d50:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d137      	bne.n	8003dc8 <fatfs_demo+0x128>
    {
        printf("open/create readme.txt success,write data now\r\n");
 8003d58:	484c      	ldr	r0, [pc, #304]	; (8003e8c <fatfs_demo+0x1ec>)
 8003d5a:	f004 ff4d 	bl	8008bf8 <puts>
        retUSER = f_write(&USERFile, write_buf, strlen((const char *)write_buf), &count);
 8003d5e:	484c      	ldr	r0, [pc, #304]	; (8003e90 <fatfs_demo+0x1f0>)
 8003d60:	f7fc fa36 	bl	80001d0 <strlen>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <fatfs_demo+0x1f4>)
 8003d68:	4949      	ldr	r1, [pc, #292]	; (8003e90 <fatfs_demo+0x1f0>)
 8003d6a:	4847      	ldr	r0, [pc, #284]	; (8003e88 <fatfs_demo+0x1e8>)
 8003d6c:	f002 ffe1 	bl	8006d32 <f_write>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d76:	701a      	strb	r2, [r3, #0]

        if(retUSER != FR_OK)
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <fatfs_demo+0x100>
        {
            printf("f_write has error,err = %d\r\n", retUSER);
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <fatfs_demo+0x1cc>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4619      	mov	r1, r3
 8003d86:	4844      	ldr	r0, [pc, #272]	; (8003e98 <fatfs_demo+0x1f8>)
 8003d88:	f004 feb0 	bl	8008aec <iprintf>
            printf("close readme.txt data\r\n");
 8003d8c:	4843      	ldr	r0, [pc, #268]	; (8003e9c <fatfs_demo+0x1fc>)
 8003d8e:	f004 ff33 	bl	8008bf8 <puts>
            count = 0;
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <fatfs_demo+0x1f4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
            f_close(&USERFile);
 8003d98:	483b      	ldr	r0, [pc, #236]	; (8003e88 <fatfs_demo+0x1e8>)
 8003d9a:	f003 f9dc 	bl	8007156 <f_close>
 8003d9e:	e019      	b.n	8003dd4 <fatfs_demo+0x134>
        }
        else
        {
            printf("write data success,data_size:%d\n", count);
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <fatfs_demo+0x1f4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	483e      	ldr	r0, [pc, #248]	; (8003ea0 <fatfs_demo+0x200>)
 8003da8:	f004 fea0 	bl	8008aec <iprintf>
            printf("data:\r\n%s\r\n", write_buf);
 8003dac:	4938      	ldr	r1, [pc, #224]	; (8003e90 <fatfs_demo+0x1f0>)
 8003dae:	483d      	ldr	r0, [pc, #244]	; (8003ea4 <fatfs_demo+0x204>)
 8003db0:	f004 fe9c 	bl	8008aec <iprintf>
            printf("close readme.txt data\r\n");
 8003db4:	4839      	ldr	r0, [pc, #228]	; (8003e9c <fatfs_demo+0x1fc>)
 8003db6:	f004 ff1f 	bl	8008bf8 <puts>
            count = 0;
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <fatfs_demo+0x1f4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

            f_close(&USERFile);
 8003dc0:	4831      	ldr	r0, [pc, #196]	; (8003e88 <fatfs_demo+0x1e8>)
 8003dc2:	f003 f9c8 	bl	8007156 <f_close>
 8003dc6:	e005      	b.n	8003dd4 <fatfs_demo+0x134>
        }
    }
    else
    	printf("open/create readme.txt data error,err = %d\r\n", retUSER);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <fatfs_demo+0x1cc>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4836      	ldr	r0, [pc, #216]	; (8003ea8 <fatfs_demo+0x208>)
 8003dd0:	f004 fe8c 	bl	8008aec <iprintf>


    printf("****************** data_read_test ******************\r\n");
 8003dd4:	4835      	ldr	r0, [pc, #212]	; (8003eac <fatfs_demo+0x20c>)
 8003dd6:	f004 ff0f 	bl	8008bf8 <puts>
    retUSER = f_open(&USERFile, "readme.txt", FA_OPEN_EXISTING | FA_READ);
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4929      	ldr	r1, [pc, #164]	; (8003e84 <fatfs_demo+0x1e4>)
 8003dde:	482a      	ldr	r0, [pc, #168]	; (8003e88 <fatfs_demo+0x1e8>)
 8003de0:	f002 fb80 	bl	80064e4 <f_open>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <fatfs_demo+0x1cc>)
 8003dea:	701a      	strb	r2, [r3, #0]

    if(retUSER == FR_OK)
 8003dec:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <fatfs_demo+0x1cc>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d12e      	bne.n	8003e52 <fatfs_demo+0x1b2>
    {
        printf("open readme.txt data success,read data now\r\n");
 8003df4:	482e      	ldr	r0, [pc, #184]	; (8003eb0 <fatfs_demo+0x210>)
 8003df6:	f004 feff 	bl	8008bf8 <puts>
        retUSER = f_read(&USERFile, read_buf, sizeof(read_buf), &count);
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <fatfs_demo+0x1f4>)
 8003dfc:	2232      	movs	r2, #50	; 0x32
 8003dfe:	492d      	ldr	r1, [pc, #180]	; (8003eb4 <fatfs_demo+0x214>)
 8003e00:	4821      	ldr	r0, [pc, #132]	; (8003e88 <fatfs_demo+0x1e8>)
 8003e02:	f002 fe37 	bl	8006a74 <f_read>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <fatfs_demo+0x1cc>)
 8003e0c:	701a      	strb	r2, [r3, #0]

        if(retUSER != FR_OK)
 8003e0e:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <fatfs_demo+0x1cc>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <fatfs_demo+0x190>
        {
            printf("f_read has error,err = %d\r\n", retUSER);
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <fatfs_demo+0x1cc>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <fatfs_demo+0x218>)
 8003e1e:	f004 fe65 	bl	8008aec <iprintf>
            printf("close readme.txt data\r\n");
 8003e22:	481e      	ldr	r0, [pc, #120]	; (8003e9c <fatfs_demo+0x1fc>)
 8003e24:	f004 fee8 	bl	8008bf8 <puts>
            f_close(&USERFile);
 8003e28:	4817      	ldr	r0, [pc, #92]	; (8003e88 <fatfs_demo+0x1e8>)
 8003e2a:	f003 f994 	bl	8007156 <f_close>
            f_close(&USERFile);
        }
    }
    else
 	   printf("open readme.txt data error,err = %d\r\n", retUSER);
}
 8003e2e:	e016      	b.n	8003e5e <fatfs_demo+0x1be>
            printf("read success,read size:%d\n", count);
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <fatfs_demo+0x1f4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4821      	ldr	r0, [pc, #132]	; (8003ebc <fatfs_demo+0x21c>)
 8003e38:	f004 fe58 	bl	8008aec <iprintf>
            printf("read data:\r\n%s\r\n", read_buf);
 8003e3c:	491d      	ldr	r1, [pc, #116]	; (8003eb4 <fatfs_demo+0x214>)
 8003e3e:	4820      	ldr	r0, [pc, #128]	; (8003ec0 <fatfs_demo+0x220>)
 8003e40:	f004 fe54 	bl	8008aec <iprintf>
            printf("close readme.txt data\r\n");
 8003e44:	4815      	ldr	r0, [pc, #84]	; (8003e9c <fatfs_demo+0x1fc>)
 8003e46:	f004 fed7 	bl	8008bf8 <puts>
            f_close(&USERFile);
 8003e4a:	480f      	ldr	r0, [pc, #60]	; (8003e88 <fatfs_demo+0x1e8>)
 8003e4c:	f003 f983 	bl	8007156 <f_close>
}
 8003e50:	e005      	b.n	8003e5e <fatfs_demo+0x1be>
 	   printf("open readme.txt data error,err = %d\r\n", retUSER);
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <fatfs_demo+0x1cc>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <fatfs_demo+0x224>)
 8003e5a:	f004 fe47 	bl	8008aec <iprintf>
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200002ec 	.word	0x200002ec
 8003e68:	200002f0 	.word	0x200002f0
 8003e6c:	200002e8 	.word	0x200002e8
 8003e70:	0800ad88 	.word	0x0800ad88
 8003e74:	20002390 	.word	0x20002390
 8003e78:	0800ad98 	.word	0x0800ad98
 8003e7c:	0800ada8 	.word	0x0800ada8
 8003e80:	0800adb8 	.word	0x0800adb8
 8003e84:	0800adf4 	.word	0x0800adf4
 8003e88:	20001328 	.word	0x20001328
 8003e8c:	0800ae00 	.word	0x0800ae00
 8003e90:	2000000c 	.word	0x2000000c
 8003e94:	20002358 	.word	0x20002358
 8003e98:	0800ae30 	.word	0x0800ae30
 8003e9c:	0800ae50 	.word	0x0800ae50
 8003ea0:	0800ae68 	.word	0x0800ae68
 8003ea4:	0800ae8c 	.word	0x0800ae8c
 8003ea8:	0800ae98 	.word	0x0800ae98
 8003eac:	0800aec8 	.word	0x0800aec8
 8003eb0:	0800af00 	.word	0x0800af00
 8003eb4:	2000235c 	.word	0x2000235c
 8003eb8:	0800af2c 	.word	0x0800af2c
 8003ebc:	0800af48 	.word	0x0800af48
 8003ec0:	0800af64 	.word	0x0800af64
 8003ec4:	0800af78 	.word	0x0800af78

08003ec8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    W25QXX_Init();
 8003ed2:	f003 ff15 	bl	8007d00 <W25QXX_Init>
    if(W25Q128 == W25QXX_ReadID())
 8003ed6:	f003 ff8f 	bl	8007df8 <W25QXX_ReadID>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	f64e 7317 	movw	r3, #61207	; 0xef17
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d103      	bne.n	8003eee <USER_initialize+0x26>
    	Stat =  RES_OK;
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <USER_initialize+0x3c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e002      	b.n	8003ef4 <USER_initialize+0x2c>
    else
    	Stat = RES_NOTRDY;
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <USER_initialize+0x3c>)
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <USER_initialize+0x3c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	2000003e 	.word	0x2000003e

08003f08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <USER_status+0x24>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <USER_status+0x24>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000003e 	.word	0x2000003e

08003f30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	W25QXX_Read(buff,sector * 4096,count * 4096);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0319      	lsls	r1, r3, #12
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	f003 ff88 	bl	8007e64 <W25QXX_Read>
    return RES_OK;
 8003f54:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	W25QXX_Write((BYTE *)buff,sector * 4096,count * 4096);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0319      	lsls	r1, r3, #12
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	031b      	lsls	r3, r3, #12
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f004 f845 	bl	800800c <W25QXX_Write>
  /* USER CODE HERE */
    return RES_OK;
 8003f82:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	603a      	str	r2, [r7, #0]
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_PARERR;
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	73fb      	strb	r3, [r7, #15]
    switch(cmd)
 8003fa0:	79bb      	ldrb	r3, [r7, #6]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d821      	bhi.n	8003fea <USER_ioctl+0x5e>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <USER_ioctl+0x20>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc3 	.word	0x08003fc3
 8003fb4:	08003fd1 	.word	0x08003fd1
 8003fb8:	08003fdf 	.word	0x08003fdf
    {
         case CTRL_SYNC:
             res = RES_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
             break;
 8003fc0:	e016      	b.n	8003ff0 <USER_ioctl+0x64>

         case GET_SECTOR_COUNT:
             *(DWORD*)buff = 2560;      //10MB= 10 * 1024 KB
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003fc8:	601a      	str	r2, [r3, #0]
             res = RES_OK;				//总扇区 = 10 * 1024 KB / 4KB = 2560
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
             break;
 8003fce:	e00f      	b.n	8003ff0 <USER_ioctl+0x64>

         case GET_SECTOR_SIZE:
             *(WORD*)buff = 4096;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fd6:	801a      	strh	r2, [r3, #0]
             res = RES_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
             break;
 8003fdc:	e008      	b.n	8003ff0 <USER_ioctl+0x64>

         case GET_BLOCK_SIZE:
             *(DWORD*)buff = 1;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
             res = RES_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
             break;
 8003fe8:	e002      	b.n	8003ff0 <USER_ioctl+0x64>

         default:
             res = RES_PARERR;
 8003fea:	2304      	movs	r3, #4
 8003fec:	73fb      	strb	r3, [r7, #15]
             break;
 8003fee:	bf00      	nop
       }
    return res;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	4a08      	ldr	r2, [pc, #32]	; (8004030 <disk_status+0x30>)
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	79fa      	ldrb	r2, [r7, #7]
 8004018:	4905      	ldr	r1, [pc, #20]	; (8004030 <disk_status+0x30>)
 800401a:	440a      	add	r2, r1
 800401c:	7a12      	ldrb	r2, [r2, #8]
 800401e:	4610      	mov	r0, r2
 8004020:	4798      	blx	r3
 8004022:	4603      	mov	r3, r0
 8004024:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	200033b8 	.word	0x200033b8

08004034 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4a0d      	ldr	r2, [pc, #52]	; (800407c <disk_initialize+0x48>)
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	4a0b      	ldr	r2, [pc, #44]	; (800407c <disk_initialize+0x48>)
 8004050:	2101      	movs	r1, #1
 8004052:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <disk_initialize+0x48>)
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	79fa      	ldrb	r2, [r7, #7]
 8004062:	4906      	ldr	r1, [pc, #24]	; (800407c <disk_initialize+0x48>)
 8004064:	440a      	add	r2, r1
 8004066:	7a12      	ldrb	r2, [r2, #8]
 8004068:	4610      	mov	r0, r2
 800406a:	4798      	blx	r3
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200033b8 	.word	0x200033b8

08004080 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <disk_read+0x3c>)
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	689c      	ldr	r4, [r3, #8]
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <disk_read+0x3c>)
 80040a0:	4413      	add	r3, r2
 80040a2:	7a18      	ldrb	r0, [r3, #8]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	47a0      	blx	r4
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd90      	pop	{r4, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200033b8 	.word	0x200033b8

080040c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <disk_write+0x3c>)
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	68dc      	ldr	r4, [r3, #12]
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <disk_write+0x3c>)
 80040e0:	4413      	add	r3, r2
 80040e2:	7a18      	ldrb	r0, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	47a0      	blx	r4
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200033b8 	.word	0x200033b8

08004100 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	603a      	str	r2, [r7, #0]
 800410a:	71fb      	strb	r3, [r7, #7]
 800410c:	460b      	mov	r3, r1
 800410e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <disk_ioctl+0x38>)
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	79fa      	ldrb	r2, [r7, #7]
 800411e:	4906      	ldr	r1, [pc, #24]	; (8004138 <disk_ioctl+0x38>)
 8004120:	440a      	add	r2, r1
 8004122:	7a10      	ldrb	r0, [r2, #8]
 8004124:	79b9      	ldrb	r1, [r7, #6]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	4798      	blx	r3
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
  return res;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	200033b8 	.word	0x200033b8

0800413c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3301      	adds	r3, #1
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800414c:	89fb      	ldrh	r3, [r7, #14]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	b21a      	sxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b21b      	sxth	r3, r3
 8004158:	4313      	orrs	r3, r2
 800415a:	b21b      	sxth	r3, r3
 800415c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800415e:	89fb      	ldrh	r3, [r7, #14]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3303      	adds	r3, #3
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	3202      	adds	r2, #2
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	3201      	adds	r2, #1
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	887a      	ldrh	r2, [r7, #2]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	1c53      	adds	r3, r2, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	6179      	str	r1, [r7, #20]
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3b01      	subs	r3, #1
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f1      	bne.n	800425a <mem_cpy+0x1a>
	}
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004282:	b480      	push	{r7}
 8004284:	b087      	sub	sp, #28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	617a      	str	r2, [r7, #20]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f3      	bne.n	8004292 <mem_set+0x10>
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	61fa      	str	r2, [r7, #28]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	61ba      	str	r2, [r7, #24]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	1acb      	subs	r3, r1, r3
 80042e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <mem_cmp+0x40>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0eb      	beq.n	80042d0 <mem_cmp+0x18>

	return r;
 80042f8:	697b      	ldr	r3, [r7, #20]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004310:	e002      	b.n	8004318 <chk_chr+0x12>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3301      	adds	r3, #1
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <chk_chr+0x26>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	4293      	cmp	r3, r2
 800432a:	d1f2      	bne.n	8004312 <chk_chr+0xc>
	return *str;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	781b      	ldrb	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e029      	b.n	80043a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <chk_lock+0xb4>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4413      	add	r3, r2
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01d      	beq.n	800439a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <chk_lock+0xb4>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d116      	bne.n	800439e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <chk_lock+0xb4>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	3304      	adds	r3, #4
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004380:	429a      	cmp	r2, r3
 8004382:	d10c      	bne.n	800439e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <chk_lock+0xb4>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4413      	add	r3, r2
 800438c:	3308      	adds	r3, #8
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004394:	429a      	cmp	r2, r3
 8004396:	d102      	bne.n	800439e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004398:	e007      	b.n	80043aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d9d2      	bls.n	8004350 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d109      	bne.n	80043c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <chk_lock+0x80>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d101      	bne.n	80043c0 <chk_lock+0x84>
 80043bc:	2300      	movs	r3, #0
 80043be:	e010      	b.n	80043e2 <chk_lock+0xa6>
 80043c0:	2312      	movs	r3, #18
 80043c2:	e00e      	b.n	80043e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <chk_lock+0xa0>
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <chk_lock+0xb4>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	330c      	adds	r3, #12
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d101      	bne.n	80043e0 <chk_lock+0xa4>
 80043dc:	2310      	movs	r3, #16
 80043de:	e000      	b.n	80043e2 <chk_lock+0xa6>
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20003398 	.word	0x20003398

080043f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	e002      	b.n	8004406 <enq_lock+0x12>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3301      	adds	r3, #1
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d806      	bhi.n	800441a <enq_lock+0x26>
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <enq_lock+0x40>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20003398 	.word	0x20003398

08004438 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e01f      	b.n	8004488 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004448:	4a41      	ldr	r2, [pc, #260]	; (8004550 <inc_lock+0x118>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	4413      	add	r3, r2
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d113      	bne.n	8004482 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800445a:	4a3d      	ldr	r2, [pc, #244]	; (8004550 <inc_lock+0x118>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4413      	add	r3, r2
 8004462:	3304      	adds	r3, #4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800446a:	429a      	cmp	r2, r3
 800446c:	d109      	bne.n	8004482 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800446e:	4a38      	ldr	r2, [pc, #224]	; (8004550 <inc_lock+0x118>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	4413      	add	r3, r2
 8004476:	3308      	adds	r3, #8
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800447e:	429a      	cmp	r2, r3
 8004480:	d006      	beq.n	8004490 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d9dc      	bls.n	8004448 <inc_lock+0x10>
 800448e:	e000      	b.n	8004492 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004490:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d132      	bne.n	80044fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e002      	b.n	80044a4 <inc_lock+0x6c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d806      	bhi.n	80044b8 <inc_lock+0x80>
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <inc_lock+0x118>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4413      	add	r3, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d101      	bne.n	80044c2 <inc_lock+0x8a>
 80044be:	2300      	movs	r3, #0
 80044c0:	e040      	b.n	8004544 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4922      	ldr	r1, [pc, #136]	; (8004550 <inc_lock+0x118>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	440b      	add	r3, r1
 80044ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	491e      	ldr	r1, [pc, #120]	; (8004550 <inc_lock+0x118>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	440b      	add	r3, r1
 80044dc:	3304      	adds	r3, #4
 80044de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	491a      	ldr	r1, [pc, #104]	; (8004550 <inc_lock+0x118>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	440b      	add	r3, r1
 80044ec:	3308      	adds	r3, #8
 80044ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044f0:	4a17      	ldr	r2, [pc, #92]	; (8004550 <inc_lock+0x118>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4413      	add	r3, r2
 80044f8:	330c      	adds	r3, #12
 80044fa:	2200      	movs	r2, #0
 80044fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <inc_lock+0xe0>
 8004504:	4a12      	ldr	r2, [pc, #72]	; (8004550 <inc_lock+0x118>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	4413      	add	r3, r2
 800450c:	330c      	adds	r3, #12
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <inc_lock+0xe0>
 8004514:	2300      	movs	r3, #0
 8004516:	e015      	b.n	8004544 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <inc_lock+0xf8>
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <inc_lock+0x118>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	330c      	adds	r3, #12
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	e001      	b.n	8004534 <inc_lock+0xfc>
 8004530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004534:	4906      	ldr	r1, [pc, #24]	; (8004550 <inc_lock+0x118>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	440b      	add	r3, r1
 800453c:	330c      	adds	r3, #12
 800453e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	20003398 	.word	0x20003398

08004554 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3b01      	subs	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d825      	bhi.n	80045b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <dec_lock+0x74>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4413      	add	r3, r2
 8004570:	330c      	adds	r3, #12
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d101      	bne.n	8004582 <dec_lock+0x2e>
 800457e:	2300      	movs	r3, #0
 8004580:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <dec_lock+0x3a>
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	3b01      	subs	r3, #1
 800458c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800458e:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <dec_lock+0x74>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	330c      	adds	r3, #12
 8004598:	89fa      	ldrh	r2, [r7, #14]
 800459a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <dec_lock+0x5a>
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <dec_lock+0x74>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	4413      	add	r3, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	737b      	strb	r3, [r7, #13]
 80045b2:	e001      	b.n	80045b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045b4:	2302      	movs	r3, #2
 80045b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20003398 	.word	0x20003398

080045cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e010      	b.n	80045fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045da:	4a0d      	ldr	r2, [pc, #52]	; (8004610 <clear_lock+0x44>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d105      	bne.n	80045f6 <clear_lock+0x2a>
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <clear_lock+0x44>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4413      	add	r3, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d9eb      	bls.n	80045da <clear_lock+0xe>
	}
}
 8004602:	bf00      	nop
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20003398 	.word	0x20003398

08004614 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d034      	beq.n	8004692 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7858      	ldrb	r0, [r3, #1]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004638:	2301      	movs	r3, #1
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f7ff fd40 	bl	80040c0 <disk_write>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e022      	b.n	8004692 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	1ad2      	subs	r2, r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	429a      	cmp	r2, r3
 8004660:	d217      	bcs.n	8004692 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	789b      	ldrb	r3, [r3, #2]
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	e010      	b.n	800468c <sync_window+0x78>
					wsect += fs->fsize;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4413      	add	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7858      	ldrb	r0, [r3, #1]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800467e:	2301      	movs	r3, #1
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	f7ff fd1d 	bl	80040c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3b01      	subs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d8eb      	bhi.n	800466a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d01b      	beq.n	80046ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ffad 	bl	8004614 <sync_window>
 80046ba:	4603      	mov	r3, r0
 80046bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7858      	ldrb	r0, [r3, #1]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046ce:	2301      	movs	r3, #1
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	f7ff fcd5 	bl	8004080 <disk_read>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff87 	bl	8004614 <sync_window>
 8004706:	4603      	mov	r3, r0
 8004708:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d159      	bne.n	80047c4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d149      	bne.n	80047ac <sync_fs+0xb4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	791b      	ldrb	r3, [r3, #4]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d145      	bne.n	80047ac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	899b      	ldrh	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	2100      	movs	r1, #0
 800472e:	f7ff fda8 	bl	8004282 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3338      	adds	r3, #56	; 0x38
 8004736:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800473a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fd37 	bl	80041b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3338      	adds	r3, #56	; 0x38
 8004748:	4921      	ldr	r1, [pc, #132]	; (80047d0 <sync_fs+0xd8>)
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fd4c 	bl	80041e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3338      	adds	r3, #56	; 0x38
 8004754:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004758:	491e      	ldr	r1, [pc, #120]	; (80047d4 <sync_fs+0xdc>)
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fd44 	bl	80041e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3338      	adds	r3, #56	; 0x38
 8004764:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7ff fd3a 	bl	80041e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3338      	adds	r3, #56	; 0x38
 8004778:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7ff fd30 	bl	80041e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7858      	ldrb	r0, [r3, #1]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a0:	2301      	movs	r3, #1
 80047a2:	f7ff fc8d 	bl	80040c0 <disk_write>
			fs->fsi_flag = 0;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fca3 	bl	8004100 <disk_ioctl>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <sync_fs+0xcc>
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	41615252 	.word	0x41615252
 80047d4:	61417272 	.word	0x61417272

080047d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3b02      	subs	r3, #2
 80047e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	3b02      	subs	r3, #2
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d301      	bcc.n	80047f8 <clust2sect+0x20>
 80047f4:	2300      	movs	r3, #0
 80047f6:	e008      	b.n	800480a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	895b      	ldrh	r3, [r3, #10]
 80047fc:	461a      	mov	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	fb03 f202 	mul.w	r2, r3, r2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	4413      	add	r3, r2
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d904      	bls.n	8004836 <get_fat+0x20>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004836:	2301      	movs	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e0bb      	b.n	80049b4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800483c:	f04f 33ff 	mov.w	r3, #4294967295
 8004840:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b03      	cmp	r3, #3
 8004848:	f000 8083 	beq.w	8004952 <get_fat+0x13c>
 800484c:	2b03      	cmp	r3, #3
 800484e:	f300 80a7 	bgt.w	80049a0 <get_fat+0x18a>
 8004852:	2b01      	cmp	r3, #1
 8004854:	d002      	beq.n	800485c <get_fat+0x46>
 8004856:	2b02      	cmp	r3, #2
 8004858:	d056      	beq.n	8004908 <get_fat+0xf2>
 800485a:	e0a1      	b.n	80049a0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	899b      	ldrh	r3, [r3, #12]
 8004872:	4619      	mov	r1, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	fbb3 f3f1 	udiv	r3, r3, r1
 800487a:	4413      	add	r3, r2
 800487c:	4619      	mov	r1, r3
 800487e:	6938      	ldr	r0, [r7, #16]
 8004880:	f7ff ff0c 	bl	800469c <move_window>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 808d 	bne.w	80049a6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	60fa      	str	r2, [r7, #12]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	8992      	ldrh	r2, [r2, #12]
 8004896:	fbb3 f1f2 	udiv	r1, r3, r2
 800489a:	fb01 f202 	mul.w	r2, r1, r2
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	899b      	ldrh	r3, [r3, #12]
 80048b2:	4619      	mov	r1, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ba:	4413      	add	r3, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	6938      	ldr	r0, [r7, #16]
 80048c0:	f7ff feec 	bl	800469c <move_window>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d16f      	bne.n	80049aa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	899b      	ldrh	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80048d6:	fb01 f202 	mul.w	r2, r1, r2
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <get_fat+0xe8>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	e002      	b.n	8004904 <get_fat+0xee>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	617b      	str	r3, [r7, #20]
			break;
 8004906:	e055      	b.n	80049b4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	899b      	ldrh	r3, [r3, #12]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	fbb3 f3f1 	udiv	r3, r3, r1
 800491c:	4413      	add	r3, r2
 800491e:	4619      	mov	r1, r3
 8004920:	6938      	ldr	r0, [r7, #16]
 8004922:	f7ff febb 	bl	800469c <move_window>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d140      	bne.n	80049ae <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	8992      	ldrh	r2, [r2, #12]
 800493a:	fbb3 f0f2 	udiv	r0, r3, r2
 800493e:	fb00 f202 	mul.w	r2, r0, r2
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	440b      	add	r3, r1
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fbf8 	bl	800413c <ld_word>
 800494c:	4603      	mov	r3, r0
 800494e:	617b      	str	r3, [r7, #20]
			break;
 8004950:	e030      	b.n	80049b4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	899b      	ldrh	r3, [r3, #12]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	b29b      	uxth	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	fbb3 f3f1 	udiv	r3, r3, r1
 8004966:	4413      	add	r3, r2
 8004968:	4619      	mov	r1, r3
 800496a:	6938      	ldr	r0, [r7, #16]
 800496c:	f7ff fe96 	bl	800469c <move_window>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	8992      	ldrh	r2, [r2, #12]
 8004984:	fbb3 f0f2 	udiv	r0, r3, r2
 8004988:	fb00 f202 	mul.w	r2, r0, r2
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	440b      	add	r3, r1
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fbeb 	bl	800416c <ld_dword>
 8004996:	4603      	mov	r3, r0
 8004998:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800499c:	617b      	str	r3, [r7, #20]
			break;
 800499e:	e009      	b.n	80049b4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e006      	b.n	80049b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049a6:	bf00      	nop
 80049a8:	e004      	b.n	80049b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049b2:	bf00      	nop
		}
	}

	return val;
 80049b4:	697b      	ldr	r3, [r7, #20]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80049be:	b590      	push	{r4, r7, lr}
 80049c0:	b089      	sub	sp, #36	; 0x24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f240 8102 	bls.w	8004bda <put_fat+0x21c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	f080 80fc 	bcs.w	8004bda <put_fat+0x21c>
		switch (fs->fs_type) {
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	f000 80b6 	beq.w	8004b58 <put_fat+0x19a>
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	f300 80fd 	bgt.w	8004bec <put_fat+0x22e>
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d003      	beq.n	80049fe <put_fat+0x40>
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	f000 8083 	beq.w	8004b02 <put_fat+0x144>
 80049fc:	e0f6      	b.n	8004bec <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4413      	add	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	899b      	ldrh	r3, [r3, #12]
 8004a14:	4619      	mov	r1, r3
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a1c:	4413      	add	r3, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff fe3b 	bl	800469c <move_window>
 8004a26:	4603      	mov	r3, r0
 8004a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a2a:	7ffb      	ldrb	r3, [r7, #31]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 80d6 	bne.w	8004bde <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	61ba      	str	r2, [r7, #24]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	8992      	ldrh	r2, [r2, #12]
 8004a42:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a46:	fb00 f202 	mul.w	r2, r0, r2
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <put_fat+0xb8>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b25a      	sxtb	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	e001      	b.n	8004a7a <put_fat+0xbc>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	899b      	ldrh	r3, [r3, #12]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a94:	4413      	add	r3, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fdff 	bl	800469c <move_window>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004aa2:	7ffb      	ldrb	r3, [r7, #31]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 809c 	bne.w	8004be2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	899b      	ldrh	r3, [r3, #12]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004abc:	fb00 f202 	mul.w	r2, r0, r2
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <put_fat+0x11a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e00e      	b.n	8004af6 <put_fat+0x138>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f023 030f 	bic.w	r3, r3, #15
 8004ae2:	b25a      	sxtb	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	70da      	strb	r2, [r3, #3]
			break;
 8004b00:	e074      	b.n	8004bec <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	899b      	ldrh	r3, [r3, #12]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b16:	4413      	add	r3, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fdbe 	bl	800469c <move_window>
 8004b20:	4603      	mov	r3, r0
 8004b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d15d      	bne.n	8004be6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	8992      	ldrh	r2, [r2, #12]
 8004b38:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b3c:	fb00 f202 	mul.w	r2, r0, r2
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	440b      	add	r3, r1
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	b292      	uxth	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fb31 	bl	80041b2 <st_word>
			fs->wflag = 1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	70da      	strb	r2, [r3, #3]
			break;
 8004b56:	e049      	b.n	8004bec <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	899b      	ldrh	r3, [r3, #12]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4619      	mov	r1, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff fd93 	bl	800469c <move_window>
 8004b76:	4603      	mov	r3, r0
 8004b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d134      	bne.n	8004bea <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	8992      	ldrh	r2, [r2, #12]
 8004b94:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b98:	fb00 f202 	mul.w	r2, r0, r2
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fae3 	bl	800416c <ld_dword>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bac:	4323      	orrs	r3, r4
 8004bae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	8992      	ldrh	r2, [r2, #12]
 8004bbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bc2:	fb00 f202 	mul.w	r2, r0, r2
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fb0b 	bl	80041e8 <st_dword>
			fs->wflag = 1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	70da      	strb	r2, [r3, #3]
			break;
 8004bd8:	e008      	b.n	8004bec <put_fat+0x22e>
		}
	}
 8004bda:	bf00      	nop
 8004bdc:	e006      	b.n	8004bec <put_fat+0x22e>
			if (res != FR_OK) break;
 8004bde:	bf00      	nop
 8004be0:	e004      	b.n	8004bec <put_fat+0x22e>
			if (res != FR_OK) break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <put_fat+0x22e>
			if (res != FR_OK) break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <put_fat+0x22e>
			if (res != FR_OK) break;
 8004bea:	bf00      	nop
	return res;
 8004bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	; 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd90      	pop	{r4, r7, pc}

08004bf6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b088      	sub	sp, #32
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d904      	bls.n	8004c1c <remove_chain+0x26>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d301      	bcc.n	8004c20 <remove_chain+0x2a>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e04b      	b.n	8004cb8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c26:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	69b8      	ldr	r0, [r7, #24]
 8004c2e:	f7ff fec6 	bl	80049be <put_fat>
 8004c32:	4603      	mov	r3, r0
 8004c34:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <remove_chain+0x4a>
 8004c3c:	7ffb      	ldrb	r3, [r7, #31]
 8004c3e:	e03b      	b.n	8004cb8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fde7 	bl	8004816 <get_fat>
 8004c48:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d031      	beq.n	8004cb4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <remove_chain+0x64>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e02e      	b.n	8004cb8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d101      	bne.n	8004c66 <remove_chain+0x70>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e028      	b.n	8004cb8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c66:	2200      	movs	r2, #0
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	69b8      	ldr	r0, [r7, #24]
 8004c6c:	f7ff fea7 	bl	80049be <put_fat>
 8004c70:	4603      	mov	r3, r0
 8004c72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c74:	7ffb      	ldrb	r3, [r7, #31]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <remove_chain+0x88>
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
 8004c7c:	e01c      	b.n	8004cb8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	3b02      	subs	r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d20b      	bcs.n	8004ca4 <remove_chain+0xae>
			fs->free_clst++;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	791b      	ldrb	r3, [r3, #4]
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3c6      	bcc.n	8004c40 <remove_chain+0x4a>
 8004cb2:	e000      	b.n	8004cb6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004cb4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10d      	bne.n	8004cf2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <create_chain+0x2c>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d31b      	bcc.n	8004d24 <create_chain+0x64>
 8004cec:	2301      	movs	r3, #1
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e018      	b.n	8004d24 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fd8e 	bl	8004816 <get_fat>
 8004cfa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d801      	bhi.n	8004d06 <create_chain+0x46>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e070      	b.n	8004de8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d101      	bne.n	8004d12 <create_chain+0x52>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	e06a      	b.n	8004de8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d201      	bcs.n	8004d20 <create_chain+0x60>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	e063      	b.n	8004de8 <create_chain+0x128>
		scl = clst;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d307      	bcc.n	8004d48 <create_chain+0x88>
				ncl = 2;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d901      	bls.n	8004d48 <create_chain+0x88>
 8004d44:	2300      	movs	r3, #0
 8004d46:	e04f      	b.n	8004de8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d48:	69f9      	ldr	r1, [r7, #28]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fd63 	bl	8004816 <get_fat>
 8004d50:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d003      	beq.n	8004d66 <create_chain+0xa6>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d101      	bne.n	8004d6a <create_chain+0xaa>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	e03e      	b.n	8004de8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d1da      	bne.n	8004d28 <create_chain+0x68>
 8004d72:	2300      	movs	r3, #0
 8004d74:	e038      	b.n	8004de8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d76:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	6938      	ldr	r0, [r7, #16]
 8004d80:	f7ff fe1d 	bl	80049be <put_fat>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <create_chain+0xe2>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6938      	ldr	r0, [r7, #16]
 8004d9a:	f7ff fe10 	bl	80049be <put_fat>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d116      	bne.n	8004dd6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	3b02      	subs	r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d804      	bhi.n	8004dc6 <create_chain+0x106>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	711a      	strb	r2, [r3, #4]
 8004dd4:	e007      	b.n	8004de6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d102      	bne.n	8004de2 <create_chain+0x122>
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8004de0:	e000      	b.n	8004de4 <create_chain+0x124>
 8004de2:	2301      	movs	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004de6:	69fb      	ldr	r3, [r7, #28]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	3304      	adds	r3, #4
 8004e06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	899b      	ldrh	r3, [r3, #12]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	8952      	ldrh	r2, [r2, #10]
 8004e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	613a      	str	r2, [r7, #16]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <clmt_clust+0x42>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e010      	b.n	8004e54 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d307      	bcc.n	8004e4a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3304      	adds	r3, #4
 8004e46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e48:	e7e9      	b.n	8004e1e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e76:	d204      	bcs.n	8004e82 <dir_sdi+0x22>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e82:	2302      	movs	r3, #2
 8004e84:	e071      	b.n	8004f6a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <dir_sdi+0x46>
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d902      	bls.n	8004ea6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10c      	bne.n	8004ec6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	8912      	ldrh	r2, [r2, #8]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d301      	bcc.n	8004ebc <dir_sdi+0x5c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e056      	b.n	8004f6a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	61da      	str	r2, [r3, #28]
 8004ec4:	e02d      	b.n	8004f22 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	895b      	ldrh	r3, [r3, #10]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	899b      	ldrh	r3, [r3, #12]
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ed6:	e019      	b.n	8004f0c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6979      	ldr	r1, [r7, #20]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fc9a 	bl	8004816 <get_fat>
 8004ee2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d101      	bne.n	8004ef0 <dir_sdi+0x90>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e03c      	b.n	8004f6a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d904      	bls.n	8004f00 <dir_sdi+0xa0>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d301      	bcc.n	8004f04 <dir_sdi+0xa4>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e032      	b.n	8004f6a <dir_sdi+0x10a>
			ofs -= csz;
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d2e1      	bcs.n	8004ed8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f14:	6979      	ldr	r1, [r7, #20]
 8004f16:	6938      	ldr	r0, [r7, #16]
 8004f18:	f7ff fc5e 	bl	80047d8 <clust2sect>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <dir_sdi+0xd4>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e01a      	b.n	8004f6a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	899b      	ldrh	r3, [r3, #12]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	899b      	ldrh	r3, [r3, #12]
 8004f54:	461a      	mov	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f5c:	fb00 f202 	mul.w	r2, r0, r2
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	18ca      	adds	r2, r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	3320      	adds	r3, #32
 8004f88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <dir_next+0x28>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f98:	d301      	bcc.n	8004f9e <dir_next+0x2c>
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	e0bb      	b.n	8005116 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	899b      	ldrh	r3, [r3, #12]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004faa:	fb01 f202 	mul.w	r2, r1, r2
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 809d 	bne.w	80050f0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	8912      	ldrh	r2, [r2, #8]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	f0c0 808d 	bcc.w	80050f0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	61da      	str	r2, [r3, #28]
 8004fdc:	2304      	movs	r3, #4
 8004fde:	e09a      	b.n	8005116 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	899b      	ldrh	r3, [r3, #12]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	8952      	ldrh	r2, [r2, #10]
 8004ff0:	3a01      	subs	r2, #1
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d17b      	bne.n	80050f0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7ff fc08 	bl	8004816 <get_fat>
 8005006:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d801      	bhi.n	8005012 <dir_next+0xa0>
 800500e:	2302      	movs	r3, #2
 8005010:	e081      	b.n	8005116 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d101      	bne.n	800501e <dir_next+0xac>
 800501a:	2301      	movs	r3, #1
 800501c:	e07b      	b.n	8005116 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d359      	bcc.n	80050dc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	61da      	str	r2, [r3, #28]
 8005034:	2304      	movs	r3, #4
 8005036:	e06e      	b.n	8005116 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7ff fe3d 	bl	8004cc0 <create_chain>
 8005046:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <dir_next+0xe0>
 800504e:	2307      	movs	r3, #7
 8005050:	e061      	b.n	8005116 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <dir_next+0xea>
 8005058:	2302      	movs	r3, #2
 800505a:	e05c      	b.n	8005116 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d101      	bne.n	8005068 <dir_next+0xf6>
 8005064:	2301      	movs	r3, #1
 8005066:	e056      	b.n	8005116 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fad3 	bl	8004614 <sync_window>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <dir_next+0x106>
 8005074:	2301      	movs	r3, #1
 8005076:	e04e      	b.n	8005116 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	899b      	ldrh	r3, [r3, #12]
 8005082:	461a      	mov	r2, r3
 8005084:	2100      	movs	r1, #0
 8005086:	f7ff f8fc 	bl	8004282 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	6979      	ldr	r1, [r7, #20]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff fba1 	bl	80047d8 <clust2sect>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	635a      	str	r2, [r3, #52]	; 0x34
 800509c:	e012      	b.n	80050c4 <dir_next+0x152>
						fs->wflag = 1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fab5 	bl	8004614 <sync_window>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <dir_next+0x142>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e030      	b.n	8005116 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3301      	adds	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	895b      	ldrh	r3, [r3, #10]
 80050c8:	461a      	mov	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d3e6      	bcc.n	800509e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fb77 	bl	80047d8 <clust2sect>
 80050ea:	4602      	mov	r2, r0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	899b      	ldrh	r3, [r3, #12]
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	fbb3 f0f2 	udiv	r0, r3, r2
 8005108:	fb00 f202 	mul.w	r2, r0, r2
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	18ca      	adds	r2, r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b086      	sub	sp, #24
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800512e:	2100      	movs	r1, #0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe95 	bl	8004e60 <dir_sdi>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d12b      	bne.n	8005198 <dir_alloc+0x7a>
		n = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	4619      	mov	r1, r3
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff faa6 	bl	800469c <move_window>
 8005150:	4603      	mov	r3, r0
 8005152:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d11d      	bne.n	8005196 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2be5      	cmp	r3, #229	; 0xe5
 8005162:	d004      	beq.n	800516e <dir_alloc+0x50>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3301      	adds	r3, #1
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d102      	bne.n	8005182 <dir_alloc+0x64>
 800517c:	e00c      	b.n	8005198 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005182:	2101      	movs	r1, #1
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fef4 	bl	8004f72 <dir_next>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0d7      	beq.n	8005144 <dir_alloc+0x26>
 8005194:	e000      	b.n	8005198 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005196:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d101      	bne.n	80051a2 <dir_alloc+0x84>
 800519e:	2307      	movs	r3, #7
 80051a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	331a      	adds	r3, #26
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe ffbe 	bl	800413c <ld_word>
 80051c0:	4603      	mov	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d109      	bne.n	80051e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe ffb3 	bl	800413c <ld_word>
 80051d6:	4603      	mov	r3, r0
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	331a      	adds	r3, #26
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	b292      	uxth	r2, r2
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe ffd6 	bl	80041b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d109      	bne.n	8005222 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f103 0214 	add.w	r2, r3, #20
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b29b      	uxth	r3, r3
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7fe ffc8 	bl	80041b2 <st_word>
	}
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	331a      	adds	r3, #26
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe ff7e 	bl	800413c <ld_word>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <cmp_lfn+0x1e>
 8005246:	2300      	movs	r3, #0
 8005248:	e059      	b.n	80052fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005260:	2301      	movs	r3, #1
 8005262:	81fb      	strh	r3, [r7, #14]
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e033      	b.n	80052d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <cmp_lfn+0xdc>)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4413      	add	r3, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe ff5f 	bl	800413c <ld_word>
 800527e:	4603      	mov	r3, r0
 8005280:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01a      	beq.n	80052be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2bfe      	cmp	r3, #254	; 0xfe
 800528c:	d812      	bhi.n	80052b4 <cmp_lfn+0x88>
 800528e:	89bb      	ldrh	r3, [r7, #12]
 8005290:	4618      	mov	r0, r3
 8005292:	f002 fc95 	bl	8007bc0 <ff_wtoupper>
 8005296:	4603      	mov	r3, r0
 8005298:	461c      	mov	r4, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	617a      	str	r2, [r7, #20]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f002 fc89 	bl	8007bc0 <ff_wtoupper>
 80052ae:	4603      	mov	r3, r0
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d001      	beq.n	80052b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80052b4:	2300      	movs	r3, #0
 80052b6:	e022      	b.n	80052fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80052b8:	89bb      	ldrh	r3, [r7, #12]
 80052ba:	81fb      	strh	r3, [r7, #14]
 80052bc:	e006      	b.n	80052cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80052be:	89bb      	ldrh	r3, [r7, #12]
 80052c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d001      	beq.n	80052cc <cmp_lfn+0xa0>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e018      	b.n	80052fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3301      	adds	r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d9c8      	bls.n	800526a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <cmp_lfn+0xd0>
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <cmp_lfn+0xd0>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <cmp_lfn+0xd0>
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80052fc:	2301      	movs	r3, #1
}
 80052fe:	4618      	mov	r0, r3
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}
 8005306:	bf00      	nop
 8005308:	0800b000 	.word	0x0800b000

0800530c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4611      	mov	r1, r2
 8005318:	461a      	mov	r2, r3
 800531a:	460b      	mov	r3, r1
 800531c:	71fb      	strb	r3, [r7, #7]
 800531e:	4613      	mov	r3, r2
 8005320:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	330d      	adds	r3, #13
 8005326:	79ba      	ldrb	r2, [r7, #6]
 8005328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	330b      	adds	r3, #11
 800532e:	220f      	movs	r2, #15
 8005330:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	330c      	adds	r3, #12
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	331a      	adds	r3, #26
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe ff36 	bl	80041b2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	82fb      	strh	r3, [r7, #22]
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <put_lfn+0x6c>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <put_lfn+0xcc>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	8afa      	ldrh	r2, [r7, #22]
 8005388:	4611      	mov	r1, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe ff11 	bl	80041b2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005390:	8afb      	ldrh	r3, [r7, #22]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <put_lfn+0x90>
 8005396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	3301      	adds	r3, #1
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d9da      	bls.n	800535e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80053a8:	8afb      	ldrh	r3, [r7, #22]
 80053aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d006      	beq.n	80053c0 <put_lfn+0xb4>
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <put_lfn+0xbc>
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	79fa      	ldrb	r2, [r7, #7]
 80053cc:	701a      	strb	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	0800b000 	.word	0x0800b000

080053dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	; 0x30
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80053ea:	220b      	movs	r2, #11
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fe ff26 	bl	8004240 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d92b      	bls.n	8005452 <gen_numname+0x76>
		sr = seq;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80053fe:	e022      	b.n	8005446 <gen_numname+0x6a>
			wc = *lfn++;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800540a:	2300      	movs	r3, #0
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
 800540e:	e017      	b.n	8005440 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005a      	lsls	r2, r3, #1
 8005414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800541e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <gen_numname+0x5e>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005434:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005438:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	3301      	adds	r3, #1
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b0f      	cmp	r3, #15
 8005444:	d9e4      	bls.n	8005410 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d8      	bne.n	8005400 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005452:	2307      	movs	r3, #7
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	b2db      	uxtb	r3, r3
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800546a:	2b39      	cmp	r3, #57	; 0x39
 800546c:	d904      	bls.n	8005478 <gen_numname+0x9c>
 800546e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005472:	3307      	adds	r3, #7
 8005474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	62ba      	str	r2, [r7, #40]	; 0x28
 800547e:	3330      	adds	r3, #48	; 0x30
 8005480:	443b      	add	r3, r7
 8005482:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005486:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1df      	bne.n	8005456 <gen_numname+0x7a>
	ns[i] = '~';
 8005496:	f107 0214 	add.w	r2, r7, #20
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	4413      	add	r3, r2
 800549e:	227e      	movs	r2, #126	; 0x7e
 80054a0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	e016      	b.n	80054d6 <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	4413      	add	r3, r2
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d90d      	bls.n	80054d0 <gen_numname+0xf4>
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	4413      	add	r3, r2
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2bff      	cmp	r3, #255	; 0xff
 80054be:	d007      	beq.n	80054d0 <gen_numname+0xf4>
			if (j == i - 1) break;
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	3b01      	subs	r3, #1
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d010      	beq.n	80054ec <gen_numname+0x110>
			j++;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	3301      	adds	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	3301      	adds	r3, #1
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
 80054d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	429a      	cmp	r2, r3
 80054dc:	d207      	bcs.n	80054ee <gen_numname+0x112>
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	4413      	add	r3, r2
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d1de      	bne.n	80054a8 <gen_numname+0xcc>
 80054ea:	e000      	b.n	80054ee <gen_numname+0x112>
			if (j == i - 1) break;
 80054ec:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d807      	bhi.n	8005504 <gen_numname+0x128>
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80054fa:	3330      	adds	r3, #48	; 0x30
 80054fc:	443b      	add	r3, r7
 80054fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005502:	e000      	b.n	8005506 <gen_numname+0x12a>
 8005504:	2120      	movs	r1, #32
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	627a      	str	r2, [r7, #36]	; 0x24
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	460a      	mov	r2, r1
 8005512:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2b07      	cmp	r3, #7
 8005518:	d9e9      	bls.n	80054ee <gen_numname+0x112>
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	3730      	adds	r7, #48	; 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005530:	230b      	movs	r3, #11
 8005532:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	0852      	lsrs	r2, r2, #1
 800553a:	01db      	lsls	r3, r3, #7
 800553c:	4313      	orrs	r3, r2
 800553e:	b2da      	uxtb	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	6079      	str	r1, [r7, #4]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	4413      	add	r3, r2
 800554a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	3b01      	subs	r3, #1
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ed      	bne.n	8005534 <sum_sfn+0x10>
	return sum;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005574:	2100      	movs	r1, #0
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fc72 	bl	8004e60 <dir_sdi>
 800557c:	4603      	mov	r3, r0
 800557e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <dir_find+0x24>
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	e0a9      	b.n	80056de <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800558a:	23ff      	movs	r3, #255	; 0xff
 800558c:	753b      	strb	r3, [r7, #20]
 800558e:	7d3b      	ldrb	r3, [r7, #20]
 8005590:	757b      	strb	r3, [r7, #21]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	4619      	mov	r1, r3
 80055a0:	6938      	ldr	r0, [r7, #16]
 80055a2:	f7ff f87b 	bl	800469c <move_window>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8090 	bne.w	80056d2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055ba:	7dbb      	ldrb	r3, [r7, #22]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <dir_find+0x60>
 80055c0:	2304      	movs	r3, #4
 80055c2:	75fb      	strb	r3, [r7, #23]
 80055c4:	e08a      	b.n	80056dc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	330b      	adds	r3, #11
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7bfa      	ldrb	r2, [r7, #15]
 80055d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	2be5      	cmp	r3, #229	; 0xe5
 80055de:	d007      	beq.n	80055f0 <dir_find+0x8a>
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <dir_find+0x98>
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d006      	beq.n	80055fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055f0:	23ff      	movs	r3, #255	; 0xff
 80055f2:	757b      	strb	r3, [r7, #21]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
 80055fc:	e05e      	b.n	80056bc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d136      	bne.n	8005672 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d154      	bne.n	80056bc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005612:	7dbb      	ldrb	r3, [r7, #22]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	7b5b      	ldrb	r3, [r3, #13]
 8005622:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562a:	75bb      	strb	r3, [r7, #22]
 800562c:	7dbb      	ldrb	r3, [r7, #22]
 800562e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005638:	7dba      	ldrb	r2, [r7, #22]
 800563a:	7d7b      	ldrb	r3, [r7, #21]
 800563c:	429a      	cmp	r2, r3
 800563e:	d115      	bne.n	800566c <dir_find+0x106>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	330d      	adds	r3, #13
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	7d3a      	ldrb	r2, [r7, #20]
 800564a:	429a      	cmp	r2, r3
 800564c:	d10e      	bne.n	800566c <dir_find+0x106>
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7ff fde7 	bl	800522c <cmp_lfn>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <dir_find+0x106>
 8005664:	7d7b      	ldrb	r3, [r7, #21]
 8005666:	3b01      	subs	r3, #1
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e000      	b.n	800566e <dir_find+0x108>
 800566c:	23ff      	movs	r3, #255	; 0xff
 800566e:	757b      	strb	r3, [r7, #21]
 8005670:	e024      	b.n	80056bc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005672:	7d7b      	ldrb	r3, [r7, #21]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <dir_find+0x126>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ff51 	bl	8005524 <sum_sfn>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	7d3b      	ldrb	r3, [r7, #20]
 8005688:	4293      	cmp	r3, r2
 800568a:	d024      	beq.n	80056d6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <dir_find+0x14a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a18      	ldr	r0, [r3, #32]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3324      	adds	r3, #36	; 0x24
 80056a2:	220b      	movs	r2, #11
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fe fe07 	bl	80042b8 <mem_cmp>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d014      	beq.n	80056da <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056b0:	23ff      	movs	r3, #255	; 0xff
 80056b2:	757b      	strb	r3, [r7, #21]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056bc:	2100      	movs	r1, #0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fc57 	bl	8004f72 <dir_next>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f43f af65 	beq.w	800559a <dir_find+0x34>
 80056d0:	e004      	b.n	80056dc <dir_find+0x176>
		if (res != FR_OK) break;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056da:	bf00      	nop

	return res;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08c      	sub	sp, #48	; 0x30
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <dir_register+0x20>
 8005704:	2306      	movs	r3, #6
 8005706:	e0e0      	b.n	80058ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005708:	2300      	movs	r3, #0
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	e002      	b.n	8005714 <dir_register+0x2c>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	3301      	adds	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f4      	bne.n	800570e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800572a:	f107 030c 	add.w	r3, r7, #12
 800572e:	220c      	movs	r2, #12
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fd85 	bl	8004240 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d032      	beq.n	80057a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005748:	2301      	movs	r3, #1
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
 800574c:	e016      	b.n	800577c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	f107 010c 	add.w	r1, r7, #12
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	f7ff fe3d 	bl	80053dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff feff 	bl	8005566 <dir_find>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800576e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	3301      	adds	r3, #1
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	2b63      	cmp	r3, #99	; 0x63
 8005780:	d9e5      	bls.n	800574e <dir_register+0x66>
 8005782:	e000      	b.n	8005786 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005784:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	2b64      	cmp	r3, #100	; 0x64
 800578a:	d101      	bne.n	8005790 <dir_register+0xa8>
 800578c:	2307      	movs	r3, #7
 800578e:	e09c      	b.n	80058ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005794:	2b04      	cmp	r3, #4
 8005796:	d002      	beq.n	800579e <dir_register+0xb6>
 8005798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800579c:	e095      	b.n	80058ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800579e:	7dfa      	ldrb	r2, [r7, #23]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <dir_register+0xd8>
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	330c      	adds	r3, #12
 80057b4:	4a47      	ldr	r2, [pc, #284]	; (80058d4 <dir_register+0x1ec>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	3301      	adds	r3, #1
 80057be:	e000      	b.n	80057c2 <dir_register+0xda>
 80057c0:	2301      	movs	r3, #1
 80057c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fca9 	bl	800511e <dir_alloc>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d148      	bne.n	800586c <dir_register+0x184>
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	3b01      	subs	r3, #1
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d042      	beq.n	800586c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fb34 	bl	8004e60 <dir_sdi>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80057fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d132      	bne.n	800586c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3324      	adds	r3, #36	; 0x24
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fe8a 	bl	8005524 <sum_sfn>
 8005810:	4603      	mov	r3, r0
 8005812:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	4619      	mov	r1, r3
 800581a:	69f8      	ldr	r0, [r7, #28]
 800581c:	f7fe ff3e 	bl	800469c <move_window>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11d      	bne.n	800586a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	6918      	ldr	r0, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a19      	ldr	r1, [r3, #32]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	7efb      	ldrb	r3, [r7, #27]
 800583c:	f7ff fd66 	bl	800530c <put_lfn>
				fs->wflag = 1;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2201      	movs	r2, #1
 8005844:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005846:	2100      	movs	r1, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff fb92 	bl	8004f72 <dir_next>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <dir_register+0x184>
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	3b01      	subs	r3, #1
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1d5      	bne.n	8005814 <dir_register+0x12c>
 8005868:	e000      	b.n	800586c <dir_register+0x184>
				if (res != FR_OK) break;
 800586a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800586c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005870:	2b00      	cmp	r3, #0
 8005872:	d128      	bne.n	80058c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	4619      	mov	r1, r3
 800587a:	69f8      	ldr	r0, [r7, #28]
 800587c:	f7fe ff0e 	bl	800469c <move_window>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d11b      	bne.n	80058c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	2220      	movs	r2, #32
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fcf3 	bl	8004282 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a18      	ldr	r0, [r3, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	220b      	movs	r2, #11
 80058a6:	4619      	mov	r1, r3
 80058a8:	f7fe fcca 	bl	8004240 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	330c      	adds	r3, #12
 80058b8:	f002 0218 	and.w	r2, r2, #24
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2201      	movs	r2, #1
 80058c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	4ec4ec4f 	.word	0x4ec4ec4f

080058d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	61ba      	str	r2, [r7, #24]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005908:	2b1f      	cmp	r3, #31
 800590a:	d96a      	bls.n	80059e2 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800590c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800590e:	2b2f      	cmp	r3, #47	; 0x2f
 8005910:	d006      	beq.n	8005920 <create_name+0x48>
 8005912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005914:	2b5c      	cmp	r3, #92	; 0x5c
 8005916:	d110      	bne.n	800593a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005918:	e002      	b.n	8005920 <create_name+0x48>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	3301      	adds	r3, #1
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b2f      	cmp	r3, #47	; 0x2f
 800592a:	d0f6      	beq.n	800591a <create_name+0x42>
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b5c      	cmp	r3, #92	; 0x5c
 8005936:	d0f0      	beq.n	800591a <create_name+0x42>
			break;
 8005938:	e054      	b.n	80059e4 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2bfe      	cmp	r3, #254	; 0xfe
 800593e:	d901      	bls.n	8005944 <create_name+0x6c>
 8005940:	2306      	movs	r3, #6
 8005942:	e1bf      	b.n	8005cc4 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005946:	b2db      	uxtb	r3, r3
 8005948:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800594a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d925      	bls.n	800599e <create_name+0xc6>
 8005952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2bff      	cmp	r3, #255	; 0xff
 8005958:	d021      	beq.n	800599e <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	61ba      	str	r2, [r7, #24]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800596a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b29a      	uxth	r2, r3
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005974:	b29b      	uxth	r3, r3
 8005976:	4413      	add	r3, r2
 8005978:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800597a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800597e:	2b3f      	cmp	r3, #63	; 0x3f
 8005980:	d903      	bls.n	800598a <create_name+0xb2>
 8005982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005986:	2b7e      	cmp	r3, #126	; 0x7e
 8005988:	d909      	bls.n	800599e <create_name+0xc6>
 800598a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800598e:	2b00      	cmp	r3, #0
 8005990:	da03      	bge.n	800599a <create_name+0xc2>
 8005992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005996:	2bff      	cmp	r3, #255	; 0xff
 8005998:	d101      	bne.n	800599e <create_name+0xc6>
 800599a:	2306      	movs	r3, #6
 800599c:	e192      	b.n	8005cc4 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800599e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a0:	2101      	movs	r1, #1
 80059a2:	4618      	mov	r0, r3
 80059a4:	f002 f8ae 	bl	8007b04 <ff_convert>
 80059a8:	4603      	mov	r3, r0
 80059aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80059ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <create_name+0xde>
 80059b2:	2306      	movs	r3, #6
 80059b4:	e186      	b.n	8005cc4 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80059b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ba:	d809      	bhi.n	80059d0 <create_name+0xf8>
 80059bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059be:	4619      	mov	r1, r3
 80059c0:	489a      	ldr	r0, [pc, #616]	; (8005c2c <create_name+0x354>)
 80059c2:	f7fe fca0 	bl	8004306 <chk_chr>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <create_name+0xf8>
 80059cc:	2306      	movs	r3, #6
 80059ce:	e179      	b.n	8005cc4 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	617a      	str	r2, [r7, #20]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80059e0:	e78a      	b.n	80058f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80059e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	441a      	add	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80059ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f0:	2b1f      	cmp	r3, #31
 80059f2:	d801      	bhi.n	80059f8 <create_name+0x120>
 80059f4:	2304      	movs	r3, #4
 80059f6:	e000      	b.n	80059fa <create_name+0x122>
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059fe:	e011      	b.n	8005a24 <create_name+0x14c>
		w = lfn[di - 1];
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	3b01      	subs	r3, #1
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d002      	beq.n	8005a1e <create_name+0x146>
 8005a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a1c:	d106      	bne.n	8005a2c <create_name+0x154>
		di--;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ea      	bne.n	8005a00 <create_name+0x128>
 8005a2a:	e000      	b.n	8005a2e <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8005a2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	2200      	movs	r2, #0
 8005a38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <create_name+0x16c>
 8005a40:	2306      	movs	r3, #6
 8005a42:	e13f      	b.n	8005cc4 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	220b      	movs	r2, #11
 8005a4a:	2120      	movs	r1, #32
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fc18 	bl	8004282 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e002      	b.n	8005a5e <create_name+0x186>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d0f5      	beq.n	8005a58 <create_name+0x180>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	2b2e      	cmp	r3, #46	; 0x2e
 8005a78:	d0ee      	beq.n	8005a58 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <create_name+0x1bc>
 8005a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a84:	f043 0303 	orr.w	r3, r3, #3
 8005a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005a8c:	e002      	b.n	8005a94 <create_name+0x1bc>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <create_name+0x1d6>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8005aac:	d1ef      	bne.n	8005a8e <create_name+0x1b6>

	i = b = 0; ni = 8;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	2308      	movs	r3, #8
 8005aba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80aa 	beq.w	8005c28 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d006      	beq.n	8005ae8 <create_name+0x210>
 8005ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005adc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ade:	d10a      	bne.n	8005af6 <create_name+0x21e>
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d006      	beq.n	8005af6 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8005ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aec:	f043 0303 	orr.w	r3, r3, #3
 8005af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005af4:	e097      	b.n	8005c26 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d203      	bcs.n	8005b06 <create_name+0x22e>
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d123      	bne.n	8005b4e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b0b      	cmp	r3, #11
 8005b0a:	d106      	bne.n	8005b1a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8005b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b10:	f043 0303 	orr.w	r3, r3, #3
 8005b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b18:	e08d      	b.n	8005c36 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d005      	beq.n	8005b2e <create_name+0x256>
 8005b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b26:	f043 0303 	orr.w	r3, r3, #3
 8005b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d87e      	bhi.n	8005c34 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	230b      	movs	r3, #11
 8005b40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b4c:	e06b      	b.n	8005c26 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b50:	2b7f      	cmp	r3, #127	; 0x7f
 8005b52:	d910      	bls.n	8005b76 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8005b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f002 f832 	bl	8007bc0 <ff_wtoupper>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 ffcf 	bl	8007b04 <ff_convert>
 8005b66:	4603      	mov	r3, r0
 8005b68:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b6e:	f043 0302 	orr.w	r3, r3, #2
 8005b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8005b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b78:	2bff      	cmp	r3, #255	; 0xff
 8005b7a:	d91a      	bls.n	8005bb2 <create_name+0x2da>
			if (i >= ni - 1) {
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d308      	bcc.n	8005b98 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8005b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b8a:	f043 0303 	orr.w	r3, r3, #3
 8005b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	e046      	b.n	8005c26 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8005b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	b299      	uxth	r1, r3
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	623a      	str	r2, [r7, #32]
 8005ba4:	b2c9      	uxtb	r1, r1
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4413      	add	r3, r2
 8005baa:	460a      	mov	r2, r1
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bb0:	e02f      	b.n	8005c12 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <create_name+0x2f0>
 8005bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bba:	4619      	mov	r1, r3
 8005bbc:	481c      	ldr	r0, [pc, #112]	; (8005c30 <create_name+0x358>)
 8005bbe:	f7fe fba2 	bl	8004306 <chk_chr>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005bc8:	235f      	movs	r3, #95	; 0x5f
 8005bca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bd0:	f043 0303 	orr.w	r3, r3, #3
 8005bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bd8:	e01b      	b.n	8005c12 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d909      	bls.n	8005bf4 <create_name+0x31c>
 8005be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005be2:	2b5a      	cmp	r3, #90	; 0x5a
 8005be4:	d806      	bhi.n	8005bf4 <create_name+0x31c>
					b |= 2;
 8005be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bf2:	e00e      	b.n	8005c12 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bf6:	2b60      	cmp	r3, #96	; 0x60
 8005bf8:	d90b      	bls.n	8005c12 <create_name+0x33a>
 8005bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bfc:	2b7a      	cmp	r3, #122	; 0x7a
 8005bfe:	d808      	bhi.n	8005c12 <create_name+0x33a>
						b |= 1; w -= 0x20;
 8005c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c0e:	3b20      	subs	r3, #32
 8005c10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	623a      	str	r2, [r7, #32]
 8005c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c1a:	b2d1      	uxtb	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	460a      	mov	r2, r1
 8005c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005c26:	e749      	b.n	8005abc <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8005c28:	bf00      	nop
 8005c2a:	e004      	b.n	8005c36 <create_name+0x35e>
 8005c2c:	0800afa0 	.word	0x0800afa0
 8005c30:	0800afac 	.word	0x0800afac
			if (si > di) break;			/* No extension */
 8005c34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c3c:	2be5      	cmp	r3, #229	; 0xe5
 8005c3e:	d103      	bne.n	8005c48 <create_name+0x370>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2205      	movs	r2, #5
 8005c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d104      	bne.n	8005c58 <create_name+0x380>
 8005c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b0c      	cmp	r3, #12
 8005c62:	d005      	beq.n	8005c70 <create_name+0x398>
 8005c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d105      	bne.n	8005c7c <create_name+0x3a4>
 8005c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d117      	bne.n	8005cb8 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d105      	bne.n	8005ca0 <create_name+0x3c8>
 8005c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d105      	bne.n	8005cb8 <create_name+0x3e0>
 8005cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cb0:	f043 0308 	orr.w	r3, r3, #8
 8005cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005cbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005cc2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3728      	adds	r7, #40	; 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ce0:	e002      	b.n	8005ce8 <follow_path+0x1c>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b2f      	cmp	r3, #47	; 0x2f
 8005cee:	d0f8      	beq.n	8005ce2 <follow_path+0x16>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8005cf6:	d0f4      	beq.n	8005ce2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b1f      	cmp	r3, #31
 8005d04:	d80a      	bhi.n	8005d1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff f8a5 	bl	8004e60 <dir_sdi>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]
 8005d1a:	e048      	b.n	8005dae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fdd9 	bl	80058d8 <create_name>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d139      	bne.n	8005da4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fc18 	bl	8005566 <dir_find>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d12c      	bne.n	8005da8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d127      	bne.n	8005da8 <follow_path+0xdc>
 8005d58:	2305      	movs	r3, #5
 8005d5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d5c:	e024      	b.n	8005da8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d121      	bne.n	8005dac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	799b      	ldrb	r3, [r3, #6]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d74:	2305      	movs	r3, #5
 8005d76:	75fb      	strb	r3, [r7, #23]
 8005d78:	e019      	b.n	8005dae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	8992      	ldrh	r2, [r2, #12]
 8005d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d8c:	fb00 f202 	mul.w	r2, r0, r2
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	440b      	add	r3, r1
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fa08 	bl	80051ac <ld_clust>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005da2:	e7bb      	b.n	8005d1c <follow_path+0x50>
			if (res != FR_OK) break;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <follow_path+0xe2>
				break;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005dac:	bf00      	nop
			}
		}
	}

	return res;
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d031      	beq.n	8005e32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e002      	b.n	8005ddc <get_ldnumber+0x24>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b1f      	cmp	r3, #31
 8005de2:	d903      	bls.n	8005dec <get_ldnumber+0x34>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b3a      	cmp	r3, #58	; 0x3a
 8005dea:	d1f4      	bne.n	8005dd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b3a      	cmp	r3, #58	; 0x3a
 8005df2:	d11c      	bne.n	8005e2e <get_ldnumber+0x76>
			tp = *path;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	60fa      	str	r2, [r7, #12]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	3b30      	subs	r3, #48	; 0x30
 8005e04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d80e      	bhi.n	8005e2a <get_ldnumber+0x72>
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d10a      	bne.n	8005e2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <get_ldnumber+0x72>
					vol = (int)i;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	e002      	b.n	8005e34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e32:	693b      	ldr	r3, [r7, #16]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	70da      	strb	r2, [r3, #3]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fe fc1e 	bl	800469c <move_window>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <check_fs+0x2a>
 8005e66:	2304      	movs	r3, #4
 8005e68:	e038      	b.n	8005edc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3338      	adds	r3, #56	; 0x38
 8005e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f962 	bl	800413c <ld_word>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <check_fs+0x48>
 8005e84:	2303      	movs	r3, #3
 8005e86:	e029      	b.n	8005edc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e8e:	2be9      	cmp	r3, #233	; 0xe9
 8005e90:	d009      	beq.n	8005ea6 <check_fs+0x66>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e98:	2beb      	cmp	r3, #235	; 0xeb
 8005e9a:	d11e      	bne.n	8005eda <check_fs+0x9a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ea2:	2b90      	cmp	r3, #144	; 0x90
 8005ea4:	d119      	bne.n	8005eda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3338      	adds	r3, #56	; 0x38
 8005eaa:	3336      	adds	r3, #54	; 0x36
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f95d 	bl	800416c <ld_dword>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <check_fs+0xa4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d101      	bne.n	8005ec2 <check_fs+0x82>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e00c      	b.n	8005edc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	3352      	adds	r3, #82	; 0x52
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f94f 	bl	800416c <ld_dword>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <check_fs+0xa8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <check_fs+0x9a>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005eda:	2302      	movs	r3, #2
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	00544146 	.word	0x00544146
 8005ee8:	33544146 	.word	0x33544146

08005eec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b096      	sub	sp, #88	; 0x58
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ff59 	bl	8005db8 <get_ldnumber>
 8005f06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da01      	bge.n	8005f12 <find_volume+0x26>
 8005f0e:	230b      	movs	r3, #11
 8005f10:	e262      	b.n	80063d8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f12:	4a9f      	ldr	r2, [pc, #636]	; (8006190 <find_volume+0x2a4>)
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <find_volume+0x3a>
 8005f22:	230c      	movs	r3, #12
 8005f24:	e258      	b.n	80063d8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01a      	beq.n	8005f72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe f85d 	bl	8004000 <disk_status>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <find_volume+0x82>
 8005f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e234      	b.n	80063d8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e232      	b.n	80063d8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe f855 	bl	8004034 <disk_initialize>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e21b      	b.n	80063d8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <find_volume+0xca>
 8005fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005fb2:	230a      	movs	r3, #10
 8005fb4:	e210      	b.n	80063d8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	7858      	ldrb	r0, [r3, #1]
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	f7fe f89d 	bl	8004100 <disk_ioctl>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <find_volume+0xe4>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e203      	b.n	80063d8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	899b      	ldrh	r3, [r3, #12]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d80d      	bhi.n	8005ff6 <find_volume+0x10a>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	899b      	ldrh	r3, [r3, #12]
 8005fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe2:	d308      	bcc.n	8005ff6 <find_volume+0x10a>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	899b      	ldrh	r3, [r3, #12]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	899b      	ldrh	r3, [r3, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <find_volume+0x10e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e1ee      	b.n	80063d8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006002:	f7ff ff1d 	bl	8005e40 <check_fs>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800600c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006010:	2b02      	cmp	r3, #2
 8006012:	d149      	bne.n	80060a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006014:	2300      	movs	r3, #0
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
 8006018:	e01e      	b.n	8006058 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006028:	4413      	add	r3, r2
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	3304      	adds	r3, #4
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d006      	beq.n	8006044 <find_volume+0x158>
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	3308      	adds	r3, #8
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe f896 	bl	800416c <ld_dword>
 8006040:	4602      	mov	r2, r0
 8006042:	e000      	b.n	8006046 <find_volume+0x15a>
 8006044:	2200      	movs	r2, #0
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	3358      	adds	r3, #88	; 0x58
 800604c:	443b      	add	r3, r7
 800604e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006054:	3301      	adds	r3, #1
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
 8006058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605a:	2b03      	cmp	r3, #3
 800605c:	d9dd      	bls.n	800601a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800605e:	2300      	movs	r3, #0
 8006060:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <find_volume+0x182>
 8006068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606a:	3b01      	subs	r3, #1
 800606c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800606e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	3358      	adds	r3, #88	; 0x58
 8006074:	443b      	add	r3, r7
 8006076:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800607a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800607c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <find_volume+0x1a2>
 8006082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006086:	f7ff fedb 	bl	8005e40 <check_fs>
 800608a:	4603      	mov	r3, r0
 800608c:	e000      	b.n	8006090 <find_volume+0x1a4>
 800608e:	2303      	movs	r3, #3
 8006090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006098:	2b01      	cmp	r3, #1
 800609a:	d905      	bls.n	80060a8 <find_volume+0x1bc>
 800609c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609e:	3301      	adds	r3, #1
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
 80060a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d9e2      	bls.n	800606e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d101      	bne.n	80060b4 <find_volume+0x1c8>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e191      	b.n	80063d8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d901      	bls.n	80060c0 <find_volume+0x1d4>
 80060bc:	230d      	movs	r3, #13
 80060be:	e18b      	b.n	80063d8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	3338      	adds	r3, #56	; 0x38
 80060c4:	330b      	adds	r3, #11
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe f838 	bl	800413c <ld_word>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	899b      	ldrh	r3, [r3, #12]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <find_volume+0x1f0>
 80060d8:	230d      	movs	r3, #13
 80060da:	e17d      	b.n	80063d8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	3338      	adds	r3, #56	; 0x38
 80060e0:	3316      	adds	r3, #22
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe f82a 	bl	800413c <ld_word>
 80060e8:	4603      	mov	r3, r0
 80060ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80060ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <find_volume+0x214>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	3338      	adds	r3, #56	; 0x38
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe f837 	bl	800416c <ld_dword>
 80060fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006104:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d005      	beq.n	8006124 <find_volume+0x238>
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	789b      	ldrb	r3, [r3, #2]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d001      	beq.n	8006124 <find_volume+0x238>
 8006120:	230d      	movs	r3, #13
 8006122:	e159      	b.n	80063d8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	789b      	ldrb	r3, [r3, #2]
 8006128:	461a      	mov	r2, r3
 800612a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612c:	fb02 f303 	mul.w	r3, r2, r3
 8006130:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006138:	b29a      	uxth	r2, r3
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	895b      	ldrh	r3, [r3, #10]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <find_volume+0x26c>
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	895b      	ldrh	r3, [r3, #10]
 800614a:	461a      	mov	r2, r3
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	895b      	ldrh	r3, [r3, #10]
 8006150:	3b01      	subs	r3, #1
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <find_volume+0x270>
 8006158:	230d      	movs	r3, #13
 800615a:	e13d      	b.n	80063d8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	3338      	adds	r3, #56	; 0x38
 8006160:	3311      	adds	r3, #17
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd ffea 	bl	800413c <ld_word>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	891b      	ldrh	r3, [r3, #8]
 8006174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006176:	8992      	ldrh	r2, [r2, #12]
 8006178:	0952      	lsrs	r2, r2, #5
 800617a:	b292      	uxth	r2, r2
 800617c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006180:	fb01 f202 	mul.w	r2, r1, r2
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <find_volume+0x2a8>
 800618c:	230d      	movs	r3, #13
 800618e:	e123      	b.n	80063d8 <find_volume+0x4ec>
 8006190:	20003390 	.word	0x20003390

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	3338      	adds	r3, #56	; 0x38
 8006198:	3313      	adds	r3, #19
 800619a:	4618      	mov	r0, r3
 800619c:	f7fd ffce 	bl	800413c <ld_word>
 80061a0:	4603      	mov	r3, r0
 80061a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <find_volume+0x2cc>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	3338      	adds	r3, #56	; 0x38
 80061ae:	3320      	adds	r3, #32
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fd ffdb 	bl	800416c <ld_dword>
 80061b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	3338      	adds	r3, #56	; 0x38
 80061bc:	330e      	adds	r3, #14
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fd ffbc 	bl	800413c <ld_word>
 80061c4:	4603      	mov	r3, r0
 80061c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <find_volume+0x2e6>
 80061ce:	230d      	movs	r3, #13
 80061d0:	e102      	b.n	80063d8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d6:	4413      	add	r3, r2
 80061d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061da:	8911      	ldrh	r1, [r2, #8]
 80061dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061de:	8992      	ldrh	r2, [r2, #12]
 80061e0:	0952      	lsrs	r2, r2, #5
 80061e2:	b292      	uxth	r2, r2
 80061e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80061e8:	b292      	uxth	r2, r2
 80061ea:	4413      	add	r3, r2
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d201      	bcs.n	80061fa <find_volume+0x30e>
 80061f6:	230d      	movs	r3, #13
 80061f8:	e0ee      	b.n	80063d8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006202:	8952      	ldrh	r2, [r2, #10]
 8006204:	fbb3 f3f2 	udiv	r3, r3, r2
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <find_volume+0x328>
 8006210:	230d      	movs	r3, #13
 8006212:	e0e1      	b.n	80063d8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006214:	2303      	movs	r3, #3
 8006216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006220:	4293      	cmp	r3, r2
 8006222:	d802      	bhi.n	800622a <find_volume+0x33e>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006230:	4293      	cmp	r3, r2
 8006232:	d802      	bhi.n	800623a <find_volume+0x34e>
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006246:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006248:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	441a      	add	r2, r3
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	441a      	add	r2, r3
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800625c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006260:	2b03      	cmp	r3, #3
 8006262:	d11e      	bne.n	80062a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	3338      	adds	r3, #56	; 0x38
 8006268:	332a      	adds	r3, #42	; 0x2a
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd ff66 	bl	800413c <ld_word>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <find_volume+0x38e>
 8006276:	230d      	movs	r3, #13
 8006278:	e0ae      	b.n	80063d8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	891b      	ldrh	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <find_volume+0x39a>
 8006282:	230d      	movs	r3, #13
 8006284:	e0a8      	b.n	80063d8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	3338      	adds	r3, #56	; 0x38
 800628a:	332c      	adds	r3, #44	; 0x2c
 800628c:	4618      	mov	r0, r3
 800628e:	f7fd ff6d 	bl	800416c <ld_dword>
 8006292:	4602      	mov	r2, r0
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
 80062a0:	e01f      	b.n	80062e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	891b      	ldrh	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <find_volume+0x3c2>
 80062aa:	230d      	movs	r3, #13
 80062ac:	e094      	b.n	80063d8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b4:	441a      	add	r2, r3
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <find_volume+0x3de>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	e00a      	b.n	80062e0 <find_volume+0x3f4>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	085a      	lsrs	r2, r3, #1
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80062e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	899b      	ldrh	r3, [r3, #12]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ee:	440b      	add	r3, r1
 80062f0:	3b01      	subs	r3, #1
 80062f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062f4:	8989      	ldrh	r1, [r1, #12]
 80062f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d201      	bcs.n	8006302 <find_volume+0x416>
 80062fe:	230d      	movs	r3, #13
 8006300:	e06a      	b.n	80063d8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	619a      	str	r2, [r3, #24]
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2280      	movs	r2, #128	; 0x80
 8006316:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800631c:	2b03      	cmp	r3, #3
 800631e:	d149      	bne.n	80063b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	3338      	adds	r3, #56	; 0x38
 8006324:	3330      	adds	r3, #48	; 0x30
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd ff08 	bl	800413c <ld_word>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d140      	bne.n	80063b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006334:	3301      	adds	r3, #1
 8006336:	4619      	mov	r1, r3
 8006338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800633a:	f7fe f9af 	bl	800469c <move_window>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d137      	bne.n	80063b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2200      	movs	r2, #0
 8006348:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	3338      	adds	r3, #56	; 0x38
 800634e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd fef2 	bl	800413c <ld_word>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006360:	429a      	cmp	r2, r3
 8006362:	d127      	bne.n	80063b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	3338      	adds	r3, #56	; 0x38
 8006368:	4618      	mov	r0, r3
 800636a:	f7fd feff 	bl	800416c <ld_dword>
 800636e:	4603      	mov	r3, r0
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <find_volume+0x4f4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d11e      	bne.n	80063b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	3338      	adds	r3, #56	; 0x38
 800637a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800637e:	4618      	mov	r0, r3
 8006380:	f7fd fef4 	bl	800416c <ld_dword>
 8006384:	4603      	mov	r3, r0
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <find_volume+0x4f8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d113      	bne.n	80063b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	3338      	adds	r3, #56	; 0x38
 8006390:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fee9 	bl	800416c <ld_dword>
 800639a:	4602      	mov	r2, r0
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	3338      	adds	r3, #56	; 0x38
 80063a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fd fedf 	bl	800416c <ld_dword>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <find_volume+0x4fc>)
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <find_volume+0x4fc>)
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <find_volume+0x4fc>)
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80063d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063d2:	f7fe f8fb 	bl	80045cc <clear_lock>
#endif
	return FR_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3758      	adds	r7, #88	; 0x58
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	41615252 	.word	0x41615252
 80063e4:	61417272 	.word	0x61417272
 80063e8:	20003394 	.word	0x20003394

080063ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80063f6:	2309      	movs	r3, #9
 80063f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <validate+0x4e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d018      	beq.n	800643a <validate+0x4e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <validate+0x4e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	889a      	ldrh	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	88db      	ldrh	r3, [r3, #6]
 800641c:	429a      	cmp	r2, r3
 800641e:	d10c      	bne.n	800643a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fd fdea 	bl	8004000 <disk_status>
 800642c:	4603      	mov	r3, r0
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <validate+0x4e>
			res = FR_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <validate+0x5a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	e000      	b.n	8006448 <validate+0x5c>
 8006446:	2300      	movs	r3, #0
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	6013      	str	r3, [r2, #0]
	return res;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800646a:	f107 0310 	add.w	r3, r7, #16
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fca2 	bl	8005db8 <get_ldnumber>
 8006474:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	da01      	bge.n	8006480 <f_mount+0x28>
 800647c:	230b      	movs	r3, #11
 800647e:	e02b      	b.n	80064d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006480:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <f_mount+0x88>)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006488:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006490:	69b8      	ldr	r0, [r7, #24]
 8006492:	f7fe f89b 	bl	80045cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	490d      	ldr	r1, [pc, #52]	; (80064e0 <f_mount+0x88>)
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <f_mount+0x66>
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <f_mount+0x6a>
 80064be:	2300      	movs	r3, #0
 80064c0:	e00a      	b.n	80064d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80064c2:	f107 010c 	add.w	r1, r7, #12
 80064c6:	f107 0308 	add.w	r3, r7, #8
 80064ca:	2200      	movs	r2, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fd0d 	bl	8005eec <find_volume>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20003390 	.word	0x20003390

080064e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80064f4:	6018      	str	r0, [r3, #0]
 80064f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80064fe:	6019      	str	r1, [r3, #0]
 8006500:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006504:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006508:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800650a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800650e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <f_open+0x38>
 8006518:	2309      	movs	r3, #9
 800651a:	e2a6      	b.n	8006a6a <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800651c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006520:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006524:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006528:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006532:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8006534:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006538:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fcd0 	bl	8005eec <find_volume>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8006552:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 827a 	bne.w	8006a50 <f_open+0x56c>
		dj.obj.fs = fs;
 800655c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006560:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8006564:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006568:	f107 0214 	add.w	r2, r7, #20
 800656c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800656e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006572:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fba4 	bl	8005ccc <follow_path>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800658a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11e      	bne.n	80065d0 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006592:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8006596:	b25b      	sxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	da03      	bge.n	80065a4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800659c:	2306      	movs	r3, #6
 800659e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80065a2:	e015      	b.n	80065d0 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80065a8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80065c2:	4611      	mov	r1, r2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fd feb9 	bl	800433c <chk_lock>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80065d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80065d4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 031c 	and.w	r3, r3, #28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80a7 	beq.w	8006732 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 80065e4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01f      	beq.n	800662c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80065ec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d10e      	bne.n	8006612 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80065f4:	f7fd fefe 	bl	80043f4 <enq_lock>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <f_open+0x128>
 80065fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff f870 	bl	80056e8 <dir_register>
 8006608:	4603      	mov	r3, r0
 800660a:	e000      	b.n	800660e <f_open+0x12a>
 800660c:	2312      	movs	r3, #18
 800660e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006612:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006616:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800661a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800661e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e015      	b.n	8006658 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800662c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006630:	f003 0311 	and.w	r3, r3, #17
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <f_open+0x15c>
					res = FR_DENIED;
 8006638:	2307      	movs	r3, #7
 800663a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800663e:	e00b      	b.n	8006658 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006640:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006644:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <f_open+0x174>
 8006652:	2308      	movs	r3, #8
 8006654:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006658:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8088 	bne.w	8006772 <f_open+0x28e>
 8006662:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006666:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d07e      	beq.n	8006772 <f_open+0x28e>
				dw = GET_FATTIME();
 8006674:	f7fd fb0a 	bl	8003c8c <get_fattime>
 8006678:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800667c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006680:	330e      	adds	r3, #14
 8006682:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd fdae 	bl	80041e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800668c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006690:	3316      	adds	r3, #22
 8006692:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fda6 	bl	80041e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800669c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80066a0:	330b      	adds	r3, #11
 80066a2:	2220      	movs	r2, #32
 80066a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80066a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066aa:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fd7b 	bl	80051ac <ld_clust>
 80066b6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80066ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066be:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80066c2:	2200      	movs	r2, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fd90 	bl	80051ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80066ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80066ce:	331c      	adds	r3, #28
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd fd88 	bl	80041e8 <st_dword>
					fs->wflag = 1;
 80066d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066dc:	2201      	movs	r2, #1
 80066de:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80066e0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d044      	beq.n	8006772 <f_open+0x28e>
						dw = fs->winsect;
 80066e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80066f2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fa7a 	bl	8004bf6 <remove_chain>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8006708:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800670c:	2b00      	cmp	r3, #0
 800670e:	d130      	bne.n	8006772 <f_open+0x28e>
							res = move_window(fs, dw);
 8006710:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006714:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006718:	4618      	mov	r0, r3
 800671a:	f7fd ffbf 	bl	800469c <move_window>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006724:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006728:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800672c:	3a01      	subs	r2, #1
 800672e:	615a      	str	r2, [r3, #20]
 8006730:	e01f      	b.n	8006772 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006732:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11b      	bne.n	8006772 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800673a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <f_open+0x26a>
					res = FR_NO_FILE;
 8006746:	2304      	movs	r3, #4
 8006748:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800674c:	e011      	b.n	8006772 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800674e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006752:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <f_open+0x28e>
 8006760:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <f_open+0x28e>
						res = FR_DENIED;
 800676c:	2307      	movs	r3, #7
 800676e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8006772:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006776:	2b00      	cmp	r3, #0
 8006778:	d14a      	bne.n	8006810 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800677a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800677e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800678c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006790:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006794:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006798:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80067a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80067a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80067b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80067ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067ca:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd fe26 	bl	8004438 <inc_lock>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <f_open+0x32c>
 800680a:	2302      	movs	r3, #2
 800680c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006810:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 811b 	bne.w	8006a50 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800681a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800681e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fcc1 	bl	80051ac <ld_clust>
 800682a:	4602      	mov	r2, r0
 800682c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006830:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006838:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800683c:	331c      	adds	r3, #28
 800683e:	4618      	mov	r0, r3
 8006840:	f7fd fc94 	bl	800416c <ld_dword>
 8006844:	4602      	mov	r2, r0
 8006846:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800684a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006852:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006856:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2200      	movs	r2, #0
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006860:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006864:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006868:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006870:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006874:	88da      	ldrh	r2, [r3, #6]
 8006876:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800687a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006882:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006886:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006890:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006894:	7812      	ldrb	r2, [r2, #0]
 8006896:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006898:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800689c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80068a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80068b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068b8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80068c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3330      	adds	r3, #48	; 0x30
 80068ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fd fcd4 	bl	8004282 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80068da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068de:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80b1 	beq.w	8006a50 <f_open+0x56c>
 80068ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80a8 	beq.w	8006a50 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006900:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006904:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006910:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006918:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	461a      	mov	r2, r3
 8006920:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006924:	899b      	ldrh	r3, [r3, #12]
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800692e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006932:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800693e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006942:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800694e:	e021      	b.n	8006994 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8006950:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006954:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800695e:	4618      	mov	r0, r3
 8006960:	f7fd ff59 	bl	8004816 <get_fat>
 8006964:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8006968:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800696c:	2b01      	cmp	r3, #1
 800696e:	d802      	bhi.n	8006976 <f_open+0x492>
 8006970:	2302      	movs	r3, #2
 8006972:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006976:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d102      	bne.n	8006986 <f_open+0x4a2>
 8006980:	2301      	movs	r3, #1
 8006982:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006986:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800698a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006994:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <f_open+0x4c4>
 800699c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80069a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d8d3      	bhi.n	8006950 <f_open+0x46c>
				}
				fp->clust = clst;
 80069a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80069b6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80069b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d147      	bne.n	8006a50 <f_open+0x56c>
 80069c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069c4:	899b      	ldrh	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80069cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80069d0:	fb01 f202 	mul.w	r2, r1, r2
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d03a      	beq.n	8006a50 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80069da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069de:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fd fef8 	bl	80047d8 <clust2sect>
 80069e8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80069ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <f_open+0x518>
						res = FR_INT_ERR;
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80069fa:	e029      	b.n	8006a50 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80069fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a00:	899b      	ldrh	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006a08:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006a10:	441a      	add	r2, r3
 8006a12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a16:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006a1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a22:	7858      	ldrb	r0, [r3, #1]
 8006a24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f7fd fb1e 	bl	8004080 <disk_read>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <f_open+0x56c>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <f_open+0x582>
 8006a58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006a66:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08e      	sub	sp, #56	; 0x38
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f107 0214 	add.w	r2, r7, #20
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fca9 	bl	80063ec <validate>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d107      	bne.n	8006ab8 <f_read+0x44>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	7d5b      	ldrb	r3, [r3, #21]
 8006aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <f_read+0x4a>
 8006ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006abc:	e135      	b.n	8006d2a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	7d1b      	ldrb	r3, [r3, #20]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <f_read+0x5a>
 8006aca:	2307      	movs	r3, #7
 8006acc:	e12d      	b.n	8006d2a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	f240 811e 	bls.w	8006d20 <f_read+0x2ac>
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006ae8:	e11a      	b.n	8006d20 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	8992      	ldrh	r2, [r2, #12]
 8006af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af6:	fb01 f202 	mul.w	r2, r1, r2
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 80d5 	bne.w	8006cac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	8992      	ldrh	r2, [r2, #12]
 8006b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	8952      	ldrh	r2, [r2, #10]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	4013      	ands	r3, r2
 8006b16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d12f      	bne.n	8006b7e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2c:	e013      	b.n	8006b56 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fe f957 	bl	8004df0 <clmt_clust>
 8006b42:	6338      	str	r0, [r7, #48]	; 0x30
 8006b44:	e007      	b.n	8006b56 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fd fe61 	bl	8004816 <get_fat>
 8006b54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d804      	bhi.n	8006b66 <f_read+0xf2>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	755a      	strb	r2, [r3, #21]
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0e1      	b.n	8006d2a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d104      	bne.n	8006b78 <f_read+0x104>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	755a      	strb	r2, [r3, #21]
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0d8      	b.n	8006d2a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4619      	mov	r1, r3
 8006b86:	4610      	mov	r0, r2
 8006b88:	f7fd fe26 	bl	80047d8 <clust2sect>
 8006b8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <f_read+0x12a>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2202      	movs	r2, #2
 8006b98:	755a      	strb	r2, [r3, #21]
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e0c5      	b.n	8006d2a <f_read+0x2b6>
			sect += csect;
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	899b      	ldrh	r3, [r3, #12]
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d041      	beq.n	8006c3e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	4413      	add	r3, r2
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	8952      	ldrh	r2, [r2, #10]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d905      	bls.n	8006bd4 <f_read+0x160>
					cc = fs->csize - csect;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	895b      	ldrh	r3, [r3, #10]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	7858      	ldrb	r0, [r3, #1]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bde:	f7fd fa4f 	bl	8004080 <disk_read>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <f_read+0x17e>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	755a      	strb	r2, [r3, #21]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e09b      	b.n	8006d2a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	7d1b      	ldrb	r3, [r3, #20]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da18      	bge.n	8006c2e <f_read+0x1ba>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1a      	ldr	r2, [r3, #32]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d911      	bls.n	8006c2e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	8992      	ldrh	r2, [r2, #12]
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	18d0      	adds	r0, r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	899b      	ldrh	r3, [r3, #12]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f7fd fb09 	bl	8004240 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	899b      	ldrh	r3, [r3, #12]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006c3c:	e05c      	b.n	8006cf8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d02e      	beq.n	8006ca6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7d1b      	ldrb	r3, [r3, #20]
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da18      	bge.n	8006c84 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	7858      	ldrb	r0, [r3, #1]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	2301      	movs	r3, #1
 8006c62:	f7fd fa2d 	bl	80040c0 <disk_write>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <f_read+0x202>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	755a      	strb	r2, [r3, #21]
 8006c72:	2301      	movs	r3, #1
 8006c74:	e059      	b.n	8006d2a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	7d1b      	ldrb	r3, [r3, #20]
 8006c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	7858      	ldrb	r0, [r3, #1]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c8e:	2301      	movs	r3, #1
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	f7fd f9f5 	bl	8004080 <disk_read>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <f_read+0x232>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	755a      	strb	r2, [r3, #21]
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e041      	b.n	8006d2a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	899b      	ldrh	r3, [r3, #12]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	8992      	ldrh	r2, [r2, #12]
 8006cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cbe:	fb01 f202 	mul.w	r2, r1, r2
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	1ac3      	subs	r3, r0, r3
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d901      	bls.n	8006cd4 <f_read+0x260>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	8992      	ldrh	r2, [r2, #12]
 8006ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ce6:	fb00 f202 	mul.w	r2, r0, r2
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	440b      	add	r3, r1
 8006cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cf4:	f7fd faa4 	bl	8004240 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	4413      	add	r3, r2
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	441a      	add	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	619a      	str	r2, [r3, #24]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	441a      	add	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f47f aee1 	bne.w	8006aea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3738      	adds	r7, #56	; 0x38
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b08c      	sub	sp, #48	; 0x30
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f107 0210 	add.w	r2, r7, #16
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fb4a 	bl	80063ec <validate>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <f_write+0x44>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7d5b      	ldrb	r3, [r3, #21]
 8006d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <f_write+0x4a>
 8006d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d7a:	e16a      	b.n	8007052 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	7d1b      	ldrb	r3, [r3, #20]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <f_write+0x5a>
 8006d88:	2307      	movs	r3, #7
 8006d8a:	e162      	b.n	8007052 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	f080 814c 	bcs.w	8007036 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006da6:	e146      	b.n	8007036 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	8992      	ldrh	r2, [r2, #12]
 8006db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006db4:	fb01 f202 	mul.w	r2, r1, r2
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 80f1 	bne.w	8006fa2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	8992      	ldrh	r2, [r2, #12]
 8006dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	8952      	ldrh	r2, [r2, #10]
 8006dd0:	3a01      	subs	r2, #1
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d143      	bne.n	8006e64 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10c      	bne.n	8006dfe <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11a      	bne.n	8006e26 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fd ff63 	bl	8004cc0 <create_chain>
 8006dfa:	62b8      	str	r0, [r7, #40]	; 0x28
 8006dfc:	e013      	b.n	8006e26 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fd ffef 	bl	8004df0 <clmt_clust>
 8006e12:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e14:	e007      	b.n	8006e26 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f7fd ff4e 	bl	8004cc0 <create_chain>
 8006e24:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8109 	beq.w	8007040 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d104      	bne.n	8006e3e <f_write+0x10c>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2202      	movs	r2, #2
 8006e38:	755a      	strb	r2, [r3, #21]
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e109      	b.n	8007052 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d104      	bne.n	8006e50 <f_write+0x11e>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	755a      	strb	r2, [r3, #21]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e100      	b.n	8007052 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <f_write+0x132>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	7d1b      	ldrb	r3, [r3, #20]
 8006e68:	b25b      	sxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da18      	bge.n	8006ea0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	7858      	ldrb	r0, [r3, #1]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f7fd f91f 	bl	80040c0 <disk_write>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <f_write+0x160>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	755a      	strb	r2, [r3, #21]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e0df      	b.n	8007052 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	7d1b      	ldrb	r3, [r3, #20]
 8006e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fd fc95 	bl	80047d8 <clust2sect>
 8006eae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <f_write+0x18e>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	755a      	strb	r2, [r3, #21]
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e0c8      	b.n	8007052 <f_write+0x320>
			sect += csect;
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	899b      	ldrh	r3, [r3, #12]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d043      	beq.n	8006f64 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	8952      	ldrh	r2, [r2, #10]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d905      	bls.n	8006ef6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	895b      	ldrh	r3, [r3, #10]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	7858      	ldrb	r0, [r3, #1]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	69f9      	ldr	r1, [r7, #28]
 8006f00:	f7fd f8de 	bl	80040c0 <disk_write>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <f_write+0x1e2>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	755a      	strb	r2, [r3, #21]
 8006f10:	2301      	movs	r3, #1
 8006f12:	e09e      	b.n	8007052 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d918      	bls.n	8006f54 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1a      	ldr	r2, [r3, #32]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	8992      	ldrh	r2, [r2, #12]
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	18d1      	adds	r1, r2, r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	899b      	ldrh	r3, [r3, #12]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f7fd f97d 	bl	8004240 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	7d1b      	ldrb	r3, [r3, #20]
 8006f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	899b      	ldrh	r3, [r3, #12]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006f62:	e04b      	b.n	8006ffc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d016      	beq.n	8006f9c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d210      	bcs.n	8006f9c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	7858      	ldrb	r0, [r3, #1]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f84:	2301      	movs	r3, #1
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	f7fd f87a 	bl	8004080 <disk_read>
 8006f8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	755a      	strb	r2, [r3, #21]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e05a      	b.n	8007052 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	899b      	ldrh	r3, [r3, #12]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	8992      	ldrh	r2, [r2, #12]
 8006fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb4:	fb01 f202 	mul.w	r2, r1, r2
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	1ac3      	subs	r3, r0, r3
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d901      	bls.n	8006fca <f_write+0x298>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	8992      	ldrh	r2, [r2, #12]
 8006fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fdc:	fb00 f202 	mul.w	r2, r0, r2
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe6:	69f9      	ldr	r1, [r7, #28]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd f929 	bl	8004240 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	7d1b      	ldrb	r3, [r3, #20]
 8006ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	4413      	add	r3, r2
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	441a      	add	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	619a      	str	r2, [r3, #24]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	bf38      	it	cc
 800701c:	461a      	movcc	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	441a      	add	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f aeb5 	bne.w	8006da8 <f_write+0x76>
 800703e:	e000      	b.n	8007042 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007040:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	7d1b      	ldrb	r3, [r3, #20]
 8007046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704a:	b2da      	uxtb	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3730      	adds	r7, #48	; 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f107 0208 	add.w	r2, r7, #8
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f9be 	bl	80063ec <validate>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d168      	bne.n	800714c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7d1b      	ldrb	r3, [r3, #20]
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d062      	beq.n	800714c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	7d1b      	ldrb	r3, [r3, #20]
 800708a:	b25b      	sxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	da15      	bge.n	80070bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	7858      	ldrb	r0, [r3, #1]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	2301      	movs	r3, #1
 80070a0:	f7fd f80e 	bl	80040c0 <disk_write>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <f_sync+0x54>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e04f      	b.n	800714e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7d1b      	ldrb	r3, [r3, #20]
 80070b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80070bc:	f7fc fde6 	bl	8003c8c <get_fattime>
 80070c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fd fae6 	bl	800469c <move_window>
 80070d0:	4603      	mov	r3, r0
 80070d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d138      	bne.n	800714c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	330b      	adds	r3, #11
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	330b      	adds	r3, #11
 80070ea:	f042 0220 	orr.w	r2, r2, #32
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68f9      	ldr	r1, [r7, #12]
 80070fe:	f7fe f874 	bl	80051ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f103 021c 	add.w	r2, r3, #28
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fd f86a 	bl	80041e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3316      	adds	r3, #22
 8007118:	6939      	ldr	r1, [r7, #16]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd f864 	bl	80041e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3312      	adds	r3, #18
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd f843 	bl	80041b2 <st_word>
					fs->wflag = 1;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2201      	movs	r2, #1
 8007130:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fd fadf 	bl	80046f8 <sync_fs>
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7d1b      	ldrb	r3, [r3, #20]
 8007142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007146:	b2da      	uxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800714c:	7dfb      	ldrb	r3, [r7, #23]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ff7b 	bl	800705a <f_sync>
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d118      	bne.n	80071a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f107 0208 	add.w	r2, r7, #8
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff f938 	bl	80063ec <validate>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10c      	bne.n	80071a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd f9e2 	bl	8004554 <dec_lock>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	460b      	mov	r3, r1
 80071ba:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80071bc:	2301      	movs	r3, #1
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80071c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fdf4 	bl	8005db8 <get_ldnumber>
 80071d0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da02      	bge.n	80071de <f_mkfs+0x32>
 80071d8:	230b      	movs	r3, #11
 80071da:	f000 bc31 	b.w	8007a40 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80071de:	4aa5      	ldr	r2, [pc, #660]	; (8007474 <f_mkfs+0x2c8>)
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <f_mkfs+0x4a>
 80071ea:	4aa2      	ldr	r2, [pc, #648]	; (8007474 <f_mkfs+0x2c8>)
 80071ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8007202:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc ff14 	bl	8004034 <disk_initialize>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007212:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <f_mkfs+0x78>
 800721e:	2303      	movs	r3, #3
 8007220:	f000 bc0e 	b.w	8007a40 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007224:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <f_mkfs+0x8a>
 8007230:	230a      	movs	r3, #10
 8007232:	f000 bc05 	b.w	8007a40 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8007236:	f107 0214 	add.w	r2, r7, #20
 800723a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800723e:	2103      	movs	r1, #3
 8007240:	4618      	mov	r0, r3
 8007242:	f7fc ff5d 	bl	8004100 <disk_ioctl>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10c      	bne.n	8007266 <f_mkfs+0xba>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <f_mkfs+0xba>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007258:	d805      	bhi.n	8007266 <f_mkfs+0xba>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <f_mkfs+0xbe>
 8007266:	2301      	movs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800726a:	f107 021a 	add.w	r2, r7, #26
 800726e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007272:	2102      	movs	r1, #2
 8007274:	4618      	mov	r0, r3
 8007276:	f7fc ff43 	bl	8004100 <disk_ioctl>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <f_mkfs+0xd8>
 8007280:	2301      	movs	r3, #1
 8007282:	e3dd      	b.n	8007a40 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8007284:	8b7b      	ldrh	r3, [r7, #26]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728a:	d80a      	bhi.n	80072a2 <f_mkfs+0xf6>
 800728c:	8b7b      	ldrh	r3, [r7, #26]
 800728e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007292:	d306      	bcc.n	80072a2 <f_mkfs+0xf6>
 8007294:	8b7b      	ldrh	r3, [r7, #26]
 8007296:	461a      	mov	r2, r3
 8007298:	8b7b      	ldrh	r3, [r7, #26]
 800729a:	3b01      	subs	r3, #1
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <f_mkfs+0xfa>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e3cc      	b.n	8007a40 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <f_mkfs+0x10a>
 80072ac:	8b7b      	ldrh	r3, [r7, #26]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d309      	bcc.n	80072ca <f_mkfs+0x11e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072bc:	d805      	bhi.n	80072ca <f_mkfs+0x11e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <f_mkfs+0x122>
 80072ca:	2313      	movs	r3, #19
 80072cc:	e3b8      	b.n	8007a40 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 80072ce:	8b7b      	ldrh	r3, [r7, #26]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d8:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80072de:	8b7b      	ldrh	r3, [r7, #26]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80072ec:	8b7b      	ldrh	r3, [r7, #26]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <f_mkfs+0x156>
 80072fe:	230e      	movs	r3, #14
 8007300:	e39e      	b.n	8007a40 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007302:	f107 0210 	add.w	r2, r7, #16
 8007306:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800730a:	2101      	movs	r1, #1
 800730c:	4618      	mov	r0, r3
 800730e:	f7fc fef7 	bl	8004100 <disk_ioctl>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <f_mkfs+0x170>
 8007318:	2301      	movs	r3, #1
 800731a:	e391      	b.n	8007a40 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <f_mkfs+0x17e>
 8007326:	2300      	movs	r3, #0
 8007328:	e000      	b.n	800732c <f_mkfs+0x180>
 800732a:	233f      	movs	r3, #63	; 0x3f
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007332:	429a      	cmp	r2, r3
 8007334:	d901      	bls.n	800733a <f_mkfs+0x18e>
 8007336:	230e      	movs	r3, #14
 8007338:	e382      	b.n	8007a40 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b7f      	cmp	r3, #127	; 0x7f
 8007346:	d801      	bhi.n	800734c <f_mkfs+0x1a0>
 8007348:	230e      	movs	r3, #14
 800734a:	e379      	b.n	8007a40 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b80      	cmp	r3, #128	; 0x80
 8007350:	d901      	bls.n	8007356 <f_mkfs+0x1aa>
 8007352:	2313      	movs	r3, #19
 8007354:	e374      	b.n	8007a40 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00d      	beq.n	800737c <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	2b02      	cmp	r3, #2
 8007368:	d004      	beq.n	8007374 <f_mkfs+0x1c8>
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d103      	bne.n	800737c <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8007374:	2303      	movs	r3, #3
 8007376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800737a:	e009      	b.n	8007390 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <f_mkfs+0x1de>
 8007386:	2313      	movs	r3, #19
 8007388:	e35a      	b.n	8007a40 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800738a:	2302      	movs	r3, #2
 800738c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8007394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007398:	2b03      	cmp	r3, #3
 800739a:	d13c      	bne.n	8007416 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800739c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d11b      	bne.n	80073da <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	0c5b      	lsrs	r3, r3, #17
 80073a6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80073a8:	2300      	movs	r3, #0
 80073aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ac:	2301      	movs	r3, #1
 80073ae:	653b      	str	r3, [r7, #80]	; 0x50
 80073b0:	e005      	b.n	80073be <f_mkfs+0x212>
 80073b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b4:	3301      	adds	r3, #1
 80073b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	653b      	str	r3, [r7, #80]	; 0x50
 80073be:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <f_mkfs+0x2cc>)
 80073c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <f_mkfs+0x22e>
 80073ca:	4a2b      	ldr	r2, [pc, #172]	; (8007478 <f_mkfs+0x2cc>)
 80073cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d2eb      	bcs.n	80073b2 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	3302      	adds	r3, #2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	8b7a      	ldrh	r2, [r7, #26]
 80073ec:	4413      	add	r3, r2
 80073ee:	3b01      	subs	r3, #1
 80073f0:	8b7a      	ldrh	r2, [r7, #26]
 80073f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80073f8:	2320      	movs	r3, #32
 80073fa:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80073fc:	2300      	movs	r3, #0
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007406:	4293      	cmp	r3, r2
 8007408:	d903      	bls.n	8007412 <f_mkfs+0x266>
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	4a1b      	ldr	r2, [pc, #108]	; (800747c <f_mkfs+0x2d0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d954      	bls.n	80074bc <f_mkfs+0x310>
 8007412:	230e      	movs	r3, #14
 8007414:	e314      	b.n	8007a40 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8007416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11b      	bne.n	8007454 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	0b1b      	lsrs	r3, r3, #12
 8007420:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007422:	2300      	movs	r3, #0
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48
 8007426:	2301      	movs	r3, #1
 8007428:	653b      	str	r3, [r7, #80]	; 0x50
 800742a:	e005      	b.n	8007438 <f_mkfs+0x28c>
 800742c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742e:	3301      	adds	r3, #1
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	653b      	str	r3, [r7, #80]	; 0x50
 8007438:	4a11      	ldr	r2, [pc, #68]	; (8007480 <f_mkfs+0x2d4>)
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <f_mkfs+0x2a8>
 8007444:	4a0e      	ldr	r2, [pc, #56]	; (8007480 <f_mkfs+0x2d4>)
 8007446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800744c:	461a      	mov	r2, r3
 800744e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007450:	4293      	cmp	r3, r2
 8007452:	d2eb      	bcs.n	800742c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007458:	fbb2 f3f3 	udiv	r3, r2, r3
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007464:	4293      	cmp	r3, r2
 8007466:	d90d      	bls.n	8007484 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	3302      	adds	r3, #2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007470:	e013      	b.n	800749a <f_mkfs+0x2ee>
 8007472:	bf00      	nop
 8007474:	20003390 	.word	0x20003390
 8007478:	0800b010 	.word	0x0800b010
 800747c:	0ffffff5 	.word	0x0ffffff5
 8007480:	0800b020 	.word	0x0800b020
				} else {
					fmt = FS_FAT12;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800748a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748c:	4613      	mov	r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	4413      	add	r3, r2
 8007492:	3301      	adds	r3, #1
 8007494:	085b      	lsrs	r3, r3, #1
 8007496:	3303      	adds	r3, #3
 8007498:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800749a:	8b7b      	ldrh	r3, [r7, #26]
 800749c:	461a      	mov	r2, r3
 800749e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a0:	4413      	add	r3, r2
 80074a2:	3b01      	subs	r3, #1
 80074a4:	8b7a      	ldrh	r2, [r7, #26]
 80074a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074aa:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80074ac:	2301      	movs	r3, #1
 80074ae:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	015b      	lsls	r3, r3, #5
 80074b4:	8b7a      	ldrh	r2, [r7, #26]
 80074b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ba:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80074bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c0:	4413      	add	r3, r2
 80074c2:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80074c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c8:	fb03 f202 	mul.w	r2, r3, r2
 80074cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ce:	4413      	add	r3, r2
 80074d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074d2:	4413      	add	r3, r2
 80074d4:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	4413      	add	r3, r2
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	425b      	negs	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80074ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d108      	bne.n	8007504 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 80074f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f6:	4413      	add	r3, r2
 80074f8:	657b      	str	r3, [r7, #84]	; 0x54
 80074fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fe:	4413      	add	r3, r2
 8007500:	65bb      	str	r3, [r7, #88]	; 0x58
 8007502:	e006      	b.n	8007512 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8007504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800750e:	4413      	add	r3, r2
 8007510:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007514:	011a      	lsls	r2, r3, #4
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	441a      	add	r2, r3
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	d901      	bls.n	8007528 <f_mkfs+0x37c>
 8007524:	230e      	movs	r3, #14
 8007526:	e28b      	b.n	8007a40 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8007544:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007548:	2b03      	cmp	r3, #3
 800754a:	d10f      	bne.n	800756c <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007552:	4293      	cmp	r3, r2
 8007554:	d80a      	bhi.n	800756c <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <f_mkfs+0x3bc>
 800755c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d144      	bne.n	80075f2 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8007568:	230e      	movs	r3, #14
 800756a:	e269      	b.n	8007a40 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800756c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007570:	2b02      	cmp	r3, #2
 8007572:	d133      	bne.n	80075dc <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800757a:	4293      	cmp	r3, r2
 800757c:	d91e      	bls.n	80075bc <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d107      	bne.n	8007594 <f_mkfs+0x3e8>
 8007584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d803      	bhi.n	8007594 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800758c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	e033      	b.n	80075fc <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800759e:	2303      	movs	r3, #3
 80075a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80075a4:	e02a      	b.n	80075fc <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d105      	bne.n	80075b8 <f_mkfs+0x40c>
 80075ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d91e      	bls.n	80075f6 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 80075b8:	230e      	movs	r3, #14
 80075ba:	e241      	b.n	8007a40 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d80a      	bhi.n	80075dc <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <f_mkfs+0x42c>
 80075cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b80      	cmp	r3, #128	; 0x80
 80075d6:	d910      	bls.n	80075fa <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 80075d8:	230e      	movs	r3, #14
 80075da:	e231      	b.n	8007a40 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80075dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d10c      	bne.n	80075fe <f_mkfs+0x452>
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d907      	bls.n	80075fe <f_mkfs+0x452>
 80075ee:	230e      	movs	r3, #14
 80075f0:	e226      	b.n	8007a40 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80075f2:	bf00      	nop
 80075f4:	e6cc      	b.n	8007390 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80075f6:	bf00      	nop
 80075f8:	e6ca      	b.n	8007390 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80075fa:	bf00      	nop
			pau = au;
 80075fc:	e6c8      	b.n	8007390 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 80075fe:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007600:	8b7b      	ldrh	r3, [r7, #26]
 8007602:	461a      	mov	r2, r3
 8007604:	2100      	movs	r1, #0
 8007606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007608:	f7fc fe3b 	bl	8004282 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800760c:	220b      	movs	r2, #11
 800760e:	49b3      	ldr	r1, [pc, #716]	; (80078dc <f_mkfs+0x730>)
 8007610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007612:	f7fc fe15 	bl	8004240 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	330b      	adds	r3, #11
 800761a:	8b7a      	ldrh	r2, [r7, #26]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fc fdc7 	bl	80041b2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	330d      	adds	r3, #13
 8007628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	330e      	adds	r3, #14
 8007632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007634:	b292      	uxth	r2, r2
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fc fdba 	bl	80041b2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	3310      	adds	r3, #16
 8007642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	f103 0211 	add.w	r2, r3, #17
 800764e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007652:	2b03      	cmp	r3, #3
 8007654:	d002      	beq.n	800765c <f_mkfs+0x4b0>
 8007656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007658:	b29b      	uxth	r3, r3
 800765a:	e000      	b.n	800765e <f_mkfs+0x4b2>
 800765c:	2300      	movs	r3, #0
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fc fda6 	bl	80041b2 <st_word>
		if (sz_vol < 0x10000) {
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766c:	d208      	bcs.n	8007680 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	3313      	adds	r3, #19
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	b292      	uxth	r2, r2
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f7fc fd9a 	bl	80041b2 <st_word>
 800767e:	e006      	b.n	800768e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007682:	3320      	adds	r3, #32
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4611      	mov	r1, r2
 8007688:	4618      	mov	r0, r3
 800768a:	f7fc fdad 	bl	80041e8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	3315      	adds	r3, #21
 8007692:	22f8      	movs	r2, #248	; 0xf8
 8007694:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	3318      	adds	r3, #24
 800769a:	213f      	movs	r1, #63	; 0x3f
 800769c:	4618      	mov	r0, r3
 800769e:	f7fc fd88 	bl	80041b2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	331a      	adds	r3, #26
 80076a6:	21ff      	movs	r1, #255	; 0xff
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fc fd82 	bl	80041b2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	331c      	adds	r3, #28
 80076b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fc fd97 	bl	80041e8 <st_dword>
		if (fmt == FS_FAT32) {
 80076ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d131      	bne.n	8007726 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80076c8:	f7fc fae0 	bl	8003c8c <get_fattime>
 80076cc:	4603      	mov	r3, r0
 80076ce:	4619      	mov	r1, r3
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7fc fd89 	bl	80041e8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	3324      	adds	r3, #36	; 0x24
 80076da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fc fd83 	bl	80041e8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e4:	332c      	adds	r3, #44	; 0x2c
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fc fd7d 	bl	80041e8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	3330      	adds	r3, #48	; 0x30
 80076f2:	2101      	movs	r1, #1
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fc fd5c 	bl	80041b2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80076fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fc:	3332      	adds	r3, #50	; 0x32
 80076fe:	2106      	movs	r1, #6
 8007700:	4618      	mov	r0, r3
 8007702:	f7fc fd56 	bl	80041b2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	3340      	adds	r3, #64	; 0x40
 800770a:	2280      	movs	r2, #128	; 0x80
 800770c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	3342      	adds	r3, #66	; 0x42
 8007712:	2229      	movs	r2, #41	; 0x29
 8007714:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007718:	3347      	adds	r3, #71	; 0x47
 800771a:	2213      	movs	r2, #19
 800771c:	4970      	ldr	r1, [pc, #448]	; (80078e0 <f_mkfs+0x734>)
 800771e:	4618      	mov	r0, r3
 8007720:	f7fc fd8e 	bl	8004240 <mem_cpy>
 8007724:	e020      	b.n	8007768 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800772c:	f7fc faae 	bl	8003c8c <get_fattime>
 8007730:	4603      	mov	r3, r0
 8007732:	4619      	mov	r1, r3
 8007734:	4620      	mov	r0, r4
 8007736:	f7fc fd57 	bl	80041e8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	3316      	adds	r3, #22
 800773e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007740:	b292      	uxth	r2, r2
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fc fd34 	bl	80041b2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774c:	3324      	adds	r3, #36	; 0x24
 800774e:	2280      	movs	r2, #128	; 0x80
 8007750:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	3326      	adds	r3, #38	; 0x26
 8007756:	2229      	movs	r2, #41	; 0x29
 8007758:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800775a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775c:	332b      	adds	r3, #43	; 0x2b
 800775e:	2213      	movs	r2, #19
 8007760:	4960      	ldr	r1, [pc, #384]	; (80078e4 <f_mkfs+0x738>)
 8007762:	4618      	mov	r0, r3
 8007764:	f7fc fd6c 	bl	8004240 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800776e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007772:	4618      	mov	r0, r3
 8007774:	f7fc fd1d 	bl	80041b2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007778:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800777c:	2301      	movs	r3, #1
 800777e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007782:	f7fc fc9d 	bl	80040c0 <disk_write>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <f_mkfs+0x5e4>
 800778c:	2301      	movs	r3, #1
 800778e:	e157      	b.n	8007a40 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8007790:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007794:	2b03      	cmp	r3, #3
 8007796:	d140      	bne.n	800781a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	1d9a      	adds	r2, r3, #6
 800779c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80077a0:	2301      	movs	r3, #1
 80077a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077a4:	f7fc fc8c 	bl	80040c0 <disk_write>
			mem_set(buf, 0, ss);
 80077a8:	8b7b      	ldrh	r3, [r7, #26]
 80077aa:	461a      	mov	r2, r3
 80077ac:	2100      	movs	r1, #0
 80077ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077b0:	f7fc fd67 	bl	8004282 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80077b4:	494c      	ldr	r1, [pc, #304]	; (80078e8 <f_mkfs+0x73c>)
 80077b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077b8:	f7fc fd16 	bl	80041e8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077c2:	494a      	ldr	r1, [pc, #296]	; (80078ec <f_mkfs+0x740>)
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fc fd0f 	bl	80041e8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	3b01      	subs	r3, #1
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fc fd06 	bl	80041e8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80077e2:	2102      	movs	r1, #2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fc fcff 	bl	80041e8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fc fcdc 	bl	80041b2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	1dda      	adds	r2, r3, #7
 80077fe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007802:	2301      	movs	r3, #1
 8007804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007806:	f7fc fc5b 	bl	80040c0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007812:	2301      	movs	r3, #1
 8007814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007816:	f7fc fc53 	bl	80040c0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800781a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781c:	2100      	movs	r1, #0
 800781e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007820:	f7fc fd2f 	bl	8004282 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007826:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007828:	2300      	movs	r3, #0
 800782a:	64bb      	str	r3, [r7, #72]	; 0x48
 800782c:	e04b      	b.n	80078c6 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800782e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007832:	2b03      	cmp	r3, #3
 8007834:	d113      	bne.n	800785e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007836:	f06f 0107 	mvn.w	r1, #7
 800783a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800783c:	f7fc fcd4 	bl	80041e8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	3304      	adds	r3, #4
 8007844:	f04f 31ff 	mov.w	r1, #4294967295
 8007848:	4618      	mov	r0, r3
 800784a:	f7fc fccd 	bl	80041e8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	3308      	adds	r3, #8
 8007852:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007856:	4618      	mov	r0, r3
 8007858:	f7fc fcc6 	bl	80041e8 <st_dword>
 800785c:	e00b      	b.n	8007876 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800785e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <f_mkfs+0x6be>
 8007866:	4b22      	ldr	r3, [pc, #136]	; (80078f0 <f_mkfs+0x744>)
 8007868:	e001      	b.n	800786e <f_mkfs+0x6c2>
 800786a:	f06f 0307 	mvn.w	r3, #7
 800786e:	4619      	mov	r1, r3
 8007870:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007872:	f7fc fcb9 	bl	80041e8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007878:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800787a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	4293      	cmp	r3, r2
 8007880:	bf28      	it	cs
 8007882:	4613      	movcs	r3, r2
 8007884:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007886:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800788a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800788e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007890:	f7fc fc16 	bl	80040c0 <disk_write>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <f_mkfs+0x6f2>
 800789a:	2301      	movs	r3, #1
 800789c:	e0d0      	b.n	8007a40 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800789e:	8b7b      	ldrh	r3, [r7, #26]
 80078a0:	461a      	mov	r2, r3
 80078a2:	2100      	movs	r1, #0
 80078a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078a6:	f7fc fcec 	bl	8004282 <mem_set>
				sect += n; nsect -= n;
 80078aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ae:	4413      	add	r3, r2
 80078b0:	667b      	str	r3, [r7, #100]	; 0x64
 80078b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80078ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1dc      	bne.n	800787a <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80078c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c2:	3301      	adds	r3, #1
 80078c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3af      	bcc.n	800782e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80078ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d10e      	bne.n	80078f4 <f_mkfs+0x748>
 80078d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d8:	e00d      	b.n	80078f6 <f_mkfs+0x74a>
 80078da:	bf00      	nop
 80078dc:	0800afb4 	.word	0x0800afb4
 80078e0:	0800afc0 	.word	0x0800afc0
 80078e4:	0800afd4 	.word	0x0800afd4
 80078e8:	41615252 	.word	0x41615252
 80078ec:	61417272 	.word	0x61417272
 80078f0:	00fffff8 	.word	0x00fffff8
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80078f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	4293      	cmp	r3, r2
 80078fe:	bf28      	it	cs
 8007900:	4613      	movcs	r3, r2
 8007902:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007904:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800790a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800790c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800790e:	f7fc fbd7 	bl	80040c0 <disk_write>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <f_mkfs+0x770>
 8007918:	2301      	movs	r3, #1
 800791a:	e091      	b.n	8007a40 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800791c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800791e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007920:	4413      	add	r3, r2
 8007922:	667b      	str	r3, [r7, #100]	; 0x64
 8007924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800792c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e2      	bne.n	80078f8 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007932:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007936:	2b03      	cmp	r3, #3
 8007938:	d103      	bne.n	8007942 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800793a:	230c      	movs	r3, #12
 800793c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007940:	e010      	b.n	8007964 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007948:	d303      	bcc.n	8007952 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800794a:	2306      	movs	r3, #6
 800794c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007950:	e008      	b.n	8007964 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007956:	2b02      	cmp	r3, #2
 8007958:	d101      	bne.n	800795e <f_mkfs+0x7b2>
 800795a:	2304      	movs	r3, #4
 800795c:	e000      	b.n	8007960 <f_mkfs+0x7b4>
 800795e:	2301      	movs	r3, #1
 8007960:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d15b      	bne.n	8007a26 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800796e:	8b7b      	ldrh	r3, [r7, #26]
 8007970:	461a      	mov	r2, r3
 8007972:	2100      	movs	r1, #0
 8007974:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007976:	f7fc fc84 	bl	8004282 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007980:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007984:	4618      	mov	r0, r3
 8007986:	f7fc fc14 	bl	80041b2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007990:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	3301      	adds	r3, #1
 800799c:	2201      	movs	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3302      	adds	r3, #2
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3303      	adds	r3, #3
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	3304      	adds	r3, #4
 80079b4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80079b8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	441a      	add	r2, r3
 80079c0:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <f_mkfs+0x89c>)
 80079c2:	fba3 1302 	umull	r1, r3, r3, r2
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	0852      	lsrs	r2, r2, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	0b5b      	lsrs	r3, r3, #13
 80079ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3305      	adds	r3, #5
 80079d4:	22fe      	movs	r2, #254	; 0xfe
 80079d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80079d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079da:	089b      	lsrs	r3, r3, #2
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3306      	adds	r3, #6
 80079e2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	3307      	adds	r3, #7
 80079ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	3308      	adds	r3, #8
 80079f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fc fbf4 	bl	80041e8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	330c      	adds	r3, #12
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fc fbed 	bl	80041e8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007a0e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a12:	2301      	movs	r3, #1
 8007a14:	2200      	movs	r2, #0
 8007a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a18:	f7fc fb52 	bl	80040c0 <disk_write>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <f_mkfs+0x87a>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e00c      	b.n	8007a40 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007a26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc fb66 	bl	8004100 <disk_ioctl>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <f_mkfs+0x892>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <f_mkfs+0x894>

	return FR_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3774      	adds	r7, #116	; 0x74
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}
 8007a48:	0515565b 	.word	0x0515565b

08007a4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007a62:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a64:	7a5b      	ldrb	r3, [r3, #9]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d131      	bne.n	8007ad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a6e:	7a5b      	ldrb	r3, [r3, #9]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a76:	2100      	movs	r1, #0
 8007a78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a7c:	7a5b      	ldrb	r3, [r3, #9]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4a17      	ldr	r2, [pc, #92]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a8a:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a8c:	7a5b      	ldrb	r3, [r3, #9]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a94:	4413      	add	r3, r2
 8007a96:	79fa      	ldrb	r2, [r7, #7]
 8007a98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a9a:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007a9c:	7a5b      	ldrb	r3, [r3, #9]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	b2d1      	uxtb	r1, r2
 8007aa4:	4a0e      	ldr	r2, [pc, #56]	; (8007ae0 <FATFS_LinkDriverEx+0x94>)
 8007aa6:	7251      	strb	r1, [r2, #9]
 8007aa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007aaa:	7dbb      	ldrb	r3, [r7, #22]
 8007aac:	3330      	adds	r3, #48	; 0x30
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	223a      	movs	r2, #58	; 0x3a
 8007aba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3302      	adds	r3, #2
 8007ac0:	222f      	movs	r2, #47	; 0x2f
 8007ac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	3303      	adds	r3, #3
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	200033b8 	.word	0x200033b8

08007ae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007aee:	2200      	movs	r2, #0
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ffaa 	bl	8007a4c <FATFS_LinkDriverEx>
 8007af8:	4603      	mov	r3, r0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b089      	sub	sp, #36	; 0x24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	2b7f      	cmp	r3, #127	; 0x7f
 8007b14:	d802      	bhi.n	8007b1c <ff_convert+0x18>
		c = chr;
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	837b      	strh	r3, [r7, #26]
 8007b1a:	e045      	b.n	8007ba8 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <ff_convert+0x2a>
			p = oem2uni;
 8007b22:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <ff_convert+0xb4>)
 8007b24:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8007b26:	f245 5320 	movw	r3, #21792	; 0x5520
 8007b2a:	60bb      	str	r3, [r7, #8]
 8007b2c:	e004      	b.n	8007b38 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <ff_convert+0xb8>)
 8007b30:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8007b32:	f245 5320 	movw	r3, #21792	; 0x5520
 8007b36:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	e021      	b.n	8007b86 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	0fda      	lsrs	r2, r3, #31
 8007b4a:	4413      	add	r3, r2
 8007b4c:	105b      	asrs	r3, r3, #1
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	88fa      	ldrh	r2, [r7, #6]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d013      	beq.n	8007b8e <ff_convert+0x8a>
			if (chr > p[i * 2])
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	88fa      	ldrh	r2, [r7, #6]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d902      	bls.n	8007b7c <ff_convert+0x78>
				li = i;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	e001      	b.n	8007b80 <ff_convert+0x7c>
			else
				hi = i;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1da      	bne.n	8007b42 <ff_convert+0x3e>
 8007b8c:	e000      	b.n	8007b90 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 8007b8e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d006      	beq.n	8007ba4 <ff_convert+0xa0>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	e000      	b.n	8007ba6 <ff_convert+0xa2>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8007ba8:	8b7b      	ldrh	r3, [r7, #26]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	080204b4 	.word	0x080204b4
 8007bbc:	0800b030 	.word	0x0800b030

08007bc0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd0:	d201      	bcs.n	8007bd6 <ff_wtoupper+0x16>
 8007bd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ccc <ff_wtoupper+0x10c>)
 8007bd4:	e000      	b.n	8007bd8 <ff_wtoupper+0x18>
 8007bd6:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <ff_wtoupper+0x110>)
 8007bd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	1c9a      	adds	r2, r3, #2
 8007bde:	617a      	str	r2, [r7, #20]
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d068      	beq.n	8007cbc <ff_wtoupper+0xfc>
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	8a7b      	ldrh	r3, [r7, #18]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d364      	bcc.n	8007cbc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	1c9a      	adds	r2, r3, #2
 8007bf6:	617a      	str	r2, [r7, #20]
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	823b      	strh	r3, [r7, #16]
 8007bfc:	8a3b      	ldrh	r3, [r7, #16]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	81fb      	strh	r3, [r7, #14]
 8007c02:	8a3b      	ldrh	r3, [r7, #16]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007c08:	88fa      	ldrh	r2, [r7, #6]
 8007c0a:	8a79      	ldrh	r1, [r7, #18]
 8007c0c:	8a3b      	ldrh	r3, [r7, #16]
 8007c0e:	440b      	add	r3, r1
 8007c10:	429a      	cmp	r2, r3
 8007c12:	da49      	bge.n	8007ca8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007c14:	89fb      	ldrh	r3, [r7, #14]
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d84f      	bhi.n	8007cba <ff_wtoupper+0xfa>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <ff_wtoupper+0x60>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c45 	.word	0x08007c45
 8007c24:	08007c57 	.word	0x08007c57
 8007c28:	08007c6d 	.word	0x08007c6d
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007c7d 	.word	0x08007c7d
 8007c34:	08007c85 	.word	0x08007c85
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c9d 	.word	0x08007c9d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	8a7b      	ldrh	r3, [r7, #18]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	80fb      	strh	r3, [r7, #6]
 8007c54:	e027      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	8a7b      	ldrh	r3, [r7, #18]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	80fb      	strh	r3, [r7, #6]
 8007c6a:	e01c      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	3b10      	subs	r3, #16
 8007c70:	80fb      	strh	r3, [r7, #6]
 8007c72:	e018      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	3b20      	subs	r3, #32
 8007c78:	80fb      	strh	r3, [r7, #6]
 8007c7a:	e014      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	3b30      	subs	r3, #48	; 0x30
 8007c80:	80fb      	strh	r3, [r7, #6]
 8007c82:	e010      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	3b1a      	subs	r3, #26
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	e00c      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	e008      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	3b50      	subs	r3, #80	; 0x50
 8007c98:	80fb      	strh	r3, [r7, #6]
 8007c9a:	e004      	b.n	8007ca6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007ca2:	80fb      	strh	r3, [r7, #6]
 8007ca4:	bf00      	nop
			}
			break;
 8007ca6:	e008      	b.n	8007cba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d195      	bne.n	8007bda <ff_wtoupper+0x1a>
 8007cae:	8a3b      	ldrh	r3, [r7, #16]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007cb8:	e78f      	b.n	8007bda <ff_wtoupper+0x1a>
			break;
 8007cba:	bf00      	nop
	}

	return chr;
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	08035938 	.word	0x08035938
 8007cd0:	08035b2c 	.word	0x08035b2c

08007cd4 <SPI1_ReadWriteByte>:

//SPI1 读写�?个字�?
//TxData:要写入的字节
//返回�?:读取到的字节
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	4603      	mov	r3, r0
 8007cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata;
    HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 8007cde:	f107 020f 	add.w	r2, r7, #15
 8007ce2:	1df9      	adds	r1, r7, #7
 8007ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2301      	movs	r3, #1
 8007cec:	4803      	ldr	r0, [pc, #12]	; (8007cfc <SPI1_ReadWriteByte+0x28>)
 8007cee:	f7fa fd3a 	bl	8002766 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //返回收到的数�?
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000244 	.word	0x20000244

08007d00 <W25QXX_Init>:

void W25QXX_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
	uint8_t temp;
	W25QXX_TYPE=W25QXX_ReadID();	        //读取FLASH ID.
 8007d06:	f000 f877 	bl	8007df8 <W25QXX_ReadID>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <W25QXX_Init+0x54>)
 8007d10:	801a      	strh	r2, [r3, #0]
    if(W25QXX_TYPE==W25Q256)                //SPI FLASH为W25Q256
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <W25QXX_Init+0x54>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	f64e 7218 	movw	r2, #61208	; 0xef18
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d116      	bne.n	8007d4c <W25QXX_Init+0x4c>
    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 8007d1e:	2003      	movs	r0, #3
 8007d20:	f000 f81c 	bl	8007d5c <W25QXX_ReadSR>
 8007d24:	4603      	mov	r3, r0
 8007d26:	71fb      	strb	r3, [r7, #7]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10c      	bne.n	8007d4c <W25QXX_Init+0x4c>
		{
        	W25QXX_CS_ENABLE();    //使能器件
 8007d32:	2200      	movs	r2, #0
 8007d34:	2110      	movs	r1, #16
 8007d36:	4808      	ldr	r0, [pc, #32]	; (8007d58 <W25QXX_Init+0x58>)
 8007d38:	f7f9 ffda 	bl	8001cf0 <HAL_GPIO_WritePin>
			SPI1_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 8007d3c:	20b7      	movs	r0, #183	; 0xb7
 8007d3e:	f7ff ffc9 	bl	8007cd4 <SPI1_ReadWriteByte>
			W25QXX_CS_DISABLE();    		        //取消片选
 8007d42:	2201      	movs	r2, #1
 8007d44:	2110      	movs	r1, #16
 8007d46:	4804      	ldr	r0, [pc, #16]	; (8007d58 <W25QXX_Init+0x58>)
 8007d48:	f7f9 ffd2 	bl	8001cf0 <HAL_GPIO_WritePin>
		}
    }
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000054 	.word	0x20000054
 8007d58:	40020000 	.word	0x40020000

08007d5c <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
uint8_t W25QXX_ReadSR(uint8_t regno)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0,command=0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73bb      	strb	r3, [r7, #14]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d00c      	beq.n	8007d8e <W25QXX_ReadSR+0x32>
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	dc0d      	bgt.n	8007d94 <W25QXX_ReadSR+0x38>
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d002      	beq.n	8007d82 <W25QXX_ReadSR+0x26>
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d003      	beq.n	8007d88 <W25QXX_ReadSR+0x2c>
 8007d80:	e008      	b.n	8007d94 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 8007d82:	2305      	movs	r3, #5
 8007d84:	73fb      	strb	r3, [r7, #15]
            break;
 8007d86:	e008      	b.n	8007d9a <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 8007d88:	2335      	movs	r3, #53	; 0x35
 8007d8a:	73fb      	strb	r3, [r7, #15]
            break;
 8007d8c:	e005      	b.n	8007d9a <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 8007d8e:	2315      	movs	r3, #21
 8007d90:	73fb      	strb	r3, [r7, #15]
            break;
 8007d92:	e002      	b.n	8007d9a <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 8007d94:	2305      	movs	r3, #5
 8007d96:	73fb      	strb	r3, [r7, #15]
            break;
 8007d98:	bf00      	nop
    }
    W25QXX_CS_ENABLE();    //使能器件
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2110      	movs	r1, #16
 8007d9e:	480b      	ldr	r0, [pc, #44]	; (8007dcc <W25QXX_ReadSR+0x70>)
 8007da0:	f7f9 ffa6 	bl	8001cf0 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(command);            //发送读取状态寄存器命令
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff ff94 	bl	8007cd4 <SPI1_ReadWriteByte>
	byte=SPI1_ReadWriteByte(0Xff);          //读取一个字节
 8007dac:	20ff      	movs	r0, #255	; 0xff
 8007dae:	f7ff ff91 	bl	8007cd4 <SPI1_ReadWriteByte>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73bb      	strb	r3, [r7, #14]
	W25QXX_CS_DISABLE();      //取消片选
 8007db6:	2201      	movs	r2, #1
 8007db8:	2110      	movs	r1, #16
 8007dba:	4804      	ldr	r0, [pc, #16]	; (8007dcc <W25QXX_ReadSR+0x70>)
 8007dbc:	f7f9 ff98 	bl	8001cf0 <HAL_GPIO_WritePin>
	return byte;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40020000 	.word	0x40020000

08007dd0 <W25QXX_Write_Enable>:
}

//W25QXX写使能
//将WEL置位
void W25QXX_Write_Enable(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
	W25QXX_CS_ENABLE();    //使能器件
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2110      	movs	r1, #16
 8007dd8:	4806      	ldr	r0, [pc, #24]	; (8007df4 <W25QXX_Write_Enable+0x24>)
 8007dda:	f7f9 ff89 	bl	8001cf0 <HAL_GPIO_WritePin>
    SPI1_ReadWriteByte(W25X_WriteEnable);   //发送写使能
 8007dde:	2006      	movs	r0, #6
 8007de0:	f7ff ff78 	bl	8007cd4 <SPI1_ReadWriteByte>
    W25QXX_CS_DISABLE();      //取消片选
 8007de4:	2201      	movs	r2, #1
 8007de6:	2110      	movs	r1, #16
 8007de8:	4802      	ldr	r0, [pc, #8]	; (8007df4 <W25QXX_Write_Enable+0x24>)
 8007dea:	f7f9 ff81 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40020000 	.word	0x40020000

08007df8 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
uint16_t W25QXX_ReadID(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	uint16_t Temp = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS_ENABLE();    //使能器件
 8007e02:	2200      	movs	r2, #0
 8007e04:	2110      	movs	r1, #16
 8007e06:	4816      	ldr	r0, [pc, #88]	; (8007e60 <W25QXX_ReadID+0x68>)
 8007e08:	f7f9 ff72 	bl	8001cf0 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x90);//发送读取ID命令
 8007e0c:	2090      	movs	r0, #144	; 0x90
 8007e0e:	f7ff ff61 	bl	8007cd4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 8007e12:	2000      	movs	r0, #0
 8007e14:	f7ff ff5e 	bl	8007cd4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f7ff ff5b 	bl	8007cd4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(0x00);
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f7ff ff58 	bl	8007cd4 <SPI1_ReadWriteByte>
	Temp|=SPI1_ReadWriteByte(0xFF)<<8;
 8007e24:	20ff      	movs	r0, #255	; 0xff
 8007e26:	f7ff ff55 	bl	8007cd4 <SPI1_ReadWriteByte>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21a      	sxth	r2, r3
 8007e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	80fb      	strh	r3, [r7, #6]
	Temp|=SPI1_ReadWriteByte(0xFF);
 8007e3a:	20ff      	movs	r0, #255	; 0xff
 8007e3c:	f7ff ff4a 	bl	8007cd4 <SPI1_ReadWriteByte>
 8007e40:	4603      	mov	r3, r0
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	88fb      	ldrh	r3, [r7, #6]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
	W25QXX_CS_DISABLE();      //取消片选
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	2110      	movs	r1, #16
 8007e4e:	4804      	ldr	r0, [pc, #16]	; (8007e60 <W25QXX_ReadID+0x68>)
 8007e50:	f7f9 ff4e 	bl	8001cf0 <HAL_GPIO_WritePin>
	return Temp;
 8007e54:	88fb      	ldrh	r3, [r7, #6]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40020000 	.word	0x40020000

08007e64 <W25QXX_Read>:
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void W25QXX_Read(uint8_t* pBuffer,uint32_t ReadAddr,uint16_t NumByteToRead)   //读取flash
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	W25QXX_CS_ENABLE();    //使能器件
 8007e72:	2200      	movs	r2, #0
 8007e74:	2110      	movs	r1, #16
 8007e76:	481f      	ldr	r0, [pc, #124]	; (8007ef4 <W25QXX_Read+0x90>)
 8007e78:	f7f9 ff3a 	bl	8001cf0 <HAL_GPIO_WritePin>
    SPI1_ReadWriteByte(W25X_ReadData);      //发送读取命令
 8007e7c:	2003      	movs	r0, #3
 8007e7e:	f7ff ff29 	bl	8007cd4 <SPI1_ReadWriteByte>
    if(W25QXX_TYPE==W25Q256)                //如果是W25Q256的话地址为4字节的，要发送最高8位
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <W25QXX_Read+0x94>)
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	f64e 7218 	movw	r2, #61208	; 0xef18
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d105      	bne.n	8007e9a <W25QXX_Read+0x36>
    {
        SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>24));
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff1d 	bl	8007cd4 <SPI1_ReadWriteByte>
    }
    SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>16));   //发送24bit地址
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff ff17 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((ReadAddr)>>8));
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	0a1b      	lsrs	r3, r3, #8
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff ff11 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)ReadAddr);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff ff0c 	bl	8007cd4 <SPI1_ReadWriteByte>
    for(i=0;i<NumByteToRead;i++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	82fb      	strh	r3, [r7, #22]
 8007ec0:	e00a      	b.n	8007ed8 <W25QXX_Read+0x74>
	{
        pBuffer[i]=SPI1_ReadWriteByte(0XFF);    //循环读数
 8007ec2:	8afb      	ldrh	r3, [r7, #22]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	18d4      	adds	r4, r2, r3
 8007ec8:	20ff      	movs	r0, #255	; 0xff
 8007eca:	f7ff ff03 	bl	8007cd4 <SPI1_ReadWriteByte>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	7023      	strb	r3, [r4, #0]
    for(i=0;i<NumByteToRead;i++)
 8007ed2:	8afb      	ldrh	r3, [r7, #22]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	82fb      	strh	r3, [r7, #22]
 8007ed8:	8afa      	ldrh	r2, [r7, #22]
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d3f0      	bcc.n	8007ec2 <W25QXX_Read+0x5e>
    }
    W25QXX_CS_DISABLE();      //取消片选
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	4803      	ldr	r0, [pc, #12]	; (8007ef4 <W25QXX_Read+0x90>)
 8007ee6:	f7f9 ff03 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd90      	pop	{r4, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40020000 	.word	0x40020000
 8007ef8:	20000054 	.word	0x20000054

08007efc <W25QXX_Write_Page>:
//在指定地址开始写入最大256字节的数据
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大256),该数不应该超过该页的剩余字节数!!!
void W25QXX_Write_Page(uint8_t* pBuffer,uint32_t WriteAddr,uint16_t NumByteToWrite)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
    W25QXX_Write_Enable();                  //SET WEL
 8007f0a:	f7ff ff61 	bl	8007dd0 <W25QXX_Write_Enable>
    W25QXX_CS_ENABLE();    //使能器件
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2110      	movs	r1, #16
 8007f12:	481f      	ldr	r0, [pc, #124]	; (8007f90 <W25QXX_Write_Page+0x94>)
 8007f14:	f7f9 feec 	bl	8001cf0 <HAL_GPIO_WritePin>
    SPI1_ReadWriteByte(W25X_PageProgram);   //发送写页命令
 8007f18:	2002      	movs	r0, #2
 8007f1a:	f7ff fedb 	bl	8007cd4 <SPI1_ReadWriteByte>
    if(W25QXX_TYPE==W25Q256)                //如果是W25Q256的话地址为4字节的，要发送最高8位
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <W25QXX_Write_Page+0x98>)
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	f64e 7218 	movw	r2, #61208	; 0xef18
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d105      	bne.n	8007f36 <W25QXX_Write_Page+0x3a>
    {
        SPI1_ReadWriteByte((uint8_t)((WriteAddr)>>24));
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	0e1b      	lsrs	r3, r3, #24
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff fecf 	bl	8007cd4 <SPI1_ReadWriteByte>
    }
    SPI1_ReadWriteByte((uint8_t)((WriteAddr)>>16)); //发送24bit地址
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff fec9 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((WriteAddr)>>8));
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fec3 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)WriteAddr);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff febe 	bl	8007cd4 <SPI1_ReadWriteByte>
    for(i=0;i<NumByteToWrite;i++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	82fb      	strh	r3, [r7, #22]
 8007f5c:	e009      	b.n	8007f72 <W25QXX_Write_Page+0x76>
    {
    	SPI1_ReadWriteByte(pBuffer[i]);//循环写数
 8007f5e:	8afb      	ldrh	r3, [r7, #22]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff feb4 	bl	8007cd4 <SPI1_ReadWriteByte>
    for(i=0;i<NumByteToWrite;i++)
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	82fb      	strh	r3, [r7, #22]
 8007f72:	8afa      	ldrh	r2, [r7, #22]
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d3f1      	bcc.n	8007f5e <W25QXX_Write_Page+0x62>
    }
    W25QXX_CS_DISABLE();      //取消片选
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	2110      	movs	r1, #16
 8007f7e:	4804      	ldr	r0, [pc, #16]	; (8007f90 <W25QXX_Write_Page+0x94>)
 8007f80:	f7f9 feb6 	bl	8001cf0 <HAL_GPIO_WritePin>
	W25QXX_Wait_Busy();					   //等待写入结束
 8007f84:	f000 f908 	bl	8008198 <W25QXX_Wait_Busy>
}
 8007f88:	bf00      	nop
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40020000 	.word	0x40020000
 8007f94:	20000054 	.word	0x20000054

08007f98 <W25QXX_Write_NoCheck>:
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)
//CHECK OK
void W25QXX_Write_NoCheck(uint8_t* pBuffer,uint32_t WriteAddr,uint16_t NumByteToWrite)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
	uint16_t pageremain;
	pageremain=256-WriteAddr%256; //单页剩余的字节数
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007fb2:	82fb      	strh	r3, [r7, #22]
	if(NumByteToWrite<=pageremain)pageremain=NumByteToWrite;//不大于256个字节
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	8afb      	ldrh	r3, [r7, #22]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d801      	bhi.n	8007fc0 <W25QXX_Write_NoCheck+0x28>
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	82fb      	strh	r3, [r7, #22]
	while(1)
	{
		W25QXX_Write_Page(pBuffer,WriteAddr,pageremain);
 8007fc0:	8afb      	ldrh	r3, [r7, #22]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff ff98 	bl	8007efc <W25QXX_Write_Page>
		if(NumByteToWrite==pageremain)break;//写入结束了
 8007fcc:	88fa      	ldrh	r2, [r7, #6]
 8007fce:	8afb      	ldrh	r3, [r7, #22]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d016      	beq.n	8008002 <W25QXX_Write_NoCheck+0x6a>
	 	else //NumByteToWrite>pageremain
		{
			pBuffer+=pageremain;
 8007fd4:	8afb      	ldrh	r3, [r7, #22]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
			WriteAddr+=pageremain;
 8007fdc:	8afb      	ldrh	r3, [r7, #22]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	60bb      	str	r3, [r7, #8]

			NumByteToWrite-=pageremain;			  //减去已经写入了的字节数
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	8afb      	ldrh	r3, [r7, #22]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	80fb      	strh	r3, [r7, #6]
			if(NumByteToWrite>256)pageremain=256; //一次可以写入256个字节
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff2:	d903      	bls.n	8007ffc <W25QXX_Write_NoCheck+0x64>
 8007ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff8:	82fb      	strh	r3, [r7, #22]
 8007ffa:	e7e1      	b.n	8007fc0 <W25QXX_Write_NoCheck+0x28>
			else pageremain=NumByteToWrite; 	  //不够256个字节了
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	82fb      	strh	r3, [r7, #22]
		W25QXX_Write_Page(pBuffer,WriteAddr,pageremain);
 8008000:	e7de      	b.n	8007fc0 <W25QXX_Write_NoCheck+0x28>
		if(NumByteToWrite==pageremain)break;//写入结束了
 8008002:	bf00      	nop
		}
	}
}
 8008004:	bf00      	nop
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <W25QXX_Write>:
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)
uint8_t W25QXX_BUFFER[4096];
void W25QXX_Write(uint8_t* pBuffer,uint32_t WriteAddr,uint16_t NumByteToWrite)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
	uint32_t secpos;
	uint16_t secoff;
	uint16_t secremain;
	uint16_t i;
	uint8_t * W25QXX_BUF;
   	W25QXX_BUF=W25QXX_BUFFER;
 800801a:	4b40      	ldr	r3, [pc, #256]	; (800811c <W25QXX_Write+0x110>)
 800801c:	613b      	str	r3, [r7, #16]
 	secpos=WriteAddr/4096;//扇区地址
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	0b1b      	lsrs	r3, r3, #12
 8008022:	61fb      	str	r3, [r7, #28]
	secoff=WriteAddr%4096;//在扇区内的偏移
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800802c:	837b      	strh	r3, [r7, #26]
	secremain=4096-secoff;//扇区剩余空间大小
 800802e:	8b7b      	ldrh	r3, [r7, #26]
 8008030:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8008034:	833b      	strh	r3, [r7, #24]
 	//printf("ad:%X,nb:%X\r\n",WriteAddr,NumByteToWrite);//测试用
 	if(NumByteToWrite<=secremain)secremain=NumByteToWrite;//不大于4096个字节
 8008036:	88fa      	ldrh	r2, [r7, #6]
 8008038:	8b3b      	ldrh	r3, [r7, #24]
 800803a:	429a      	cmp	r2, r3
 800803c:	d801      	bhi.n	8008042 <W25QXX_Write+0x36>
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	833b      	strh	r3, [r7, #24]
	while(1)
	{
		W25QXX_Read(W25QXX_BUF,secpos*4096,4096);//读出整个扇区的内容
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	031b      	lsls	r3, r3, #12
 8008046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800804a:	4619      	mov	r1, r3
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f7ff ff09 	bl	8007e64 <W25QXX_Read>
		for(i=0;i<secremain;i++)//校验数据
 8008052:	2300      	movs	r3, #0
 8008054:	82fb      	strh	r3, [r7, #22]
 8008056:	e00b      	b.n	8008070 <W25QXX_Write+0x64>
		{
			if(W25QXX_BUF[secoff+i]!=0XFF)break;//需要擦除
 8008058:	8b7a      	ldrh	r2, [r7, #26]
 800805a:	8afb      	ldrh	r3, [r7, #22]
 800805c:	4413      	add	r3, r2
 800805e:	461a      	mov	r2, r3
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2bff      	cmp	r3, #255	; 0xff
 8008068:	d107      	bne.n	800807a <W25QXX_Write+0x6e>
		for(i=0;i<secremain;i++)//校验数据
 800806a:	8afb      	ldrh	r3, [r7, #22]
 800806c:	3301      	adds	r3, #1
 800806e:	82fb      	strh	r3, [r7, #22]
 8008070:	8afa      	ldrh	r2, [r7, #22]
 8008072:	8b3b      	ldrh	r3, [r7, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	d3ef      	bcc.n	8008058 <W25QXX_Write+0x4c>
 8008078:	e000      	b.n	800807c <W25QXX_Write+0x70>
			if(W25QXX_BUF[secoff+i]!=0XFF)break;//需要擦除
 800807a:	bf00      	nop
		}
		if(i<secremain)//需要擦除
 800807c:	8afa      	ldrh	r2, [r7, #22]
 800807e:	8b3b      	ldrh	r3, [r7, #24]
 8008080:	429a      	cmp	r2, r3
 8008082:	d220      	bcs.n	80080c6 <W25QXX_Write+0xba>
		{
			W25QXX_Erase_Sector(secpos);//擦除这个扇区
 8008084:	69f8      	ldr	r0, [r7, #28]
 8008086:	f000 f84b 	bl	8008120 <W25QXX_Erase_Sector>
			for(i=0;i<secremain;i++)	   //复制
 800808a:	2300      	movs	r3, #0
 800808c:	82fb      	strh	r3, [r7, #22]
 800808e:	e00d      	b.n	80080ac <W25QXX_Write+0xa0>
			{
				W25QXX_BUF[i+secoff]=pBuffer[i];
 8008090:	8afb      	ldrh	r3, [r7, #22]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	441a      	add	r2, r3
 8008096:	8af9      	ldrh	r1, [r7, #22]
 8008098:	8b7b      	ldrh	r3, [r7, #26]
 800809a:	440b      	add	r3, r1
 800809c:	4619      	mov	r1, r3
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	440b      	add	r3, r1
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	701a      	strb	r2, [r3, #0]
			for(i=0;i<secremain;i++)	   //复制
 80080a6:	8afb      	ldrh	r3, [r7, #22]
 80080a8:	3301      	adds	r3, #1
 80080aa:	82fb      	strh	r3, [r7, #22]
 80080ac:	8afa      	ldrh	r2, [r7, #22]
 80080ae:	8b3b      	ldrh	r3, [r7, #24]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d3ed      	bcc.n	8008090 <W25QXX_Write+0x84>
			}
			W25QXX_Write_NoCheck(W25QXX_BUF,secpos*4096,4096);//写入整个扇区
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	031b      	lsls	r3, r3, #12
 80080b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080bc:	4619      	mov	r1, r3
 80080be:	6938      	ldr	r0, [r7, #16]
 80080c0:	f7ff ff6a 	bl	8007f98 <W25QXX_Write_NoCheck>
 80080c4:	e005      	b.n	80080d2 <W25QXX_Write+0xc6>

		}else W25QXX_Write_NoCheck(pBuffer,WriteAddr,secremain);//写已经擦除了的,直接写入扇区剩余区间.
 80080c6:	8b3b      	ldrh	r3, [r7, #24]
 80080c8:	461a      	mov	r2, r3
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff ff63 	bl	8007f98 <W25QXX_Write_NoCheck>
		if(NumByteToWrite==secremain)break;//写入结束了
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	8b3b      	ldrh	r3, [r7, #24]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d01b      	beq.n	8008112 <W25QXX_Write+0x106>
		else//写入未结束
		{
			secpos++;//扇区地址增1
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	3301      	adds	r3, #1
 80080de:	61fb      	str	r3, [r7, #28]
			secoff=0;//偏移位置为0
 80080e0:	2300      	movs	r3, #0
 80080e2:	837b      	strh	r3, [r7, #26]

		   	pBuffer+=secremain;  //指针偏移
 80080e4:	8b3b      	ldrh	r3, [r7, #24]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]
			WriteAddr+=secremain;//写地址偏移
 80080ec:	8b3b      	ldrh	r3, [r7, #24]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
		   	NumByteToWrite-=secremain;				//字节数递减
 80080f4:	88fa      	ldrh	r2, [r7, #6]
 80080f6:	8b3b      	ldrh	r3, [r7, #24]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	80fb      	strh	r3, [r7, #6]
			if(NumByteToWrite>4096)secremain=4096;	//下一个扇区还是写不完
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008102:	d903      	bls.n	800810c <W25QXX_Write+0x100>
 8008104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008108:	833b      	strh	r3, [r7, #24]
 800810a:	e79a      	b.n	8008042 <W25QXX_Write+0x36>
			else secremain=NumByteToWrite;			//下一个扇区可以写完了
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	833b      	strh	r3, [r7, #24]
		W25QXX_Read(W25QXX_BUF,secpos*4096,4096);//读出整个扇区的内容
 8008110:	e797      	b.n	8008042 <W25QXX_Write+0x36>
		if(NumByteToWrite==secremain)break;//写入结束了
 8008112:	bf00      	nop
		}
	}
}
 8008114:	bf00      	nop
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200033c4 	.word	0x200033c4

08008120 <W25QXX_Erase_Sector>:

//擦除一个扇区
//Dst_Addr:扇区地址 根据实际容量设置
//擦除一个扇区的最少时间:150ms
void W25QXX_Erase_Sector(uint32_t Dst_Addr)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	//监视falsh擦除情况,测试用
 	//printf("fe:%x\r\n",Dst_Addr);
 	Dst_Addr*=4096;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	031b      	lsls	r3, r3, #12
 800812c:	607b      	str	r3, [r7, #4]
    W25QXX_Write_Enable();                  //SET WEL
 800812e:	f7ff fe4f 	bl	8007dd0 <W25QXX_Write_Enable>
    W25QXX_Wait_Busy();
 8008132:	f000 f831 	bl	8008198 <W25QXX_Wait_Busy>
    W25QXX_Write_Enable();                   //使能器件
 8008136:	f7ff fe4b 	bl	8007dd0 <W25QXX_Write_Enable>
    SPI1_ReadWriteByte(W25X_SectorErase);   //发送扇区擦除指令
 800813a:	2020      	movs	r0, #32
 800813c:	f7ff fdca 	bl	8007cd4 <SPI1_ReadWriteByte>
    if(W25QXX_TYPE==W25Q256)                //如果是W25Q256的话地址为4字节的，要发送最高8位
 8008140:	4b13      	ldr	r3, [pc, #76]	; (8008190 <W25QXX_Erase_Sector+0x70>)
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	f64e 7218 	movw	r2, #61208	; 0xef18
 8008148:	4293      	cmp	r3, r2
 800814a:	d105      	bne.n	8008158 <W25QXX_Erase_Sector+0x38>
    {
        SPI1_ReadWriteByte((uint8_t)((Dst_Addr)>>24));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	0e1b      	lsrs	r3, r3, #24
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fdbe 	bl	8007cd4 <SPI1_ReadWriteByte>
    }
    SPI1_ReadWriteByte((uint8_t)((Dst_Addr)>>16));  //发送24bit地址
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2db      	uxtb	r3, r3
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fdb8 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)((Dst_Addr)>>8));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fdb2 	bl	8007cd4 <SPI1_ReadWriteByte>
    SPI1_ReadWriteByte((uint8_t)Dst_Addr);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fdad 	bl	8007cd4 <SPI1_ReadWriteByte>
    W25QXX_CS_DISABLE();                    //取消片选
 800817a:	2201      	movs	r2, #1
 800817c:	2110      	movs	r1, #16
 800817e:	4805      	ldr	r0, [pc, #20]	; (8008194 <W25QXX_Erase_Sector+0x74>)
 8008180:	f7f9 fdb6 	bl	8001cf0 <HAL_GPIO_WritePin>
    W25QXX_Wait_Busy();   				    //等待擦除完成
 8008184:	f000 f808 	bl	8008198 <W25QXX_Wait_Busy>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000054 	.word	0x20000054
 8008194:	40020000 	.word	0x40020000

08008198 <W25QXX_Wait_Busy>:

//等待空闲
void W25QXX_Wait_Busy(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
	while((W25QXX_ReadSR(1)&0x01)==0x01);	// 等待BUSY位清空
 800819c:	bf00      	nop
 800819e:	2001      	movs	r0, #1
 80081a0:	f7ff fddc 	bl	8007d5c <W25QXX_ReadSR>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d0f7      	beq.n	800819e <W25QXX_Wait_Busy+0x6>

}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <__errno>:
 80081b4:	4b01      	ldr	r3, [pc, #4]	; (80081bc <__errno+0x8>)
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000058 	.word	0x20000058

080081c0 <__libc_init_array>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4d0d      	ldr	r5, [pc, #52]	; (80081f8 <__libc_init_array+0x38>)
 80081c4:	4c0d      	ldr	r4, [pc, #52]	; (80081fc <__libc_init_array+0x3c>)
 80081c6:	1b64      	subs	r4, r4, r5
 80081c8:	10a4      	asrs	r4, r4, #2
 80081ca:	2600      	movs	r6, #0
 80081cc:	42a6      	cmp	r6, r4
 80081ce:	d109      	bne.n	80081e4 <__libc_init_array+0x24>
 80081d0:	4d0b      	ldr	r5, [pc, #44]	; (8008200 <__libc_init_array+0x40>)
 80081d2:	4c0c      	ldr	r4, [pc, #48]	; (8008204 <__libc_init_array+0x44>)
 80081d4:	f002 fdc2 	bl	800ad5c <_init>
 80081d8:	1b64      	subs	r4, r4, r5
 80081da:	10a4      	asrs	r4, r4, #2
 80081dc:	2600      	movs	r6, #0
 80081de:	42a6      	cmp	r6, r4
 80081e0:	d105      	bne.n	80081ee <__libc_init_array+0x2e>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e8:	4798      	blx	r3
 80081ea:	3601      	adds	r6, #1
 80081ec:	e7ee      	b.n	80081cc <__libc_init_array+0xc>
 80081ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f2:	4798      	blx	r3
 80081f4:	3601      	adds	r6, #1
 80081f6:	e7f2      	b.n	80081de <__libc_init_array+0x1e>
 80081f8:	08035fcc 	.word	0x08035fcc
 80081fc:	08035fcc 	.word	0x08035fcc
 8008200:	08035fcc 	.word	0x08035fcc
 8008204:	08035fd0 	.word	0x08035fd0

08008208 <memset>:
 8008208:	4402      	add	r2, r0
 800820a:	4603      	mov	r3, r0
 800820c:	4293      	cmp	r3, r2
 800820e:	d100      	bne.n	8008212 <memset+0xa>
 8008210:	4770      	bx	lr
 8008212:	f803 1b01 	strb.w	r1, [r3], #1
 8008216:	e7f9      	b.n	800820c <memset+0x4>

08008218 <__cvt>:
 8008218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	ec55 4b10 	vmov	r4, r5, d0
 8008220:	2d00      	cmp	r5, #0
 8008222:	460e      	mov	r6, r1
 8008224:	4619      	mov	r1, r3
 8008226:	462b      	mov	r3, r5
 8008228:	bfbb      	ittet	lt
 800822a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800822e:	461d      	movlt	r5, r3
 8008230:	2300      	movge	r3, #0
 8008232:	232d      	movlt	r3, #45	; 0x2d
 8008234:	700b      	strb	r3, [r1, #0]
 8008236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008238:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800823c:	4691      	mov	r9, r2
 800823e:	f023 0820 	bic.w	r8, r3, #32
 8008242:	bfbc      	itt	lt
 8008244:	4622      	movlt	r2, r4
 8008246:	4614      	movlt	r4, r2
 8008248:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800824c:	d005      	beq.n	800825a <__cvt+0x42>
 800824e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008252:	d100      	bne.n	8008256 <__cvt+0x3e>
 8008254:	3601      	adds	r6, #1
 8008256:	2102      	movs	r1, #2
 8008258:	e000      	b.n	800825c <__cvt+0x44>
 800825a:	2103      	movs	r1, #3
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	ab02      	add	r3, sp, #8
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	ec45 4b10 	vmov	d0, r4, r5
 8008268:	4653      	mov	r3, sl
 800826a:	4632      	mov	r2, r6
 800826c:	f000 fe18 	bl	8008ea0 <_dtoa_r>
 8008270:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008274:	4607      	mov	r7, r0
 8008276:	d102      	bne.n	800827e <__cvt+0x66>
 8008278:	f019 0f01 	tst.w	r9, #1
 800827c:	d022      	beq.n	80082c4 <__cvt+0xac>
 800827e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008282:	eb07 0906 	add.w	r9, r7, r6
 8008286:	d110      	bne.n	80082aa <__cvt+0x92>
 8008288:	783b      	ldrb	r3, [r7, #0]
 800828a:	2b30      	cmp	r3, #48	; 0x30
 800828c:	d10a      	bne.n	80082a4 <__cvt+0x8c>
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800829a:	b918      	cbnz	r0, 80082a4 <__cvt+0x8c>
 800829c:	f1c6 0601 	rsb	r6, r6, #1
 80082a0:	f8ca 6000 	str.w	r6, [sl]
 80082a4:	f8da 3000 	ldr.w	r3, [sl]
 80082a8:	4499      	add	r9, r3
 80082aa:	2200      	movs	r2, #0
 80082ac:	2300      	movs	r3, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f8 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80082b6:	b108      	cbz	r0, 80082bc <__cvt+0xa4>
 80082b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082bc:	2230      	movs	r2, #48	; 0x30
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	454b      	cmp	r3, r9
 80082c2:	d307      	bcc.n	80082d4 <__cvt+0xbc>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c8:	1bdb      	subs	r3, r3, r7
 80082ca:	4638      	mov	r0, r7
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	b004      	add	sp, #16
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	9103      	str	r1, [sp, #12]
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e7f0      	b.n	80082be <__cvt+0xa6>

080082dc <__exponent>:
 80082dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082de:	4603      	mov	r3, r0
 80082e0:	2900      	cmp	r1, #0
 80082e2:	bfb8      	it	lt
 80082e4:	4249      	neglt	r1, r1
 80082e6:	f803 2b02 	strb.w	r2, [r3], #2
 80082ea:	bfb4      	ite	lt
 80082ec:	222d      	movlt	r2, #45	; 0x2d
 80082ee:	222b      	movge	r2, #43	; 0x2b
 80082f0:	2909      	cmp	r1, #9
 80082f2:	7042      	strb	r2, [r0, #1]
 80082f4:	dd2a      	ble.n	800834c <__exponent+0x70>
 80082f6:	f10d 0407 	add.w	r4, sp, #7
 80082fa:	46a4      	mov	ip, r4
 80082fc:	270a      	movs	r7, #10
 80082fe:	46a6      	mov	lr, r4
 8008300:	460a      	mov	r2, r1
 8008302:	fb91 f6f7 	sdiv	r6, r1, r7
 8008306:	fb07 1516 	mls	r5, r7, r6, r1
 800830a:	3530      	adds	r5, #48	; 0x30
 800830c:	2a63      	cmp	r2, #99	; 0x63
 800830e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008312:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008316:	4631      	mov	r1, r6
 8008318:	dcf1      	bgt.n	80082fe <__exponent+0x22>
 800831a:	3130      	adds	r1, #48	; 0x30
 800831c:	f1ae 0502 	sub.w	r5, lr, #2
 8008320:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008324:	1c44      	adds	r4, r0, #1
 8008326:	4629      	mov	r1, r5
 8008328:	4561      	cmp	r1, ip
 800832a:	d30a      	bcc.n	8008342 <__exponent+0x66>
 800832c:	f10d 0209 	add.w	r2, sp, #9
 8008330:	eba2 020e 	sub.w	r2, r2, lr
 8008334:	4565      	cmp	r5, ip
 8008336:	bf88      	it	hi
 8008338:	2200      	movhi	r2, #0
 800833a:	4413      	add	r3, r2
 800833c:	1a18      	subs	r0, r3, r0
 800833e:	b003      	add	sp, #12
 8008340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008346:	f804 2f01 	strb.w	r2, [r4, #1]!
 800834a:	e7ed      	b.n	8008328 <__exponent+0x4c>
 800834c:	2330      	movs	r3, #48	; 0x30
 800834e:	3130      	adds	r1, #48	; 0x30
 8008350:	7083      	strb	r3, [r0, #2]
 8008352:	70c1      	strb	r1, [r0, #3]
 8008354:	1d03      	adds	r3, r0, #4
 8008356:	e7f1      	b.n	800833c <__exponent+0x60>

08008358 <_printf_float>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	ed2d 8b02 	vpush	{d8}
 8008360:	b08d      	sub	sp, #52	; 0x34
 8008362:	460c      	mov	r4, r1
 8008364:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008368:	4616      	mov	r6, r2
 800836a:	461f      	mov	r7, r3
 800836c:	4605      	mov	r5, r0
 800836e:	f001 fd3d 	bl	8009dec <_localeconv_r>
 8008372:	f8d0 a000 	ldr.w	sl, [r0]
 8008376:	4650      	mov	r0, sl
 8008378:	f7f7 ff2a 	bl	80001d0 <strlen>
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	; 0x28
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	f8d8 3000 	ldr.w	r3, [r8]
 8008388:	f894 b018 	ldrb.w	fp, [r4, #24]
 800838c:	3307      	adds	r3, #7
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	f103 0208 	add.w	r2, r3, #8
 8008396:	f8c8 2000 	str.w	r2, [r8]
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80083b0:	ee08 0a10 	vmov	s16, r0
 80083b4:	4b9f      	ldr	r3, [pc, #636]	; (8008634 <_printf_float+0x2dc>)
 80083b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ba:	f04f 32ff 	mov.w	r2, #4294967295
 80083be:	f7f8 fbb5 	bl	8000b2c <__aeabi_dcmpun>
 80083c2:	bb88      	cbnz	r0, 8008428 <_printf_float+0xd0>
 80083c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c8:	4b9a      	ldr	r3, [pc, #616]	; (8008634 <_printf_float+0x2dc>)
 80083ca:	f04f 32ff 	mov.w	r2, #4294967295
 80083ce:	f7f8 fb8f 	bl	8000af0 <__aeabi_dcmple>
 80083d2:	bb48      	cbnz	r0, 8008428 <_printf_float+0xd0>
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 fb7e 	bl	8000adc <__aeabi_dcmplt>
 80083e0:	b110      	cbz	r0, 80083e8 <_printf_float+0x90>
 80083e2:	232d      	movs	r3, #45	; 0x2d
 80083e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e8:	4b93      	ldr	r3, [pc, #588]	; (8008638 <_printf_float+0x2e0>)
 80083ea:	4894      	ldr	r0, [pc, #592]	; (800863c <_printf_float+0x2e4>)
 80083ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083f0:	bf94      	ite	ls
 80083f2:	4698      	movls	r8, r3
 80083f4:	4680      	movhi	r8, r0
 80083f6:	2303      	movs	r3, #3
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	f023 0204 	bic.w	r2, r3, #4
 8008400:	6022      	str	r2, [r4, #0]
 8008402:	f04f 0900 	mov.w	r9, #0
 8008406:	9700      	str	r7, [sp, #0]
 8008408:	4633      	mov	r3, r6
 800840a:	aa0b      	add	r2, sp, #44	; 0x2c
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f000 f9d8 	bl	80087c4 <_printf_common>
 8008414:	3001      	adds	r0, #1
 8008416:	f040 8090 	bne.w	800853a <_printf_float+0x1e2>
 800841a:	f04f 30ff 	mov.w	r0, #4294967295
 800841e:	b00d      	add	sp, #52	; 0x34
 8008420:	ecbd 8b02 	vpop	{d8}
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 8008434:	b140      	cbz	r0, 8008448 <_printf_float+0xf0>
 8008436:	464b      	mov	r3, r9
 8008438:	2b00      	cmp	r3, #0
 800843a:	bfbc      	itt	lt
 800843c:	232d      	movlt	r3, #45	; 0x2d
 800843e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008442:	487f      	ldr	r0, [pc, #508]	; (8008640 <_printf_float+0x2e8>)
 8008444:	4b7f      	ldr	r3, [pc, #508]	; (8008644 <_printf_float+0x2ec>)
 8008446:	e7d1      	b.n	80083ec <_printf_float+0x94>
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800844e:	9206      	str	r2, [sp, #24]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	d13f      	bne.n	80084d4 <_printf_float+0x17c>
 8008454:	2306      	movs	r3, #6
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	9b05      	ldr	r3, [sp, #20]
 800845a:	6861      	ldr	r1, [r4, #4]
 800845c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008460:	2300      	movs	r3, #0
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	ab0a      	add	r3, sp, #40	; 0x28
 8008466:	e9cd b301 	strd	fp, r3, [sp, #4]
 800846a:	ab09      	add	r3, sp, #36	; 0x24
 800846c:	ec49 8b10 	vmov	d0, r8, r9
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008478:	4628      	mov	r0, r5
 800847a:	f7ff fecd 	bl	8008218 <__cvt>
 800847e:	9b06      	ldr	r3, [sp, #24]
 8008480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008482:	2b47      	cmp	r3, #71	; 0x47
 8008484:	4680      	mov	r8, r0
 8008486:	d108      	bne.n	800849a <_printf_float+0x142>
 8008488:	1cc8      	adds	r0, r1, #3
 800848a:	db02      	blt.n	8008492 <_printf_float+0x13a>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	4299      	cmp	r1, r3
 8008490:	dd41      	ble.n	8008516 <_printf_float+0x1be>
 8008492:	f1ab 0b02 	sub.w	fp, fp, #2
 8008496:	fa5f fb8b 	uxtb.w	fp, fp
 800849a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800849e:	d820      	bhi.n	80084e2 <_printf_float+0x18a>
 80084a0:	3901      	subs	r1, #1
 80084a2:	465a      	mov	r2, fp
 80084a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084a8:	9109      	str	r1, [sp, #36]	; 0x24
 80084aa:	f7ff ff17 	bl	80082dc <__exponent>
 80084ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b0:	1813      	adds	r3, r2, r0
 80084b2:	2a01      	cmp	r2, #1
 80084b4:	4681      	mov	r9, r0
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	dc02      	bgt.n	80084c0 <_printf_float+0x168>
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	07d2      	lsls	r2, r2, #31
 80084be:	d501      	bpl.n	80084c4 <_printf_float+0x16c>
 80084c0:	3301      	adds	r3, #1
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d09c      	beq.n	8008406 <_printf_float+0xae>
 80084cc:	232d      	movs	r3, #45	; 0x2d
 80084ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d2:	e798      	b.n	8008406 <_printf_float+0xae>
 80084d4:	9a06      	ldr	r2, [sp, #24]
 80084d6:	2a47      	cmp	r2, #71	; 0x47
 80084d8:	d1be      	bne.n	8008458 <_printf_float+0x100>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1bc      	bne.n	8008458 <_printf_float+0x100>
 80084de:	2301      	movs	r3, #1
 80084e0:	e7b9      	b.n	8008456 <_printf_float+0xfe>
 80084e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084e6:	d118      	bne.n	800851a <_printf_float+0x1c2>
 80084e8:	2900      	cmp	r1, #0
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	dd0b      	ble.n	8008506 <_printf_float+0x1ae>
 80084ee:	6121      	str	r1, [r4, #16]
 80084f0:	b913      	cbnz	r3, 80084f8 <_printf_float+0x1a0>
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	07d0      	lsls	r0, r2, #31
 80084f6:	d502      	bpl.n	80084fe <_printf_float+0x1a6>
 80084f8:	3301      	adds	r3, #1
 80084fa:	440b      	add	r3, r1
 80084fc:	6123      	str	r3, [r4, #16]
 80084fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008500:	f04f 0900 	mov.w	r9, #0
 8008504:	e7de      	b.n	80084c4 <_printf_float+0x16c>
 8008506:	b913      	cbnz	r3, 800850e <_printf_float+0x1b6>
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	07d2      	lsls	r2, r2, #31
 800850c:	d501      	bpl.n	8008512 <_printf_float+0x1ba>
 800850e:	3302      	adds	r3, #2
 8008510:	e7f4      	b.n	80084fc <_printf_float+0x1a4>
 8008512:	2301      	movs	r3, #1
 8008514:	e7f2      	b.n	80084fc <_printf_float+0x1a4>
 8008516:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	4299      	cmp	r1, r3
 800851e:	db05      	blt.n	800852c <_printf_float+0x1d4>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	6121      	str	r1, [r4, #16]
 8008524:	07d8      	lsls	r0, r3, #31
 8008526:	d5ea      	bpl.n	80084fe <_printf_float+0x1a6>
 8008528:	1c4b      	adds	r3, r1, #1
 800852a:	e7e7      	b.n	80084fc <_printf_float+0x1a4>
 800852c:	2900      	cmp	r1, #0
 800852e:	bfd4      	ite	le
 8008530:	f1c1 0202 	rsble	r2, r1, #2
 8008534:	2201      	movgt	r2, #1
 8008536:	4413      	add	r3, r2
 8008538:	e7e0      	b.n	80084fc <_printf_float+0x1a4>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	055a      	lsls	r2, r3, #21
 800853e:	d407      	bmi.n	8008550 <_printf_float+0x1f8>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	4642      	mov	r2, r8
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	d12c      	bne.n	80085a8 <_printf_float+0x250>
 800854e:	e764      	b.n	800841a <_printf_float+0xc2>
 8008550:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008554:	f240 80e0 	bls.w	8008718 <_printf_float+0x3c0>
 8008558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800855c:	2200      	movs	r2, #0
 800855e:	2300      	movs	r3, #0
 8008560:	f7f8 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008564:	2800      	cmp	r0, #0
 8008566:	d034      	beq.n	80085d2 <_printf_float+0x27a>
 8008568:	4a37      	ldr	r2, [pc, #220]	; (8008648 <_printf_float+0x2f0>)
 800856a:	2301      	movs	r3, #1
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af51 	beq.w	800841a <_printf_float+0xc2>
 8008578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800857c:	429a      	cmp	r2, r3
 800857e:	db02      	blt.n	8008586 <_printf_float+0x22e>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	07d8      	lsls	r0, r3, #31
 8008584:	d510      	bpl.n	80085a8 <_printf_float+0x250>
 8008586:	ee18 3a10 	vmov	r3, s16
 800858a:	4652      	mov	r2, sl
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af41 	beq.w	800841a <_printf_float+0xc2>
 8008598:	f04f 0800 	mov.w	r8, #0
 800859c:	f104 091a 	add.w	r9, r4, #26
 80085a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a2:	3b01      	subs	r3, #1
 80085a4:	4543      	cmp	r3, r8
 80085a6:	dc09      	bgt.n	80085bc <_printf_float+0x264>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	079b      	lsls	r3, r3, #30
 80085ac:	f100 8105 	bmi.w	80087ba <_printf_float+0x462>
 80085b0:	68e0      	ldr	r0, [r4, #12]
 80085b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b4:	4298      	cmp	r0, r3
 80085b6:	bfb8      	it	lt
 80085b8:	4618      	movlt	r0, r3
 80085ba:	e730      	b.n	800841e <_printf_float+0xc6>
 80085bc:	2301      	movs	r3, #1
 80085be:	464a      	mov	r2, r9
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af27 	beq.w	800841a <_printf_float+0xc2>
 80085cc:	f108 0801 	add.w	r8, r8, #1
 80085d0:	e7e6      	b.n	80085a0 <_printf_float+0x248>
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc39      	bgt.n	800864c <_printf_float+0x2f4>
 80085d8:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <_printf_float+0x2f0>)
 80085da:	2301      	movs	r3, #1
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f af19 	beq.w	800841a <_printf_float+0xc2>
 80085e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ec:	4313      	orrs	r3, r2
 80085ee:	d102      	bne.n	80085f6 <_printf_float+0x29e>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d5d8      	bpl.n	80085a8 <_printf_float+0x250>
 80085f6:	ee18 3a10 	vmov	r3, s16
 80085fa:	4652      	mov	r2, sl
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	47b8      	blx	r7
 8008602:	3001      	adds	r0, #1
 8008604:	f43f af09 	beq.w	800841a <_printf_float+0xc2>
 8008608:	f04f 0900 	mov.w	r9, #0
 800860c:	f104 0a1a 	add.w	sl, r4, #26
 8008610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008612:	425b      	negs	r3, r3
 8008614:	454b      	cmp	r3, r9
 8008616:	dc01      	bgt.n	800861c <_printf_float+0x2c4>
 8008618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861a:	e792      	b.n	8008542 <_printf_float+0x1ea>
 800861c:	2301      	movs	r3, #1
 800861e:	4652      	mov	r2, sl
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f aef7 	beq.w	800841a <_printf_float+0xc2>
 800862c:	f109 0901 	add.w	r9, r9, #1
 8008630:	e7ee      	b.n	8008610 <_printf_float+0x2b8>
 8008632:	bf00      	nop
 8008634:	7fefffff 	.word	0x7fefffff
 8008638:	08035bec 	.word	0x08035bec
 800863c:	08035bf0 	.word	0x08035bf0
 8008640:	08035bf8 	.word	0x08035bf8
 8008644:	08035bf4 	.word	0x08035bf4
 8008648:	08035bfc 	.word	0x08035bfc
 800864c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800864e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008650:	429a      	cmp	r2, r3
 8008652:	bfa8      	it	ge
 8008654:	461a      	movge	r2, r3
 8008656:	2a00      	cmp	r2, #0
 8008658:	4691      	mov	r9, r2
 800865a:	dc37      	bgt.n	80086cc <_printf_float+0x374>
 800865c:	f04f 0b00 	mov.w	fp, #0
 8008660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008664:	f104 021a 	add.w	r2, r4, #26
 8008668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	eba3 0309 	sub.w	r3, r3, r9
 8008670:	455b      	cmp	r3, fp
 8008672:	dc33      	bgt.n	80086dc <_printf_float+0x384>
 8008674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008678:	429a      	cmp	r2, r3
 800867a:	db3b      	blt.n	80086f4 <_printf_float+0x39c>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d438      	bmi.n	80086f4 <_printf_float+0x39c>
 8008682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008684:	9a05      	ldr	r2, [sp, #20]
 8008686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008688:	1a9a      	subs	r2, r3, r2
 800868a:	eba3 0901 	sub.w	r9, r3, r1
 800868e:	4591      	cmp	r9, r2
 8008690:	bfa8      	it	ge
 8008692:	4691      	movge	r9, r2
 8008694:	f1b9 0f00 	cmp.w	r9, #0
 8008698:	dc35      	bgt.n	8008706 <_printf_float+0x3ae>
 800869a:	f04f 0800 	mov.w	r8, #0
 800869e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a2:	f104 0a1a 	add.w	sl, r4, #26
 80086a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	eba3 0309 	sub.w	r3, r3, r9
 80086b0:	4543      	cmp	r3, r8
 80086b2:	f77f af79 	ble.w	80085a8 <_printf_float+0x250>
 80086b6:	2301      	movs	r3, #1
 80086b8:	4652      	mov	r2, sl
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	f43f aeaa 	beq.w	800841a <_printf_float+0xc2>
 80086c6:	f108 0801 	add.w	r8, r8, #1
 80086ca:	e7ec      	b.n	80086a6 <_printf_float+0x34e>
 80086cc:	4613      	mov	r3, r2
 80086ce:	4631      	mov	r1, r6
 80086d0:	4642      	mov	r2, r8
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	d1c0      	bne.n	800865c <_printf_float+0x304>
 80086da:	e69e      	b.n	800841a <_printf_float+0xc2>
 80086dc:	2301      	movs	r3, #1
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	9205      	str	r2, [sp, #20]
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f ae97 	beq.w	800841a <_printf_float+0xc2>
 80086ec:	9a05      	ldr	r2, [sp, #20]
 80086ee:	f10b 0b01 	add.w	fp, fp, #1
 80086f2:	e7b9      	b.n	8008668 <_printf_float+0x310>
 80086f4:	ee18 3a10 	vmov	r3, s16
 80086f8:	4652      	mov	r2, sl
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	d1be      	bne.n	8008682 <_printf_float+0x32a>
 8008704:	e689      	b.n	800841a <_printf_float+0xc2>
 8008706:	9a05      	ldr	r2, [sp, #20]
 8008708:	464b      	mov	r3, r9
 800870a:	4442      	add	r2, r8
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	d1c1      	bne.n	800869a <_printf_float+0x342>
 8008716:	e680      	b.n	800841a <_printf_float+0xc2>
 8008718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800871a:	2a01      	cmp	r2, #1
 800871c:	dc01      	bgt.n	8008722 <_printf_float+0x3ca>
 800871e:	07db      	lsls	r3, r3, #31
 8008720:	d538      	bpl.n	8008794 <_printf_float+0x43c>
 8008722:	2301      	movs	r3, #1
 8008724:	4642      	mov	r2, r8
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae74 	beq.w	800841a <_printf_float+0xc2>
 8008732:	ee18 3a10 	vmov	r3, s16
 8008736:	4652      	mov	r2, sl
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	f43f ae6b 	beq.w	800841a <_printf_float+0xc2>
 8008744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008748:	2200      	movs	r2, #0
 800874a:	2300      	movs	r3, #0
 800874c:	f7f8 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008750:	b9d8      	cbnz	r0, 800878a <_printf_float+0x432>
 8008752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008754:	f108 0201 	add.w	r2, r8, #1
 8008758:	3b01      	subs	r3, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d10e      	bne.n	8008782 <_printf_float+0x42a>
 8008764:	e659      	b.n	800841a <_printf_float+0xc2>
 8008766:	2301      	movs	r3, #1
 8008768:	4652      	mov	r2, sl
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae52 	beq.w	800841a <_printf_float+0xc2>
 8008776:	f108 0801 	add.w	r8, r8, #1
 800877a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877c:	3b01      	subs	r3, #1
 800877e:	4543      	cmp	r3, r8
 8008780:	dcf1      	bgt.n	8008766 <_printf_float+0x40e>
 8008782:	464b      	mov	r3, r9
 8008784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008788:	e6dc      	b.n	8008544 <_printf_float+0x1ec>
 800878a:	f04f 0800 	mov.w	r8, #0
 800878e:	f104 0a1a 	add.w	sl, r4, #26
 8008792:	e7f2      	b.n	800877a <_printf_float+0x422>
 8008794:	2301      	movs	r3, #1
 8008796:	4642      	mov	r2, r8
 8008798:	e7df      	b.n	800875a <_printf_float+0x402>
 800879a:	2301      	movs	r3, #1
 800879c:	464a      	mov	r2, r9
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	f43f ae38 	beq.w	800841a <_printf_float+0xc2>
 80087aa:	f108 0801 	add.w	r8, r8, #1
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	4543      	cmp	r3, r8
 80087b6:	dcf0      	bgt.n	800879a <_printf_float+0x442>
 80087b8:	e6fa      	b.n	80085b0 <_printf_float+0x258>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	f104 0919 	add.w	r9, r4, #25
 80087c2:	e7f4      	b.n	80087ae <_printf_float+0x456>

080087c4 <_printf_common>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	4616      	mov	r6, r2
 80087ca:	4699      	mov	r9, r3
 80087cc:	688a      	ldr	r2, [r1, #8]
 80087ce:	690b      	ldr	r3, [r1, #16]
 80087d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	bfb8      	it	lt
 80087d8:	4613      	movlt	r3, r2
 80087da:	6033      	str	r3, [r6, #0]
 80087dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e0:	4607      	mov	r7, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	b10a      	cbz	r2, 80087ea <_printf_common+0x26>
 80087e6:	3301      	adds	r3, #1
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	0699      	lsls	r1, r3, #26
 80087ee:	bf42      	ittt	mi
 80087f0:	6833      	ldrmi	r3, [r6, #0]
 80087f2:	3302      	addmi	r3, #2
 80087f4:	6033      	strmi	r3, [r6, #0]
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	f015 0506 	ands.w	r5, r5, #6
 80087fc:	d106      	bne.n	800880c <_printf_common+0x48>
 80087fe:	f104 0a19 	add.w	sl, r4, #25
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	6832      	ldr	r2, [r6, #0]
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc26      	bgt.n	800885a <_printf_common+0x96>
 800880c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008810:	1e13      	subs	r3, r2, #0
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	bf18      	it	ne
 8008816:	2301      	movne	r3, #1
 8008818:	0692      	lsls	r2, r2, #26
 800881a:	d42b      	bmi.n	8008874 <_printf_common+0xb0>
 800881c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008820:	4649      	mov	r1, r9
 8008822:	4638      	mov	r0, r7
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d01e      	beq.n	8008868 <_printf_common+0xa4>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	68e5      	ldr	r5, [r4, #12]
 800882e:	6832      	ldr	r2, [r6, #0]
 8008830:	f003 0306 	and.w	r3, r3, #6
 8008834:	2b04      	cmp	r3, #4
 8008836:	bf08      	it	eq
 8008838:	1aad      	subeq	r5, r5, r2
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	bf0c      	ite	eq
 8008840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008844:	2500      	movne	r5, #0
 8008846:	4293      	cmp	r3, r2
 8008848:	bfc4      	itt	gt
 800884a:	1a9b      	subgt	r3, r3, r2
 800884c:	18ed      	addgt	r5, r5, r3
 800884e:	2600      	movs	r6, #0
 8008850:	341a      	adds	r4, #26
 8008852:	42b5      	cmp	r5, r6
 8008854:	d11a      	bne.n	800888c <_printf_common+0xc8>
 8008856:	2000      	movs	r0, #0
 8008858:	e008      	b.n	800886c <_printf_common+0xa8>
 800885a:	2301      	movs	r3, #1
 800885c:	4652      	mov	r2, sl
 800885e:	4649      	mov	r1, r9
 8008860:	4638      	mov	r0, r7
 8008862:	47c0      	blx	r8
 8008864:	3001      	adds	r0, #1
 8008866:	d103      	bne.n	8008870 <_printf_common+0xac>
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008870:	3501      	adds	r5, #1
 8008872:	e7c6      	b.n	8008802 <_printf_common+0x3e>
 8008874:	18e1      	adds	r1, r4, r3
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	2030      	movs	r0, #48	; 0x30
 800887a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800887e:	4422      	add	r2, r4
 8008880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008888:	3302      	adds	r3, #2
 800888a:	e7c7      	b.n	800881c <_printf_common+0x58>
 800888c:	2301      	movs	r3, #1
 800888e:	4622      	mov	r2, r4
 8008890:	4649      	mov	r1, r9
 8008892:	4638      	mov	r0, r7
 8008894:	47c0      	blx	r8
 8008896:	3001      	adds	r0, #1
 8008898:	d0e6      	beq.n	8008868 <_printf_common+0xa4>
 800889a:	3601      	adds	r6, #1
 800889c:	e7d9      	b.n	8008852 <_printf_common+0x8e>
	...

080088a0 <_printf_i>:
 80088a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	7e0f      	ldrb	r7, [r1, #24]
 80088a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088a8:	2f78      	cmp	r7, #120	; 0x78
 80088aa:	4691      	mov	r9, r2
 80088ac:	4680      	mov	r8, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	469a      	mov	sl, r3
 80088b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088b6:	d807      	bhi.n	80088c8 <_printf_i+0x28>
 80088b8:	2f62      	cmp	r7, #98	; 0x62
 80088ba:	d80a      	bhi.n	80088d2 <_printf_i+0x32>
 80088bc:	2f00      	cmp	r7, #0
 80088be:	f000 80d8 	beq.w	8008a72 <_printf_i+0x1d2>
 80088c2:	2f58      	cmp	r7, #88	; 0x58
 80088c4:	f000 80a3 	beq.w	8008a0e <_printf_i+0x16e>
 80088c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d0:	e03a      	b.n	8008948 <_printf_i+0xa8>
 80088d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088d6:	2b15      	cmp	r3, #21
 80088d8:	d8f6      	bhi.n	80088c8 <_printf_i+0x28>
 80088da:	a101      	add	r1, pc, #4	; (adr r1, 80088e0 <_printf_i+0x40>)
 80088dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e0:	08008939 	.word	0x08008939
 80088e4:	0800894d 	.word	0x0800894d
 80088e8:	080088c9 	.word	0x080088c9
 80088ec:	080088c9 	.word	0x080088c9
 80088f0:	080088c9 	.word	0x080088c9
 80088f4:	080088c9 	.word	0x080088c9
 80088f8:	0800894d 	.word	0x0800894d
 80088fc:	080088c9 	.word	0x080088c9
 8008900:	080088c9 	.word	0x080088c9
 8008904:	080088c9 	.word	0x080088c9
 8008908:	080088c9 	.word	0x080088c9
 800890c:	08008a59 	.word	0x08008a59
 8008910:	0800897d 	.word	0x0800897d
 8008914:	08008a3b 	.word	0x08008a3b
 8008918:	080088c9 	.word	0x080088c9
 800891c:	080088c9 	.word	0x080088c9
 8008920:	08008a7b 	.word	0x08008a7b
 8008924:	080088c9 	.word	0x080088c9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088c9 	.word	0x080088c9
 8008930:	080088c9 	.word	0x080088c9
 8008934:	08008a43 	.word	0x08008a43
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	602a      	str	r2, [r5, #0]
 8008940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008948:	2301      	movs	r3, #1
 800894a:	e0a3      	b.n	8008a94 <_printf_i+0x1f4>
 800894c:	6820      	ldr	r0, [r4, #0]
 800894e:	6829      	ldr	r1, [r5, #0]
 8008950:	0606      	lsls	r6, r0, #24
 8008952:	f101 0304 	add.w	r3, r1, #4
 8008956:	d50a      	bpl.n	800896e <_printf_i+0xce>
 8008958:	680e      	ldr	r6, [r1, #0]
 800895a:	602b      	str	r3, [r5, #0]
 800895c:	2e00      	cmp	r6, #0
 800895e:	da03      	bge.n	8008968 <_printf_i+0xc8>
 8008960:	232d      	movs	r3, #45	; 0x2d
 8008962:	4276      	negs	r6, r6
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008968:	485e      	ldr	r0, [pc, #376]	; (8008ae4 <_printf_i+0x244>)
 800896a:	230a      	movs	r3, #10
 800896c:	e019      	b.n	80089a2 <_printf_i+0x102>
 800896e:	680e      	ldr	r6, [r1, #0]
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008976:	bf18      	it	ne
 8008978:	b236      	sxthne	r6, r6
 800897a:	e7ef      	b.n	800895c <_printf_i+0xbc>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	1d19      	adds	r1, r3, #4
 8008982:	6029      	str	r1, [r5, #0]
 8008984:	0601      	lsls	r1, r0, #24
 8008986:	d501      	bpl.n	800898c <_printf_i+0xec>
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	e002      	b.n	8008992 <_printf_i+0xf2>
 800898c:	0646      	lsls	r6, r0, #25
 800898e:	d5fb      	bpl.n	8008988 <_printf_i+0xe8>
 8008990:	881e      	ldrh	r6, [r3, #0]
 8008992:	4854      	ldr	r0, [pc, #336]	; (8008ae4 <_printf_i+0x244>)
 8008994:	2f6f      	cmp	r7, #111	; 0x6f
 8008996:	bf0c      	ite	eq
 8008998:	2308      	moveq	r3, #8
 800899a:	230a      	movne	r3, #10
 800899c:	2100      	movs	r1, #0
 800899e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a2:	6865      	ldr	r5, [r4, #4]
 80089a4:	60a5      	str	r5, [r4, #8]
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	bfa2      	ittt	ge
 80089aa:	6821      	ldrge	r1, [r4, #0]
 80089ac:	f021 0104 	bicge.w	r1, r1, #4
 80089b0:	6021      	strge	r1, [r4, #0]
 80089b2:	b90e      	cbnz	r6, 80089b8 <_printf_i+0x118>
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	d04d      	beq.n	8008a54 <_printf_i+0x1b4>
 80089b8:	4615      	mov	r5, r2
 80089ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80089be:	fb03 6711 	mls	r7, r3, r1, r6
 80089c2:	5dc7      	ldrb	r7, [r0, r7]
 80089c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089c8:	4637      	mov	r7, r6
 80089ca:	42bb      	cmp	r3, r7
 80089cc:	460e      	mov	r6, r1
 80089ce:	d9f4      	bls.n	80089ba <_printf_i+0x11a>
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d10b      	bne.n	80089ec <_printf_i+0x14c>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	07de      	lsls	r6, r3, #31
 80089d8:	d508      	bpl.n	80089ec <_printf_i+0x14c>
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	4299      	cmp	r1, r3
 80089e0:	bfde      	ittt	le
 80089e2:	2330      	movle	r3, #48	; 0x30
 80089e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ec:	1b52      	subs	r2, r2, r5
 80089ee:	6122      	str	r2, [r4, #16]
 80089f0:	f8cd a000 	str.w	sl, [sp]
 80089f4:	464b      	mov	r3, r9
 80089f6:	aa03      	add	r2, sp, #12
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f7ff fee2 	bl	80087c4 <_printf_common>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d14c      	bne.n	8008a9e <_printf_i+0x1fe>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b004      	add	sp, #16
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	4835      	ldr	r0, [pc, #212]	; (8008ae4 <_printf_i+0x244>)
 8008a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a14:	6829      	ldr	r1, [r5, #0]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a1c:	6029      	str	r1, [r5, #0]
 8008a1e:	061d      	lsls	r5, r3, #24
 8008a20:	d514      	bpl.n	8008a4c <_printf_i+0x1ac>
 8008a22:	07df      	lsls	r7, r3, #31
 8008a24:	bf44      	itt	mi
 8008a26:	f043 0320 	orrmi.w	r3, r3, #32
 8008a2a:	6023      	strmi	r3, [r4, #0]
 8008a2c:	b91e      	cbnz	r6, 8008a36 <_printf_i+0x196>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f023 0320 	bic.w	r3, r3, #32
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	2310      	movs	r3, #16
 8008a38:	e7b0      	b.n	800899c <_printf_i+0xfc>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	f043 0320 	orr.w	r3, r3, #32
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	2378      	movs	r3, #120	; 0x78
 8008a44:	4828      	ldr	r0, [pc, #160]	; (8008ae8 <_printf_i+0x248>)
 8008a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a4a:	e7e3      	b.n	8008a14 <_printf_i+0x174>
 8008a4c:	0659      	lsls	r1, r3, #25
 8008a4e:	bf48      	it	mi
 8008a50:	b2b6      	uxthmi	r6, r6
 8008a52:	e7e6      	b.n	8008a22 <_printf_i+0x182>
 8008a54:	4615      	mov	r5, r2
 8008a56:	e7bb      	b.n	80089d0 <_printf_i+0x130>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	6826      	ldr	r6, [r4, #0]
 8008a5c:	6961      	ldr	r1, [r4, #20]
 8008a5e:	1d18      	adds	r0, r3, #4
 8008a60:	6028      	str	r0, [r5, #0]
 8008a62:	0635      	lsls	r5, r6, #24
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	d501      	bpl.n	8008a6c <_printf_i+0x1cc>
 8008a68:	6019      	str	r1, [r3, #0]
 8008a6a:	e002      	b.n	8008a72 <_printf_i+0x1d2>
 8008a6c:	0670      	lsls	r0, r6, #25
 8008a6e:	d5fb      	bpl.n	8008a68 <_printf_i+0x1c8>
 8008a70:	8019      	strh	r1, [r3, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	4615      	mov	r5, r2
 8008a78:	e7ba      	b.n	80089f0 <_printf_i+0x150>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	602a      	str	r2, [r5, #0]
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	2100      	movs	r1, #0
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7f7 fbaa 	bl	80001e0 <memchr>
 8008a8c:	b108      	cbz	r0, 8008a92 <_printf_i+0x1f2>
 8008a8e:	1b40      	subs	r0, r0, r5
 8008a90:	6060      	str	r0, [r4, #4]
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	2300      	movs	r3, #0
 8008a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9c:	e7a8      	b.n	80089f0 <_printf_i+0x150>
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	47d0      	blx	sl
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d0ab      	beq.n	8008a04 <_printf_i+0x164>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	079b      	lsls	r3, r3, #30
 8008ab0:	d413      	bmi.n	8008ada <_printf_i+0x23a>
 8008ab2:	68e0      	ldr	r0, [r4, #12]
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	4298      	cmp	r0, r3
 8008ab8:	bfb8      	it	lt
 8008aba:	4618      	movlt	r0, r3
 8008abc:	e7a4      	b.n	8008a08 <_printf_i+0x168>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	47d0      	blx	sl
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d09b      	beq.n	8008a04 <_printf_i+0x164>
 8008acc:	3501      	adds	r5, #1
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	9903      	ldr	r1, [sp, #12]
 8008ad2:	1a5b      	subs	r3, r3, r1
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dcf2      	bgt.n	8008abe <_printf_i+0x21e>
 8008ad8:	e7eb      	b.n	8008ab2 <_printf_i+0x212>
 8008ada:	2500      	movs	r5, #0
 8008adc:	f104 0619 	add.w	r6, r4, #25
 8008ae0:	e7f5      	b.n	8008ace <_printf_i+0x22e>
 8008ae2:	bf00      	nop
 8008ae4:	08035bfe 	.word	0x08035bfe
 8008ae8:	08035c0f 	.word	0x08035c0f

08008aec <iprintf>:
 8008aec:	b40f      	push	{r0, r1, r2, r3}
 8008aee:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <iprintf+0x2c>)
 8008af0:	b513      	push	{r0, r1, r4, lr}
 8008af2:	681c      	ldr	r4, [r3, #0]
 8008af4:	b124      	cbz	r4, 8008b00 <iprintf+0x14>
 8008af6:	69a3      	ldr	r3, [r4, #24]
 8008af8:	b913      	cbnz	r3, 8008b00 <iprintf+0x14>
 8008afa:	4620      	mov	r0, r4
 8008afc:	f001 f8d8 	bl	8009cb0 <__sinit>
 8008b00:	ab05      	add	r3, sp, #20
 8008b02:	9a04      	ldr	r2, [sp, #16]
 8008b04:	68a1      	ldr	r1, [r4, #8]
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f001 fe95 	bl	800a838 <_vfiprintf_r>
 8008b0e:	b002      	add	sp, #8
 8008b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b14:	b004      	add	sp, #16
 8008b16:	4770      	bx	lr
 8008b18:	20000058 	.word	0x20000058

08008b1c <_puts_r>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	460e      	mov	r6, r1
 8008b20:	4605      	mov	r5, r0
 8008b22:	b118      	cbz	r0, 8008b2c <_puts_r+0x10>
 8008b24:	6983      	ldr	r3, [r0, #24]
 8008b26:	b90b      	cbnz	r3, 8008b2c <_puts_r+0x10>
 8008b28:	f001 f8c2 	bl	8009cb0 <__sinit>
 8008b2c:	69ab      	ldr	r3, [r5, #24]
 8008b2e:	68ac      	ldr	r4, [r5, #8]
 8008b30:	b913      	cbnz	r3, 8008b38 <_puts_r+0x1c>
 8008b32:	4628      	mov	r0, r5
 8008b34:	f001 f8bc 	bl	8009cb0 <__sinit>
 8008b38:	4b2c      	ldr	r3, [pc, #176]	; (8008bec <_puts_r+0xd0>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d120      	bne.n	8008b80 <_puts_r+0x64>
 8008b3e:	686c      	ldr	r4, [r5, #4]
 8008b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b42:	07db      	lsls	r3, r3, #31
 8008b44:	d405      	bmi.n	8008b52 <_puts_r+0x36>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	0598      	lsls	r0, r3, #22
 8008b4a:	d402      	bmi.n	8008b52 <_puts_r+0x36>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4e:	f001 f952 	bl	8009df6 <__retarget_lock_acquire_recursive>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	0719      	lsls	r1, r3, #28
 8008b56:	d51d      	bpl.n	8008b94 <_puts_r+0x78>
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	b1db      	cbz	r3, 8008b94 <_puts_r+0x78>
 8008b5c:	3e01      	subs	r6, #1
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b64:	3b01      	subs	r3, #1
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	bb39      	cbnz	r1, 8008bba <_puts_r+0x9e>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da38      	bge.n	8008be0 <_puts_r+0xc4>
 8008b6e:	4622      	mov	r2, r4
 8008b70:	210a      	movs	r1, #10
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f848 	bl	8008c08 <__swbuf_r>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d011      	beq.n	8008ba0 <_puts_r+0x84>
 8008b7c:	250a      	movs	r5, #10
 8008b7e:	e011      	b.n	8008ba4 <_puts_r+0x88>
 8008b80:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <_puts_r+0xd4>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <_puts_r+0x6e>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7da      	b.n	8008b40 <_puts_r+0x24>
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <_puts_r+0xd8>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	bf08      	it	eq
 8008b90:	68ec      	ldreq	r4, [r5, #12]
 8008b92:	e7d5      	b.n	8008b40 <_puts_r+0x24>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f888 	bl	8008cac <__swsetup_r>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0dd      	beq.n	8008b5c <_puts_r+0x40>
 8008ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_puts_r+0x9a>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	059b      	lsls	r3, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_puts_r+0x9a>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f001 f921 	bl	8009df8 <__retarget_lock_release_recursive>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da04      	bge.n	8008bc8 <_puts_r+0xac>
 8008bbe:	69a2      	ldr	r2, [r4, #24]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	dc06      	bgt.n	8008bd2 <_puts_r+0xb6>
 8008bc4:	290a      	cmp	r1, #10
 8008bc6:	d004      	beq.n	8008bd2 <_puts_r+0xb6>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	7019      	strb	r1, [r3, #0]
 8008bd0:	e7c5      	b.n	8008b5e <_puts_r+0x42>
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 f817 	bl	8008c08 <__swbuf_r>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d1bf      	bne.n	8008b5e <_puts_r+0x42>
 8008bde:	e7df      	b.n	8008ba0 <_puts_r+0x84>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	250a      	movs	r5, #10
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	701d      	strb	r5, [r3, #0]
 8008bea:	e7db      	b.n	8008ba4 <_puts_r+0x88>
 8008bec:	08035cd0 	.word	0x08035cd0
 8008bf0:	08035cf0 	.word	0x08035cf0
 8008bf4:	08035cb0 	.word	0x08035cb0

08008bf8 <puts>:
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <puts+0xc>)
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	f7ff bf8d 	b.w	8008b1c <_puts_r>
 8008c02:	bf00      	nop
 8008c04:	20000058 	.word	0x20000058

08008c08 <__swbuf_r>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	460e      	mov	r6, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	4605      	mov	r5, r0
 8008c10:	b118      	cbz	r0, 8008c1a <__swbuf_r+0x12>
 8008c12:	6983      	ldr	r3, [r0, #24]
 8008c14:	b90b      	cbnz	r3, 8008c1a <__swbuf_r+0x12>
 8008c16:	f001 f84b 	bl	8009cb0 <__sinit>
 8008c1a:	4b21      	ldr	r3, [pc, #132]	; (8008ca0 <__swbuf_r+0x98>)
 8008c1c:	429c      	cmp	r4, r3
 8008c1e:	d12b      	bne.n	8008c78 <__swbuf_r+0x70>
 8008c20:	686c      	ldr	r4, [r5, #4]
 8008c22:	69a3      	ldr	r3, [r4, #24]
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	071a      	lsls	r2, r3, #28
 8008c2a:	d52f      	bpl.n	8008c8c <__swbuf_r+0x84>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	b36b      	cbz	r3, 8008c8c <__swbuf_r+0x84>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	6820      	ldr	r0, [r4, #0]
 8008c34:	1ac0      	subs	r0, r0, r3
 8008c36:	6963      	ldr	r3, [r4, #20]
 8008c38:	b2f6      	uxtb	r6, r6
 8008c3a:	4283      	cmp	r3, r0
 8008c3c:	4637      	mov	r7, r6
 8008c3e:	dc04      	bgt.n	8008c4a <__swbuf_r+0x42>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 ffa0 	bl	8009b88 <_fflush_r>
 8008c48:	bb30      	cbnz	r0, 8008c98 <__swbuf_r+0x90>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	60a3      	str	r3, [r4, #8]
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	6022      	str	r2, [r4, #0]
 8008c56:	701e      	strb	r6, [r3, #0]
 8008c58:	6963      	ldr	r3, [r4, #20]
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	4283      	cmp	r3, r0
 8008c5e:	d004      	beq.n	8008c6a <__swbuf_r+0x62>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	07db      	lsls	r3, r3, #31
 8008c64:	d506      	bpl.n	8008c74 <__swbuf_r+0x6c>
 8008c66:	2e0a      	cmp	r6, #10
 8008c68:	d104      	bne.n	8008c74 <__swbuf_r+0x6c>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 ff8b 	bl	8009b88 <_fflush_r>
 8008c72:	b988      	cbnz	r0, 8008c98 <__swbuf_r+0x90>
 8008c74:	4638      	mov	r0, r7
 8008c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <__swbuf_r+0x9c>)
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	d101      	bne.n	8008c82 <__swbuf_r+0x7a>
 8008c7e:	68ac      	ldr	r4, [r5, #8]
 8008c80:	e7cf      	b.n	8008c22 <__swbuf_r+0x1a>
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <__swbuf_r+0xa0>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	bf08      	it	eq
 8008c88:	68ec      	ldreq	r4, [r5, #12]
 8008c8a:	e7ca      	b.n	8008c22 <__swbuf_r+0x1a>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 f80c 	bl	8008cac <__swsetup_r>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d0cb      	beq.n	8008c30 <__swbuf_r+0x28>
 8008c98:	f04f 37ff 	mov.w	r7, #4294967295
 8008c9c:	e7ea      	b.n	8008c74 <__swbuf_r+0x6c>
 8008c9e:	bf00      	nop
 8008ca0:	08035cd0 	.word	0x08035cd0
 8008ca4:	08035cf0 	.word	0x08035cf0
 8008ca8:	08035cb0 	.word	0x08035cb0

08008cac <__swsetup_r>:
 8008cac:	4b32      	ldr	r3, [pc, #200]	; (8008d78 <__swsetup_r+0xcc>)
 8008cae:	b570      	push	{r4, r5, r6, lr}
 8008cb0:	681d      	ldr	r5, [r3, #0]
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	b125      	cbz	r5, 8008cc2 <__swsetup_r+0x16>
 8008cb8:	69ab      	ldr	r3, [r5, #24]
 8008cba:	b913      	cbnz	r3, 8008cc2 <__swsetup_r+0x16>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 fff7 	bl	8009cb0 <__sinit>
 8008cc2:	4b2e      	ldr	r3, [pc, #184]	; (8008d7c <__swsetup_r+0xd0>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	d10f      	bne.n	8008ce8 <__swsetup_r+0x3c>
 8008cc8:	686c      	ldr	r4, [r5, #4]
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cd0:	0719      	lsls	r1, r3, #28
 8008cd2:	d42c      	bmi.n	8008d2e <__swsetup_r+0x82>
 8008cd4:	06dd      	lsls	r5, r3, #27
 8008cd6:	d411      	bmi.n	8008cfc <__swsetup_r+0x50>
 8008cd8:	2309      	movs	r3, #9
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	e03e      	b.n	8008d66 <__swsetup_r+0xba>
 8008ce8:	4b25      	ldr	r3, [pc, #148]	; (8008d80 <__swsetup_r+0xd4>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d101      	bne.n	8008cf2 <__swsetup_r+0x46>
 8008cee:	68ac      	ldr	r4, [r5, #8]
 8008cf0:	e7eb      	b.n	8008cca <__swsetup_r+0x1e>
 8008cf2:	4b24      	ldr	r3, [pc, #144]	; (8008d84 <__swsetup_r+0xd8>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	bf08      	it	eq
 8008cf8:	68ec      	ldreq	r4, [r5, #12]
 8008cfa:	e7e6      	b.n	8008cca <__swsetup_r+0x1e>
 8008cfc:	0758      	lsls	r0, r3, #29
 8008cfe:	d512      	bpl.n	8008d26 <__swsetup_r+0x7a>
 8008d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d02:	b141      	cbz	r1, 8008d16 <__swsetup_r+0x6a>
 8008d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	d002      	beq.n	8008d12 <__swsetup_r+0x66>
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f001 fc89 	bl	800a624 <_free_r>
 8008d12:	2300      	movs	r3, #0
 8008d14:	6363      	str	r3, [r4, #52]	; 0x34
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6063      	str	r3, [r4, #4]
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	f043 0308 	orr.w	r3, r3, #8
 8008d2c:	81a3      	strh	r3, [r4, #12]
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	b94b      	cbnz	r3, 8008d46 <__swsetup_r+0x9a>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3c:	d003      	beq.n	8008d46 <__swsetup_r+0x9a>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4630      	mov	r0, r6
 8008d42:	f001 f87f 	bl	8009e44 <__smakebuf_r>
 8008d46:	89a0      	ldrh	r0, [r4, #12]
 8008d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d4c:	f010 0301 	ands.w	r3, r0, #1
 8008d50:	d00a      	beq.n	8008d68 <__swsetup_r+0xbc>
 8008d52:	2300      	movs	r3, #0
 8008d54:	60a3      	str	r3, [r4, #8]
 8008d56:	6963      	ldr	r3, [r4, #20]
 8008d58:	425b      	negs	r3, r3
 8008d5a:	61a3      	str	r3, [r4, #24]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	b943      	cbnz	r3, 8008d72 <__swsetup_r+0xc6>
 8008d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d64:	d1ba      	bne.n	8008cdc <__swsetup_r+0x30>
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	0781      	lsls	r1, r0, #30
 8008d6a:	bf58      	it	pl
 8008d6c:	6963      	ldrpl	r3, [r4, #20]
 8008d6e:	60a3      	str	r3, [r4, #8]
 8008d70:	e7f4      	b.n	8008d5c <__swsetup_r+0xb0>
 8008d72:	2000      	movs	r0, #0
 8008d74:	e7f7      	b.n	8008d66 <__swsetup_r+0xba>
 8008d76:	bf00      	nop
 8008d78:	20000058 	.word	0x20000058
 8008d7c:	08035cd0 	.word	0x08035cd0
 8008d80:	08035cf0 	.word	0x08035cf0
 8008d84:	08035cb0 	.word	0x08035cb0

08008d88 <quorem>:
 8008d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	6903      	ldr	r3, [r0, #16]
 8008d8e:	690c      	ldr	r4, [r1, #16]
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	4607      	mov	r7, r0
 8008d94:	f2c0 8081 	blt.w	8008e9a <quorem+0x112>
 8008d98:	3c01      	subs	r4, #1
 8008d9a:	f101 0814 	add.w	r8, r1, #20
 8008d9e:	f100 0514 	add.w	r5, r0, #20
 8008da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008db0:	3301      	adds	r3, #1
 8008db2:	429a      	cmp	r2, r3
 8008db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dc0:	d331      	bcc.n	8008e26 <quorem+0x9e>
 8008dc2:	f04f 0e00 	mov.w	lr, #0
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	46ac      	mov	ip, r5
 8008dca:	46f2      	mov	sl, lr
 8008dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dd0:	b293      	uxth	r3, r2
 8008dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8008dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8008de0:	f8dc a000 	ldr.w	sl, [ip]
 8008de4:	0c12      	lsrs	r2, r2, #16
 8008de6:	fa13 f38a 	uxtah	r3, r3, sl
 8008dea:	fb06 e202 	mla	r2, r6, r2, lr
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008df6:	b292      	uxth	r2, r2
 8008df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e04:	4581      	cmp	r9, r0
 8008e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e12:	d2db      	bcs.n	8008dcc <quorem+0x44>
 8008e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e18:	b92b      	cbnz	r3, 8008e26 <quorem+0x9e>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	461a      	mov	r2, r3
 8008e22:	d32e      	bcc.n	8008e82 <quorem+0xfa>
 8008e24:	613c      	str	r4, [r7, #16]
 8008e26:	4638      	mov	r0, r7
 8008e28:	f001 fae4 	bl	800a3f4 <__mcmp>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	db24      	blt.n	8008e7a <quorem+0xf2>
 8008e30:	3601      	adds	r6, #1
 8008e32:	4628      	mov	r0, r5
 8008e34:	f04f 0c00 	mov.w	ip, #0
 8008e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8008e40:	b293      	uxth	r3, r2
 8008e42:	ebac 0303 	sub.w	r3, ip, r3
 8008e46:	0c12      	lsrs	r2, r2, #16
 8008e48:	fa13 f38e 	uxtah	r3, r3, lr
 8008e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	45c1      	cmp	r9, r8
 8008e5c:	f840 3b04 	str.w	r3, [r0], #4
 8008e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e64:	d2e8      	bcs.n	8008e38 <quorem+0xb0>
 8008e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6e:	b922      	cbnz	r2, 8008e7a <quorem+0xf2>
 8008e70:	3b04      	subs	r3, #4
 8008e72:	429d      	cmp	r5, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	d30a      	bcc.n	8008e8e <quorem+0x106>
 8008e78:	613c      	str	r4, [r7, #16]
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d1cc      	bne.n	8008e24 <quorem+0x9c>
 8008e8a:	3c01      	subs	r4, #1
 8008e8c:	e7c7      	b.n	8008e1e <quorem+0x96>
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d1f0      	bne.n	8008e78 <quorem+0xf0>
 8008e96:	3c01      	subs	r4, #1
 8008e98:	e7eb      	b.n	8008e72 <quorem+0xea>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e7ee      	b.n	8008e7c <quorem+0xf4>
	...

08008ea0 <_dtoa_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	ed2d 8b04 	vpush	{d8-d9}
 8008ea8:	ec57 6b10 	vmov	r6, r7, d0
 8008eac:	b093      	sub	sp, #76	; 0x4c
 8008eae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008eb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008eb4:	9106      	str	r1, [sp, #24]
 8008eb6:	ee10 aa10 	vmov	sl, s0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec0:	46bb      	mov	fp, r7
 8008ec2:	b975      	cbnz	r5, 8008ee2 <_dtoa_r+0x42>
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	f000 fffd 	bl	8009ec4 <malloc>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6260      	str	r0, [r4, #36]	; 0x24
 8008ece:	b920      	cbnz	r0, 8008eda <_dtoa_r+0x3a>
 8008ed0:	4ba7      	ldr	r3, [pc, #668]	; (8009170 <_dtoa_r+0x2d0>)
 8008ed2:	21ea      	movs	r1, #234	; 0xea
 8008ed4:	48a7      	ldr	r0, [pc, #668]	; (8009174 <_dtoa_r+0x2d4>)
 8008ed6:	f001 fe45 	bl	800ab64 <__assert_func>
 8008eda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ede:	6005      	str	r5, [r0, #0]
 8008ee0:	60c5      	str	r5, [r0, #12]
 8008ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee4:	6819      	ldr	r1, [r3, #0]
 8008ee6:	b151      	cbz	r1, 8008efe <_dtoa_r+0x5e>
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	604a      	str	r2, [r1, #4]
 8008eec:	2301      	movs	r3, #1
 8008eee:	4093      	lsls	r3, r2
 8008ef0:	608b      	str	r3, [r1, #8]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f001 f83c 	bl	8009f70 <_Bfree>
 8008ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	1e3b      	subs	r3, r7, #0
 8008f00:	bfaa      	itet	ge
 8008f02:	2300      	movge	r3, #0
 8008f04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008f08:	f8c8 3000 	strge.w	r3, [r8]
 8008f0c:	4b9a      	ldr	r3, [pc, #616]	; (8009178 <_dtoa_r+0x2d8>)
 8008f0e:	bfbc      	itt	lt
 8008f10:	2201      	movlt	r2, #1
 8008f12:	f8c8 2000 	strlt.w	r2, [r8]
 8008f16:	ea33 030b 	bics.w	r3, r3, fp
 8008f1a:	d11b      	bne.n	8008f54 <_dtoa_r+0xb4>
 8008f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f28:	4333      	orrs	r3, r6
 8008f2a:	f000 8592 	beq.w	8009a52 <_dtoa_r+0xbb2>
 8008f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f30:	b963      	cbnz	r3, 8008f4c <_dtoa_r+0xac>
 8008f32:	4b92      	ldr	r3, [pc, #584]	; (800917c <_dtoa_r+0x2dc>)
 8008f34:	e022      	b.n	8008f7c <_dtoa_r+0xdc>
 8008f36:	4b92      	ldr	r3, [pc, #584]	; (8009180 <_dtoa_r+0x2e0>)
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	9801      	ldr	r0, [sp, #4]
 8008f42:	b013      	add	sp, #76	; 0x4c
 8008f44:	ecbd 8b04 	vpop	{d8-d9}
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	4b8b      	ldr	r3, [pc, #556]	; (800917c <_dtoa_r+0x2dc>)
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	3303      	adds	r3, #3
 8008f52:	e7f3      	b.n	8008f3c <_dtoa_r+0x9c>
 8008f54:	2200      	movs	r2, #0
 8008f56:	2300      	movs	r3, #0
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	f7f7 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f60:	ec4b ab19 	vmov	d9, sl, fp
 8008f64:	4680      	mov	r8, r0
 8008f66:	b158      	cbz	r0, 8008f80 <_dtoa_r+0xe0>
 8008f68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 856b 	beq.w	8009a4c <_dtoa_r+0xbac>
 8008f76:	4883      	ldr	r0, [pc, #524]	; (8009184 <_dtoa_r+0x2e4>)
 8008f78:	6018      	str	r0, [r3, #0]
 8008f7a:	1e43      	subs	r3, r0, #1
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	e7df      	b.n	8008f40 <_dtoa_r+0xa0>
 8008f80:	ec4b ab10 	vmov	d0, sl, fp
 8008f84:	aa10      	add	r2, sp, #64	; 0x40
 8008f86:	a911      	add	r1, sp, #68	; 0x44
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f001 fad9 	bl	800a540 <__d2b>
 8008f8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f92:	ee08 0a10 	vmov	s16, r0
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	f000 8084 	beq.w	80090a4 <_dtoa_r+0x204>
 8008f9c:	ee19 3a90 	vmov	r3, s19
 8008fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008fa8:	4656      	mov	r6, sl
 8008faa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008fb6:	4b74      	ldr	r3, [pc, #464]	; (8009188 <_dtoa_r+0x2e8>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	f7f7 f963 	bl	8000288 <__aeabi_dsub>
 8008fc2:	a365      	add	r3, pc, #404	; (adr r3, 8009158 <_dtoa_r+0x2b8>)
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	a364      	add	r3, pc, #400	; (adr r3, 8009160 <_dtoa_r+0x2c0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f95b 	bl	800028c <__adddf3>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	4628      	mov	r0, r5
 8008fda:	460f      	mov	r7, r1
 8008fdc:	f7f7 faa2 	bl	8000524 <__aeabi_i2d>
 8008fe0:	a361      	add	r3, pc, #388	; (adr r3, 8009168 <_dtoa_r+0x2c8>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 fb07 	bl	80005f8 <__aeabi_dmul>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4630      	mov	r0, r6
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	f7f7 f94b 	bl	800028c <__adddf3>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	f7f7 fdad 	bl	8000b58 <__aeabi_d2iz>
 8008ffe:	2200      	movs	r2, #0
 8009000:	9000      	str	r0, [sp, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	4630      	mov	r0, r6
 8009006:	4639      	mov	r1, r7
 8009008:	f7f7 fd68 	bl	8000adc <__aeabi_dcmplt>
 800900c:	b150      	cbz	r0, 8009024 <_dtoa_r+0x184>
 800900e:	9800      	ldr	r0, [sp, #0]
 8009010:	f7f7 fa88 	bl	8000524 <__aeabi_i2d>
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	f7f7 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800901c:	b910      	cbnz	r0, 8009024 <_dtoa_r+0x184>
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	2b16      	cmp	r3, #22
 8009028:	d85a      	bhi.n	80090e0 <_dtoa_r+0x240>
 800902a:	9a00      	ldr	r2, [sp, #0]
 800902c:	4b57      	ldr	r3, [pc, #348]	; (800918c <_dtoa_r+0x2ec>)
 800902e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	ec51 0b19 	vmov	r0, r1, d9
 800903a:	f7f7 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800903e:	2800      	cmp	r0, #0
 8009040:	d050      	beq.n	80090e4 <_dtoa_r+0x244>
 8009042:	9b00      	ldr	r3, [sp, #0]
 8009044:	3b01      	subs	r3, #1
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	2300      	movs	r3, #0
 800904a:	930b      	str	r3, [sp, #44]	; 0x2c
 800904c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800904e:	1b5d      	subs	r5, r3, r5
 8009050:	1e6b      	subs	r3, r5, #1
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	bf45      	ittet	mi
 8009056:	f1c5 0301 	rsbmi	r3, r5, #1
 800905a:	9304      	strmi	r3, [sp, #16]
 800905c:	2300      	movpl	r3, #0
 800905e:	2300      	movmi	r3, #0
 8009060:	bf4c      	ite	mi
 8009062:	9305      	strmi	r3, [sp, #20]
 8009064:	9304      	strpl	r3, [sp, #16]
 8009066:	9b00      	ldr	r3, [sp, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	db3d      	blt.n	80090e8 <_dtoa_r+0x248>
 800906c:	9b05      	ldr	r3, [sp, #20]
 800906e:	9a00      	ldr	r2, [sp, #0]
 8009070:	920a      	str	r2, [sp, #40]	; 0x28
 8009072:	4413      	add	r3, r2
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	2300      	movs	r3, #0
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	9b06      	ldr	r3, [sp, #24]
 800907c:	2b09      	cmp	r3, #9
 800907e:	f200 8089 	bhi.w	8009194 <_dtoa_r+0x2f4>
 8009082:	2b05      	cmp	r3, #5
 8009084:	bfc4      	itt	gt
 8009086:	3b04      	subgt	r3, #4
 8009088:	9306      	strgt	r3, [sp, #24]
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	f1a3 0302 	sub.w	r3, r3, #2
 8009090:	bfcc      	ite	gt
 8009092:	2500      	movgt	r5, #0
 8009094:	2501      	movle	r5, #1
 8009096:	2b03      	cmp	r3, #3
 8009098:	f200 8087 	bhi.w	80091aa <_dtoa_r+0x30a>
 800909c:	e8df f003 	tbb	[pc, r3]
 80090a0:	59383a2d 	.word	0x59383a2d
 80090a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090a8:	441d      	add	r5, r3
 80090aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	bfc1      	itttt	gt
 80090b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80090ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80090be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090c2:	bfda      	itte	le
 80090c4:	f1c3 0320 	rsble	r3, r3, #32
 80090c8:	fa06 f003 	lslle.w	r0, r6, r3
 80090cc:	4318      	orrgt	r0, r3
 80090ce:	f7f7 fa19 	bl	8000504 <__aeabi_ui2d>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4606      	mov	r6, r0
 80090d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090da:	3d01      	subs	r5, #1
 80090dc:	930e      	str	r3, [sp, #56]	; 0x38
 80090de:	e76a      	b.n	8008fb6 <_dtoa_r+0x116>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e7b2      	b.n	800904a <_dtoa_r+0x1aa>
 80090e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80090e6:	e7b1      	b.n	800904c <_dtoa_r+0x1ac>
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	9a00      	ldr	r2, [sp, #0]
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	4253      	negs	r3, r2
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	2300      	movs	r3, #0
 80090f6:	930a      	str	r3, [sp, #40]	; 0x28
 80090f8:	e7bf      	b.n	800907a <_dtoa_r+0x1da>
 80090fa:	2300      	movs	r3, #0
 80090fc:	9308      	str	r3, [sp, #32]
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc55      	bgt.n	80091b0 <_dtoa_r+0x310>
 8009104:	2301      	movs	r3, #1
 8009106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800910a:	461a      	mov	r2, r3
 800910c:	9209      	str	r2, [sp, #36]	; 0x24
 800910e:	e00c      	b.n	800912a <_dtoa_r+0x28a>
 8009110:	2301      	movs	r3, #1
 8009112:	e7f3      	b.n	80090fc <_dtoa_r+0x25c>
 8009114:	2300      	movs	r3, #0
 8009116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	4413      	add	r3, r2
 800911e:	9302      	str	r3, [sp, #8]
 8009120:	3301      	adds	r3, #1
 8009122:	2b01      	cmp	r3, #1
 8009124:	9303      	str	r3, [sp, #12]
 8009126:	bfb8      	it	lt
 8009128:	2301      	movlt	r3, #1
 800912a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800912c:	2200      	movs	r2, #0
 800912e:	6042      	str	r2, [r0, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	f102 0614 	add.w	r6, r2, #20
 8009136:	429e      	cmp	r6, r3
 8009138:	6841      	ldr	r1, [r0, #4]
 800913a:	d93d      	bls.n	80091b8 <_dtoa_r+0x318>
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fed7 	bl	8009ef0 <_Balloc>
 8009142:	9001      	str	r0, [sp, #4]
 8009144:	2800      	cmp	r0, #0
 8009146:	d13b      	bne.n	80091c0 <_dtoa_r+0x320>
 8009148:	4b11      	ldr	r3, [pc, #68]	; (8009190 <_dtoa_r+0x2f0>)
 800914a:	4602      	mov	r2, r0
 800914c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009150:	e6c0      	b.n	8008ed4 <_dtoa_r+0x34>
 8009152:	2301      	movs	r3, #1
 8009154:	e7df      	b.n	8009116 <_dtoa_r+0x276>
 8009156:	bf00      	nop
 8009158:	636f4361 	.word	0x636f4361
 800915c:	3fd287a7 	.word	0x3fd287a7
 8009160:	8b60c8b3 	.word	0x8b60c8b3
 8009164:	3fc68a28 	.word	0x3fc68a28
 8009168:	509f79fb 	.word	0x509f79fb
 800916c:	3fd34413 	.word	0x3fd34413
 8009170:	08035c2d 	.word	0x08035c2d
 8009174:	08035c44 	.word	0x08035c44
 8009178:	7ff00000 	.word	0x7ff00000
 800917c:	08035c29 	.word	0x08035c29
 8009180:	08035c20 	.word	0x08035c20
 8009184:	08035bfd 	.word	0x08035bfd
 8009188:	3ff80000 	.word	0x3ff80000
 800918c:	08035d98 	.word	0x08035d98
 8009190:	08035c9f 	.word	0x08035c9f
 8009194:	2501      	movs	r5, #1
 8009196:	2300      	movs	r3, #0
 8009198:	9306      	str	r3, [sp, #24]
 800919a:	9508      	str	r5, [sp, #32]
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091a4:	2200      	movs	r2, #0
 80091a6:	2312      	movs	r3, #18
 80091a8:	e7b0      	b.n	800910c <_dtoa_r+0x26c>
 80091aa:	2301      	movs	r3, #1
 80091ac:	9308      	str	r3, [sp, #32]
 80091ae:	e7f5      	b.n	800919c <_dtoa_r+0x2fc>
 80091b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091b6:	e7b8      	b.n	800912a <_dtoa_r+0x28a>
 80091b8:	3101      	adds	r1, #1
 80091ba:	6041      	str	r1, [r0, #4]
 80091bc:	0052      	lsls	r2, r2, #1
 80091be:	e7b8      	b.n	8009132 <_dtoa_r+0x292>
 80091c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c2:	9a01      	ldr	r2, [sp, #4]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	2b0e      	cmp	r3, #14
 80091ca:	f200 809d 	bhi.w	8009308 <_dtoa_r+0x468>
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	f000 809a 	beq.w	8009308 <_dtoa_r+0x468>
 80091d4:	9b00      	ldr	r3, [sp, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dd32      	ble.n	8009240 <_dtoa_r+0x3a0>
 80091da:	4ab7      	ldr	r2, [pc, #732]	; (80094b8 <_dtoa_r+0x618>)
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091e8:	9b00      	ldr	r3, [sp, #0]
 80091ea:	05d8      	lsls	r0, r3, #23
 80091ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091f0:	d516      	bpl.n	8009220 <_dtoa_r+0x380>
 80091f2:	4bb2      	ldr	r3, [pc, #712]	; (80094bc <_dtoa_r+0x61c>)
 80091f4:	ec51 0b19 	vmov	r0, r1, d9
 80091f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091fc:	f7f7 fb26 	bl	800084c <__aeabi_ddiv>
 8009200:	f007 070f 	and.w	r7, r7, #15
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	2503      	movs	r5, #3
 800920a:	4eac      	ldr	r6, [pc, #688]	; (80094bc <_dtoa_r+0x61c>)
 800920c:	b957      	cbnz	r7, 8009224 <_dtoa_r+0x384>
 800920e:	4642      	mov	r2, r8
 8009210:	464b      	mov	r3, r9
 8009212:	4650      	mov	r0, sl
 8009214:	4659      	mov	r1, fp
 8009216:	f7f7 fb19 	bl	800084c <__aeabi_ddiv>
 800921a:	4682      	mov	sl, r0
 800921c:	468b      	mov	fp, r1
 800921e:	e028      	b.n	8009272 <_dtoa_r+0x3d2>
 8009220:	2502      	movs	r5, #2
 8009222:	e7f2      	b.n	800920a <_dtoa_r+0x36a>
 8009224:	07f9      	lsls	r1, r7, #31
 8009226:	d508      	bpl.n	800923a <_dtoa_r+0x39a>
 8009228:	4640      	mov	r0, r8
 800922a:	4649      	mov	r1, r9
 800922c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	3501      	adds	r5, #1
 8009236:	4680      	mov	r8, r0
 8009238:	4689      	mov	r9, r1
 800923a:	107f      	asrs	r7, r7, #1
 800923c:	3608      	adds	r6, #8
 800923e:	e7e5      	b.n	800920c <_dtoa_r+0x36c>
 8009240:	f000 809b 	beq.w	800937a <_dtoa_r+0x4da>
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	4f9d      	ldr	r7, [pc, #628]	; (80094bc <_dtoa_r+0x61c>)
 8009248:	425e      	negs	r6, r3
 800924a:	4b9b      	ldr	r3, [pc, #620]	; (80094b8 <_dtoa_r+0x618>)
 800924c:	f006 020f 	and.w	r2, r6, #15
 8009250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	ec51 0b19 	vmov	r0, r1, d9
 800925c:	f7f7 f9cc 	bl	80005f8 <__aeabi_dmul>
 8009260:	1136      	asrs	r6, r6, #4
 8009262:	4682      	mov	sl, r0
 8009264:	468b      	mov	fp, r1
 8009266:	2300      	movs	r3, #0
 8009268:	2502      	movs	r5, #2
 800926a:	2e00      	cmp	r6, #0
 800926c:	d17a      	bne.n	8009364 <_dtoa_r+0x4c4>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1d3      	bne.n	800921a <_dtoa_r+0x37a>
 8009272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8082 	beq.w	800937e <_dtoa_r+0x4de>
 800927a:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <_dtoa_r+0x620>)
 800927c:	2200      	movs	r2, #0
 800927e:	4650      	mov	r0, sl
 8009280:	4659      	mov	r1, fp
 8009282:	f7f7 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8009286:	2800      	cmp	r0, #0
 8009288:	d079      	beq.n	800937e <_dtoa_r+0x4de>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d076      	beq.n	800937e <_dtoa_r+0x4de>
 8009290:	9b02      	ldr	r3, [sp, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	dd36      	ble.n	8009304 <_dtoa_r+0x464>
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	4650      	mov	r0, sl
 800929a:	4659      	mov	r1, fp
 800929c:	1e5f      	subs	r7, r3, #1
 800929e:	2200      	movs	r2, #0
 80092a0:	4b88      	ldr	r3, [pc, #544]	; (80094c4 <_dtoa_r+0x624>)
 80092a2:	f7f7 f9a9 	bl	80005f8 <__aeabi_dmul>
 80092a6:	9e02      	ldr	r6, [sp, #8]
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	3501      	adds	r5, #1
 80092ae:	4628      	mov	r0, r5
 80092b0:	f7f7 f938 	bl	8000524 <__aeabi_i2d>
 80092b4:	4652      	mov	r2, sl
 80092b6:	465b      	mov	r3, fp
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4b82      	ldr	r3, [pc, #520]	; (80094c8 <_dtoa_r+0x628>)
 80092be:	2200      	movs	r2, #0
 80092c0:	f7f6 ffe4 	bl	800028c <__adddf3>
 80092c4:	46d0      	mov	r8, sl
 80092c6:	46d9      	mov	r9, fp
 80092c8:	4682      	mov	sl, r0
 80092ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	d158      	bne.n	8009384 <_dtoa_r+0x4e4>
 80092d2:	4b7e      	ldr	r3, [pc, #504]	; (80094cc <_dtoa_r+0x62c>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f6 ffd5 	bl	8000288 <__aeabi_dsub>
 80092de:	4652      	mov	r2, sl
 80092e0:	465b      	mov	r3, fp
 80092e2:	4680      	mov	r8, r0
 80092e4:	4689      	mov	r9, r1
 80092e6:	f7f7 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f040 8295 	bne.w	800981a <_dtoa_r+0x97a>
 80092f0:	4652      	mov	r2, sl
 80092f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f7 fbef 	bl	8000adc <__aeabi_dcmplt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	f040 8289 	bne.w	8009816 <_dtoa_r+0x976>
 8009304:	ec5b ab19 	vmov	sl, fp, d9
 8009308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800930a:	2b00      	cmp	r3, #0
 800930c:	f2c0 8148 	blt.w	80095a0 <_dtoa_r+0x700>
 8009310:	9a00      	ldr	r2, [sp, #0]
 8009312:	2a0e      	cmp	r2, #14
 8009314:	f300 8144 	bgt.w	80095a0 <_dtoa_r+0x700>
 8009318:	4b67      	ldr	r3, [pc, #412]	; (80094b8 <_dtoa_r+0x618>)
 800931a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800931e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	f280 80d5 	bge.w	80094d4 <_dtoa_r+0x634>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f300 80d1 	bgt.w	80094d4 <_dtoa_r+0x634>
 8009332:	f040 826f 	bne.w	8009814 <_dtoa_r+0x974>
 8009336:	4b65      	ldr	r3, [pc, #404]	; (80094cc <_dtoa_r+0x62c>)
 8009338:	2200      	movs	r2, #0
 800933a:	4640      	mov	r0, r8
 800933c:	4649      	mov	r1, r9
 800933e:	f7f7 f95b 	bl	80005f8 <__aeabi_dmul>
 8009342:	4652      	mov	r2, sl
 8009344:	465b      	mov	r3, fp
 8009346:	f7f7 fbdd 	bl	8000b04 <__aeabi_dcmpge>
 800934a:	9e03      	ldr	r6, [sp, #12]
 800934c:	4637      	mov	r7, r6
 800934e:	2800      	cmp	r0, #0
 8009350:	f040 8245 	bne.w	80097de <_dtoa_r+0x93e>
 8009354:	9d01      	ldr	r5, [sp, #4]
 8009356:	2331      	movs	r3, #49	; 0x31
 8009358:	f805 3b01 	strb.w	r3, [r5], #1
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	e240      	b.n	80097e6 <_dtoa_r+0x946>
 8009364:	07f2      	lsls	r2, r6, #31
 8009366:	d505      	bpl.n	8009374 <_dtoa_r+0x4d4>
 8009368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	3501      	adds	r5, #1
 8009372:	2301      	movs	r3, #1
 8009374:	1076      	asrs	r6, r6, #1
 8009376:	3708      	adds	r7, #8
 8009378:	e777      	b.n	800926a <_dtoa_r+0x3ca>
 800937a:	2502      	movs	r5, #2
 800937c:	e779      	b.n	8009272 <_dtoa_r+0x3d2>
 800937e:	9f00      	ldr	r7, [sp, #0]
 8009380:	9e03      	ldr	r6, [sp, #12]
 8009382:	e794      	b.n	80092ae <_dtoa_r+0x40e>
 8009384:	9901      	ldr	r1, [sp, #4]
 8009386:	4b4c      	ldr	r3, [pc, #304]	; (80094b8 <_dtoa_r+0x618>)
 8009388:	4431      	add	r1, r6
 800938a:	910d      	str	r1, [sp, #52]	; 0x34
 800938c:	9908      	ldr	r1, [sp, #32]
 800938e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009396:	2900      	cmp	r1, #0
 8009398:	d043      	beq.n	8009422 <_dtoa_r+0x582>
 800939a:	494d      	ldr	r1, [pc, #308]	; (80094d0 <_dtoa_r+0x630>)
 800939c:	2000      	movs	r0, #0
 800939e:	f7f7 fa55 	bl	800084c <__aeabi_ddiv>
 80093a2:	4652      	mov	r2, sl
 80093a4:	465b      	mov	r3, fp
 80093a6:	f7f6 ff6f 	bl	8000288 <__aeabi_dsub>
 80093aa:	9d01      	ldr	r5, [sp, #4]
 80093ac:	4682      	mov	sl, r0
 80093ae:	468b      	mov	fp, r1
 80093b0:	4649      	mov	r1, r9
 80093b2:	4640      	mov	r0, r8
 80093b4:	f7f7 fbd0 	bl	8000b58 <__aeabi_d2iz>
 80093b8:	4606      	mov	r6, r0
 80093ba:	f7f7 f8b3 	bl	8000524 <__aeabi_i2d>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4640      	mov	r0, r8
 80093c4:	4649      	mov	r1, r9
 80093c6:	f7f6 ff5f 	bl	8000288 <__aeabi_dsub>
 80093ca:	3630      	adds	r6, #48	; 0x30
 80093cc:	f805 6b01 	strb.w	r6, [r5], #1
 80093d0:	4652      	mov	r2, sl
 80093d2:	465b      	mov	r3, fp
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	f7f7 fb80 	bl	8000adc <__aeabi_dcmplt>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d163      	bne.n	80094a8 <_dtoa_r+0x608>
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	4936      	ldr	r1, [pc, #216]	; (80094c0 <_dtoa_r+0x620>)
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff4e 	bl	8000288 <__aeabi_dsub>
 80093ec:	4652      	mov	r2, sl
 80093ee:	465b      	mov	r3, fp
 80093f0:	f7f7 fb74 	bl	8000adc <__aeabi_dcmplt>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f040 80b5 	bne.w	8009564 <_dtoa_r+0x6c4>
 80093fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fc:	429d      	cmp	r5, r3
 80093fe:	d081      	beq.n	8009304 <_dtoa_r+0x464>
 8009400:	4b30      	ldr	r3, [pc, #192]	; (80094c4 <_dtoa_r+0x624>)
 8009402:	2200      	movs	r2, #0
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	f7f7 f8f6 	bl	80005f8 <__aeabi_dmul>
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <_dtoa_r+0x624>)
 800940e:	4682      	mov	sl, r0
 8009410:	468b      	mov	fp, r1
 8009412:	4640      	mov	r0, r8
 8009414:	4649      	mov	r1, r9
 8009416:	2200      	movs	r2, #0
 8009418:	f7f7 f8ee 	bl	80005f8 <__aeabi_dmul>
 800941c:	4680      	mov	r8, r0
 800941e:	4689      	mov	r9, r1
 8009420:	e7c6      	b.n	80093b0 <_dtoa_r+0x510>
 8009422:	4650      	mov	r0, sl
 8009424:	4659      	mov	r1, fp
 8009426:	f7f7 f8e7 	bl	80005f8 <__aeabi_dmul>
 800942a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800942c:	9d01      	ldr	r5, [sp, #4]
 800942e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	4649      	mov	r1, r9
 8009436:	4640      	mov	r0, r8
 8009438:	f7f7 fb8e 	bl	8000b58 <__aeabi_d2iz>
 800943c:	4606      	mov	r6, r0
 800943e:	f7f7 f871 	bl	8000524 <__aeabi_i2d>
 8009442:	3630      	adds	r6, #48	; 0x30
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	f7f6 ff1c 	bl	8000288 <__aeabi_dsub>
 8009450:	f805 6b01 	strb.w	r6, [r5], #1
 8009454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009456:	429d      	cmp	r5, r3
 8009458:	4680      	mov	r8, r0
 800945a:	4689      	mov	r9, r1
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	d124      	bne.n	80094ac <_dtoa_r+0x60c>
 8009462:	4b1b      	ldr	r3, [pc, #108]	; (80094d0 <_dtoa_r+0x630>)
 8009464:	4650      	mov	r0, sl
 8009466:	4659      	mov	r1, fp
 8009468:	f7f6 ff10 	bl	800028c <__adddf3>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8009478:	2800      	cmp	r0, #0
 800947a:	d173      	bne.n	8009564 <_dtoa_r+0x6c4>
 800947c:	4652      	mov	r2, sl
 800947e:	465b      	mov	r3, fp
 8009480:	4913      	ldr	r1, [pc, #76]	; (80094d0 <_dtoa_r+0x630>)
 8009482:	2000      	movs	r0, #0
 8009484:	f7f6 ff00 	bl	8000288 <__aeabi_dsub>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f7 fb24 	bl	8000adc <__aeabi_dcmplt>
 8009494:	2800      	cmp	r0, #0
 8009496:	f43f af35 	beq.w	8009304 <_dtoa_r+0x464>
 800949a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800949c:	1e6b      	subs	r3, r5, #1
 800949e:	930f      	str	r3, [sp, #60]	; 0x3c
 80094a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094a4:	2b30      	cmp	r3, #48	; 0x30
 80094a6:	d0f8      	beq.n	800949a <_dtoa_r+0x5fa>
 80094a8:	9700      	str	r7, [sp, #0]
 80094aa:	e049      	b.n	8009540 <_dtoa_r+0x6a0>
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <_dtoa_r+0x624>)
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	4680      	mov	r8, r0
 80094b4:	4689      	mov	r9, r1
 80094b6:	e7bd      	b.n	8009434 <_dtoa_r+0x594>
 80094b8:	08035d98 	.word	0x08035d98
 80094bc:	08035d70 	.word	0x08035d70
 80094c0:	3ff00000 	.word	0x3ff00000
 80094c4:	40240000 	.word	0x40240000
 80094c8:	401c0000 	.word	0x401c0000
 80094cc:	40140000 	.word	0x40140000
 80094d0:	3fe00000 	.word	0x3fe00000
 80094d4:	9d01      	ldr	r5, [sp, #4]
 80094d6:	4656      	mov	r6, sl
 80094d8:	465f      	mov	r7, fp
 80094da:	4642      	mov	r2, r8
 80094dc:	464b      	mov	r3, r9
 80094de:	4630      	mov	r0, r6
 80094e0:	4639      	mov	r1, r7
 80094e2:	f7f7 f9b3 	bl	800084c <__aeabi_ddiv>
 80094e6:	f7f7 fb37 	bl	8000b58 <__aeabi_d2iz>
 80094ea:	4682      	mov	sl, r0
 80094ec:	f7f7 f81a 	bl	8000524 <__aeabi_i2d>
 80094f0:	4642      	mov	r2, r8
 80094f2:	464b      	mov	r3, r9
 80094f4:	f7f7 f880 	bl	80005f8 <__aeabi_dmul>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4630      	mov	r0, r6
 80094fe:	4639      	mov	r1, r7
 8009500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009504:	f7f6 fec0 	bl	8000288 <__aeabi_dsub>
 8009508:	f805 6b01 	strb.w	r6, [r5], #1
 800950c:	9e01      	ldr	r6, [sp, #4]
 800950e:	9f03      	ldr	r7, [sp, #12]
 8009510:	1bae      	subs	r6, r5, r6
 8009512:	42b7      	cmp	r7, r6
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	d135      	bne.n	8009586 <_dtoa_r+0x6e6>
 800951a:	f7f6 feb7 	bl	800028c <__adddf3>
 800951e:	4642      	mov	r2, r8
 8009520:	464b      	mov	r3, r9
 8009522:	4606      	mov	r6, r0
 8009524:	460f      	mov	r7, r1
 8009526:	f7f7 faf7 	bl	8000b18 <__aeabi_dcmpgt>
 800952a:	b9d0      	cbnz	r0, 8009562 <_dtoa_r+0x6c2>
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009538:	b110      	cbz	r0, 8009540 <_dtoa_r+0x6a0>
 800953a:	f01a 0f01 	tst.w	sl, #1
 800953e:	d110      	bne.n	8009562 <_dtoa_r+0x6c2>
 8009540:	4620      	mov	r0, r4
 8009542:	ee18 1a10 	vmov	r1, s16
 8009546:	f000 fd13 	bl	8009f70 <_Bfree>
 800954a:	2300      	movs	r3, #0
 800954c:	9800      	ldr	r0, [sp, #0]
 800954e:	702b      	strb	r3, [r5, #0]
 8009550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009552:	3001      	adds	r0, #1
 8009554:	6018      	str	r0, [r3, #0]
 8009556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009558:	2b00      	cmp	r3, #0
 800955a:	f43f acf1 	beq.w	8008f40 <_dtoa_r+0xa0>
 800955e:	601d      	str	r5, [r3, #0]
 8009560:	e4ee      	b.n	8008f40 <_dtoa_r+0xa0>
 8009562:	9f00      	ldr	r7, [sp, #0]
 8009564:	462b      	mov	r3, r5
 8009566:	461d      	mov	r5, r3
 8009568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800956c:	2a39      	cmp	r2, #57	; 0x39
 800956e:	d106      	bne.n	800957e <_dtoa_r+0x6de>
 8009570:	9a01      	ldr	r2, [sp, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d1f7      	bne.n	8009566 <_dtoa_r+0x6c6>
 8009576:	9901      	ldr	r1, [sp, #4]
 8009578:	2230      	movs	r2, #48	; 0x30
 800957a:	3701      	adds	r7, #1
 800957c:	700a      	strb	r2, [r1, #0]
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	3201      	adds	r2, #1
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	e790      	b.n	80094a8 <_dtoa_r+0x608>
 8009586:	4ba6      	ldr	r3, [pc, #664]	; (8009820 <_dtoa_r+0x980>)
 8009588:	2200      	movs	r2, #0
 800958a:	f7f7 f835 	bl	80005f8 <__aeabi_dmul>
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4606      	mov	r6, r0
 8009594:	460f      	mov	r7, r1
 8009596:	f7f7 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	d09d      	beq.n	80094da <_dtoa_r+0x63a>
 800959e:	e7cf      	b.n	8009540 <_dtoa_r+0x6a0>
 80095a0:	9a08      	ldr	r2, [sp, #32]
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	f000 80d7 	beq.w	8009756 <_dtoa_r+0x8b6>
 80095a8:	9a06      	ldr	r2, [sp, #24]
 80095aa:	2a01      	cmp	r2, #1
 80095ac:	f300 80ba 	bgt.w	8009724 <_dtoa_r+0x884>
 80095b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	f000 80b2 	beq.w	800971c <_dtoa_r+0x87c>
 80095b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095bc:	9e07      	ldr	r6, [sp, #28]
 80095be:	9d04      	ldr	r5, [sp, #16]
 80095c0:	9a04      	ldr	r2, [sp, #16]
 80095c2:	441a      	add	r2, r3
 80095c4:	9204      	str	r2, [sp, #16]
 80095c6:	9a05      	ldr	r2, [sp, #20]
 80095c8:	2101      	movs	r1, #1
 80095ca:	441a      	add	r2, r3
 80095cc:	4620      	mov	r0, r4
 80095ce:	9205      	str	r2, [sp, #20]
 80095d0:	f000 fd86 	bl	800a0e0 <__i2b>
 80095d4:	4607      	mov	r7, r0
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	dd0c      	ble.n	80095f4 <_dtoa_r+0x754>
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd09      	ble.n	80095f4 <_dtoa_r+0x754>
 80095e0:	42ab      	cmp	r3, r5
 80095e2:	9a04      	ldr	r2, [sp, #16]
 80095e4:	bfa8      	it	ge
 80095e6:	462b      	movge	r3, r5
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	9204      	str	r2, [sp, #16]
 80095ec:	9a05      	ldr	r2, [sp, #20]
 80095ee:	1aed      	subs	r5, r5, r3
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	9305      	str	r3, [sp, #20]
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	b31b      	cbz	r3, 8009640 <_dtoa_r+0x7a0>
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80af 	beq.w	800975e <_dtoa_r+0x8be>
 8009600:	2e00      	cmp	r6, #0
 8009602:	dd13      	ble.n	800962c <_dtoa_r+0x78c>
 8009604:	4639      	mov	r1, r7
 8009606:	4632      	mov	r2, r6
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fe29 	bl	800a260 <__pow5mult>
 800960e:	ee18 2a10 	vmov	r2, s16
 8009612:	4601      	mov	r1, r0
 8009614:	4607      	mov	r7, r0
 8009616:	4620      	mov	r0, r4
 8009618:	f000 fd78 	bl	800a10c <__multiply>
 800961c:	ee18 1a10 	vmov	r1, s16
 8009620:	4680      	mov	r8, r0
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fca4 	bl	8009f70 <_Bfree>
 8009628:	ee08 8a10 	vmov	s16, r8
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	1b9a      	subs	r2, r3, r6
 8009630:	d006      	beq.n	8009640 <_dtoa_r+0x7a0>
 8009632:	ee18 1a10 	vmov	r1, s16
 8009636:	4620      	mov	r0, r4
 8009638:	f000 fe12 	bl	800a260 <__pow5mult>
 800963c:	ee08 0a10 	vmov	s16, r0
 8009640:	2101      	movs	r1, #1
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fd4c 	bl	800a0e0 <__i2b>
 8009648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964a:	2b00      	cmp	r3, #0
 800964c:	4606      	mov	r6, r0
 800964e:	f340 8088 	ble.w	8009762 <_dtoa_r+0x8c2>
 8009652:	461a      	mov	r2, r3
 8009654:	4601      	mov	r1, r0
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fe02 	bl	800a260 <__pow5mult>
 800965c:	9b06      	ldr	r3, [sp, #24]
 800965e:	2b01      	cmp	r3, #1
 8009660:	4606      	mov	r6, r0
 8009662:	f340 8081 	ble.w	8009768 <_dtoa_r+0x8c8>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	6933      	ldr	r3, [r6, #16]
 800966c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009670:	6918      	ldr	r0, [r3, #16]
 8009672:	f000 fce5 	bl	800a040 <__hi0bits>
 8009676:	f1c0 0020 	rsb	r0, r0, #32
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	4418      	add	r0, r3
 800967e:	f010 001f 	ands.w	r0, r0, #31
 8009682:	f000 8092 	beq.w	80097aa <_dtoa_r+0x90a>
 8009686:	f1c0 0320 	rsb	r3, r0, #32
 800968a:	2b04      	cmp	r3, #4
 800968c:	f340 808a 	ble.w	80097a4 <_dtoa_r+0x904>
 8009690:	f1c0 001c 	rsb	r0, r0, #28
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	4403      	add	r3, r0
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	4403      	add	r3, r0
 800969e:	4405      	add	r5, r0
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd07      	ble.n	80096b8 <_dtoa_r+0x818>
 80096a8:	ee18 1a10 	vmov	r1, s16
 80096ac:	461a      	mov	r2, r3
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fe30 	bl	800a314 <__lshift>
 80096b4:	ee08 0a10 	vmov	s16, r0
 80096b8:	9b05      	ldr	r3, [sp, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dd05      	ble.n	80096ca <_dtoa_r+0x82a>
 80096be:	4631      	mov	r1, r6
 80096c0:	461a      	mov	r2, r3
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fe26 	bl	800a314 <__lshift>
 80096c8:	4606      	mov	r6, r0
 80096ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d06e      	beq.n	80097ae <_dtoa_r+0x90e>
 80096d0:	ee18 0a10 	vmov	r0, s16
 80096d4:	4631      	mov	r1, r6
 80096d6:	f000 fe8d 	bl	800a3f4 <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	da67      	bge.n	80097ae <_dtoa_r+0x90e>
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	220a      	movs	r2, #10
 80096ea:	2300      	movs	r3, #0
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fc61 	bl	8009fb4 <__multadd>
 80096f2:	9b08      	ldr	r3, [sp, #32]
 80096f4:	ee08 0a10 	vmov	s16, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 81b1 	beq.w	8009a60 <_dtoa_r+0xbc0>
 80096fe:	2300      	movs	r3, #0
 8009700:	4639      	mov	r1, r7
 8009702:	220a      	movs	r2, #10
 8009704:	4620      	mov	r0, r4
 8009706:	f000 fc55 	bl	8009fb4 <__multadd>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	4607      	mov	r7, r0
 8009710:	f300 808e 	bgt.w	8009830 <_dtoa_r+0x990>
 8009714:	9b06      	ldr	r3, [sp, #24]
 8009716:	2b02      	cmp	r3, #2
 8009718:	dc51      	bgt.n	80097be <_dtoa_r+0x91e>
 800971a:	e089      	b.n	8009830 <_dtoa_r+0x990>
 800971c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800971e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009722:	e74b      	b.n	80095bc <_dtoa_r+0x71c>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	1e5e      	subs	r6, r3, #1
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	42b3      	cmp	r3, r6
 800972c:	bfbf      	itttt	lt
 800972e:	9b07      	ldrlt	r3, [sp, #28]
 8009730:	9607      	strlt	r6, [sp, #28]
 8009732:	1af2      	sublt	r2, r6, r3
 8009734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009736:	bfb6      	itet	lt
 8009738:	189b      	addlt	r3, r3, r2
 800973a:	1b9e      	subge	r6, r3, r6
 800973c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	bfb8      	it	lt
 8009742:	2600      	movlt	r6, #0
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfb7      	itett	lt
 8009748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800974c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009750:	1a9d      	sublt	r5, r3, r2
 8009752:	2300      	movlt	r3, #0
 8009754:	e734      	b.n	80095c0 <_dtoa_r+0x720>
 8009756:	9e07      	ldr	r6, [sp, #28]
 8009758:	9d04      	ldr	r5, [sp, #16]
 800975a:	9f08      	ldr	r7, [sp, #32]
 800975c:	e73b      	b.n	80095d6 <_dtoa_r+0x736>
 800975e:	9a07      	ldr	r2, [sp, #28]
 8009760:	e767      	b.n	8009632 <_dtoa_r+0x792>
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	2b01      	cmp	r3, #1
 8009766:	dc18      	bgt.n	800979a <_dtoa_r+0x8fa>
 8009768:	f1ba 0f00 	cmp.w	sl, #0
 800976c:	d115      	bne.n	800979a <_dtoa_r+0x8fa>
 800976e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009772:	b993      	cbnz	r3, 800979a <_dtoa_r+0x8fa>
 8009774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009778:	0d1b      	lsrs	r3, r3, #20
 800977a:	051b      	lsls	r3, r3, #20
 800977c:	b183      	cbz	r3, 80097a0 <_dtoa_r+0x900>
 800977e:	9b04      	ldr	r3, [sp, #16]
 8009780:	3301      	adds	r3, #1
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	9b05      	ldr	r3, [sp, #20]
 8009786:	3301      	adds	r3, #1
 8009788:	9305      	str	r3, [sp, #20]
 800978a:	f04f 0801 	mov.w	r8, #1
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	f47f af6a 	bne.w	800966a <_dtoa_r+0x7ca>
 8009796:	2001      	movs	r0, #1
 8009798:	e76f      	b.n	800967a <_dtoa_r+0x7da>
 800979a:	f04f 0800 	mov.w	r8, #0
 800979e:	e7f6      	b.n	800978e <_dtoa_r+0x8ee>
 80097a0:	4698      	mov	r8, r3
 80097a2:	e7f4      	b.n	800978e <_dtoa_r+0x8ee>
 80097a4:	f43f af7d 	beq.w	80096a2 <_dtoa_r+0x802>
 80097a8:	4618      	mov	r0, r3
 80097aa:	301c      	adds	r0, #28
 80097ac:	e772      	b.n	8009694 <_dtoa_r+0x7f4>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc37      	bgt.n	8009824 <_dtoa_r+0x984>
 80097b4:	9b06      	ldr	r3, [sp, #24]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	dd34      	ble.n	8009824 <_dtoa_r+0x984>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	9b02      	ldr	r3, [sp, #8]
 80097c0:	b96b      	cbnz	r3, 80097de <_dtoa_r+0x93e>
 80097c2:	4631      	mov	r1, r6
 80097c4:	2205      	movs	r2, #5
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 fbf4 	bl	8009fb4 <__multadd>
 80097cc:	4601      	mov	r1, r0
 80097ce:	4606      	mov	r6, r0
 80097d0:	ee18 0a10 	vmov	r0, s16
 80097d4:	f000 fe0e 	bl	800a3f4 <__mcmp>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f73f adbb 	bgt.w	8009354 <_dtoa_r+0x4b4>
 80097de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e0:	9d01      	ldr	r5, [sp, #4]
 80097e2:	43db      	mvns	r3, r3
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	f04f 0800 	mov.w	r8, #0
 80097ea:	4631      	mov	r1, r6
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fbbf 	bl	8009f70 <_Bfree>
 80097f2:	2f00      	cmp	r7, #0
 80097f4:	f43f aea4 	beq.w	8009540 <_dtoa_r+0x6a0>
 80097f8:	f1b8 0f00 	cmp.w	r8, #0
 80097fc:	d005      	beq.n	800980a <_dtoa_r+0x96a>
 80097fe:	45b8      	cmp	r8, r7
 8009800:	d003      	beq.n	800980a <_dtoa_r+0x96a>
 8009802:	4641      	mov	r1, r8
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fbb3 	bl	8009f70 <_Bfree>
 800980a:	4639      	mov	r1, r7
 800980c:	4620      	mov	r0, r4
 800980e:	f000 fbaf 	bl	8009f70 <_Bfree>
 8009812:	e695      	b.n	8009540 <_dtoa_r+0x6a0>
 8009814:	2600      	movs	r6, #0
 8009816:	4637      	mov	r7, r6
 8009818:	e7e1      	b.n	80097de <_dtoa_r+0x93e>
 800981a:	9700      	str	r7, [sp, #0]
 800981c:	4637      	mov	r7, r6
 800981e:	e599      	b.n	8009354 <_dtoa_r+0x4b4>
 8009820:	40240000 	.word	0x40240000
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80ca 	beq.w	80099c0 <_dtoa_r+0xb20>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	9302      	str	r3, [sp, #8]
 8009830:	2d00      	cmp	r5, #0
 8009832:	dd05      	ble.n	8009840 <_dtoa_r+0x9a0>
 8009834:	4639      	mov	r1, r7
 8009836:	462a      	mov	r2, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fd6b 	bl	800a314 <__lshift>
 800983e:	4607      	mov	r7, r0
 8009840:	f1b8 0f00 	cmp.w	r8, #0
 8009844:	d05b      	beq.n	80098fe <_dtoa_r+0xa5e>
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fb51 	bl	8009ef0 <_Balloc>
 800984e:	4605      	mov	r5, r0
 8009850:	b928      	cbnz	r0, 800985e <_dtoa_r+0x9be>
 8009852:	4b87      	ldr	r3, [pc, #540]	; (8009a70 <_dtoa_r+0xbd0>)
 8009854:	4602      	mov	r2, r0
 8009856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800985a:	f7ff bb3b 	b.w	8008ed4 <_dtoa_r+0x34>
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	3202      	adds	r2, #2
 8009862:	0092      	lsls	r2, r2, #2
 8009864:	f107 010c 	add.w	r1, r7, #12
 8009868:	300c      	adds	r0, #12
 800986a:	f000 fb33 	bl	8009ed4 <memcpy>
 800986e:	2201      	movs	r2, #1
 8009870:	4629      	mov	r1, r5
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fd4e 	bl	800a314 <__lshift>
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	f103 0901 	add.w	r9, r3, #1
 800987e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009882:	4413      	add	r3, r2
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	f00a 0301 	and.w	r3, sl, #1
 800988a:	46b8      	mov	r8, r7
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	4607      	mov	r7, r0
 8009890:	4631      	mov	r1, r6
 8009892:	ee18 0a10 	vmov	r0, s16
 8009896:	f7ff fa77 	bl	8008d88 <quorem>
 800989a:	4641      	mov	r1, r8
 800989c:	9002      	str	r0, [sp, #8]
 800989e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80098a2:	ee18 0a10 	vmov	r0, s16
 80098a6:	f000 fda5 	bl	800a3f4 <__mcmp>
 80098aa:	463a      	mov	r2, r7
 80098ac:	9003      	str	r0, [sp, #12]
 80098ae:	4631      	mov	r1, r6
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fdbb 	bl	800a42c <__mdiff>
 80098b6:	68c2      	ldr	r2, [r0, #12]
 80098b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80098bc:	4605      	mov	r5, r0
 80098be:	bb02      	cbnz	r2, 8009902 <_dtoa_r+0xa62>
 80098c0:	4601      	mov	r1, r0
 80098c2:	ee18 0a10 	vmov	r0, s16
 80098c6:	f000 fd95 	bl	800a3f4 <__mcmp>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4629      	mov	r1, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	9207      	str	r2, [sp, #28]
 80098d2:	f000 fb4d 	bl	8009f70 <_Bfree>
 80098d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80098da:	ea43 0102 	orr.w	r1, r3, r2
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	430b      	orrs	r3, r1
 80098e2:	464d      	mov	r5, r9
 80098e4:	d10f      	bne.n	8009906 <_dtoa_r+0xa66>
 80098e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098ea:	d02a      	beq.n	8009942 <_dtoa_r+0xaa2>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd02      	ble.n	80098f8 <_dtoa_r+0xa58>
 80098f2:	9b02      	ldr	r3, [sp, #8]
 80098f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098f8:	f88b a000 	strb.w	sl, [fp]
 80098fc:	e775      	b.n	80097ea <_dtoa_r+0x94a>
 80098fe:	4638      	mov	r0, r7
 8009900:	e7ba      	b.n	8009878 <_dtoa_r+0x9d8>
 8009902:	2201      	movs	r2, #1
 8009904:	e7e2      	b.n	80098cc <_dtoa_r+0xa2c>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	db04      	blt.n	8009916 <_dtoa_r+0xa76>
 800990c:	9906      	ldr	r1, [sp, #24]
 800990e:	430b      	orrs	r3, r1
 8009910:	9904      	ldr	r1, [sp, #16]
 8009912:	430b      	orrs	r3, r1
 8009914:	d122      	bne.n	800995c <_dtoa_r+0xabc>
 8009916:	2a00      	cmp	r2, #0
 8009918:	ddee      	ble.n	80098f8 <_dtoa_r+0xa58>
 800991a:	ee18 1a10 	vmov	r1, s16
 800991e:	2201      	movs	r2, #1
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fcf7 	bl	800a314 <__lshift>
 8009926:	4631      	mov	r1, r6
 8009928:	ee08 0a10 	vmov	s16, r0
 800992c:	f000 fd62 	bl	800a3f4 <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	dc03      	bgt.n	800993c <_dtoa_r+0xa9c>
 8009934:	d1e0      	bne.n	80098f8 <_dtoa_r+0xa58>
 8009936:	f01a 0f01 	tst.w	sl, #1
 800993a:	d0dd      	beq.n	80098f8 <_dtoa_r+0xa58>
 800993c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009940:	d1d7      	bne.n	80098f2 <_dtoa_r+0xa52>
 8009942:	2339      	movs	r3, #57	; 0x39
 8009944:	f88b 3000 	strb.w	r3, [fp]
 8009948:	462b      	mov	r3, r5
 800994a:	461d      	mov	r5, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009952:	2a39      	cmp	r2, #57	; 0x39
 8009954:	d071      	beq.n	8009a3a <_dtoa_r+0xb9a>
 8009956:	3201      	adds	r2, #1
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	e746      	b.n	80097ea <_dtoa_r+0x94a>
 800995c:	2a00      	cmp	r2, #0
 800995e:	dd07      	ble.n	8009970 <_dtoa_r+0xad0>
 8009960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009964:	d0ed      	beq.n	8009942 <_dtoa_r+0xaa2>
 8009966:	f10a 0301 	add.w	r3, sl, #1
 800996a:	f88b 3000 	strb.w	r3, [fp]
 800996e:	e73c      	b.n	80097ea <_dtoa_r+0x94a>
 8009970:	9b05      	ldr	r3, [sp, #20]
 8009972:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009976:	4599      	cmp	r9, r3
 8009978:	d047      	beq.n	8009a0a <_dtoa_r+0xb6a>
 800997a:	ee18 1a10 	vmov	r1, s16
 800997e:	2300      	movs	r3, #0
 8009980:	220a      	movs	r2, #10
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fb16 	bl	8009fb4 <__multadd>
 8009988:	45b8      	cmp	r8, r7
 800998a:	ee08 0a10 	vmov	s16, r0
 800998e:	f04f 0300 	mov.w	r3, #0
 8009992:	f04f 020a 	mov.w	r2, #10
 8009996:	4641      	mov	r1, r8
 8009998:	4620      	mov	r0, r4
 800999a:	d106      	bne.n	80099aa <_dtoa_r+0xb0a>
 800999c:	f000 fb0a 	bl	8009fb4 <__multadd>
 80099a0:	4680      	mov	r8, r0
 80099a2:	4607      	mov	r7, r0
 80099a4:	f109 0901 	add.w	r9, r9, #1
 80099a8:	e772      	b.n	8009890 <_dtoa_r+0x9f0>
 80099aa:	f000 fb03 	bl	8009fb4 <__multadd>
 80099ae:	4639      	mov	r1, r7
 80099b0:	4680      	mov	r8, r0
 80099b2:	2300      	movs	r3, #0
 80099b4:	220a      	movs	r2, #10
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fafc 	bl	8009fb4 <__multadd>
 80099bc:	4607      	mov	r7, r0
 80099be:	e7f1      	b.n	80099a4 <_dtoa_r+0xb04>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	9302      	str	r3, [sp, #8]
 80099c4:	9d01      	ldr	r5, [sp, #4]
 80099c6:	ee18 0a10 	vmov	r0, s16
 80099ca:	4631      	mov	r1, r6
 80099cc:	f7ff f9dc 	bl	8008d88 <quorem>
 80099d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	f805 ab01 	strb.w	sl, [r5], #1
 80099da:	1aea      	subs	r2, r5, r3
 80099dc:	9b02      	ldr	r3, [sp, #8]
 80099de:	4293      	cmp	r3, r2
 80099e0:	dd09      	ble.n	80099f6 <_dtoa_r+0xb56>
 80099e2:	ee18 1a10 	vmov	r1, s16
 80099e6:	2300      	movs	r3, #0
 80099e8:	220a      	movs	r2, #10
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fae2 	bl	8009fb4 <__multadd>
 80099f0:	ee08 0a10 	vmov	s16, r0
 80099f4:	e7e7      	b.n	80099c6 <_dtoa_r+0xb26>
 80099f6:	9b02      	ldr	r3, [sp, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfc8      	it	gt
 80099fc:	461d      	movgt	r5, r3
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	bfd8      	it	le
 8009a02:	2501      	movle	r5, #1
 8009a04:	441d      	add	r5, r3
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	ee18 1a10 	vmov	r1, s16
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fc7f 	bl	800a314 <__lshift>
 8009a16:	4631      	mov	r1, r6
 8009a18:	ee08 0a10 	vmov	s16, r0
 8009a1c:	f000 fcea 	bl	800a3f4 <__mcmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	dc91      	bgt.n	8009948 <_dtoa_r+0xaa8>
 8009a24:	d102      	bne.n	8009a2c <_dtoa_r+0xb8c>
 8009a26:	f01a 0f01 	tst.w	sl, #1
 8009a2a:	d18d      	bne.n	8009948 <_dtoa_r+0xaa8>
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	461d      	mov	r5, r3
 8009a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a34:	2a30      	cmp	r2, #48	; 0x30
 8009a36:	d0fa      	beq.n	8009a2e <_dtoa_r+0xb8e>
 8009a38:	e6d7      	b.n	80097ea <_dtoa_r+0x94a>
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d184      	bne.n	800994a <_dtoa_r+0xaaa>
 8009a40:	9b00      	ldr	r3, [sp, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	2331      	movs	r3, #49	; 0x31
 8009a48:	7013      	strb	r3, [r2, #0]
 8009a4a:	e6ce      	b.n	80097ea <_dtoa_r+0x94a>
 8009a4c:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <_dtoa_r+0xbd4>)
 8009a4e:	f7ff ba95 	b.w	8008f7c <_dtoa_r+0xdc>
 8009a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f47f aa6e 	bne.w	8008f36 <_dtoa_r+0x96>
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <_dtoa_r+0xbd8>)
 8009a5c:	f7ff ba8e 	b.w	8008f7c <_dtoa_r+0xdc>
 8009a60:	9b02      	ldr	r3, [sp, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dcae      	bgt.n	80099c4 <_dtoa_r+0xb24>
 8009a66:	9b06      	ldr	r3, [sp, #24]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	f73f aea8 	bgt.w	80097be <_dtoa_r+0x91e>
 8009a6e:	e7a9      	b.n	80099c4 <_dtoa_r+0xb24>
 8009a70:	08035c9f 	.word	0x08035c9f
 8009a74:	08035bfc 	.word	0x08035bfc
 8009a78:	08035c20 	.word	0x08035c20

08009a7c <__sflush_r>:
 8009a7c:	898a      	ldrh	r2, [r1, #12]
 8009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	4605      	mov	r5, r0
 8009a84:	0710      	lsls	r0, r2, #28
 8009a86:	460c      	mov	r4, r1
 8009a88:	d458      	bmi.n	8009b3c <__sflush_r+0xc0>
 8009a8a:	684b      	ldr	r3, [r1, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dc05      	bgt.n	8009a9c <__sflush_r+0x20>
 8009a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dc02      	bgt.n	8009a9c <__sflush_r+0x20>
 8009a96:	2000      	movs	r0, #0
 8009a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d0f9      	beq.n	8009a96 <__sflush_r+0x1a>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009aa8:	682f      	ldr	r7, [r5, #0]
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	d032      	beq.n	8009b14 <__sflush_r+0x98>
 8009aae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	075a      	lsls	r2, r3, #29
 8009ab4:	d505      	bpl.n	8009ac2 <__sflush_r+0x46>
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	1ac0      	subs	r0, r0, r3
 8009aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009abc:	b10b      	cbz	r3, 8009ac2 <__sflush_r+0x46>
 8009abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ac0:	1ac0      	subs	r0, r0, r3
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac8:	6a21      	ldr	r1, [r4, #32]
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b0      	blx	r6
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	d106      	bne.n	8009ae2 <__sflush_r+0x66>
 8009ad4:	6829      	ldr	r1, [r5, #0]
 8009ad6:	291d      	cmp	r1, #29
 8009ad8:	d82c      	bhi.n	8009b34 <__sflush_r+0xb8>
 8009ada:	4a2a      	ldr	r2, [pc, #168]	; (8009b84 <__sflush_r+0x108>)
 8009adc:	40ca      	lsrs	r2, r1
 8009ade:	07d6      	lsls	r6, r2, #31
 8009ae0:	d528      	bpl.n	8009b34 <__sflush_r+0xb8>
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	6062      	str	r2, [r4, #4]
 8009ae6:	04d9      	lsls	r1, r3, #19
 8009ae8:	6922      	ldr	r2, [r4, #16]
 8009aea:	6022      	str	r2, [r4, #0]
 8009aec:	d504      	bpl.n	8009af8 <__sflush_r+0x7c>
 8009aee:	1c42      	adds	r2, r0, #1
 8009af0:	d101      	bne.n	8009af6 <__sflush_r+0x7a>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b903      	cbnz	r3, 8009af8 <__sflush_r+0x7c>
 8009af6:	6560      	str	r0, [r4, #84]	; 0x54
 8009af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009afa:	602f      	str	r7, [r5, #0]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d0ca      	beq.n	8009a96 <__sflush_r+0x1a>
 8009b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b04:	4299      	cmp	r1, r3
 8009b06:	d002      	beq.n	8009b0e <__sflush_r+0x92>
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 fd8b 	bl	800a624 <_free_r>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	6360      	str	r0, [r4, #52]	; 0x34
 8009b12:	e7c1      	b.n	8009a98 <__sflush_r+0x1c>
 8009b14:	6a21      	ldr	r1, [r4, #32]
 8009b16:	2301      	movs	r3, #1
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	1c41      	adds	r1, r0, #1
 8009b1e:	d1c7      	bne.n	8009ab0 <__sflush_r+0x34>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0c4      	beq.n	8009ab0 <__sflush_r+0x34>
 8009b26:	2b1d      	cmp	r3, #29
 8009b28:	d001      	beq.n	8009b2e <__sflush_r+0xb2>
 8009b2a:	2b16      	cmp	r3, #22
 8009b2c:	d101      	bne.n	8009b32 <__sflush_r+0xb6>
 8009b2e:	602f      	str	r7, [r5, #0]
 8009b30:	e7b1      	b.n	8009a96 <__sflush_r+0x1a>
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	e7ad      	b.n	8009a98 <__sflush_r+0x1c>
 8009b3c:	690f      	ldr	r7, [r1, #16]
 8009b3e:	2f00      	cmp	r7, #0
 8009b40:	d0a9      	beq.n	8009a96 <__sflush_r+0x1a>
 8009b42:	0793      	lsls	r3, r2, #30
 8009b44:	680e      	ldr	r6, [r1, #0]
 8009b46:	bf08      	it	eq
 8009b48:	694b      	ldreq	r3, [r1, #20]
 8009b4a:	600f      	str	r7, [r1, #0]
 8009b4c:	bf18      	it	ne
 8009b4e:	2300      	movne	r3, #0
 8009b50:	eba6 0807 	sub.w	r8, r6, r7
 8009b54:	608b      	str	r3, [r1, #8]
 8009b56:	f1b8 0f00 	cmp.w	r8, #0
 8009b5a:	dd9c      	ble.n	8009a96 <__sflush_r+0x1a>
 8009b5c:	6a21      	ldr	r1, [r4, #32]
 8009b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b60:	4643      	mov	r3, r8
 8009b62:	463a      	mov	r2, r7
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b0      	blx	r6
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	dc06      	bgt.n	8009b7a <__sflush_r+0xfe>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	f04f 30ff 	mov.w	r0, #4294967295
 8009b78:	e78e      	b.n	8009a98 <__sflush_r+0x1c>
 8009b7a:	4407      	add	r7, r0
 8009b7c:	eba8 0800 	sub.w	r8, r8, r0
 8009b80:	e7e9      	b.n	8009b56 <__sflush_r+0xda>
 8009b82:	bf00      	nop
 8009b84:	20400001 	.word	0x20400001

08009b88 <_fflush_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	690b      	ldr	r3, [r1, #16]
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	b913      	cbnz	r3, 8009b98 <_fflush_r+0x10>
 8009b92:	2500      	movs	r5, #0
 8009b94:	4628      	mov	r0, r5
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	b118      	cbz	r0, 8009ba2 <_fflush_r+0x1a>
 8009b9a:	6983      	ldr	r3, [r0, #24]
 8009b9c:	b90b      	cbnz	r3, 8009ba2 <_fflush_r+0x1a>
 8009b9e:	f000 f887 	bl	8009cb0 <__sinit>
 8009ba2:	4b14      	ldr	r3, [pc, #80]	; (8009bf4 <_fflush_r+0x6c>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	d11b      	bne.n	8009be0 <_fflush_r+0x58>
 8009ba8:	686c      	ldr	r4, [r5, #4]
 8009baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0ef      	beq.n	8009b92 <_fflush_r+0xa>
 8009bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bb4:	07d0      	lsls	r0, r2, #31
 8009bb6:	d404      	bmi.n	8009bc2 <_fflush_r+0x3a>
 8009bb8:	0599      	lsls	r1, r3, #22
 8009bba:	d402      	bmi.n	8009bc2 <_fflush_r+0x3a>
 8009bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bbe:	f000 f91a 	bl	8009df6 <__retarget_lock_acquire_recursive>
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	f7ff ff59 	bl	8009a7c <__sflush_r>
 8009bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bcc:	07da      	lsls	r2, r3, #31
 8009bce:	4605      	mov	r5, r0
 8009bd0:	d4e0      	bmi.n	8009b94 <_fflush_r+0xc>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	059b      	lsls	r3, r3, #22
 8009bd6:	d4dd      	bmi.n	8009b94 <_fflush_r+0xc>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bda:	f000 f90d 	bl	8009df8 <__retarget_lock_release_recursive>
 8009bde:	e7d9      	b.n	8009b94 <_fflush_r+0xc>
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <_fflush_r+0x70>)
 8009be2:	429c      	cmp	r4, r3
 8009be4:	d101      	bne.n	8009bea <_fflush_r+0x62>
 8009be6:	68ac      	ldr	r4, [r5, #8]
 8009be8:	e7df      	b.n	8009baa <_fflush_r+0x22>
 8009bea:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <_fflush_r+0x74>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	bf08      	it	eq
 8009bf0:	68ec      	ldreq	r4, [r5, #12]
 8009bf2:	e7da      	b.n	8009baa <_fflush_r+0x22>
 8009bf4:	08035cd0 	.word	0x08035cd0
 8009bf8:	08035cf0 	.word	0x08035cf0
 8009bfc:	08035cb0 	.word	0x08035cb0

08009c00 <std>:
 8009c00:	2300      	movs	r3, #0
 8009c02:	b510      	push	{r4, lr}
 8009c04:	4604      	mov	r4, r0
 8009c06:	e9c0 3300 	strd	r3, r3, [r0]
 8009c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c0e:	6083      	str	r3, [r0, #8]
 8009c10:	8181      	strh	r1, [r0, #12]
 8009c12:	6643      	str	r3, [r0, #100]	; 0x64
 8009c14:	81c2      	strh	r2, [r0, #14]
 8009c16:	6183      	str	r3, [r0, #24]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	305c      	adds	r0, #92	; 0x5c
 8009c1e:	f7fe faf3 	bl	8008208 <memset>
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <std+0x38>)
 8009c24:	6263      	str	r3, [r4, #36]	; 0x24
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <std+0x3c>)
 8009c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <std+0x40>)
 8009c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c2e:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <std+0x44>)
 8009c30:	6224      	str	r4, [r4, #32]
 8009c32:	6323      	str	r3, [r4, #48]	; 0x30
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	bf00      	nop
 8009c38:	0800aab9 	.word	0x0800aab9
 8009c3c:	0800aadb 	.word	0x0800aadb
 8009c40:	0800ab13 	.word	0x0800ab13
 8009c44:	0800ab37 	.word	0x0800ab37

08009c48 <_cleanup_r>:
 8009c48:	4901      	ldr	r1, [pc, #4]	; (8009c50 <_cleanup_r+0x8>)
 8009c4a:	f000 b8af 	b.w	8009dac <_fwalk_reent>
 8009c4e:	bf00      	nop
 8009c50:	08009b89 	.word	0x08009b89

08009c54 <__sfmoreglue>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	2268      	movs	r2, #104	; 0x68
 8009c58:	1e4d      	subs	r5, r1, #1
 8009c5a:	4355      	muls	r5, r2
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c62:	f000 fd4b 	bl	800a6fc <_malloc_r>
 8009c66:	4604      	mov	r4, r0
 8009c68:	b140      	cbz	r0, 8009c7c <__sfmoreglue+0x28>
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c70:	300c      	adds	r0, #12
 8009c72:	60a0      	str	r0, [r4, #8]
 8009c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c78:	f7fe fac6 	bl	8008208 <memset>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <__sfp_lock_acquire>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__sfp_lock_acquire+0x8>)
 8009c82:	f000 b8b8 	b.w	8009df6 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	200043c5 	.word	0x200043c5

08009c8c <__sfp_lock_release>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__sfp_lock_release+0x8>)
 8009c8e:	f000 b8b3 	b.w	8009df8 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	200043c5 	.word	0x200043c5

08009c98 <__sinit_lock_acquire>:
 8009c98:	4801      	ldr	r0, [pc, #4]	; (8009ca0 <__sinit_lock_acquire+0x8>)
 8009c9a:	f000 b8ac 	b.w	8009df6 <__retarget_lock_acquire_recursive>
 8009c9e:	bf00      	nop
 8009ca0:	200043c6 	.word	0x200043c6

08009ca4 <__sinit_lock_release>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__sinit_lock_release+0x8>)
 8009ca6:	f000 b8a7 	b.w	8009df8 <__retarget_lock_release_recursive>
 8009caa:	bf00      	nop
 8009cac:	200043c6 	.word	0x200043c6

08009cb0 <__sinit>:
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	f7ff fff0 	bl	8009c98 <__sinit_lock_acquire>
 8009cb8:	69a3      	ldr	r3, [r4, #24]
 8009cba:	b11b      	cbz	r3, 8009cc4 <__sinit+0x14>
 8009cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc0:	f7ff bff0 	b.w	8009ca4 <__sinit_lock_release>
 8009cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <__sinit+0x68>)
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <__sinit+0x6c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	bf04      	itt	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	61a3      	streq	r3, [r4, #24]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f820 	bl	8009d20 <__sfp>
 8009ce0:	6060      	str	r0, [r4, #4]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f81c 	bl	8009d20 <__sfp>
 8009ce8:	60a0      	str	r0, [r4, #8]
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 f818 	bl	8009d20 <__sfp>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	60e0      	str	r0, [r4, #12]
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	6860      	ldr	r0, [r4, #4]
 8009cf8:	f7ff ff82 	bl	8009c00 <std>
 8009cfc:	68a0      	ldr	r0, [r4, #8]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	2109      	movs	r1, #9
 8009d02:	f7ff ff7d 	bl	8009c00 <std>
 8009d06:	68e0      	ldr	r0, [r4, #12]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	2112      	movs	r1, #18
 8009d0c:	f7ff ff78 	bl	8009c00 <std>
 8009d10:	2301      	movs	r3, #1
 8009d12:	61a3      	str	r3, [r4, #24]
 8009d14:	e7d2      	b.n	8009cbc <__sinit+0xc>
 8009d16:	bf00      	nop
 8009d18:	08035be8 	.word	0x08035be8
 8009d1c:	08009c49 	.word	0x08009c49

08009d20 <__sfp>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	4607      	mov	r7, r0
 8009d24:	f7ff ffac 	bl	8009c80 <__sfp_lock_acquire>
 8009d28:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <__sfp+0x84>)
 8009d2a:	681e      	ldr	r6, [r3, #0]
 8009d2c:	69b3      	ldr	r3, [r6, #24]
 8009d2e:	b913      	cbnz	r3, 8009d36 <__sfp+0x16>
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ffbd 	bl	8009cb0 <__sinit>
 8009d36:	3648      	adds	r6, #72	; 0x48
 8009d38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	d503      	bpl.n	8009d48 <__sfp+0x28>
 8009d40:	6833      	ldr	r3, [r6, #0]
 8009d42:	b30b      	cbz	r3, 8009d88 <__sfp+0x68>
 8009d44:	6836      	ldr	r6, [r6, #0]
 8009d46:	e7f7      	b.n	8009d38 <__sfp+0x18>
 8009d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d4c:	b9d5      	cbnz	r5, 8009d84 <__sfp+0x64>
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <__sfp+0x88>)
 8009d50:	60e3      	str	r3, [r4, #12]
 8009d52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d56:	6665      	str	r5, [r4, #100]	; 0x64
 8009d58:	f000 f84c 	bl	8009df4 <__retarget_lock_init_recursive>
 8009d5c:	f7ff ff96 	bl	8009c8c <__sfp_lock_release>
 8009d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d68:	6025      	str	r5, [r4, #0]
 8009d6a:	61a5      	str	r5, [r4, #24]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d74:	f7fe fa48 	bl	8008208 <memset>
 8009d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d80:	4620      	mov	r0, r4
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	3468      	adds	r4, #104	; 0x68
 8009d86:	e7d9      	b.n	8009d3c <__sfp+0x1c>
 8009d88:	2104      	movs	r1, #4
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f7ff ff62 	bl	8009c54 <__sfmoreglue>
 8009d90:	4604      	mov	r4, r0
 8009d92:	6030      	str	r0, [r6, #0]
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d1d5      	bne.n	8009d44 <__sfp+0x24>
 8009d98:	f7ff ff78 	bl	8009c8c <__sfp_lock_release>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	e7ee      	b.n	8009d80 <__sfp+0x60>
 8009da2:	bf00      	nop
 8009da4:	08035be8 	.word	0x08035be8
 8009da8:	ffff0001 	.word	0xffff0001

08009dac <_fwalk_reent>:
 8009dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4606      	mov	r6, r0
 8009db2:	4688      	mov	r8, r1
 8009db4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009db8:	2700      	movs	r7, #0
 8009dba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009dc2:	d505      	bpl.n	8009dd0 <_fwalk_reent+0x24>
 8009dc4:	6824      	ldr	r4, [r4, #0]
 8009dc6:	2c00      	cmp	r4, #0
 8009dc8:	d1f7      	bne.n	8009dba <_fwalk_reent+0xe>
 8009dca:	4638      	mov	r0, r7
 8009dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd0:	89ab      	ldrh	r3, [r5, #12]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d907      	bls.n	8009de6 <_fwalk_reent+0x3a>
 8009dd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	d003      	beq.n	8009de6 <_fwalk_reent+0x3a>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	47c0      	blx	r8
 8009de4:	4307      	orrs	r7, r0
 8009de6:	3568      	adds	r5, #104	; 0x68
 8009de8:	e7e9      	b.n	8009dbe <_fwalk_reent+0x12>
	...

08009dec <_localeconv_r>:
 8009dec:	4800      	ldr	r0, [pc, #0]	; (8009df0 <_localeconv_r+0x4>)
 8009dee:	4770      	bx	lr
 8009df0:	200001ac 	.word	0x200001ac

08009df4 <__retarget_lock_init_recursive>:
 8009df4:	4770      	bx	lr

08009df6 <__retarget_lock_acquire_recursive>:
 8009df6:	4770      	bx	lr

08009df8 <__retarget_lock_release_recursive>:
 8009df8:	4770      	bx	lr

08009dfa <__swhatbuf_r>:
 8009dfa:	b570      	push	{r4, r5, r6, lr}
 8009dfc:	460e      	mov	r6, r1
 8009dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e02:	2900      	cmp	r1, #0
 8009e04:	b096      	sub	sp, #88	; 0x58
 8009e06:	4614      	mov	r4, r2
 8009e08:	461d      	mov	r5, r3
 8009e0a:	da08      	bge.n	8009e1e <__swhatbuf_r+0x24>
 8009e0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	602a      	str	r2, [r5, #0]
 8009e14:	061a      	lsls	r2, r3, #24
 8009e16:	d410      	bmi.n	8009e3a <__swhatbuf_r+0x40>
 8009e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e1c:	e00e      	b.n	8009e3c <__swhatbuf_r+0x42>
 8009e1e:	466a      	mov	r2, sp
 8009e20:	f000 fee0 	bl	800abe4 <_fstat_r>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	dbf1      	blt.n	8009e0c <__swhatbuf_r+0x12>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e32:	425a      	negs	r2, r3
 8009e34:	415a      	adcs	r2, r3
 8009e36:	602a      	str	r2, [r5, #0]
 8009e38:	e7ee      	b.n	8009e18 <__swhatbuf_r+0x1e>
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	b016      	add	sp, #88	; 0x58
 8009e42:	bd70      	pop	{r4, r5, r6, pc}

08009e44 <__smakebuf_r>:
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e48:	079d      	lsls	r5, r3, #30
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	d507      	bpl.n	8009e60 <__smakebuf_r+0x1c>
 8009e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	6163      	str	r3, [r4, #20]
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	ab01      	add	r3, sp, #4
 8009e62:	466a      	mov	r2, sp
 8009e64:	f7ff ffc9 	bl	8009dfa <__swhatbuf_r>
 8009e68:	9900      	ldr	r1, [sp, #0]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f000 fc45 	bl	800a6fc <_malloc_r>
 8009e72:	b948      	cbnz	r0, 8009e88 <__smakebuf_r+0x44>
 8009e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e78:	059a      	lsls	r2, r3, #22
 8009e7a:	d4ef      	bmi.n	8009e5c <__smakebuf_r+0x18>
 8009e7c:	f023 0303 	bic.w	r3, r3, #3
 8009e80:	f043 0302 	orr.w	r3, r3, #2
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	e7e3      	b.n	8009e50 <__smakebuf_r+0xc>
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <__smakebuf_r+0x7c>)
 8009e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	6020      	str	r0, [r4, #0]
 8009e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	9b00      	ldr	r3, [sp, #0]
 8009e98:	6163      	str	r3, [r4, #20]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	6120      	str	r0, [r4, #16]
 8009e9e:	b15b      	cbz	r3, 8009eb8 <__smakebuf_r+0x74>
 8009ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f000 feaf 	bl	800ac08 <_isatty_r>
 8009eaa:	b128      	cbz	r0, 8009eb8 <__smakebuf_r+0x74>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	89a0      	ldrh	r0, [r4, #12]
 8009eba:	4305      	orrs	r5, r0
 8009ebc:	81a5      	strh	r5, [r4, #12]
 8009ebe:	e7cd      	b.n	8009e5c <__smakebuf_r+0x18>
 8009ec0:	08009c49 	.word	0x08009c49

08009ec4 <malloc>:
 8009ec4:	4b02      	ldr	r3, [pc, #8]	; (8009ed0 <malloc+0xc>)
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	f000 bc17 	b.w	800a6fc <_malloc_r>
 8009ece:	bf00      	nop
 8009ed0:	20000058 	.word	0x20000058

08009ed4 <memcpy>:
 8009ed4:	440a      	add	r2, r1
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009edc:	d100      	bne.n	8009ee0 <memcpy+0xc>
 8009ede:	4770      	bx	lr
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eea:	4291      	cmp	r1, r2
 8009eec:	d1f9      	bne.n	8009ee2 <memcpy+0xe>
 8009eee:	bd10      	pop	{r4, pc}

08009ef0 <_Balloc>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Balloc+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ffe2 	bl	8009ec4 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6260      	str	r0, [r4, #36]	; 0x24
 8009f04:	b920      	cbnz	r0, 8009f10 <_Balloc+0x20>
 8009f06:	4b18      	ldr	r3, [pc, #96]	; (8009f68 <_Balloc+0x78>)
 8009f08:	4818      	ldr	r0, [pc, #96]	; (8009f6c <_Balloc+0x7c>)
 8009f0a:	2166      	movs	r1, #102	; 0x66
 8009f0c:	f000 fe2a 	bl	800ab64 <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f1a:	68f3      	ldr	r3, [r6, #12]
 8009f1c:	b183      	cbz	r3, 8009f40 <_Balloc+0x50>
 8009f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f26:	b9b8      	cbnz	r0, 8009f58 <_Balloc+0x68>
 8009f28:	2101      	movs	r1, #1
 8009f2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f2e:	1d72      	adds	r2, r6, #5
 8009f30:	0092      	lsls	r2, r2, #2
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fb60 	bl	800a5f8 <_calloc_r>
 8009f38:	b160      	cbz	r0, 8009f54 <_Balloc+0x64>
 8009f3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f3e:	e00e      	b.n	8009f5e <_Balloc+0x6e>
 8009f40:	2221      	movs	r2, #33	; 0x21
 8009f42:	2104      	movs	r1, #4
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fb57 	bl	800a5f8 <_calloc_r>
 8009f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f4c:	60f0      	str	r0, [r6, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e4      	bne.n	8009f1e <_Balloc+0x2e>
 8009f54:	2000      	movs	r0, #0
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	6802      	ldr	r2, [r0, #0]
 8009f5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f64:	e7f7      	b.n	8009f56 <_Balloc+0x66>
 8009f66:	bf00      	nop
 8009f68:	08035c2d 	.word	0x08035c2d
 8009f6c:	08035d10 	.word	0x08035d10

08009f70 <_Bfree>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f74:	4605      	mov	r5, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	b976      	cbnz	r6, 8009f98 <_Bfree+0x28>
 8009f7a:	2010      	movs	r0, #16
 8009f7c:	f7ff ffa2 	bl	8009ec4 <malloc>
 8009f80:	4602      	mov	r2, r0
 8009f82:	6268      	str	r0, [r5, #36]	; 0x24
 8009f84:	b920      	cbnz	r0, 8009f90 <_Bfree+0x20>
 8009f86:	4b09      	ldr	r3, [pc, #36]	; (8009fac <_Bfree+0x3c>)
 8009f88:	4809      	ldr	r0, [pc, #36]	; (8009fb0 <_Bfree+0x40>)
 8009f8a:	218a      	movs	r1, #138	; 0x8a
 8009f8c:	f000 fdea 	bl	800ab64 <__assert_func>
 8009f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f94:	6006      	str	r6, [r0, #0]
 8009f96:	60c6      	str	r6, [r0, #12]
 8009f98:	b13c      	cbz	r4, 8009faa <_Bfree+0x3a>
 8009f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f9c:	6862      	ldr	r2, [r4, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fa4:	6021      	str	r1, [r4, #0]
 8009fa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	08035c2d 	.word	0x08035c2d
 8009fb0:	08035d10 	.word	0x08035d10

08009fb4 <__multadd>:
 8009fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb8:	690d      	ldr	r5, [r1, #16]
 8009fba:	4607      	mov	r7, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	461e      	mov	r6, r3
 8009fc0:	f101 0c14 	add.w	ip, r1, #20
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009fca:	b299      	uxth	r1, r3
 8009fcc:	fb02 6101 	mla	r1, r2, r1, r6
 8009fd0:	0c1e      	lsrs	r6, r3, #16
 8009fd2:	0c0b      	lsrs	r3, r1, #16
 8009fd4:	fb02 3306 	mla	r3, r2, r6, r3
 8009fd8:	b289      	uxth	r1, r1
 8009fda:	3001      	adds	r0, #1
 8009fdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fe0:	4285      	cmp	r5, r0
 8009fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8009fe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fea:	dcec      	bgt.n	8009fc6 <__multadd+0x12>
 8009fec:	b30e      	cbz	r6, 800a032 <__multadd+0x7e>
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	dc19      	bgt.n	800a028 <__multadd+0x74>
 8009ff4:	6861      	ldr	r1, [r4, #4]
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	3101      	adds	r1, #1
 8009ffa:	f7ff ff79 	bl	8009ef0 <_Balloc>
 8009ffe:	4680      	mov	r8, r0
 800a000:	b928      	cbnz	r0, 800a00e <__multadd+0x5a>
 800a002:	4602      	mov	r2, r0
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <__multadd+0x84>)
 800a006:	480d      	ldr	r0, [pc, #52]	; (800a03c <__multadd+0x88>)
 800a008:	21b5      	movs	r1, #181	; 0xb5
 800a00a:	f000 fdab 	bl	800ab64 <__assert_func>
 800a00e:	6922      	ldr	r2, [r4, #16]
 800a010:	3202      	adds	r2, #2
 800a012:	f104 010c 	add.w	r1, r4, #12
 800a016:	0092      	lsls	r2, r2, #2
 800a018:	300c      	adds	r0, #12
 800a01a:	f7ff ff5b 	bl	8009ed4 <memcpy>
 800a01e:	4621      	mov	r1, r4
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ffa5 	bl	8009f70 <_Bfree>
 800a026:	4644      	mov	r4, r8
 800a028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a02c:	3501      	adds	r5, #1
 800a02e:	615e      	str	r6, [r3, #20]
 800a030:	6125      	str	r5, [r4, #16]
 800a032:	4620      	mov	r0, r4
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	08035c9f 	.word	0x08035c9f
 800a03c:	08035d10 	.word	0x08035d10

0800a040 <__hi0bits>:
 800a040:	0c03      	lsrs	r3, r0, #16
 800a042:	041b      	lsls	r3, r3, #16
 800a044:	b9d3      	cbnz	r3, 800a07c <__hi0bits+0x3c>
 800a046:	0400      	lsls	r0, r0, #16
 800a048:	2310      	movs	r3, #16
 800a04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a04e:	bf04      	itt	eq
 800a050:	0200      	lsleq	r0, r0, #8
 800a052:	3308      	addeq	r3, #8
 800a054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a058:	bf04      	itt	eq
 800a05a:	0100      	lsleq	r0, r0, #4
 800a05c:	3304      	addeq	r3, #4
 800a05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a062:	bf04      	itt	eq
 800a064:	0080      	lsleq	r0, r0, #2
 800a066:	3302      	addeq	r3, #2
 800a068:	2800      	cmp	r0, #0
 800a06a:	db05      	blt.n	800a078 <__hi0bits+0x38>
 800a06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a070:	f103 0301 	add.w	r3, r3, #1
 800a074:	bf08      	it	eq
 800a076:	2320      	moveq	r3, #32
 800a078:	4618      	mov	r0, r3
 800a07a:	4770      	bx	lr
 800a07c:	2300      	movs	r3, #0
 800a07e:	e7e4      	b.n	800a04a <__hi0bits+0xa>

0800a080 <__lo0bits>:
 800a080:	6803      	ldr	r3, [r0, #0]
 800a082:	f013 0207 	ands.w	r2, r3, #7
 800a086:	4601      	mov	r1, r0
 800a088:	d00b      	beq.n	800a0a2 <__lo0bits+0x22>
 800a08a:	07da      	lsls	r2, r3, #31
 800a08c:	d423      	bmi.n	800a0d6 <__lo0bits+0x56>
 800a08e:	0798      	lsls	r0, r3, #30
 800a090:	bf49      	itett	mi
 800a092:	085b      	lsrmi	r3, r3, #1
 800a094:	089b      	lsrpl	r3, r3, #2
 800a096:	2001      	movmi	r0, #1
 800a098:	600b      	strmi	r3, [r1, #0]
 800a09a:	bf5c      	itt	pl
 800a09c:	600b      	strpl	r3, [r1, #0]
 800a09e:	2002      	movpl	r0, #2
 800a0a0:	4770      	bx	lr
 800a0a2:	b298      	uxth	r0, r3
 800a0a4:	b9a8      	cbnz	r0, 800a0d2 <__lo0bits+0x52>
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	2010      	movs	r0, #16
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	b90a      	cbnz	r2, 800a0b2 <__lo0bits+0x32>
 800a0ae:	3008      	adds	r0, #8
 800a0b0:	0a1b      	lsrs	r3, r3, #8
 800a0b2:	071a      	lsls	r2, r3, #28
 800a0b4:	bf04      	itt	eq
 800a0b6:	091b      	lsreq	r3, r3, #4
 800a0b8:	3004      	addeq	r0, #4
 800a0ba:	079a      	lsls	r2, r3, #30
 800a0bc:	bf04      	itt	eq
 800a0be:	089b      	lsreq	r3, r3, #2
 800a0c0:	3002      	addeq	r0, #2
 800a0c2:	07da      	lsls	r2, r3, #31
 800a0c4:	d403      	bmi.n	800a0ce <__lo0bits+0x4e>
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	f100 0001 	add.w	r0, r0, #1
 800a0cc:	d005      	beq.n	800a0da <__lo0bits+0x5a>
 800a0ce:	600b      	str	r3, [r1, #0]
 800a0d0:	4770      	bx	lr
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	e7e9      	b.n	800a0aa <__lo0bits+0x2a>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	4770      	bx	lr
 800a0da:	2020      	movs	r0, #32
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <__i2b>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	f7ff ff03 	bl	8009ef0 <_Balloc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	b928      	cbnz	r0, 800a0fa <__i2b+0x1a>
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <__i2b+0x24>)
 800a0f0:	4805      	ldr	r0, [pc, #20]	; (800a108 <__i2b+0x28>)
 800a0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0f6:	f000 fd35 	bl	800ab64 <__assert_func>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	6144      	str	r4, [r0, #20]
 800a0fe:	6103      	str	r3, [r0, #16]
 800a100:	bd10      	pop	{r4, pc}
 800a102:	bf00      	nop
 800a104:	08035c9f 	.word	0x08035c9f
 800a108:	08035d10 	.word	0x08035d10

0800a10c <__multiply>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	4691      	mov	r9, r2
 800a112:	690a      	ldr	r2, [r1, #16]
 800a114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a118:	429a      	cmp	r2, r3
 800a11a:	bfb8      	it	lt
 800a11c:	460b      	movlt	r3, r1
 800a11e:	460c      	mov	r4, r1
 800a120:	bfbc      	itt	lt
 800a122:	464c      	movlt	r4, r9
 800a124:	4699      	movlt	r9, r3
 800a126:	6927      	ldr	r7, [r4, #16]
 800a128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	6861      	ldr	r1, [r4, #4]
 800a130:	eb07 060a 	add.w	r6, r7, sl
 800a134:	42b3      	cmp	r3, r6
 800a136:	b085      	sub	sp, #20
 800a138:	bfb8      	it	lt
 800a13a:	3101      	addlt	r1, #1
 800a13c:	f7ff fed8 	bl	8009ef0 <_Balloc>
 800a140:	b930      	cbnz	r0, 800a150 <__multiply+0x44>
 800a142:	4602      	mov	r2, r0
 800a144:	4b44      	ldr	r3, [pc, #272]	; (800a258 <__multiply+0x14c>)
 800a146:	4845      	ldr	r0, [pc, #276]	; (800a25c <__multiply+0x150>)
 800a148:	f240 115d 	movw	r1, #349	; 0x15d
 800a14c:	f000 fd0a 	bl	800ab64 <__assert_func>
 800a150:	f100 0514 	add.w	r5, r0, #20
 800a154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a158:	462b      	mov	r3, r5
 800a15a:	2200      	movs	r2, #0
 800a15c:	4543      	cmp	r3, r8
 800a15e:	d321      	bcc.n	800a1a4 <__multiply+0x98>
 800a160:	f104 0314 	add.w	r3, r4, #20
 800a164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a168:	f109 0314 	add.w	r3, r9, #20
 800a16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	1b3a      	subs	r2, r7, r4
 800a174:	3a15      	subs	r2, #21
 800a176:	f022 0203 	bic.w	r2, r2, #3
 800a17a:	3204      	adds	r2, #4
 800a17c:	f104 0115 	add.w	r1, r4, #21
 800a180:	428f      	cmp	r7, r1
 800a182:	bf38      	it	cc
 800a184:	2204      	movcc	r2, #4
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9a02      	ldr	r2, [sp, #8]
 800a18a:	9303      	str	r3, [sp, #12]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d80c      	bhi.n	800a1aa <__multiply+0x9e>
 800a190:	2e00      	cmp	r6, #0
 800a192:	dd03      	ble.n	800a19c <__multiply+0x90>
 800a194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d05a      	beq.n	800a252 <__multiply+0x146>
 800a19c:	6106      	str	r6, [r0, #16]
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	f843 2b04 	str.w	r2, [r3], #4
 800a1a8:	e7d8      	b.n	800a15c <__multiply+0x50>
 800a1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1ae:	f1ba 0f00 	cmp.w	sl, #0
 800a1b2:	d024      	beq.n	800a1fe <__multiply+0xf2>
 800a1b4:	f104 0e14 	add.w	lr, r4, #20
 800a1b8:	46a9      	mov	r9, r5
 800a1ba:	f04f 0c00 	mov.w	ip, #0
 800a1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800a1c6:	fa1f fb82 	uxth.w	fp, r2
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1d8:	4461      	add	r1, ip
 800a1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ec:	4577      	cmp	r7, lr
 800a1ee:	f849 1b04 	str.w	r1, [r9], #4
 800a1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1f6:	d8e2      	bhi.n	800a1be <__multiply+0xb2>
 800a1f8:	9a01      	ldr	r2, [sp, #4]
 800a1fa:	f845 c002 	str.w	ip, [r5, r2]
 800a1fe:	9a03      	ldr	r2, [sp, #12]
 800a200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a204:	3304      	adds	r3, #4
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	d020      	beq.n	800a24e <__multiply+0x142>
 800a20c:	6829      	ldr	r1, [r5, #0]
 800a20e:	f104 0c14 	add.w	ip, r4, #20
 800a212:	46ae      	mov	lr, r5
 800a214:	f04f 0a00 	mov.w	sl, #0
 800a218:	f8bc b000 	ldrh.w	fp, [ip]
 800a21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a220:	fb09 220b 	mla	r2, r9, fp, r2
 800a224:	4492      	add	sl, r2
 800a226:	b289      	uxth	r1, r1
 800a228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a22c:	f84e 1b04 	str.w	r1, [lr], #4
 800a230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a234:	f8be 1000 	ldrh.w	r1, [lr]
 800a238:	0c12      	lsrs	r2, r2, #16
 800a23a:	fb09 1102 	mla	r1, r9, r2, r1
 800a23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a242:	4567      	cmp	r7, ip
 800a244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a248:	d8e6      	bhi.n	800a218 <__multiply+0x10c>
 800a24a:	9a01      	ldr	r2, [sp, #4]
 800a24c:	50a9      	str	r1, [r5, r2]
 800a24e:	3504      	adds	r5, #4
 800a250:	e79a      	b.n	800a188 <__multiply+0x7c>
 800a252:	3e01      	subs	r6, #1
 800a254:	e79c      	b.n	800a190 <__multiply+0x84>
 800a256:	bf00      	nop
 800a258:	08035c9f 	.word	0x08035c9f
 800a25c:	08035d10 	.word	0x08035d10

0800a260 <__pow5mult>:
 800a260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a264:	4615      	mov	r5, r2
 800a266:	f012 0203 	ands.w	r2, r2, #3
 800a26a:	4606      	mov	r6, r0
 800a26c:	460f      	mov	r7, r1
 800a26e:	d007      	beq.n	800a280 <__pow5mult+0x20>
 800a270:	4c25      	ldr	r4, [pc, #148]	; (800a308 <__pow5mult+0xa8>)
 800a272:	3a01      	subs	r2, #1
 800a274:	2300      	movs	r3, #0
 800a276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a27a:	f7ff fe9b 	bl	8009fb4 <__multadd>
 800a27e:	4607      	mov	r7, r0
 800a280:	10ad      	asrs	r5, r5, #2
 800a282:	d03d      	beq.n	800a300 <__pow5mult+0xa0>
 800a284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a286:	b97c      	cbnz	r4, 800a2a8 <__pow5mult+0x48>
 800a288:	2010      	movs	r0, #16
 800a28a:	f7ff fe1b 	bl	8009ec4 <malloc>
 800a28e:	4602      	mov	r2, r0
 800a290:	6270      	str	r0, [r6, #36]	; 0x24
 800a292:	b928      	cbnz	r0, 800a2a0 <__pow5mult+0x40>
 800a294:	4b1d      	ldr	r3, [pc, #116]	; (800a30c <__pow5mult+0xac>)
 800a296:	481e      	ldr	r0, [pc, #120]	; (800a310 <__pow5mult+0xb0>)
 800a298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a29c:	f000 fc62 	bl	800ab64 <__assert_func>
 800a2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2a4:	6004      	str	r4, [r0, #0]
 800a2a6:	60c4      	str	r4, [r0, #12]
 800a2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b0:	b94c      	cbnz	r4, 800a2c6 <__pow5mult+0x66>
 800a2b2:	f240 2171 	movw	r1, #625	; 0x271
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7ff ff12 	bl	800a0e0 <__i2b>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	6003      	str	r3, [r0, #0]
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	07eb      	lsls	r3, r5, #31
 800a2cc:	d50a      	bpl.n	800a2e4 <__pow5mult+0x84>
 800a2ce:	4639      	mov	r1, r7
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ff1a 	bl	800a10c <__multiply>
 800a2d8:	4639      	mov	r1, r7
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff fe47 	bl	8009f70 <_Bfree>
 800a2e2:	4647      	mov	r7, r8
 800a2e4:	106d      	asrs	r5, r5, #1
 800a2e6:	d00b      	beq.n	800a300 <__pow5mult+0xa0>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	b938      	cbnz	r0, 800a2fc <__pow5mult+0x9c>
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ff0b 	bl	800a10c <__multiply>
 800a2f6:	6020      	str	r0, [r4, #0]
 800a2f8:	f8c0 9000 	str.w	r9, [r0]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	e7e4      	b.n	800a2ca <__pow5mult+0x6a>
 800a300:	4638      	mov	r0, r7
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	bf00      	nop
 800a308:	08035e60 	.word	0x08035e60
 800a30c:	08035c2d 	.word	0x08035c2d
 800a310:	08035d10 	.word	0x08035d10

0800a314 <__lshift>:
 800a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a318:	460c      	mov	r4, r1
 800a31a:	6849      	ldr	r1, [r1, #4]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	4607      	mov	r7, r0
 800a326:	4691      	mov	r9, r2
 800a328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a32c:	f108 0601 	add.w	r6, r8, #1
 800a330:	42b3      	cmp	r3, r6
 800a332:	db0b      	blt.n	800a34c <__lshift+0x38>
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff fddb 	bl	8009ef0 <_Balloc>
 800a33a:	4605      	mov	r5, r0
 800a33c:	b948      	cbnz	r0, 800a352 <__lshift+0x3e>
 800a33e:	4602      	mov	r2, r0
 800a340:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <__lshift+0xd8>)
 800a342:	482b      	ldr	r0, [pc, #172]	; (800a3f0 <__lshift+0xdc>)
 800a344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a348:	f000 fc0c 	bl	800ab64 <__assert_func>
 800a34c:	3101      	adds	r1, #1
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	e7ee      	b.n	800a330 <__lshift+0x1c>
 800a352:	2300      	movs	r3, #0
 800a354:	f100 0114 	add.w	r1, r0, #20
 800a358:	f100 0210 	add.w	r2, r0, #16
 800a35c:	4618      	mov	r0, r3
 800a35e:	4553      	cmp	r3, sl
 800a360:	db37      	blt.n	800a3d2 <__lshift+0xbe>
 800a362:	6920      	ldr	r0, [r4, #16]
 800a364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a368:	f104 0314 	add.w	r3, r4, #20
 800a36c:	f019 091f 	ands.w	r9, r9, #31
 800a370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a378:	d02f      	beq.n	800a3da <__lshift+0xc6>
 800a37a:	f1c9 0e20 	rsb	lr, r9, #32
 800a37e:	468a      	mov	sl, r1
 800a380:	f04f 0c00 	mov.w	ip, #0
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	fa02 f209 	lsl.w	r2, r2, r9
 800a38a:	ea42 020c 	orr.w	r2, r2, ip
 800a38e:	f84a 2b04 	str.w	r2, [sl], #4
 800a392:	f853 2b04 	ldr.w	r2, [r3], #4
 800a396:	4298      	cmp	r0, r3
 800a398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a39c:	d8f2      	bhi.n	800a384 <__lshift+0x70>
 800a39e:	1b03      	subs	r3, r0, r4
 800a3a0:	3b15      	subs	r3, #21
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	f104 0215 	add.w	r2, r4, #21
 800a3ac:	4290      	cmp	r0, r2
 800a3ae:	bf38      	it	cc
 800a3b0:	2304      	movcc	r3, #4
 800a3b2:	f841 c003 	str.w	ip, [r1, r3]
 800a3b6:	f1bc 0f00 	cmp.w	ip, #0
 800a3ba:	d001      	beq.n	800a3c0 <__lshift+0xac>
 800a3bc:	f108 0602 	add.w	r6, r8, #2
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	612e      	str	r6, [r5, #16]
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7ff fdd2 	bl	8009f70 <_Bfree>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	e7c1      	b.n	800a35e <__lshift+0x4a>
 800a3da:	3904      	subs	r1, #4
 800a3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	d8f9      	bhi.n	800a3dc <__lshift+0xc8>
 800a3e8:	e7ea      	b.n	800a3c0 <__lshift+0xac>
 800a3ea:	bf00      	nop
 800a3ec:	08035c9f 	.word	0x08035c9f
 800a3f0:	08035d10 	.word	0x08035d10

0800a3f4 <__mcmp>:
 800a3f4:	b530      	push	{r4, r5, lr}
 800a3f6:	6902      	ldr	r2, [r0, #16]
 800a3f8:	690c      	ldr	r4, [r1, #16]
 800a3fa:	1b12      	subs	r2, r2, r4
 800a3fc:	d10e      	bne.n	800a41c <__mcmp+0x28>
 800a3fe:	f100 0314 	add.w	r3, r0, #20
 800a402:	3114      	adds	r1, #20
 800a404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a414:	42a5      	cmp	r5, r4
 800a416:	d003      	beq.n	800a420 <__mcmp+0x2c>
 800a418:	d305      	bcc.n	800a426 <__mcmp+0x32>
 800a41a:	2201      	movs	r2, #1
 800a41c:	4610      	mov	r0, r2
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	4283      	cmp	r3, r0
 800a422:	d3f3      	bcc.n	800a40c <__mcmp+0x18>
 800a424:	e7fa      	b.n	800a41c <__mcmp+0x28>
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	e7f7      	b.n	800a41c <__mcmp+0x28>

0800a42c <__mdiff>:
 800a42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	4606      	mov	r6, r0
 800a434:	4611      	mov	r1, r2
 800a436:	4620      	mov	r0, r4
 800a438:	4690      	mov	r8, r2
 800a43a:	f7ff ffdb 	bl	800a3f4 <__mcmp>
 800a43e:	1e05      	subs	r5, r0, #0
 800a440:	d110      	bne.n	800a464 <__mdiff+0x38>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fd53 	bl	8009ef0 <_Balloc>
 800a44a:	b930      	cbnz	r0, 800a45a <__mdiff+0x2e>
 800a44c:	4b3a      	ldr	r3, [pc, #232]	; (800a538 <__mdiff+0x10c>)
 800a44e:	4602      	mov	r2, r0
 800a450:	f240 2132 	movw	r1, #562	; 0x232
 800a454:	4839      	ldr	r0, [pc, #228]	; (800a53c <__mdiff+0x110>)
 800a456:	f000 fb85 	bl	800ab64 <__assert_func>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	bfa4      	itt	ge
 800a466:	4643      	movge	r3, r8
 800a468:	46a0      	movge	r8, r4
 800a46a:	4630      	mov	r0, r6
 800a46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a470:	bfa6      	itte	ge
 800a472:	461c      	movge	r4, r3
 800a474:	2500      	movge	r5, #0
 800a476:	2501      	movlt	r5, #1
 800a478:	f7ff fd3a 	bl	8009ef0 <_Balloc>
 800a47c:	b920      	cbnz	r0, 800a488 <__mdiff+0x5c>
 800a47e:	4b2e      	ldr	r3, [pc, #184]	; (800a538 <__mdiff+0x10c>)
 800a480:	4602      	mov	r2, r0
 800a482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a486:	e7e5      	b.n	800a454 <__mdiff+0x28>
 800a488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a48c:	6926      	ldr	r6, [r4, #16]
 800a48e:	60c5      	str	r5, [r0, #12]
 800a490:	f104 0914 	add.w	r9, r4, #20
 800a494:	f108 0514 	add.w	r5, r8, #20
 800a498:	f100 0e14 	add.w	lr, r0, #20
 800a49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4a4:	f108 0210 	add.w	r2, r8, #16
 800a4a8:	46f2      	mov	sl, lr
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4b4:	fa1f f883 	uxth.w	r8, r3
 800a4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	eba1 0808 	sub.w	r8, r1, r8
 800a4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4ca:	fa1f f888 	uxth.w	r8, r8
 800a4ce:	1419      	asrs	r1, r3, #16
 800a4d0:	454e      	cmp	r6, r9
 800a4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a4da:	d8e7      	bhi.n	800a4ac <__mdiff+0x80>
 800a4dc:	1b33      	subs	r3, r6, r4
 800a4de:	3b15      	subs	r3, #21
 800a4e0:	f023 0303 	bic.w	r3, r3, #3
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	3415      	adds	r4, #21
 800a4e8:	42a6      	cmp	r6, r4
 800a4ea:	bf38      	it	cc
 800a4ec:	2304      	movcc	r3, #4
 800a4ee:	441d      	add	r5, r3
 800a4f0:	4473      	add	r3, lr
 800a4f2:	469e      	mov	lr, r3
 800a4f4:	462e      	mov	r6, r5
 800a4f6:	4566      	cmp	r6, ip
 800a4f8:	d30e      	bcc.n	800a518 <__mdiff+0xec>
 800a4fa:	f10c 0203 	add.w	r2, ip, #3
 800a4fe:	1b52      	subs	r2, r2, r5
 800a500:	f022 0203 	bic.w	r2, r2, #3
 800a504:	3d03      	subs	r5, #3
 800a506:	45ac      	cmp	ip, r5
 800a508:	bf38      	it	cc
 800a50a:	2200      	movcc	r2, #0
 800a50c:	441a      	add	r2, r3
 800a50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a512:	b17b      	cbz	r3, 800a534 <__mdiff+0x108>
 800a514:	6107      	str	r7, [r0, #16]
 800a516:	e7a3      	b.n	800a460 <__mdiff+0x34>
 800a518:	f856 8b04 	ldr.w	r8, [r6], #4
 800a51c:	fa11 f288 	uxtah	r2, r1, r8
 800a520:	1414      	asrs	r4, r2, #16
 800a522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a526:	b292      	uxth	r2, r2
 800a528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a52c:	f84e 2b04 	str.w	r2, [lr], #4
 800a530:	1421      	asrs	r1, r4, #16
 800a532:	e7e0      	b.n	800a4f6 <__mdiff+0xca>
 800a534:	3f01      	subs	r7, #1
 800a536:	e7ea      	b.n	800a50e <__mdiff+0xe2>
 800a538:	08035c9f 	.word	0x08035c9f
 800a53c:	08035d10 	.word	0x08035d10

0800a540 <__d2b>:
 800a540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4689      	mov	r9, r1
 800a546:	2101      	movs	r1, #1
 800a548:	ec57 6b10 	vmov	r6, r7, d0
 800a54c:	4690      	mov	r8, r2
 800a54e:	f7ff fccf 	bl	8009ef0 <_Balloc>
 800a552:	4604      	mov	r4, r0
 800a554:	b930      	cbnz	r0, 800a564 <__d2b+0x24>
 800a556:	4602      	mov	r2, r0
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__d2b+0xb0>)
 800a55a:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <__d2b+0xb4>)
 800a55c:	f240 310a 	movw	r1, #778	; 0x30a
 800a560:	f000 fb00 	bl	800ab64 <__assert_func>
 800a564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a56c:	bb35      	cbnz	r5, 800a5bc <__d2b+0x7c>
 800a56e:	2e00      	cmp	r6, #0
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	d028      	beq.n	800a5c6 <__d2b+0x86>
 800a574:	4668      	mov	r0, sp
 800a576:	9600      	str	r6, [sp, #0]
 800a578:	f7ff fd82 	bl	800a080 <__lo0bits>
 800a57c:	9900      	ldr	r1, [sp, #0]
 800a57e:	b300      	cbz	r0, 800a5c2 <__d2b+0x82>
 800a580:	9a01      	ldr	r2, [sp, #4]
 800a582:	f1c0 0320 	rsb	r3, r0, #32
 800a586:	fa02 f303 	lsl.w	r3, r2, r3
 800a58a:	430b      	orrs	r3, r1
 800a58c:	40c2      	lsrs	r2, r0
 800a58e:	6163      	str	r3, [r4, #20]
 800a590:	9201      	str	r2, [sp, #4]
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	61a3      	str	r3, [r4, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bf14      	ite	ne
 800a59a:	2202      	movne	r2, #2
 800a59c:	2201      	moveq	r2, #1
 800a59e:	6122      	str	r2, [r4, #16]
 800a5a0:	b1d5      	cbz	r5, 800a5d8 <__d2b+0x98>
 800a5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5a6:	4405      	add	r5, r0
 800a5a8:	f8c9 5000 	str.w	r5, [r9]
 800a5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5b0:	f8c8 0000 	str.w	r0, [r8]
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	b003      	add	sp, #12
 800a5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c0:	e7d5      	b.n	800a56e <__d2b+0x2e>
 800a5c2:	6161      	str	r1, [r4, #20]
 800a5c4:	e7e5      	b.n	800a592 <__d2b+0x52>
 800a5c6:	a801      	add	r0, sp, #4
 800a5c8:	f7ff fd5a 	bl	800a080 <__lo0bits>
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	6163      	str	r3, [r4, #20]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	6122      	str	r2, [r4, #16]
 800a5d4:	3020      	adds	r0, #32
 800a5d6:	e7e3      	b.n	800a5a0 <__d2b+0x60>
 800a5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5e0:	f8c9 0000 	str.w	r0, [r9]
 800a5e4:	6918      	ldr	r0, [r3, #16]
 800a5e6:	f7ff fd2b 	bl	800a040 <__hi0bits>
 800a5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ee:	e7df      	b.n	800a5b0 <__d2b+0x70>
 800a5f0:	08035c9f 	.word	0x08035c9f
 800a5f4:	08035d10 	.word	0x08035d10

0800a5f8 <_calloc_r>:
 800a5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800a5fe:	b94c      	cbnz	r4, 800a614 <_calloc_r+0x1c>
 800a600:	4611      	mov	r1, r2
 800a602:	9201      	str	r2, [sp, #4]
 800a604:	f000 f87a 	bl	800a6fc <_malloc_r>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	4605      	mov	r5, r0
 800a60c:	b930      	cbnz	r0, 800a61c <_calloc_r+0x24>
 800a60e:	4628      	mov	r0, r5
 800a610:	b003      	add	sp, #12
 800a612:	bd30      	pop	{r4, r5, pc}
 800a614:	220c      	movs	r2, #12
 800a616:	6002      	str	r2, [r0, #0]
 800a618:	2500      	movs	r5, #0
 800a61a:	e7f8      	b.n	800a60e <_calloc_r+0x16>
 800a61c:	4621      	mov	r1, r4
 800a61e:	f7fd fdf3 	bl	8008208 <memset>
 800a622:	e7f4      	b.n	800a60e <_calloc_r+0x16>

0800a624 <_free_r>:
 800a624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a626:	2900      	cmp	r1, #0
 800a628:	d044      	beq.n	800a6b4 <_free_r+0x90>
 800a62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a62e:	9001      	str	r0, [sp, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f1a1 0404 	sub.w	r4, r1, #4
 800a636:	bfb8      	it	lt
 800a638:	18e4      	addlt	r4, r4, r3
 800a63a:	f000 fb19 	bl	800ac70 <__malloc_lock>
 800a63e:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <_free_r+0x94>)
 800a640:	9801      	ldr	r0, [sp, #4]
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	b933      	cbnz	r3, 800a654 <_free_r+0x30>
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	6014      	str	r4, [r2, #0]
 800a64a:	b003      	add	sp, #12
 800a64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a650:	f000 bb14 	b.w	800ac7c <__malloc_unlock>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d908      	bls.n	800a66a <_free_r+0x46>
 800a658:	6825      	ldr	r5, [r4, #0]
 800a65a:	1961      	adds	r1, r4, r5
 800a65c:	428b      	cmp	r3, r1
 800a65e:	bf01      	itttt	eq
 800a660:	6819      	ldreq	r1, [r3, #0]
 800a662:	685b      	ldreq	r3, [r3, #4]
 800a664:	1949      	addeq	r1, r1, r5
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	e7ed      	b.n	800a646 <_free_r+0x22>
 800a66a:	461a      	mov	r2, r3
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	b10b      	cbz	r3, 800a674 <_free_r+0x50>
 800a670:	42a3      	cmp	r3, r4
 800a672:	d9fa      	bls.n	800a66a <_free_r+0x46>
 800a674:	6811      	ldr	r1, [r2, #0]
 800a676:	1855      	adds	r5, r2, r1
 800a678:	42a5      	cmp	r5, r4
 800a67a:	d10b      	bne.n	800a694 <_free_r+0x70>
 800a67c:	6824      	ldr	r4, [r4, #0]
 800a67e:	4421      	add	r1, r4
 800a680:	1854      	adds	r4, r2, r1
 800a682:	42a3      	cmp	r3, r4
 800a684:	6011      	str	r1, [r2, #0]
 800a686:	d1e0      	bne.n	800a64a <_free_r+0x26>
 800a688:	681c      	ldr	r4, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	6053      	str	r3, [r2, #4]
 800a68e:	4421      	add	r1, r4
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	e7da      	b.n	800a64a <_free_r+0x26>
 800a694:	d902      	bls.n	800a69c <_free_r+0x78>
 800a696:	230c      	movs	r3, #12
 800a698:	6003      	str	r3, [r0, #0]
 800a69a:	e7d6      	b.n	800a64a <_free_r+0x26>
 800a69c:	6825      	ldr	r5, [r4, #0]
 800a69e:	1961      	adds	r1, r4, r5
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	bf04      	itt	eq
 800a6a4:	6819      	ldreq	r1, [r3, #0]
 800a6a6:	685b      	ldreq	r3, [r3, #4]
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	bf04      	itt	eq
 800a6ac:	1949      	addeq	r1, r1, r5
 800a6ae:	6021      	streq	r1, [r4, #0]
 800a6b0:	6054      	str	r4, [r2, #4]
 800a6b2:	e7ca      	b.n	800a64a <_free_r+0x26>
 800a6b4:	b003      	add	sp, #12
 800a6b6:	bd30      	pop	{r4, r5, pc}
 800a6b8:	200043c8 	.word	0x200043c8

0800a6bc <sbrk_aligned>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	4e0e      	ldr	r6, [pc, #56]	; (800a6f8 <sbrk_aligned+0x3c>)
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	6831      	ldr	r1, [r6, #0]
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b911      	cbnz	r1, 800a6ce <sbrk_aligned+0x12>
 800a6c8:	f000 f9e6 	bl	800aa98 <_sbrk_r>
 800a6cc:	6030      	str	r0, [r6, #0]
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 f9e1 	bl	800aa98 <_sbrk_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d00a      	beq.n	800a6f0 <sbrk_aligned+0x34>
 800a6da:	1cc4      	adds	r4, r0, #3
 800a6dc:	f024 0403 	bic.w	r4, r4, #3
 800a6e0:	42a0      	cmp	r0, r4
 800a6e2:	d007      	beq.n	800a6f4 <sbrk_aligned+0x38>
 800a6e4:	1a21      	subs	r1, r4, r0
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f9d6 	bl	800aa98 <_sbrk_r>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	d101      	bne.n	800a6f4 <sbrk_aligned+0x38>
 800a6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	200043cc 	.word	0x200043cc

0800a6fc <_malloc_r>:
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	1ccd      	adds	r5, r1, #3
 800a702:	f025 0503 	bic.w	r5, r5, #3
 800a706:	3508      	adds	r5, #8
 800a708:	2d0c      	cmp	r5, #12
 800a70a:	bf38      	it	cc
 800a70c:	250c      	movcc	r5, #12
 800a70e:	2d00      	cmp	r5, #0
 800a710:	4607      	mov	r7, r0
 800a712:	db01      	blt.n	800a718 <_malloc_r+0x1c>
 800a714:	42a9      	cmp	r1, r5
 800a716:	d905      	bls.n	800a724 <_malloc_r+0x28>
 800a718:	230c      	movs	r3, #12
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	2600      	movs	r6, #0
 800a71e:	4630      	mov	r0, r6
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a724:	4e2e      	ldr	r6, [pc, #184]	; (800a7e0 <_malloc_r+0xe4>)
 800a726:	f000 faa3 	bl	800ac70 <__malloc_lock>
 800a72a:	6833      	ldr	r3, [r6, #0]
 800a72c:	461c      	mov	r4, r3
 800a72e:	bb34      	cbnz	r4, 800a77e <_malloc_r+0x82>
 800a730:	4629      	mov	r1, r5
 800a732:	4638      	mov	r0, r7
 800a734:	f7ff ffc2 	bl	800a6bc <sbrk_aligned>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	4604      	mov	r4, r0
 800a73c:	d14d      	bne.n	800a7da <_malloc_r+0xde>
 800a73e:	6834      	ldr	r4, [r6, #0]
 800a740:	4626      	mov	r6, r4
 800a742:	2e00      	cmp	r6, #0
 800a744:	d140      	bne.n	800a7c8 <_malloc_r+0xcc>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	4631      	mov	r1, r6
 800a74a:	4638      	mov	r0, r7
 800a74c:	eb04 0803 	add.w	r8, r4, r3
 800a750:	f000 f9a2 	bl	800aa98 <_sbrk_r>
 800a754:	4580      	cmp	r8, r0
 800a756:	d13a      	bne.n	800a7ce <_malloc_r+0xd2>
 800a758:	6821      	ldr	r1, [r4, #0]
 800a75a:	3503      	adds	r5, #3
 800a75c:	1a6d      	subs	r5, r5, r1
 800a75e:	f025 0503 	bic.w	r5, r5, #3
 800a762:	3508      	adds	r5, #8
 800a764:	2d0c      	cmp	r5, #12
 800a766:	bf38      	it	cc
 800a768:	250c      	movcc	r5, #12
 800a76a:	4629      	mov	r1, r5
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff ffa5 	bl	800a6bc <sbrk_aligned>
 800a772:	3001      	adds	r0, #1
 800a774:	d02b      	beq.n	800a7ce <_malloc_r+0xd2>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	442b      	add	r3, r5
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	e00e      	b.n	800a79c <_malloc_r+0xa0>
 800a77e:	6822      	ldr	r2, [r4, #0]
 800a780:	1b52      	subs	r2, r2, r5
 800a782:	d41e      	bmi.n	800a7c2 <_malloc_r+0xc6>
 800a784:	2a0b      	cmp	r2, #11
 800a786:	d916      	bls.n	800a7b6 <_malloc_r+0xba>
 800a788:	1961      	adds	r1, r4, r5
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	6025      	str	r5, [r4, #0]
 800a78e:	bf18      	it	ne
 800a790:	6059      	strne	r1, [r3, #4]
 800a792:	6863      	ldr	r3, [r4, #4]
 800a794:	bf08      	it	eq
 800a796:	6031      	streq	r1, [r6, #0]
 800a798:	5162      	str	r2, [r4, r5]
 800a79a:	604b      	str	r3, [r1, #4]
 800a79c:	4638      	mov	r0, r7
 800a79e:	f104 060b 	add.w	r6, r4, #11
 800a7a2:	f000 fa6b 	bl	800ac7c <__malloc_unlock>
 800a7a6:	f026 0607 	bic.w	r6, r6, #7
 800a7aa:	1d23      	adds	r3, r4, #4
 800a7ac:	1af2      	subs	r2, r6, r3
 800a7ae:	d0b6      	beq.n	800a71e <_malloc_r+0x22>
 800a7b0:	1b9b      	subs	r3, r3, r6
 800a7b2:	50a3      	str	r3, [r4, r2]
 800a7b4:	e7b3      	b.n	800a71e <_malloc_r+0x22>
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	bf0c      	ite	eq
 800a7bc:	6032      	streq	r2, [r6, #0]
 800a7be:	605a      	strne	r2, [r3, #4]
 800a7c0:	e7ec      	b.n	800a79c <_malloc_r+0xa0>
 800a7c2:	4623      	mov	r3, r4
 800a7c4:	6864      	ldr	r4, [r4, #4]
 800a7c6:	e7b2      	b.n	800a72e <_malloc_r+0x32>
 800a7c8:	4634      	mov	r4, r6
 800a7ca:	6876      	ldr	r6, [r6, #4]
 800a7cc:	e7b9      	b.n	800a742 <_malloc_r+0x46>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	603b      	str	r3, [r7, #0]
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f000 fa52 	bl	800ac7c <__malloc_unlock>
 800a7d8:	e7a1      	b.n	800a71e <_malloc_r+0x22>
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	e7de      	b.n	800a79c <_malloc_r+0xa0>
 800a7de:	bf00      	nop
 800a7e0:	200043c8 	.word	0x200043c8

0800a7e4 <__sfputc_r>:
 800a7e4:	6893      	ldr	r3, [r2, #8]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	b410      	push	{r4}
 800a7ec:	6093      	str	r3, [r2, #8]
 800a7ee:	da08      	bge.n	800a802 <__sfputc_r+0x1e>
 800a7f0:	6994      	ldr	r4, [r2, #24]
 800a7f2:	42a3      	cmp	r3, r4
 800a7f4:	db01      	blt.n	800a7fa <__sfputc_r+0x16>
 800a7f6:	290a      	cmp	r1, #10
 800a7f8:	d103      	bne.n	800a802 <__sfputc_r+0x1e>
 800a7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fe:	f7fe ba03 	b.w	8008c08 <__swbuf_r>
 800a802:	6813      	ldr	r3, [r2, #0]
 800a804:	1c58      	adds	r0, r3, #1
 800a806:	6010      	str	r0, [r2, #0]
 800a808:	7019      	strb	r1, [r3, #0]
 800a80a:	4608      	mov	r0, r1
 800a80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <__sfputs_r>:
 800a812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	18d5      	adds	r5, r2, r3
 800a81c:	42ac      	cmp	r4, r5
 800a81e:	d101      	bne.n	800a824 <__sfputs_r+0x12>
 800a820:	2000      	movs	r0, #0
 800a822:	e007      	b.n	800a834 <__sfputs_r+0x22>
 800a824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a828:	463a      	mov	r2, r7
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7ff ffda 	bl	800a7e4 <__sfputc_r>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d1f3      	bne.n	800a81c <__sfputs_r+0xa>
 800a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a838 <_vfiprintf_r>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	460d      	mov	r5, r1
 800a83e:	b09d      	sub	sp, #116	; 0x74
 800a840:	4614      	mov	r4, r2
 800a842:	4698      	mov	r8, r3
 800a844:	4606      	mov	r6, r0
 800a846:	b118      	cbz	r0, 800a850 <_vfiprintf_r+0x18>
 800a848:	6983      	ldr	r3, [r0, #24]
 800a84a:	b90b      	cbnz	r3, 800a850 <_vfiprintf_r+0x18>
 800a84c:	f7ff fa30 	bl	8009cb0 <__sinit>
 800a850:	4b89      	ldr	r3, [pc, #548]	; (800aa78 <_vfiprintf_r+0x240>)
 800a852:	429d      	cmp	r5, r3
 800a854:	d11b      	bne.n	800a88e <_vfiprintf_r+0x56>
 800a856:	6875      	ldr	r5, [r6, #4]
 800a858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_vfiprintf_r+0x32>
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	059a      	lsls	r2, r3, #22
 800a862:	d402      	bmi.n	800a86a <_vfiprintf_r+0x32>
 800a864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a866:	f7ff fac6 	bl	8009df6 <__retarget_lock_acquire_recursive>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	071b      	lsls	r3, r3, #28
 800a86e:	d501      	bpl.n	800a874 <_vfiprintf_r+0x3c>
 800a870:	692b      	ldr	r3, [r5, #16]
 800a872:	b9eb      	cbnz	r3, 800a8b0 <_vfiprintf_r+0x78>
 800a874:	4629      	mov	r1, r5
 800a876:	4630      	mov	r0, r6
 800a878:	f7fe fa18 	bl	8008cac <__swsetup_r>
 800a87c:	b1c0      	cbz	r0, 800a8b0 <_vfiprintf_r+0x78>
 800a87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a880:	07dc      	lsls	r4, r3, #31
 800a882:	d50e      	bpl.n	800a8a2 <_vfiprintf_r+0x6a>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	b01d      	add	sp, #116	; 0x74
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	4b7b      	ldr	r3, [pc, #492]	; (800aa7c <_vfiprintf_r+0x244>)
 800a890:	429d      	cmp	r5, r3
 800a892:	d101      	bne.n	800a898 <_vfiprintf_r+0x60>
 800a894:	68b5      	ldr	r5, [r6, #8]
 800a896:	e7df      	b.n	800a858 <_vfiprintf_r+0x20>
 800a898:	4b79      	ldr	r3, [pc, #484]	; (800aa80 <_vfiprintf_r+0x248>)
 800a89a:	429d      	cmp	r5, r3
 800a89c:	bf08      	it	eq
 800a89e:	68f5      	ldreq	r5, [r6, #12]
 800a8a0:	e7da      	b.n	800a858 <_vfiprintf_r+0x20>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	0598      	lsls	r0, r3, #22
 800a8a6:	d4ed      	bmi.n	800a884 <_vfiprintf_r+0x4c>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8aa:	f7ff faa5 	bl	8009df8 <__retarget_lock_release_recursive>
 800a8ae:	e7e9      	b.n	800a884 <_vfiprintf_r+0x4c>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8be:	2330      	movs	r3, #48	; 0x30
 800a8c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa84 <_vfiprintf_r+0x24c>
 800a8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c8:	f04f 0901 	mov.w	r9, #1
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	469a      	mov	sl, r3
 800a8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d4:	b10a      	cbz	r2, 800a8da <_vfiprintf_r+0xa2>
 800a8d6:	2a25      	cmp	r2, #37	; 0x25
 800a8d8:	d1f9      	bne.n	800a8ce <_vfiprintf_r+0x96>
 800a8da:	ebba 0b04 	subs.w	fp, sl, r4
 800a8de:	d00b      	beq.n	800a8f8 <_vfiprintf_r+0xc0>
 800a8e0:	465b      	mov	r3, fp
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7ff ff93 	bl	800a812 <__sfputs_r>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	f000 80aa 	beq.w	800aa46 <_vfiprintf_r+0x20e>
 800a8f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f4:	445a      	add	r2, fp
 800a8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80a2 	beq.w	800aa46 <_vfiprintf_r+0x20e>
 800a902:	2300      	movs	r3, #0
 800a904:	f04f 32ff 	mov.w	r2, #4294967295
 800a908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a90c:	f10a 0a01 	add.w	sl, sl, #1
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	9307      	str	r3, [sp, #28]
 800a914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a918:	931a      	str	r3, [sp, #104]	; 0x68
 800a91a:	4654      	mov	r4, sl
 800a91c:	2205      	movs	r2, #5
 800a91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a922:	4858      	ldr	r0, [pc, #352]	; (800aa84 <_vfiprintf_r+0x24c>)
 800a924:	f7f5 fc5c 	bl	80001e0 <memchr>
 800a928:	9a04      	ldr	r2, [sp, #16]
 800a92a:	b9d8      	cbnz	r0, 800a964 <_vfiprintf_r+0x12c>
 800a92c:	06d1      	lsls	r1, r2, #27
 800a92e:	bf44      	itt	mi
 800a930:	2320      	movmi	r3, #32
 800a932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a936:	0713      	lsls	r3, r2, #28
 800a938:	bf44      	itt	mi
 800a93a:	232b      	movmi	r3, #43	; 0x2b
 800a93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a940:	f89a 3000 	ldrb.w	r3, [sl]
 800a944:	2b2a      	cmp	r3, #42	; 0x2a
 800a946:	d015      	beq.n	800a974 <_vfiprintf_r+0x13c>
 800a948:	9a07      	ldr	r2, [sp, #28]
 800a94a:	4654      	mov	r4, sl
 800a94c:	2000      	movs	r0, #0
 800a94e:	f04f 0c0a 	mov.w	ip, #10
 800a952:	4621      	mov	r1, r4
 800a954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a958:	3b30      	subs	r3, #48	; 0x30
 800a95a:	2b09      	cmp	r3, #9
 800a95c:	d94e      	bls.n	800a9fc <_vfiprintf_r+0x1c4>
 800a95e:	b1b0      	cbz	r0, 800a98e <_vfiprintf_r+0x156>
 800a960:	9207      	str	r2, [sp, #28]
 800a962:	e014      	b.n	800a98e <_vfiprintf_r+0x156>
 800a964:	eba0 0308 	sub.w	r3, r0, r8
 800a968:	fa09 f303 	lsl.w	r3, r9, r3
 800a96c:	4313      	orrs	r3, r2
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	46a2      	mov	sl, r4
 800a972:	e7d2      	b.n	800a91a <_vfiprintf_r+0xe2>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	1d19      	adds	r1, r3, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	9103      	str	r1, [sp, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfbb      	ittet	lt
 800a980:	425b      	neglt	r3, r3
 800a982:	f042 0202 	orrlt.w	r2, r2, #2
 800a986:	9307      	strge	r3, [sp, #28]
 800a988:	9307      	strlt	r3, [sp, #28]
 800a98a:	bfb8      	it	lt
 800a98c:	9204      	strlt	r2, [sp, #16]
 800a98e:	7823      	ldrb	r3, [r4, #0]
 800a990:	2b2e      	cmp	r3, #46	; 0x2e
 800a992:	d10c      	bne.n	800a9ae <_vfiprintf_r+0x176>
 800a994:	7863      	ldrb	r3, [r4, #1]
 800a996:	2b2a      	cmp	r3, #42	; 0x2a
 800a998:	d135      	bne.n	800aa06 <_vfiprintf_r+0x1ce>
 800a99a:	9b03      	ldr	r3, [sp, #12]
 800a99c:	1d1a      	adds	r2, r3, #4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	9203      	str	r2, [sp, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bfb8      	it	lt
 800a9a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9aa:	3402      	adds	r4, #2
 800a9ac:	9305      	str	r3, [sp, #20]
 800a9ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa94 <_vfiprintf_r+0x25c>
 800a9b2:	7821      	ldrb	r1, [r4, #0]
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	f7f5 fc12 	bl	80001e0 <memchr>
 800a9bc:	b140      	cbz	r0, 800a9d0 <_vfiprintf_r+0x198>
 800a9be:	2340      	movs	r3, #64	; 0x40
 800a9c0:	eba0 000a 	sub.w	r0, r0, sl
 800a9c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	4303      	orrs	r3, r0
 800a9cc:	3401      	adds	r4, #1
 800a9ce:	9304      	str	r3, [sp, #16]
 800a9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d4:	482c      	ldr	r0, [pc, #176]	; (800aa88 <_vfiprintf_r+0x250>)
 800a9d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9da:	2206      	movs	r2, #6
 800a9dc:	f7f5 fc00 	bl	80001e0 <memchr>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d03f      	beq.n	800aa64 <_vfiprintf_r+0x22c>
 800a9e4:	4b29      	ldr	r3, [pc, #164]	; (800aa8c <_vfiprintf_r+0x254>)
 800a9e6:	bb1b      	cbnz	r3, 800aa30 <_vfiprintf_r+0x1f8>
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	3307      	adds	r3, #7
 800a9ec:	f023 0307 	bic.w	r3, r3, #7
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	9303      	str	r3, [sp, #12]
 800a9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f6:	443b      	add	r3, r7
 800a9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fa:	e767      	b.n	800a8cc <_vfiprintf_r+0x94>
 800a9fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa00:	460c      	mov	r4, r1
 800aa02:	2001      	movs	r0, #1
 800aa04:	e7a5      	b.n	800a952 <_vfiprintf_r+0x11a>
 800aa06:	2300      	movs	r3, #0
 800aa08:	3401      	adds	r4, #1
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f04f 0c0a 	mov.w	ip, #10
 800aa12:	4620      	mov	r0, r4
 800aa14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa18:	3a30      	subs	r2, #48	; 0x30
 800aa1a:	2a09      	cmp	r2, #9
 800aa1c:	d903      	bls.n	800aa26 <_vfiprintf_r+0x1ee>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0c5      	beq.n	800a9ae <_vfiprintf_r+0x176>
 800aa22:	9105      	str	r1, [sp, #20]
 800aa24:	e7c3      	b.n	800a9ae <_vfiprintf_r+0x176>
 800aa26:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e7f0      	b.n	800aa12 <_vfiprintf_r+0x1da>
 800aa30:	ab03      	add	r3, sp, #12
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	462a      	mov	r2, r5
 800aa36:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <_vfiprintf_r+0x258>)
 800aa38:	a904      	add	r1, sp, #16
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7fd fc8c 	bl	8008358 <_printf_float>
 800aa40:	4607      	mov	r7, r0
 800aa42:	1c78      	adds	r0, r7, #1
 800aa44:	d1d6      	bne.n	800a9f4 <_vfiprintf_r+0x1bc>
 800aa46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa48:	07d9      	lsls	r1, r3, #31
 800aa4a:	d405      	bmi.n	800aa58 <_vfiprintf_r+0x220>
 800aa4c:	89ab      	ldrh	r3, [r5, #12]
 800aa4e:	059a      	lsls	r2, r3, #22
 800aa50:	d402      	bmi.n	800aa58 <_vfiprintf_r+0x220>
 800aa52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa54:	f7ff f9d0 	bl	8009df8 <__retarget_lock_release_recursive>
 800aa58:	89ab      	ldrh	r3, [r5, #12]
 800aa5a:	065b      	lsls	r3, r3, #25
 800aa5c:	f53f af12 	bmi.w	800a884 <_vfiprintf_r+0x4c>
 800aa60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa62:	e711      	b.n	800a888 <_vfiprintf_r+0x50>
 800aa64:	ab03      	add	r3, sp, #12
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	462a      	mov	r2, r5
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <_vfiprintf_r+0x258>)
 800aa6c:	a904      	add	r1, sp, #16
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7fd ff16 	bl	80088a0 <_printf_i>
 800aa74:	e7e4      	b.n	800aa40 <_vfiprintf_r+0x208>
 800aa76:	bf00      	nop
 800aa78:	08035cd0 	.word	0x08035cd0
 800aa7c:	08035cf0 	.word	0x08035cf0
 800aa80:	08035cb0 	.word	0x08035cb0
 800aa84:	08035e6c 	.word	0x08035e6c
 800aa88:	08035e76 	.word	0x08035e76
 800aa8c:	08008359 	.word	0x08008359
 800aa90:	0800a813 	.word	0x0800a813
 800aa94:	08035e72 	.word	0x08035e72

0800aa98 <_sbrk_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4d06      	ldr	r5, [pc, #24]	; (800aab4 <_sbrk_r+0x1c>)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7f6 fc50 	bl	8001348 <_sbrk>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_sbrk_r+0x1a>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_sbrk_r+0x1a>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	200043d0 	.word	0x200043d0

0800aab8 <__sread>:
 800aab8:	b510      	push	{r4, lr}
 800aaba:	460c      	mov	r4, r1
 800aabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac0:	f000 f8e2 	bl	800ac88 <_read_r>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	bfab      	itete	ge
 800aac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaca:	89a3      	ldrhlt	r3, [r4, #12]
 800aacc:	181b      	addge	r3, r3, r0
 800aace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aad2:	bfac      	ite	ge
 800aad4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aad6:	81a3      	strhlt	r3, [r4, #12]
 800aad8:	bd10      	pop	{r4, pc}

0800aada <__swrite>:
 800aada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aade:	461f      	mov	r7, r3
 800aae0:	898b      	ldrh	r3, [r1, #12]
 800aae2:	05db      	lsls	r3, r3, #23
 800aae4:	4605      	mov	r5, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	4616      	mov	r6, r2
 800aaea:	d505      	bpl.n	800aaf8 <__swrite+0x1e>
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f000 f898 	bl	800ac28 <_lseek_r>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	4632      	mov	r2, r6
 800ab06:	463b      	mov	r3, r7
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	f000 b817 	b.w	800ab40 <_write_r>

0800ab12 <__sseek>:
 800ab12:	b510      	push	{r4, lr}
 800ab14:	460c      	mov	r4, r1
 800ab16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1a:	f000 f885 	bl	800ac28 <_lseek_r>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	bf15      	itete	ne
 800ab24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab2e:	81a3      	strheq	r3, [r4, #12]
 800ab30:	bf18      	it	ne
 800ab32:	81a3      	strhne	r3, [r4, #12]
 800ab34:	bd10      	pop	{r4, pc}

0800ab36 <__sclose>:
 800ab36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3a:	f000 b831 	b.w	800aba0 <_close_r>
	...

0800ab40 <_write_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d07      	ldr	r5, [pc, #28]	; (800ab60 <_write_r+0x20>)
 800ab44:	4604      	mov	r4, r0
 800ab46:	4608      	mov	r0, r1
 800ab48:	4611      	mov	r1, r2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	602a      	str	r2, [r5, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f7f6 fba9 	bl	80012a6 <_write>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_write_r+0x1e>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_write_r+0x1e>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	200043d0 	.word	0x200043d0

0800ab64 <__assert_func>:
 800ab64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab66:	4614      	mov	r4, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <__assert_func+0x2c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	68d8      	ldr	r0, [r3, #12]
 800ab72:	b14c      	cbz	r4, 800ab88 <__assert_func+0x24>
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <__assert_func+0x30>)
 800ab76:	9100      	str	r1, [sp, #0]
 800ab78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab7c:	4906      	ldr	r1, [pc, #24]	; (800ab98 <__assert_func+0x34>)
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f000 f81e 	bl	800abc0 <fiprintf>
 800ab84:	f000 f89f 	bl	800acc6 <abort>
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <__assert_func+0x38>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e7f3      	b.n	800ab76 <__assert_func+0x12>
 800ab8e:	bf00      	nop
 800ab90:	20000058 	.word	0x20000058
 800ab94:	08035e7d 	.word	0x08035e7d
 800ab98:	08035e8a 	.word	0x08035e8a
 800ab9c:	08035eb8 	.word	0x08035eb8

0800aba0 <_close_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_close_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f6 fb97 	bl	80012de <_close>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_close_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_close_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	200043d0 	.word	0x200043d0

0800abc0 <fiprintf>:
 800abc0:	b40e      	push	{r1, r2, r3}
 800abc2:	b503      	push	{r0, r1, lr}
 800abc4:	4601      	mov	r1, r0
 800abc6:	ab03      	add	r3, sp, #12
 800abc8:	4805      	ldr	r0, [pc, #20]	; (800abe0 <fiprintf+0x20>)
 800abca:	f853 2b04 	ldr.w	r2, [r3], #4
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	f7ff fe31 	bl	800a838 <_vfiprintf_r>
 800abd6:	b002      	add	sp, #8
 800abd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abdc:	b003      	add	sp, #12
 800abde:	4770      	bx	lr
 800abe0:	20000058 	.word	0x20000058

0800abe4 <_fstat_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d07      	ldr	r5, [pc, #28]	; (800ac04 <_fstat_r+0x20>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	4611      	mov	r1, r2
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	f7f6 fb80 	bl	80012f6 <_fstat>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d102      	bne.n	800ac00 <_fstat_r+0x1c>
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	b103      	cbz	r3, 800ac00 <_fstat_r+0x1c>
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	bd38      	pop	{r3, r4, r5, pc}
 800ac02:	bf00      	nop
 800ac04:	200043d0 	.word	0x200043d0

0800ac08 <_isatty_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d06      	ldr	r5, [pc, #24]	; (800ac24 <_isatty_r+0x1c>)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4608      	mov	r0, r1
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	f7f6 fb7f 	bl	8001316 <_isatty>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_isatty_r+0x1a>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_isatty_r+0x1a>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	200043d0 	.word	0x200043d0

0800ac28 <_lseek_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	; (800ac48 <_lseek_r+0x20>)
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7f6 fb78 	bl	800132c <_lseek>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_lseek_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_lseek_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	200043d0 	.word	0x200043d0

0800ac4c <__ascii_mbtowc>:
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	b901      	cbnz	r1, 800ac52 <__ascii_mbtowc+0x6>
 800ac50:	a901      	add	r1, sp, #4
 800ac52:	b142      	cbz	r2, 800ac66 <__ascii_mbtowc+0x1a>
 800ac54:	b14b      	cbz	r3, 800ac6a <__ascii_mbtowc+0x1e>
 800ac56:	7813      	ldrb	r3, [r2, #0]
 800ac58:	600b      	str	r3, [r1, #0]
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	1e10      	subs	r0, r2, #0
 800ac5e:	bf18      	it	ne
 800ac60:	2001      	movne	r0, #1
 800ac62:	b002      	add	sp, #8
 800ac64:	4770      	bx	lr
 800ac66:	4610      	mov	r0, r2
 800ac68:	e7fb      	b.n	800ac62 <__ascii_mbtowc+0x16>
 800ac6a:	f06f 0001 	mvn.w	r0, #1
 800ac6e:	e7f8      	b.n	800ac62 <__ascii_mbtowc+0x16>

0800ac70 <__malloc_lock>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__malloc_lock+0x8>)
 800ac72:	f7ff b8c0 	b.w	8009df6 <__retarget_lock_acquire_recursive>
 800ac76:	bf00      	nop
 800ac78:	200043c4 	.word	0x200043c4

0800ac7c <__malloc_unlock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_unlock+0x8>)
 800ac7e:	f7ff b8bb 	b.w	8009df8 <__retarget_lock_release_recursive>
 800ac82:	bf00      	nop
 800ac84:	200043c4 	.word	0x200043c4

0800ac88 <_read_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	; (800aca8 <_read_r+0x20>)
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	4608      	mov	r0, r1
 800ac90:	4611      	mov	r1, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	461a      	mov	r2, r3
 800ac98:	f7f6 fae8 	bl	800126c <_read>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_read_r+0x1e>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_read_r+0x1e>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	200043d0 	.word	0x200043d0

0800acac <__ascii_wctomb>:
 800acac:	b149      	cbz	r1, 800acc2 <__ascii_wctomb+0x16>
 800acae:	2aff      	cmp	r2, #255	; 0xff
 800acb0:	bf85      	ittet	hi
 800acb2:	238a      	movhi	r3, #138	; 0x8a
 800acb4:	6003      	strhi	r3, [r0, #0]
 800acb6:	700a      	strbls	r2, [r1, #0]
 800acb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800acbc:	bf98      	it	ls
 800acbe:	2001      	movls	r0, #1
 800acc0:	4770      	bx	lr
 800acc2:	4608      	mov	r0, r1
 800acc4:	4770      	bx	lr

0800acc6 <abort>:
 800acc6:	b508      	push	{r3, lr}
 800acc8:	2006      	movs	r0, #6
 800acca:	f000 f82b 	bl	800ad24 <raise>
 800acce:	2001      	movs	r0, #1
 800acd0:	f7f6 fac2 	bl	8001258 <_exit>

0800acd4 <_raise_r>:
 800acd4:	291f      	cmp	r1, #31
 800acd6:	b538      	push	{r3, r4, r5, lr}
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	d904      	bls.n	800ace8 <_raise_r+0x14>
 800acde:	2316      	movs	r3, #22
 800ace0:	6003      	str	r3, [r0, #0]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acea:	b112      	cbz	r2, 800acf2 <_raise_r+0x1e>
 800acec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf0:	b94b      	cbnz	r3, 800ad06 <_raise_r+0x32>
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f830 	bl	800ad58 <_getpid_r>
 800acf8:	462a      	mov	r2, r5
 800acfa:	4601      	mov	r1, r0
 800acfc:	4620      	mov	r0, r4
 800acfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad02:	f000 b817 	b.w	800ad34 <_kill_r>
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d00a      	beq.n	800ad20 <_raise_r+0x4c>
 800ad0a:	1c59      	adds	r1, r3, #1
 800ad0c:	d103      	bne.n	800ad16 <_raise_r+0x42>
 800ad0e:	2316      	movs	r3, #22
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	2001      	movs	r0, #1
 800ad14:	e7e7      	b.n	800ace6 <_raise_r+0x12>
 800ad16:	2400      	movs	r4, #0
 800ad18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	4798      	blx	r3
 800ad20:	2000      	movs	r0, #0
 800ad22:	e7e0      	b.n	800ace6 <_raise_r+0x12>

0800ad24 <raise>:
 800ad24:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <raise+0xc>)
 800ad26:	4601      	mov	r1, r0
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f7ff bfd3 	b.w	800acd4 <_raise_r>
 800ad2e:	bf00      	nop
 800ad30:	20000058 	.word	0x20000058

0800ad34 <_kill_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	; (800ad54 <_kill_r+0x20>)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	4611      	mov	r1, r2
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	f7f6 fa79 	bl	8001238 <_kill>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d102      	bne.n	800ad50 <_kill_r+0x1c>
 800ad4a:	682b      	ldr	r3, [r5, #0]
 800ad4c:	b103      	cbz	r3, 800ad50 <_kill_r+0x1c>
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	bf00      	nop
 800ad54:	200043d0 	.word	0x200043d0

0800ad58 <_getpid_r>:
 800ad58:	f7f6 ba66 	b.w	8001228 <_getpid>

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
